config 64BIT boolean {
 prompt "64-bit kernel" if [ARCH="x86"]
 default [ARCH="x86_64"] if []
}
config X86_32 boolean {
 default [!64BIT] if []
}
config X86_64 boolean {
 default [64BIT] if []
}
config X86 boolean {
 default [y] if []
 select HAVE_AOUT if [X86_32]
 select HAVE_READQ if []
 select HAVE_WRITEQ if []
 select HAVE_UNSTABLE_SCHED_CLOCK if []
 select HAVE_IDE if []
 select HAVE_OPROFILE if []
 select HAVE_PERF_EVENTS if [!M386 && !M486]
 select HAVE_IOREMAP_PROT if []
 select HAVE_KPROBES if []
 select ARCH_WANT_OPTIONAL_GPIOLIB if []
 select ARCH_WANT_FRAME_POINTERS if []
 select HAVE_DMA_ATTRS if []
 select HAVE_KRETPROBES if []
 select HAVE_FTRACE_MCOUNT_RECORD if []
 select HAVE_DYNAMIC_FTRACE if []
 select HAVE_FUNCTION_TRACER if []
 select HAVE_FUNCTION_GRAPH_TRACER if []
 select HAVE_FUNCTION_GRAPH_FP_TEST if []
 select HAVE_FUNCTION_TRACE_MCOUNT_TEST if []
 select HAVE_FTRACE_NMI_ENTER if [DYNAMIC_FTRACE]
 select HAVE_SYSCALL_TRACEPOINTS if []
 select HAVE_KVM if []
 select HAVE_ARCH_KGDB if []
 select HAVE_ARCH_TRACEHOOK if []
 select HAVE_GENERIC_DMA_COHERENT if [X86_32]
 select HAVE_EFFICIENT_UNALIGNED_ACCESS if []
 select USER_STACKTRACE_SUPPORT if []
 select HAVE_DMA_API_DEBUG if []
 select HAVE_KERNEL_GZIP if []
 select HAVE_KERNEL_BZIP2 if []
 select HAVE_KERNEL_LZMA if []
 select HAVE_ARCH_KMEMCHECK if []
}
config OUTPUT_FORMAT string {
 default ["elf32-i386"] if [X86_32]
 default ["elf64-x86-64"] if [X86_64]
}
config ARCH_DEFCONFIG string {
 default ["arch/x86/configs/i386_defconfig"] if [X86_32]
 default ["arch/x86/configs/x86_64_defconfig"] if [X86_64]
}
config GENERIC_TIME boolean {
 default [y] if []
}
config GENERIC_CMOS_UPDATE boolean {
 default [y] if []
}
config CLOCKSOURCE_WATCHDOG boolean {
 default [y] if []
}
config GENERIC_CLOCKEVENTS boolean {
 default [y] if []
}
config GENERIC_CLOCKEVENTS_BROADCAST boolean {
 default [y] if [X86_64 || X86_32 && X86_LOCAL_APIC]
 depends on [X86_64 || X86_32 && X86_LOCAL_APIC]
 inherited [X86_64 || X86_32 && X86_LOCAL_APIC]
}
config LOCKDEP_SUPPORT boolean {
 default [y] if []
}
config STACKTRACE_SUPPORT boolean {
 default [y] if []
}
config HAVE_LATENCYTOP_SUPPORT boolean {
 default [y] if []
}
config MMU boolean {
 default [y] if []
}
config ZONE_DMA boolean {
 default [y] if []
}
config SBUS boolean {
}
config GENERIC_ISA_DMA boolean {
 default [y] if []
}
config GENERIC_IOMAP boolean {
 default [y] if []
}
config GENERIC_BUG boolean {
 default [y] if [BUG]
 depends on [BUG]
 select GENERIC_BUG_RELATIVE_POINTERS if [BUG && X86_64]
 inherited [BUG]
}
config GENERIC_BUG_RELATIVE_POINTERS boolean {
}
config GENERIC_HWEIGHT boolean {
 default [y] if []
}
config GENERIC_GPIO boolean {
}
config ARCH_MAY_HAVE_PC_FDC boolean {
 default [y] if []
}
config RWSEM_GENERIC_SPINLOCK boolean {
 default [!X86_XADD] if []
}
config RWSEM_XCHGADD_ALGORITHM boolean {
 default [X86_XADD] if []
}
config ARCH_HAS_CPU_IDLE_WAIT boolean {
 default [y] if []
}
config GENERIC_CALIBRATE_DELAY boolean {
 default [y] if []
}
config GENERIC_TIME_VSYSCALL boolean {
 default [X86_64] if []
}
config ARCH_HAS_CPU_RELAX boolean {
 default [y] if []
}
config ARCH_HAS_DEFAULT_IDLE boolean {
 default [y] if []
}
config ARCH_HAS_CACHE_LINE_SIZE boolean {
 default [y] if []
}
config HAVE_SETUP_PER_CPU_AREA boolean {
 default [y] if []
}
config NEED_PER_CPU_EMBED_FIRST_CHUNK boolean {
 default [y] if []
}
config NEED_PER_CPU_PAGE_FIRST_CHUNK boolean {
 default [y] if []
}
config HAVE_CPUMASK_OF_CPU_MAP boolean {
 default [X86_64_SMP] if []
}
config ARCH_HIBERNATION_POSSIBLE boolean {
 default [y] if []
}
config ARCH_SUSPEND_POSSIBLE boolean {
 default [y] if []
}
config ZONE_DMA32 boolean {
 default [X86_64] if []
}
config ARCH_POPULATES_NODE_MAP boolean {
 default [y] if []
}
config AUDIT_ARCH boolean {
 default [X86_64] if []
}
config ARCH_SUPPORTS_OPTIMIZED_INLINING boolean {
 default [y] if []
}
config ARCH_SUPPORTS_DEBUG_PAGEALLOC boolean {
 default [y] if []
}
config HAVE_INTEL_TXT boolean {
 default [y] if [EXPERIMENTAL && DMAR && ACPI]
 depends on [EXPERIMENTAL && DMAR && ACPI]
 inherited [EXPERIMENTAL && DMAR && ACPI]
}
config GENERIC_HARDIRQS boolean {
 default [y] if []
}
config GENERIC_HARDIRQS_NO__DO_IRQ boolean {
 default [y] if []
}
config GENERIC_IRQ_PROBE boolean {
 default [y] if []
}
config GENERIC_PENDING_IRQ boolean {
 depends on [GENERIC_HARDIRQS && SMP]
 default [y] if [GENERIC_HARDIRQS && SMP]
 inherited [GENERIC_HARDIRQS && SMP]
}
config USE_GENERIC_SMP_HELPERS boolean {
 default [y] if [SMP]
 depends on [SMP]
 inherited [SMP]
}
config X86_32_SMP boolean {
 default [y] if [X86_32 && SMP]
 depends on [X86_32 && SMP]
 inherited [X86_32 && SMP]
}
config X86_64_SMP boolean {
 default [y] if [X86_64 && SMP]
 depends on [X86_64 && SMP]
 inherited [X86_64 && SMP]
}
config X86_HT boolean {
 depends on [SMP]
 default [y] if [SMP]
 inherited [SMP]
}
config X86_TRAMPOLINE boolean {
 depends on [SMP || 64BIT && ACPI_SLEEP]
 default [y] if [SMP || 64BIT && ACPI_SLEEP]
 inherited [SMP || 64BIT && ACPI_SLEEP]
}
config X86_32_LAZY_GS boolean {
 default [y] if [X86_32 && !CC_STACKPROTECTOR]
 depends on [X86_32 && !CC_STACKPROTECTOR]
 inherited [X86_32 && !CC_STACKPROTECTOR]
}
config KTIME_SCALAR boolean {
 default [X86_32] if []
}
config ARCH string {
 env ARCH if []
}
config KERNELVERSION string {
 env KERNELVERSION if []
}
config DEFCONFIG_LIST string {
 depends on [!UML]
 default ["/lib/modules/$UNAME_RELEASE/.config"] if [!UML]
 default ["/etc/kernel-config"] if [!UML]
 default ["/boot/config-$UNAME_RELEASE"] if [!UML]
 default ["$ARCH_DEFCONFIG"] if [!UML]
 default ["arch/$ARCH/defconfig"] if [!UML]
 inherited [!UML]
}
config CONSTRUCTORS boolean {
 depends on [!UML]
 default [y] if [!UML]
 inherited [!UML]
}
menu "General setup" {
 config EXPERIMENTAL boolean {
  prompt "Prompt for development and/or incomplete code/drivers" if []
 }
 config BROKEN boolean {
 }
 config BROKEN_ON_SMP boolean {
  depends on [BROKEN || !SMP]
  default [y] if [BROKEN || !SMP]
  inherited [BROKEN || !SMP]
 }
 config LOCK_KERNEL boolean {
  depends on [SMP || PREEMPT]
  default [y] if [SMP || PREEMPT]
  inherited [SMP || PREEMPT]
 }
 config INIT_ENV_ARG_LIMIT integer {
  default [32] if [!UML]
  default [128] if [UML]
 }
 config LOCALVERSION string {
  prompt "Local version - append to kernel release" if []
 }
 config LOCALVERSION_AUTO boolean {
  prompt "Automatically append version information to the version string" if []
  default [y] if []
 }
 config HAVE_KERNEL_GZIP boolean {
 }
 config HAVE_KERNEL_BZIP2 boolean {
 }
 config HAVE_KERNEL_LZMA boolean {
 }
 choice boolean {
  prompt "Kernel compression mode" if [HAVE_KERNEL_GZIP || HAVE_KERNEL_BZIP2 || HAVE_KERNEL_LZMA]
  default [KERNEL_GZIP] if [HAVE_KERNEL_GZIP || HAVE_KERNEL_BZIP2 || HAVE_KERNEL_LZMA]
  depends on [HAVE_KERNEL_GZIP || HAVE_KERNEL_BZIP2 || HAVE_KERNEL_LZMA]
  config KERNEL_GZIP boolean {
   prompt "Gzip" if [<choice> && HAVE_KERNEL_GZIP]
   depends on [HAVE_KERNEL_GZIP]
   inherited [<choice> && HAVE_KERNEL_GZIP]
  }
  config KERNEL_BZIP2 boolean {
   prompt "Bzip2" if [<choice> && HAVE_KERNEL_BZIP2]
   depends on [HAVE_KERNEL_BZIP2]
   inherited [<choice> && HAVE_KERNEL_BZIP2]
  }
  config KERNEL_LZMA boolean {
   prompt "LZMA" if [<choice> && HAVE_KERNEL_LZMA]
   depends on [HAVE_KERNEL_LZMA]
   inherited [<choice> && HAVE_KERNEL_LZMA]
  }
 }
 config SWAP boolean {
  prompt "Support for paging of anonymous memory (swap)" if [MMU && BLOCK]
  depends on [MMU && BLOCK]
  default [y] if [MMU && BLOCK]
  inherited [MMU && BLOCK]
 }
 config SYSVIPC boolean {
  prompt "System V IPC" if []
  config SYSVIPC_SYSCTL boolean {
   depends on [SYSVIPC]
   depends on [SYSCTL]
   default [y] if [SYSVIPC && SYSCTL]
   inherited [SYSVIPC && SYSCTL]
  }
 }
 config POSIX_MQUEUE boolean {
  prompt "POSIX Message Queues" if [NET && EXPERIMENTAL]
  depends on [NET && EXPERIMENTAL]
  inherited [NET && EXPERIMENTAL]
  config POSIX_MQUEUE_SYSCTL boolean {
   depends on [POSIX_MQUEUE]
   depends on [SYSCTL]
   default [y] if [POSIX_MQUEUE && SYSCTL]
   inherited [POSIX_MQUEUE && SYSCTL]
  }
 }
 config BSD_PROCESS_ACCT boolean {
  prompt "BSD Process Accounting" if []
  config BSD_PROCESS_ACCT_V3 boolean {
   prompt "BSD Process Accounting version 3 file format" if [BSD_PROCESS_ACCT]
   depends on [BSD_PROCESS_ACCT]
   default [n] if [BSD_PROCESS_ACCT]
   inherited [BSD_PROCESS_ACCT]
  }
 }
 config TASKSTATS boolean {
  prompt "Export task/process statistics through netlink (EXPERIMENTAL)" if [NET]
  depends on [NET]
  default [n] if [NET]
  inherited [NET]
  config TASK_DELAY_ACCT boolean {
   prompt "Enable per-task delay accounting (EXPERIMENTAL)" if [TASKSTATS]
   depends on [TASKSTATS]
   inherited [TASKSTATS]
  }
  config TASK_XACCT boolean {
   prompt "Enable extended accounting over taskstats (EXPERIMENTAL)" if [TASKSTATS]
   depends on [TASKSTATS]
   inherited [TASKSTATS]
   config TASK_IO_ACCOUNTING boolean {
    prompt "Enable per-task storage I/O accounting (EXPERIMENTAL)" if [TASK_XACCT]
    depends on [TASK_XACCT]
    inherited [TASK_XACCT]
   }
  }
 }
 config AUDIT boolean {
  prompt "Auditing support" if [NET]
  depends on [NET]
  inherited [NET]
  config AUDITSYSCALL boolean {
   prompt "Enable system-call auditing support" if [AUDIT && (X86 || PPC || S390 || IA64 || UML || SPARC64 || SUPERH)]
   depends on [AUDIT && (X86 || PPC || S390 || IA64 || UML || SPARC64 || SUPERH)]
   default [y] if [AUDIT && (X86 || PPC || S390 || IA64 || UML || SPARC64 || SUPERH) && SECURITY_SELINUX]
   inherited [AUDIT && (X86 || PPC || S390 || IA64 || UML || SPARC64 || SUPERH)]
   config AUDIT_TREE boolean {
    default [y] if [AUDITSYSCALL]
    depends on [AUDITSYSCALL]
    select INOTIFY if [AUDITSYSCALL]
    inherited [AUDITSYSCALL]
   }
  }
 }
 menu "RCU Subsystem" {
  choice boolean {
   prompt "RCU Implementation" if []
   default [TREE_RCU] if []
   config TREE_RCU boolean {
    prompt "Tree-based hierarchical RCU" if [<choice>]
    inherited [<choice>]
   }
   config TREE_PREEMPT_RCU boolean {
    prompt "Preemptable tree-based hierarchical RCU" if [<choice> && PREEMPT]
    depends on [PREEMPT]
    inherited [<choice> && PREEMPT]
   }
  }
  config RCU_TRACE boolean {
   prompt "Enable tracing for RCU" if [TREE_RCU || TREE_PREEMPT_RCU]
   depends on [TREE_RCU || TREE_PREEMPT_RCU]
   inherited [TREE_RCU || TREE_PREEMPT_RCU]
  }
  config RCU_FANOUT integer {
   prompt "Tree-based hierarchical RCU fanout value" if [TREE_RCU || TREE_PREEMPT_RCU]
   range [2 64] if [(TREE_RCU || TREE_PREEMPT_RCU) && 64BIT]
   range [2 32] if [(TREE_RCU || TREE_PREEMPT_RCU) && !64BIT]
   depends on [TREE_RCU || TREE_PREEMPT_RCU]
   default [64] if [(TREE_RCU || TREE_PREEMPT_RCU) && 64BIT]
   default [32] if [(TREE_RCU || TREE_PREEMPT_RCU) && !64BIT]
   inherited [TREE_RCU || TREE_PREEMPT_RCU]
  }
  config RCU_FANOUT_EXACT boolean {
   prompt "Disable tree-based hierarchical RCU auto-balancing" if [TREE_RCU || TREE_PREEMPT_RCU]
   depends on [TREE_RCU || TREE_PREEMPT_RCU]
   default [n] if [TREE_RCU || TREE_PREEMPT_RCU]
   inherited [TREE_RCU || TREE_PREEMPT_RCU]
  }
  config TREE_RCU_TRACE boolean {
   default [RCU_TRACE && (TREE_RCU || TREE_PREEMPT_RCU)] if []
   select DEBUG_FS if []
  }
 }
 config IKCONFIG tristate {
  prompt "Kernel .config support" if []
  config IKCONFIG_PROC boolean {
   prompt "Enable access to .config through /proc/config.gz" if [IKCONFIG && PROC_FS]
   depends on [IKCONFIG && PROC_FS]
   inherited [IKCONFIG && PROC_FS]
  }
 }
 config LOG_BUF_SHIFT integer {
  prompt "Kernel log buffer size (16 => 64KB, 17 => 128KB)" if []
  range [12 21] if []
  default [17] if []
 }
 config HAVE_UNSTABLE_SCHED_CLOCK boolean {
 }
 config GROUP_SCHED boolean {
  prompt "Group CPU scheduler" if [EXPERIMENTAL]
  depends on [EXPERIMENTAL]
  default [n] if [EXPERIMENTAL]
  inherited [EXPERIMENTAL]
  config FAIR_GROUP_SCHED boolean {
   prompt "Group scheduling for SCHED_OTHER" if [GROUP_SCHED]
   depends on [GROUP_SCHED]
   default [GROUP_SCHED] if [GROUP_SCHED]
   inherited [GROUP_SCHED]
  }
  config RT_GROUP_SCHED boolean {
   prompt "Group scheduling for SCHED_RR/FIFO" if [EXPERIMENTAL && GROUP_SCHED]
   depends on [EXPERIMENTAL]
   depends on [GROUP_SCHED]
   default [n] if [EXPERIMENTAL && GROUP_SCHED]
   inherited [EXPERIMENTAL && GROUP_SCHED]
  }
  choice boolean {
   depends on [GROUP_SCHED]
   prompt "Basis for grouping tasks" if [GROUP_SCHED]
   default [USER_SCHED] if [GROUP_SCHED]
   config USER_SCHED boolean {
    prompt "user id" if [<choice>]
    inherited [<choice>]
   }
   config CGROUP_SCHED boolean {
    prompt "Control groups" if [<choice> && CGROUPS]
    depends on [CGROUPS]
    inherited [<choice> && CGROUPS]
   }
  }
 }
 menuconfig CGROUPS boolean {
  prompt "Control Group support" if []
  if [CGROUPS] {
   config CGROUP_DEBUG boolean {
    prompt "Example debug cgroup subsystem" if [CGROUPS]
    depends on [CGROUPS]
    default [n] if [CGROUPS]
    inherited [CGROUPS]
   }
   config CGROUP_NS boolean {
    prompt "Namespace cgroup subsystem" if [CGROUPS]
    depends on [CGROUPS]
    inherited [CGROUPS]
   }
   config CGROUP_FREEZER boolean {
    prompt "Freezer cgroup subsystem" if [CGROUPS]
    depends on [CGROUPS]
    inherited [CGROUPS]
   }
   config CGROUP_DEVICE boolean {
    prompt "Device controller for cgroups" if [CGROUPS && EXPERIMENTAL]
    depends on [CGROUPS && EXPERIMENTAL]
    inherited [CGROUPS && EXPERIMENTAL]
   }
   config CPUSETS boolean {
    prompt "Cpuset support" if [CGROUPS]
    depends on [CGROUPS]
    inherited [CGROUPS]
    config PROC_PID_CPUSET boolean {
     prompt "Include legacy /proc/<pid>/cpuset file" if [CGROUPS && CPUSETS]
     depends on [CPUSETS]
     default [y] if [CGROUPS && CPUSETS]
     inherited [CGROUPS && CPUSETS]
    }
   }
   config CGROUP_CPUACCT boolean {
    prompt "Simple CPU accounting cgroup subsystem" if [CGROUPS]
    depends on [CGROUPS]
    inherited [CGROUPS]
   }
   config RESOURCE_COUNTERS boolean {
    prompt "Resource counters" if [CGROUPS]
    depends on [CGROUPS]
    inherited [CGROUPS]
    config CGROUP_MEM_RES_CTLR boolean {
     prompt "Memory Resource Controller for Control Groups" if [CGROUPS && RESOURCE_COUNTERS]
     depends on [CGROUPS && RESOURCE_COUNTERS]
     select MM_OWNER if [CGROUPS && RESOURCE_COUNTERS]
     inherited [CGROUPS && RESOURCE_COUNTERS]
     config CGROUP_MEM_RES_CTLR_SWAP boolean {
      prompt "Memory Resource Controller Swap Extension(EXPERIMENTAL)" if [CGROUPS && CGROUP_MEM_RES_CTLR && SWAP && EXPERIMENTAL]
      depends on [CGROUP_MEM_RES_CTLR && SWAP && EXPERIMENTAL]
      inherited [CGROUPS && CGROUP_MEM_RES_CTLR && SWAP && EXPERIMENTAL]
     }
    }
   }
  }
 }
 config MM_OWNER boolean {
 }
 config SYSFS_DEPRECATED boolean {
 }
 config SYSFS_DEPRECATED_V2 boolean {
  prompt "enable deprecated sysfs features which may confuse old userspace tools" if [SYSFS]
  depends on [SYSFS]
  default [n] if [SYSFS]
  select SYSFS_DEPRECATED if [SYSFS]
  inherited [SYSFS]
 }
 config RELAY boolean {
  prompt "Kernel->user space relay support (formerly relayfs)" if []
 }
 config NAMESPACES boolean {
  prompt "Namespaces support" if [EMBEDDED]
  default [!EMBEDDED] if []
  config UTS_NS boolean {
   prompt "UTS namespace" if [NAMESPACES]
   depends on [NAMESPACES]
   inherited [NAMESPACES]
  }
  config IPC_NS boolean {
   prompt "IPC namespace" if [NAMESPACES && (SYSVIPC || POSIX_MQUEUE)]
   depends on [NAMESPACES && (SYSVIPC || POSIX_MQUEUE)]
   inherited [NAMESPACES && (SYSVIPC || POSIX_MQUEUE)]
  }
  config USER_NS boolean {
   prompt "User namespace (EXPERIMENTAL)" if [NAMESPACES && EXPERIMENTAL]
   depends on [NAMESPACES && EXPERIMENTAL]
   inherited [NAMESPACES && EXPERIMENTAL]
  }
  config PID_NS boolean {
   prompt "PID Namespaces (EXPERIMENTAL)" if [NAMESPACES && EXPERIMENTAL]
   default [n] if [NAMESPACES && EXPERIMENTAL]
   depends on [NAMESPACES && EXPERIMENTAL]
   inherited [NAMESPACES && EXPERIMENTAL]
  }
  config NET_NS boolean {
   prompt "Network namespace" if [NAMESPACES && EXPERIMENTAL && NET]
   default [n] if [NAMESPACES && EXPERIMENTAL && NET]
   depends on [NAMESPACES && EXPERIMENTAL && NET]
   inherited [NAMESPACES && EXPERIMENTAL && NET]
  }
 }
 config BLK_DEV_INITRD boolean {
  prompt "Initial RAM filesystem and RAM disk (initramfs/initrd) support" if [BROKEN || !FRV]
  depends on [BROKEN || !FRV]
  inherited [BROKEN || !FRV]
  if [BLK_DEV_INITRD] {
   config INITRAMFS_SOURCE string {
    prompt "Initramfs source file(s)" if [BLK_DEV_INITRD]
    default [""] if [BLK_DEV_INITRD]
    inherited [BLK_DEV_INITRD]
    config INITRAMFS_ROOT_UID integer {
     prompt "User ID to map to 0 (user root)" if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     depends on [INITRAMFS_SOURCE!=""]
     default [0] if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     inherited [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
    }
    config INITRAMFS_ROOT_GID integer {
     prompt "Group ID to map to 0 (group root)" if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     depends on [INITRAMFS_SOURCE!=""]
     default [0] if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     inherited [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
    }
   }
   config RD_GZIP boolean {
    prompt "Support initial ramdisks compressed using gzip" if [BLK_DEV_INITRD && EMBEDDED]
    default [y] if [BLK_DEV_INITRD]
    depends on [BLK_DEV_INITRD]
    select DECOMPRESS_GZIP if [BLK_DEV_INITRD]
    inherited [BLK_DEV_INITRD]
   }
   config RD_BZIP2 boolean {
    prompt "Support initial ramdisks compressed using bzip2" if [BLK_DEV_INITRD && EMBEDDED]
    default [!EMBEDDED] if [BLK_DEV_INITRD]
    depends on [BLK_DEV_INITRD]
    select DECOMPRESS_BZIP2 if [BLK_DEV_INITRD]
    inherited [BLK_DEV_INITRD]
   }
   config RD_LZMA boolean {
    prompt "Support initial ramdisks compressed using LZMA" if [BLK_DEV_INITRD && EMBEDDED]
    default [!EMBEDDED] if [BLK_DEV_INITRD]
    depends on [BLK_DEV_INITRD]
    select DECOMPRESS_LZMA if [BLK_DEV_INITRD]
    inherited [BLK_DEV_INITRD]
   }
   choice boolean {
    prompt "Built-in initramfs compression mode" if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
    config INITRAMFS_COMPRESSION_NONE boolean {
     prompt "None" if [<choice>]
     inherited [<choice>]
    }
    config INITRAMFS_COMPRESSION_GZIP boolean {
     prompt "Gzip" if [<choice> && RD_GZIP]
     depends on [RD_GZIP]
     inherited [<choice> && RD_GZIP]
    }
    config INITRAMFS_COMPRESSION_BZIP2 boolean {
     prompt "Bzip2" if [<choice> && RD_BZIP2]
     depends on [RD_BZIP2]
     inherited [<choice> && RD_BZIP2]
    }
    config INITRAMFS_COMPRESSION_LZMA boolean {
     prompt "LZMA" if [<choice> && RD_LZMA]
     depends on [RD_LZMA]
     inherited [<choice> && RD_LZMA]
    }
   }
  }
 }
 config CC_OPTIMIZE_FOR_SIZE boolean {
  prompt "Optimize for size" if []
  default [y] if []
 }
 config SYSCTL boolean {
 }
 config ANON_INODES boolean {
 }
 menuconfig EMBEDDED boolean {
  prompt "Configure standard kernel features (for small systems)" if []
  config UID16 boolean {
   prompt "Enable 16-bit UID system calls" if [(ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && COMPAT || UML || X86_64 && IA32_EMULATION) && EMBEDDED]
   depends on [ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && COMPAT || UML || X86_64 && IA32_EMULATION]
   default [y] if [ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && COMPAT || UML || X86_64 && IA32_EMULATION]
   inherited [ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && COMPAT || UML || X86_64 && IA32_EMULATION]
  }
  config SYSCTL_SYSCALL boolean {
   prompt "Sysctl syscall support" if [EMBEDDED]
   default [y] if []
   select SYSCTL if []
  }
  config KALLSYMS boolean {
   prompt "Load all symbols for debugging/ksymoops" if [EMBEDDED]
   default [y] if []
   config KALLSYMS_ALL boolean {
    prompt "Include all symbols in kallsyms" if [DEBUG_KERNEL && KALLSYMS]
    depends on [DEBUG_KERNEL && KALLSYMS]
    inherited [DEBUG_KERNEL && KALLSYMS]
   }
   config KALLSYMS_EXTRA_PASS boolean {
    prompt "Do an extra kallsyms pass" if [KALLSYMS]
    depends on [KALLSYMS]
    inherited [KALLSYMS]
   }
  }
  config HOTPLUG boolean {
   prompt "Support for hot-pluggable devices" if [EMBEDDED]
   default [y] if []
  }
  config PRINTK boolean {
   default [y] if []
   prompt "Enable support for printk" if [EMBEDDED]
  }
  config BUG boolean {
   prompt "BUG() support" if [EMBEDDED]
   default [y] if []
  }
  config ELF_CORE boolean {
   default [y] if []
   prompt "Enable ELF core dumps" if [EMBEDDED]
  }
  config PCSPKR_PLATFORM boolean {
   prompt "Enable PC-Speaker support" if [(ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES) && EMBEDDED]
   depends on [ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES]
   default [y] if [ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES]
   inherited [ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES]
  }
  config BASE_FULL boolean {
   default [y] if []
   prompt "Enable full-sized data structures for core" if [EMBEDDED]
  }
  config FUTEX boolean {
   prompt "Enable futex support" if [EMBEDDED]
   default [y] if []
   select RT_MUTEXES if []
  }
  config EPOLL boolean {
   prompt "Enable eventpoll support" if [EMBEDDED]
   default [y] if []
   select ANON_INODES if []
  }
  config SIGNALFD boolean {
   prompt "Enable signalfd() system call" if [EMBEDDED]
   select ANON_INODES if []
   default [y] if []
  }
  config TIMERFD boolean {
   prompt "Enable timerfd() system call" if [EMBEDDED]
   select ANON_INODES if []
   default [y] if []
  }
  config EVENTFD boolean {
   prompt "Enable eventfd() system call" if [EMBEDDED]
   select ANON_INODES if []
   default [y] if []
  }
  config SHMEM boolean {
   prompt "Use full shmem filesystem" if [MMU && EMBEDDED]
   default [y] if [MMU]
   depends on [MMU]
   inherited [MMU]
  }
  config AIO boolean {
   prompt "Enable AIO support" if [EMBEDDED]
   default [y] if []
  }
 }
 config HAVE_PERF_EVENTS boolean {
 }
 config PERF_USE_VMALLOC boolean {
 }
 menu "Kernel Performance Events And Counters" {
  config PERF_EVENTS boolean {
   prompt "Kernel performance events and counters" if [HAVE_PERF_EVENTS]
   default [y] if [HAVE_PERF_EVENTS && (PROFILING || PERF_COUNTERS)]
   depends on [HAVE_PERF_EVENTS]
   select ANON_INODES if [HAVE_PERF_EVENTS]
   inherited [HAVE_PERF_EVENTS]
   config EVENT_PROFILE boolean {
    prompt "Tracepoint profiling sources" if [PERF_EVENTS && EVENT_TRACING]
    depends on [PERF_EVENTS && EVENT_TRACING]
    default [y] if [PERF_EVENTS && EVENT_TRACING]
    inherited [PERF_EVENTS && EVENT_TRACING]
   }
  }
  config PERF_COUNTERS boolean {
   prompt "Kernel performance counters (old config option)" if [HAVE_PERF_EVENTS]
   depends on [HAVE_PERF_EVENTS]
   inherited [HAVE_PERF_EVENTS]
  }
  config DEBUG_PERF_USE_VMALLOC boolean {
   default [n] if [PERF_EVENTS && DEBUG_KERNEL]
   prompt "Debug: use vmalloc to back perf mmap() buffers" if [PERF_EVENTS && DEBUG_KERNEL]
   depends on [PERF_EVENTS && DEBUG_KERNEL]
   select PERF_USE_VMALLOC if [PERF_EVENTS && DEBUG_KERNEL]
   inherited [PERF_EVENTS && DEBUG_KERNEL]
  }
 }
 config VM_EVENT_COUNTERS boolean {
  default [y] if []
  prompt "Enable VM event counters for /proc/vmstat" if [EMBEDDED]
 }
 config PCI_QUIRKS boolean {
  default [y] if [PCI]
  prompt "Enable PCI quirk workarounds" if [PCI && EMBEDDED]
  depends on [PCI]
  inherited [PCI]
 }
 config SLUB_DEBUG boolean {
  default [y] if [SLUB && SYSFS]
  prompt "Enable SLUB debugging support" if [SLUB && SYSFS && EMBEDDED]
  depends on [SLUB && SYSFS]
  inherited [SLUB && SYSFS]
 }
 config COMPAT_BRK boolean {
  prompt "Disable heap randomization" if []
  default [y] if []
 }
 choice boolean {
  prompt "Choose SLAB allocator" if []
  default [SLUB] if []
  config SLAB boolean {
   prompt "SLAB" if [<choice>]
   inherited [<choice>]
  }
  config SLUB boolean {
   prompt "SLUB (Unqueued Allocator)" if [<choice>]
   inherited [<choice>]
  }
  config SLOB boolean {
   depends on [EMBEDDED]
   prompt "SLOB (Simple Allocator)" if [<choice> && EMBEDDED]
   inherited [<choice> && EMBEDDED]
  }
 }
 config PROFILING boolean {
  prompt "Profiling support (EXPERIMENTAL)" if []
 }
 config TRACEPOINTS boolean {
 }
 config OPROFILE tristate {
  prompt "OProfile system profiling (EXPERIMENTAL)" if [PROFILING && HAVE_OPROFILE && TRACING_SUPPORT]
  depends on [PROFILING]
  depends on [HAVE_OPROFILE]
  depends on [TRACING_SUPPORT]
  select TRACING if [PROFILING && HAVE_OPROFILE && TRACING_SUPPORT]
  select RING_BUFFER if [PROFILING && HAVE_OPROFILE && TRACING_SUPPORT]
  select RING_BUFFER_ALLOW_SWAP if [PROFILING && HAVE_OPROFILE && TRACING_SUPPORT]
  inherited [PROFILING && HAVE_OPROFILE && TRACING_SUPPORT]
  config OPROFILE_IBS boolean {
   prompt "OProfile AMD IBS support (EXPERIMENTAL)" if [OPROFILE && SMP && X86]
   default [n] if [OPROFILE && SMP && X86]
   depends on [OPROFILE && SMP && X86]
   inherited [OPROFILE && SMP && X86]
  }
  config OPROFILE_EVENT_MULTIPLEX boolean {
   prompt "OProfile multiplexing support (EXPERIMENTAL)" if [OPROFILE && X86]
   default [n] if [OPROFILE && X86]
   depends on [OPROFILE && X86]
   inherited [OPROFILE && X86]
  }
 }
 config HAVE_OPROFILE boolean {
 }
 config KPROBES boolean {
  prompt "Kprobes" if [KALLSYMS && MODULES && HAVE_KPROBES]
  depends on [KALLSYMS && MODULES]
  depends on [HAVE_KPROBES]
  inherited [KALLSYMS && MODULES && HAVE_KPROBES]
 }
 config HAVE_EFFICIENT_UNALIGNED_ACCESS boolean {
 }
 config HAVE_SYSCALL_WRAPPERS boolean {
 }
 config KRETPROBES boolean {
  default [y] if [KPROBES && HAVE_KRETPROBES]
  depends on [KPROBES && HAVE_KRETPROBES]
  inherited [KPROBES && HAVE_KRETPROBES]
 }
 config HAVE_IOREMAP_PROT boolean {
 }
 config HAVE_KPROBES boolean {
 }
 config HAVE_KRETPROBES boolean {
 }
 config HAVE_ARCH_TRACEHOOK boolean {
 }
 config HAVE_DMA_ATTRS boolean {
 }
 config USE_GENERIC_SMP_HELPERS boolean {
  default [y] if [SMP]
  depends on [SMP]
 }
 config HAVE_CLK boolean {
 }
 config HAVE_DMA_API_DEBUG boolean {
 }
 config HAVE_DEFAULT_NO_SPIN_MUTEXES boolean {
 }
 menu "GCOV-based kernel profiling" {
  config GCOV_KERNEL boolean {
   prompt "Enable gcov-based kernel profiling" if [DEBUG_FS && CONSTRUCTORS]
   depends on [DEBUG_FS && CONSTRUCTORS]
   default [n] if [DEBUG_FS && CONSTRUCTORS]
   inherited [DEBUG_FS && CONSTRUCTORS]
   config GCOV_PROFILE_ALL boolean {
    prompt "Profile entire Kernel" if [GCOV_KERNEL && (S390 || X86 || PPC && EXPERIMENTAL || MICROBLAZE)]
    depends on [GCOV_KERNEL]
    depends on [S390 || X86 || PPC && EXPERIMENTAL || MICROBLAZE]
    default [n] if [GCOV_KERNEL && (S390 || X86 || PPC && EXPERIMENTAL || MICROBLAZE)]
    inherited [GCOV_KERNEL && (S390 || X86 || PPC && EXPERIMENTAL || MICROBLAZE)]
   }
  }
 }
 config SLOW_WORK boolean {
  default [n] if []
 }
 config SLOW_WORK_DEBUG boolean {
  prompt "Slow work debugging through debugfs" if [SLOW_WORK && DEBUG_FS]
  default [n] if [SLOW_WORK && DEBUG_FS]
  depends on [SLOW_WORK && DEBUG_FS]
  inherited [SLOW_WORK && DEBUG_FS]
 }
}
config HAVE_GENERIC_DMA_COHERENT boolean {
 default [n] if []
}
config SLABINFO boolean {
 depends on [PROC_FS]
 depends on [SLAB || SLUB_DEBUG]
 default [y] if [PROC_FS && (SLAB || SLUB_DEBUG)]
 inherited [PROC_FS && (SLAB || SLUB_DEBUG)]
}
config RT_MUTEXES boolean {
}
config BASE_SMALL integer {
 default [0] if [BASE_FULL]
 default [1] if [!BASE_FULL]
}
menuconfig MODULES boolean {
 prompt "Enable loadable module support" if []
 if [MODULES] {
  config MODULE_FORCE_LOAD boolean {
   prompt "Forced module loading" if [MODULES]
   default [n] if [MODULES]
   inherited [MODULES]
  }
  config MODULE_UNLOAD boolean {
   prompt "Module unloading" if [MODULES]
   inherited [MODULES]
   config MODULE_FORCE_UNLOAD boolean {
    prompt "Forced module unloading" if [MODULES && MODULE_UNLOAD && EXPERIMENTAL]
    depends on [MODULE_UNLOAD && EXPERIMENTAL]
    inherited [MODULES && MODULE_UNLOAD && EXPERIMENTAL]
   }
  }
  config MODVERSIONS boolean {
   prompt "Module versioning support" if [MODULES]
   inherited [MODULES]
  }
  config MODULE_SRCVERSION_ALL boolean {
   prompt "Source checksum for all modules" if [MODULES]
   inherited [MODULES]
  }
 }
}
config INIT_ALL_POSSIBLE boolean {
}
config STOP_MACHINE boolean {
 default [y] if [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
 depends on [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
 inherited [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
}
menuconfig BLOCK boolean {
 prompt "Enable the block layer" if [EMBEDDED]
 default [y] if []
 if [BLOCK] {
  config LBDAF boolean {
   prompt "Support for large (2TB+) block devices and files" if [BLOCK && !64BIT]
   depends on [!64BIT]
   default [y] if [BLOCK && !64BIT]
   inherited [BLOCK && !64BIT]
  }
  config BLK_DEV_BSG boolean {
   prompt "Block layer SG support v4" if [BLOCK]
   default [y] if [BLOCK]
   inherited [BLOCK]
  }
  config BLK_DEV_INTEGRITY boolean {
   prompt "Block layer data integrity support" if [BLOCK]
   inherited [BLOCK]
  }
 }
 config BLOCK_COMPAT boolean {
  depends on [BLOCK && COMPAT]
  default [y] if [BLOCK && COMPAT]
  inherited [BLOCK && COMPAT]
 }
 if [BLOCK] {
  menu "IO Schedulers" {
   depends on [BLOCK]
   config IOSCHED_NOOP boolean {
    default [y] if [BLOCK]
    inherited [BLOCK]
   }
   config IOSCHED_AS tristate {
    prompt "Anticipatory I/O scheduler" if [BLOCK]
    default [y] if [BLOCK]
    inherited [BLOCK]
   }
   config IOSCHED_DEADLINE tristate {
    prompt "Deadline I/O scheduler" if [BLOCK]
    default [y] if [BLOCK]
    inherited [BLOCK]
   }
   config IOSCHED_CFQ tristate {
    prompt "CFQ I/O scheduler" if [BLOCK]
    default [y] if [BLOCK]
    inherited [BLOCK]
   }
   choice boolean {
    prompt "Default I/O scheduler" if [BLOCK]
    default [DEFAULT_CFQ] if [BLOCK]
    config DEFAULT_AS boolean {
     prompt "Anticipatory" if [<choice> && IOSCHED_AS="y"]
     inherited [<choice>]
    }
    config DEFAULT_DEADLINE boolean {
     prompt "Deadline" if [<choice> && IOSCHED_DEADLINE="y"]
     inherited [<choice>]
    }
    config DEFAULT_CFQ boolean {
     prompt "CFQ" if [<choice> && IOSCHED_CFQ="y"]
     inherited [<choice>]
    }
    config DEFAULT_NOOP boolean {
     prompt "No-op" if [<choice>]
     inherited [<choice>]
    }
   }
   config DEFAULT_IOSCHED string {
    default ["anticipatory"] if [BLOCK && DEFAULT_AS]
    default ["deadline"] if [BLOCK && DEFAULT_DEADLINE]
    default ["cfq"] if [BLOCK && DEFAULT_CFQ]
    default ["noop"] if [BLOCK && DEFAULT_NOOP]
    inherited [BLOCK]
   }
  }
 }
}
config PREEMPT_NOTIFIERS boolean {
}
config FREEZER boolean {
 default [PM_SLEEP || CGROUP_FREEZER] if []
}
menu "Processor type and features" {
 config TICK_ONESHOT boolean {
 }
 config NO_HZ boolean {
  prompt "Tickless System (Dynamic Ticks)" if [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  depends on [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  select TICK_ONESHOT if [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  inherited [GENERIC_TIME && GENERIC_CLOCKEVENTS]
 }
 config HIGH_RES_TIMERS boolean {
  prompt "High Resolution Timer Support" if [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  depends on [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  select TICK_ONESHOT if [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  inherited [GENERIC_TIME && GENERIC_CLOCKEVENTS]
 }
 config GENERIC_CLOCKEVENTS_BUILD boolean {
  default [y] if [GENERIC_CLOCKEVENTS || GENERIC_CLOCKEVENTS_MIGR]
  depends on [GENERIC_CLOCKEVENTS || GENERIC_CLOCKEVENTS_MIGR]
  inherited [GENERIC_CLOCKEVENTS || GENERIC_CLOCKEVENTS_MIGR]
 }
 config SMP boolean {
  prompt "Symmetric multi-processing support" if []
 }
 config X86_X2APIC boolean {
  prompt "Support x2apic" if [X86_LOCAL_APIC && X86_64 && INTR_REMAP]
  depends on [X86_LOCAL_APIC && X86_64 && INTR_REMAP]
  inherited [X86_LOCAL_APIC && X86_64 && INTR_REMAP]
 }
 config SPARSE_IRQ boolean {
  prompt "Support sparse irq numbering" if [PCI_MSI || HT_IRQ]
  depends on [PCI_MSI || HT_IRQ]
  inherited [PCI_MSI || HT_IRQ]
  config NUMA_IRQ_DESC boolean {
   default [y] if [SPARSE_IRQ && NUMA]
   depends on [SPARSE_IRQ && NUMA]
   inherited [SPARSE_IRQ && NUMA]
  }
 }
 config X86_MPPARSE boolean {
  prompt "Enable MPS table" if [X86_LOCAL_APIC && ACPI]
  default [y] if [X86_LOCAL_APIC]
  depends on [X86_LOCAL_APIC]
  inherited [X86_LOCAL_APIC]
 }
 config X86_BIGSMP boolean {
  prompt "Support for big SMP systems with more than 8 CPUs" if [X86_32 && SMP]
  depends on [X86_32 && SMP]
  inherited [X86_32 && SMP]
 }
 if [X86_32] {
  config X86_EXTENDED_PLATFORM boolean {
   prompt "Support for extended (non-PC) x86 platforms" if [X86_32]
   default [y] if [X86_32]
   prompt "Support for extended (non-PC) x86 platforms" if [X86_64]
   default [y] if [X86_64]
   inherited [X86_32]
  }
 }
 if [X86_64] {
  config X86_EXTENDED_PLATFORM boolean {
   prompt "Support for extended (non-PC) x86 platforms" if [X86_32]
   default [y] if [X86_32]
   prompt "Support for extended (non-PC) x86 platforms" if [X86_64]
   default [y] if [X86_64]
   inherited [X86_64]
  }
 }
 config X86_VSMP boolean {
  prompt "ScaleMP vSMP" if [X86_64 && PCI && X86_EXTENDED_PLATFORM]
  select PARAVIRT if [X86_64 && PCI && X86_EXTENDED_PLATFORM]
  depends on [X86_64 && PCI]
  depends on [X86_EXTENDED_PLATFORM]
  inherited [X86_64 && PCI && X86_EXTENDED_PLATFORM]
 }
 config X86_UV boolean {
  prompt "SGI Ultraviolet" if [X86_64 && X86_EXTENDED_PLATFORM && NUMA && X86_X2APIC]
  depends on [X86_64]
  depends on [X86_EXTENDED_PLATFORM]
  depends on [NUMA]
  depends on [X86_X2APIC]
  inherited [X86_64 && X86_EXTENDED_PLATFORM && NUMA && X86_X2APIC]
 }
 config X86_ELAN boolean {
  prompt "AMD Elan" if [X86_32 && X86_EXTENDED_PLATFORM]
  depends on [X86_32]
  depends on [X86_EXTENDED_PLATFORM]
  inherited [X86_32 && X86_EXTENDED_PLATFORM]
 }
 config X86_MRST boolean {
  prompt "Moorestown MID platform" if [X86_32 && X86_EXTENDED_PLATFORM]
  depends on [X86_32]
  depends on [X86_EXTENDED_PLATFORM]
  inherited [X86_32 && X86_EXTENDED_PLATFORM]
 }
 config X86_RDC321X boolean {
  prompt "RDC R-321x SoC" if [X86_32 && X86_EXTENDED_PLATFORM]
  depends on [X86_32]
  depends on [X86_EXTENDED_PLATFORM]
  select M486 if [X86_32 && X86_EXTENDED_PLATFORM]
  select X86_REBOOTFIXUPS if [X86_32 && X86_EXTENDED_PLATFORM]
  inherited [X86_32 && X86_EXTENDED_PLATFORM]
 }
 config X86_32_NON_STANDARD boolean {
  prompt "Support non-standard 32-bit SMP architectures" if [X86_32 && SMP && X86_EXTENDED_PLATFORM]
  depends on [X86_32 && SMP]
  depends on [X86_EXTENDED_PLATFORM]
  inherited [X86_32 && SMP && X86_EXTENDED_PLATFORM]
  config X86_NUMAQ boolean {
   prompt "NUMAQ (IBM/Sequent)" if [X86_32_NON_STANDARD]
   depends on [X86_32_NON_STANDARD]
   select NUMA if [X86_32_NON_STANDARD]
   select X86_MPPARSE if [X86_32_NON_STANDARD]
   inherited [X86_32_NON_STANDARD]
  }
 }
 config X86_SUPPORTS_MEMORY_FAILURE boolean {
  depends on [X86_MCE]
  depends on [!X86_NUMAQ]
  depends on [X86_64 || !SPARSEMEM]
  select ARCH_SUPPORTS_MEMORY_FAILURE if [X86_MCE && !X86_NUMAQ && (X86_64 || !SPARSEMEM)]
  default [y] if [X86_MCE && !X86_NUMAQ && (X86_64 || !SPARSEMEM)]
  inherited [X86_MCE && !X86_NUMAQ && (X86_64 || !SPARSEMEM)]
 }
 config X86_VISWS boolean {
  prompt "SGI 320/540 (Visual Workstation)" if [X86_32 && PCI && X86_MPPARSE && PCI_GODIRECT && X86_32_NON_STANDARD]
  depends on [X86_32 && PCI && X86_MPPARSE && PCI_GODIRECT]
  depends on [X86_32_NON_STANDARD]
  inherited [X86_32 && PCI && X86_MPPARSE && PCI_GODIRECT && X86_32_NON_STANDARD]
 }
 config X86_SUMMIT boolean {
  prompt "Summit/EXA (IBM x440)" if [X86_32_NON_STANDARD]
  depends on [X86_32_NON_STANDARD]
  inherited [X86_32_NON_STANDARD]
 }
 config X86_ES7000 boolean {
  prompt "Unisys ES7000 IA32 series" if [X86_32_NON_STANDARD && X86_BIGSMP]
  depends on [X86_32_NON_STANDARD && X86_BIGSMP]
  inherited [X86_32_NON_STANDARD && X86_BIGSMP]
 }
 config SCHED_OMIT_FRAME_POINTER boolean {
  default [y] if [X86]
  prompt "Single-depth WCHAN output" if [X86]
  depends on [X86]
  inherited [X86]
 }
 menuconfig PARAVIRT_GUEST boolean {
  prompt "Paravirtualized guest support" if []
  if [PARAVIRT_GUEST] {
   config XEN boolean {
    prompt "Xen guest support" if [PARAVIRT_GUEST && (X86_64 || X86_32 && X86_PAE && !X86_VISWS) && X86_CMPXCHG && X86_TSC]
    select PARAVIRT if [PARAVIRT_GUEST && (X86_64 || X86_32 && X86_PAE && !X86_VISWS) && X86_CMPXCHG && X86_TSC]
    select PARAVIRT_CLOCK if [PARAVIRT_GUEST && (X86_64 || X86_32 && X86_PAE && !X86_VISWS) && X86_CMPXCHG && X86_TSC]
    depends on [X86_64 || X86_32 && X86_PAE && !X86_VISWS]
    depends on [X86_CMPXCHG && X86_TSC]
    inherited [PARAVIRT_GUEST && (X86_64 || X86_32 && X86_PAE && !X86_VISWS) && X86_CMPXCHG && X86_TSC]
    config XEN_MAX_DOMAIN_MEMORY integer {
     prompt "Maximum allowed size of a domain in gigabytes" if [PARAVIRT_GUEST && XEN]
     default [8] if [PARAVIRT_GUEST && XEN && X86_32]
     default [32] if [PARAVIRT_GUEST && XEN && X86_64]
     depends on [XEN]
     inherited [PARAVIRT_GUEST && XEN]
    }
    config XEN_SAVE_RESTORE boolean {
     depends on [XEN && PM]
     default [y] if [PARAVIRT_GUEST && XEN && PM]
     inherited [PARAVIRT_GUEST && XEN && PM]
    }
    config XEN_DEBUG_FS boolean {
     prompt "Enable Xen debug and tuning parameters in debugfs" if [PARAVIRT_GUEST && XEN && DEBUG_FS]
     depends on [XEN && DEBUG_FS]
     default [n] if [PARAVIRT_GUEST && XEN && DEBUG_FS]
     inherited [PARAVIRT_GUEST && XEN && DEBUG_FS]
    }
   }
   config VMI boolean {
    prompt "VMI Guest support (DEPRECATED)" if [PARAVIRT_GUEST && X86_32]
    select PARAVIRT if [PARAVIRT_GUEST && X86_32]
    depends on [X86_32]
    inherited [PARAVIRT_GUEST && X86_32]
   }
   config KVM_CLOCK boolean {
    prompt "KVM paravirtualized clock" if [PARAVIRT_GUEST]
    select PARAVIRT if [PARAVIRT_GUEST]
    select PARAVIRT_CLOCK if [PARAVIRT_GUEST]
    inherited [PARAVIRT_GUEST]
   }
   config KVM_GUEST boolean {
    prompt "KVM Guest support" if [PARAVIRT_GUEST]
    select PARAVIRT if [PARAVIRT_GUEST]
    inherited [PARAVIRT_GUEST]
   }
   config LGUEST_GUEST boolean {
    prompt "Lguest guest support" if [PARAVIRT_GUEST && X86_32]
    select PARAVIRT if [PARAVIRT_GUEST && X86_32]
    depends on [X86_32]
    select VIRTIO if [PARAVIRT_GUEST && X86_32]
    select VIRTIO_RING if [PARAVIRT_GUEST && X86_32]
    select VIRTIO_CONSOLE if [PARAVIRT_GUEST && X86_32]
    inherited [PARAVIRT_GUEST && X86_32]
   }
   config PARAVIRT boolean {
    prompt "Enable paravirtualization code" if [PARAVIRT_GUEST]
    inherited [PARAVIRT_GUEST]
    config PARAVIRT_SPINLOCKS boolean {
     prompt "Paravirtualization layer for spinlocks" if [PARAVIRT_GUEST && PARAVIRT && SMP && EXPERIMENTAL]
     depends on [PARAVIRT && SMP && EXPERIMENTAL]
     inherited [PARAVIRT_GUEST && PARAVIRT && SMP && EXPERIMENTAL]
    }
   }
   config PARAVIRT_CLOCK boolean {
    default [n] if [PARAVIRT_GUEST]
    inherited [PARAVIRT_GUEST]
   }
  }
 }
 config PARAVIRT_DEBUG boolean {
  prompt "paravirt-ops debugging" if [PARAVIRT && DEBUG_KERNEL]
  depends on [PARAVIRT && DEBUG_KERNEL]
  inherited [PARAVIRT && DEBUG_KERNEL]
 }
 config MEMTEST boolean {
  prompt "Memtest" if []
 }
 config X86_SUMMIT_NUMA boolean {
  default [y] if [X86_32 && NUMA && X86_32_NON_STANDARD]
  depends on [X86_32 && NUMA && X86_32_NON_STANDARD]
  inherited [X86_32 && NUMA && X86_32_NON_STANDARD]
 }
 config X86_CYCLONE_TIMER boolean {
  default [y] if [X86_32_NON_STANDARD]
  depends on [X86_32_NON_STANDARD]
  inherited [X86_32_NON_STANDARD]
 }
 if [!X86_ELAN] {
  choice boolean {
   prompt "Processor family" if [!X86_ELAN]
   default [M686] if [!X86_ELAN && X86_32]
   default [GENERIC_CPU] if [!X86_ELAN && X86_64]
   config M386 boolean {
    prompt "386" if [<choice> && X86_32 && !UML]
    depends on [X86_32 && !UML]
    inherited [<choice> && X86_32 && !UML]
   }
   config M486 boolean {
    prompt "486" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config M586 boolean {
    prompt "586/K5/5x86/6x86/6x86MX" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config M586TSC boolean {
    prompt "Pentium-Classic" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config M586MMX boolean {
    prompt "Pentium-MMX" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config M686 boolean {
    prompt "Pentium-Pro" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MPENTIUMII boolean {
    prompt "Pentium-II/Celeron(pre-Coppermine)" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MPENTIUMIII boolean {
    prompt "Pentium-III/Celeron(Coppermine)/Pentium-III Xeon" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MPENTIUMM boolean {
    prompt "Pentium M" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MPENTIUM4 boolean {
    prompt "Pentium-4/Celeron(P4-based)/Pentium-4 M/older Xeon" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MK6 boolean {
    prompt "K6/K6-II/K6-III" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MK7 boolean {
    prompt "Athlon/Duron/K7" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MK8 boolean {
    prompt "Opteron/Athlon64/Hammer/K8" if [<choice>]
    inherited [<choice>]
   }
   config MCRUSOE boolean {
    prompt "Crusoe" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MEFFICEON boolean {
    prompt "Efficeon" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MWINCHIPC6 boolean {
    prompt "Winchip-C6" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MWINCHIP3D boolean {
    prompt "Winchip-2/Winchip-2A/Winchip-3" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MGEODEGX1 boolean {
    prompt "GeodeGX1" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MGEODE_LX boolean {
    prompt "Geode GX/LX" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MCYRIXIII boolean {
    prompt "CyrixIII/VIA-C3" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MVIAC3_2 boolean {
    prompt "VIA C3-2 (Nehemiah)" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MVIAC7 boolean {
    prompt "VIA C7" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MPSC boolean {
    prompt "Intel P4 / older Netburst based Xeon" if [<choice> && X86_64]
    depends on [X86_64]
    inherited [<choice> && X86_64]
   }
   config MCORE2 boolean {
    prompt "Core 2/newer Xeon" if [<choice>]
    inherited [<choice>]
   }
   config MATOM boolean {
    prompt "Intel Atom" if [<choice>]
    inherited [<choice>]
   }
   config GENERIC_CPU boolean {
    prompt "Generic-x86-64" if [<choice> && X86_64]
    depends on [X86_64]
    inherited [<choice> && X86_64]
   }
  }
  config X86_GENERIC boolean {
   prompt "Generic x86 support" if [!X86_ELAN && X86_32]
   depends on [X86_32]
   inherited [!X86_ELAN && X86_32]
  }
 }
 config X86_CPU boolean {
  default [y] if []
  select GENERIC_FIND_FIRST_BIT if []
  select GENERIC_FIND_NEXT_BIT if []
 }
 config X86_L1_CACHE_BYTES integer {
  default [128] if [MPSC]
  default [64] if [GENERIC_CPU || MK8 || MCORE2 || MATOM || X86_32]
 }
 config X86_INTERNODE_CACHE_BYTES integer {
  default [4096] if [X86_VSMP]
  default [X86_L1_CACHE_BYTES] if [!X86_VSMP]
 }
 config X86_CMPXCHG boolean {
  default [X86_64 || X86_32 && !M386] if []
 }
 config X86_L1_CACHE_SHIFT integer {
  default [7] if [MPENTIUM4 || MPSC]
  default [4] if [X86_ELAN || M486 || M386 || MGEODEGX1]
  default [5] if [MWINCHIP3D || MWINCHIPC6 || MCRUSOE || MEFFICEON || MCYRIXIII || MK6 || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || M586 || MVIAC3_2 || MGEODE_LX]
  default [6] if [MK7 || MK8 || MPENTIUMM || MCORE2 || MATOM || MVIAC7 || X86_GENERIC || GENERIC_CPU]
 }
 config X86_XADD boolean {
  default [y] if [X86_32 && !M386]
  depends on [X86_32 && !M386]
  inherited [X86_32 && !M386]
 }
 config X86_PPRO_FENCE boolean {
  prompt "PentiumPro memory ordering errata workaround" if [M686 || M586MMX || M586TSC || M586 || M486 || M386 || MGEODEGX1]
  depends on [M686 || M586MMX || M586TSC || M586 || M486 || M386 || MGEODEGX1]
  inherited [M686 || M586MMX || M586TSC || M586 || M486 || M386 || MGEODEGX1]
 }
 config X86_F00F_BUG boolean {
  default [y] if [M586MMX || M586TSC || M586 || M486 || M386]
  depends on [M586MMX || M586TSC || M586 || M486 || M386]
  inherited [M586MMX || M586TSC || M586 || M486 || M386]
 }
 config X86_WP_WORKS_OK boolean {
  default [y] if [!M386]
  depends on [!M386]
  inherited [!M386]
 }
 config X86_INVLPG boolean {
  default [y] if [X86_32 && !M386]
  depends on [X86_32 && !M386]
  inherited [X86_32 && !M386]
 }
 config X86_BSWAP boolean {
  default [y] if [X86_32 && !M386]
  depends on [X86_32 && !M386]
  inherited [X86_32 && !M386]
 }
 config X86_POPAD_OK boolean {
  default [y] if [X86_32 && !M386]
  depends on [X86_32 && !M386]
  inherited [X86_32 && !M386]
 }
 config X86_ALIGNMENT_16 boolean {
  default [y] if [MWINCHIP3D || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1]
  depends on [MWINCHIP3D || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1]
  inherited [MWINCHIP3D || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1]
 }
 config X86_INTEL_USERCOPY boolean {
  default [y] if [MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON || MCORE2]
  depends on [MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON || MCORE2]
  inherited [MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON || MCORE2]
 }
 config X86_USE_PPRO_CHECKSUM boolean {
  default [y] if [MWINCHIP3D || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MEFFICEON || MGEODE_LX || MCORE2 || MATOM]
  depends on [MWINCHIP3D || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MEFFICEON || MGEODE_LX || MCORE2 || MATOM]
  inherited [MWINCHIP3D || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MEFFICEON || MGEODE_LX || MCORE2 || MATOM]
 }
 config X86_USE_3DNOW boolean {
  default [y] if [(MCYRIXIII || MK7 || MGEODE_LX) && !UML]
  depends on [(MCYRIXIII || MK7 || MGEODE_LX) && !UML]
  inherited [(MCYRIXIII || MK7 || MGEODE_LX) && !UML]
 }
 config X86_OOSTORE boolean {
  default [y] if [(MWINCHIP3D || MWINCHIPC6) && MTRR]
  depends on [(MWINCHIP3D || MWINCHIPC6) && MTRR]
  inherited [(MWINCHIP3D || MWINCHIPC6) && MTRR]
 }
 config X86_P6_NOP boolean {
  default [y] if [X86_64 && (MCORE2 || MPENTIUM4 || MPSC)]
  depends on [X86_64]
  depends on [MCORE2 || MPENTIUM4 || MPSC]
  inherited [X86_64 && (MCORE2 || MPENTIUM4 || MPSC)]
 }
 config X86_TSC boolean {
  default [y] if [(MWINCHIP3D || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MVIAC7 || MGEODEGX1 || MGEODE_LX || MCORE2 || MATOM) && !X86_NUMAQ || X86_64]
  depends on [(MWINCHIP3D || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MVIAC7 || MGEODEGX1 || MGEODE_LX || MCORE2 || MATOM) && !X86_NUMAQ || X86_64]
  inherited [(MWINCHIP3D || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MVIAC7 || MGEODEGX1 || MGEODE_LX || MCORE2 || MATOM) && !X86_NUMAQ || X86_64]
 }
 config X86_CMPXCHG64 boolean {
  default [y] if [!M386 && !M486]
  depends on [!M386 && !M486]
  inherited [!M386 && !M486]
 }
 config X86_CMOV boolean {
  default [y] if [MK8 || MK7 || MCORE2 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MVIAC3_2 || MVIAC7 || MCRUSOE || MEFFICEON || X86_64 || MATOM]
  depends on [MK8 || MK7 || MCORE2 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MVIAC3_2 || MVIAC7 || MCRUSOE || MEFFICEON || X86_64 || MATOM]
  inherited [MK8 || MK7 || MCORE2 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MVIAC3_2 || MVIAC7 || MCRUSOE || MEFFICEON || X86_64 || MATOM]
 }
 config X86_MINIMUM_CPU_FAMILY integer {
  default [64] if [X86_64]
  default [6] if [X86_32 && X86_P6_NOP]
  default [5] if [X86_32 && X86_CMPXCHG64]
  default [4] if [X86_32 && (X86_XADD || X86_CMPXCHG || X86_BSWAP || X86_WP_WORKS_OK)]
  default [3] if []
 }
 config X86_DEBUGCTLMSR boolean {
  default [y] if [!MK6 && !MWINCHIPC6 && !MWINCHIP3D && !MCYRIXIII && !M586MMX && !M586TSC && !M586 && !M486 && !M386 && !UML]
  depends on [!(MK6 || MWINCHIPC6 || MWINCHIP3D || MCYRIXIII || M586MMX || M586TSC || M586 || M486 || M386) && !UML]
  inherited [!MK6 && !MWINCHIPC6 && !MWINCHIP3D && !MCYRIXIII && !M586MMX && !M586TSC && !M586 && !M486 && !M386 && !UML]
 }
 menuconfig PROCESSOR_SELECT boolean {
  prompt "Supported processor vendors" if [EMBEDDED]
  config CPU_SUP_INTEL boolean {
   default [y] if []
   prompt "Support Intel processors" if [PROCESSOR_SELECT]
  }
  config CPU_SUP_CYRIX_32 boolean {
   default [y] if [!64BIT]
   prompt "Support Cyrix processors" if [!64BIT && PROCESSOR_SELECT]
   depends on [!64BIT]
   inherited [!64BIT]
  }
  config CPU_SUP_AMD boolean {
   default [y] if []
   prompt "Support AMD processors" if [PROCESSOR_SELECT]
  }
  config CPU_SUP_CENTAUR boolean {
   default [y] if []
   prompt "Support Centaur processors" if [PROCESSOR_SELECT]
  }
  config CPU_SUP_TRANSMETA_32 boolean {
   default [y] if [!64BIT]
   prompt "Support Transmeta processors" if [!64BIT && PROCESSOR_SELECT]
   depends on [!64BIT]
   inherited [!64BIT]
  }
  config CPU_SUP_UMC_32 boolean {
   default [y] if [!64BIT]
   prompt "Support UMC processors" if [!64BIT && PROCESSOR_SELECT]
   depends on [!64BIT]
   inherited [!64BIT]
  }
 }
 config X86_DS boolean {
  default [X86_PTRACE_BTS] if [X86_DEBUGCTLMSR]
  depends on [X86_DEBUGCTLMSR]
  select HAVE_HW_BRANCH_TRACER if [X86_DEBUGCTLMSR]
  inherited [X86_DEBUGCTLMSR]
 }
 config X86_PTRACE_BTS boolean {
  prompt "Branch Trace Store" if [X86_DEBUGCTLMSR && BROKEN]
  default [y] if [X86_DEBUGCTLMSR && BROKEN]
  depends on [X86_DEBUGCTLMSR]
  depends on [BROKEN]
  inherited [X86_DEBUGCTLMSR && BROKEN]
 }
 config HPET_TIMER boolean {
  default [X86_64] if []
  prompt "HPET Timer Support" if [X86_32]
  config HPET_EMULATE_RTC boolean {
   default [y] if [HPET_TIMER && (RTC || RTC_DRV_CMOS)]
   depends on [HPET_TIMER && (RTC="y" || RTC="m" || RTC_DRV_CMOS="m" || RTC_DRV_CMOS="y")]
   inherited [HPET_TIMER && (RTC || RTC_DRV_CMOS)]
  }
 }
 config DMI boolean {
  default [y] if []
  prompt "Enable DMI scanning" if [EMBEDDED]
 }
 config GART_IOMMU boolean {
  prompt "GART IOMMU support" if [X86_64 && PCI && EMBEDDED]
  default [y] if [X86_64 && PCI]
  select SWIOTLB if [X86_64 && PCI]
  depends on [X86_64 && PCI]
  inherited [X86_64 && PCI]
 }
 config CALGARY_IOMMU boolean {
  prompt "IBM Calgary IOMMU support" if [X86_64 && PCI && EXPERIMENTAL]
  select SWIOTLB if [X86_64 && PCI && EXPERIMENTAL]
  depends on [X86_64 && PCI && EXPERIMENTAL]
  inherited [X86_64 && PCI && EXPERIMENTAL]
  config CALGARY_IOMMU_ENABLED_BY_DEFAULT boolean {
   default [y] if [CALGARY_IOMMU]
   prompt "Should Calgary be enabled by default?" if [CALGARY_IOMMU]
   depends on [CALGARY_IOMMU]
   inherited [CALGARY_IOMMU]
  }
 }
 config AMD_IOMMU boolean {
  prompt "AMD IOMMU support" if [X86_64 && PCI && ACPI]
  select SWIOTLB if [X86_64 && PCI && ACPI]
  select PCI_MSI if [X86_64 && PCI && ACPI]
  depends on [X86_64 && PCI && ACPI]
  inherited [X86_64 && PCI && ACPI]
  config AMD_IOMMU_STATS boolean {
   prompt "Export AMD IOMMU statistics to debugfs" if [AMD_IOMMU]
   depends on [AMD_IOMMU]
   select DEBUG_FS if [AMD_IOMMU]
   inherited [AMD_IOMMU]
  }
 }
 config SWIOTLB boolean {
  default [y] if [X86_64]
 }
 config IOMMU_HELPER boolean {
  default [CALGARY_IOMMU || GART_IOMMU || SWIOTLB || AMD_IOMMU] if []
 }
 config IOMMU_API boolean {
  default [AMD_IOMMU || DMAR] if []
 }
 config MAXSMP boolean {
  prompt "Configure Maximum number of SMP Processors and NUMA Nodes" if [X86_64 && SMP && DEBUG_KERNEL && EXPERIMENTAL]
  depends on [X86_64 && SMP && DEBUG_KERNEL && EXPERIMENTAL]
  select CPUMASK_OFFSTACK if [X86_64 && SMP && DEBUG_KERNEL && EXPERIMENTAL]
  default [n] if [X86_64 && SMP && DEBUG_KERNEL && EXPERIMENTAL]
  inherited [X86_64 && SMP && DEBUG_KERNEL && EXPERIMENTAL]
 }
 config NR_CPUS integer {
  prompt "Maximum number of CPUs" if [SMP && !MAXSMP]
  range [2 8] if [SMP && X86_32 && !X86_BIGSMP]
  range [2 512] if [SMP && !MAXSMP]
  default [1] if [!SMP]
  default [4096] if [MAXSMP]
  default [32] if [SMP && (X86_NUMAQ || X86_SUMMIT || X86_BIGSMP || X86_ES7000)]
  default [8] if [SMP]
 }
 config SCHED_SMT boolean {
  prompt "SMT (Hyperthreading) scheduler support" if [X86_HT]
  depends on [X86_HT]
  inherited [X86_HT]
 }
 config SCHED_MC boolean {
  default [y] if [X86_HT]
  prompt "Multi-core scheduler support" if [X86_HT]
  depends on [X86_HT]
  inherited [X86_HT]
 }
 choice boolean {
  prompt "Preemption Model" if []
  default [PREEMPT_NONE] if []
  config PREEMPT_NONE boolean {
   prompt "No Forced Preemption (Server)" if [<choice>]
   inherited [<choice>]
  }
  config PREEMPT_VOLUNTARY boolean {
   prompt "Voluntary Kernel Preemption (Desktop)" if [<choice>]
   inherited [<choice>]
  }
  config PREEMPT boolean {
   prompt "Preemptible Kernel (Low-Latency Desktop)" if [<choice>]
   inherited [<choice>]
  }
 }
 config X86_UP_APIC boolean {
  prompt "Local APIC support on uniprocessors" if [X86_32 && !SMP && !X86_32_NON_STANDARD]
  depends on [X86_32 && !SMP && !X86_32_NON_STANDARD]
  inherited [X86_32 && !SMP && !X86_32_NON_STANDARD]
  config X86_UP_IOAPIC boolean {
   prompt "IO-APIC support on uniprocessors" if [X86_UP_APIC]
   depends on [X86_UP_APIC]
   inherited [X86_UP_APIC]
  }
 }
 config X86_LOCAL_APIC boolean {
  default [y] if [X86_64 || SMP || X86_32_NON_STANDARD || X86_UP_APIC]
  depends on [X86_64 || SMP || X86_32_NON_STANDARD || X86_UP_APIC]
  inherited [X86_64 || SMP || X86_32_NON_STANDARD || X86_UP_APIC]
 }
 config X86_IO_APIC boolean {
  default [y] if [X86_64 || SMP || X86_32_NON_STANDARD || X86_UP_APIC]
  depends on [X86_64 || SMP || X86_32_NON_STANDARD || X86_UP_APIC]
  inherited [X86_64 || SMP || X86_32_NON_STANDARD || X86_UP_APIC]
 }
 config X86_VISWS_APIC boolean {
  default [y] if [X86_32 && X86_VISWS]
  depends on [X86_32 && X86_VISWS]
  inherited [X86_32 && X86_VISWS]
 }
 config X86_REROUTE_FOR_BROKEN_BOOT_IRQS boolean {
  prompt "Reroute for broken boot IRQs" if [X86_IO_APIC]
  default [n] if [X86_IO_APIC]
  depends on [X86_IO_APIC]
  inherited [X86_IO_APIC]
 }
 config X86_MCE boolean {
  prompt "Machine Check / overheating reporting" if []
  config X86_MCE_INTEL boolean {
   default [y] if [X86_MCE && X86_LOCAL_APIC]
   prompt "Intel MCE features" if [X86_MCE && X86_LOCAL_APIC]
   depends on [X86_MCE && X86_LOCAL_APIC]
   inherited [X86_MCE && X86_LOCAL_APIC]
  }
  config X86_MCE_AMD boolean {
   default [y] if [X86_MCE && X86_LOCAL_APIC]
   prompt "AMD MCE features" if [X86_MCE && X86_LOCAL_APIC]
   depends on [X86_MCE && X86_LOCAL_APIC]
   inherited [X86_MCE && X86_LOCAL_APIC]
  }
  config X86_ANCIENT_MCE boolean {
   default [n] if [X86_32 && X86_MCE]
   depends on [X86_32 && X86_MCE]
   prompt "Support for old Pentium 5 / WinChip machine checks" if [X86_32 && X86_MCE]
   inherited [X86_32 && X86_MCE]
  }
 }
 config X86_MCE_THRESHOLD boolean {
  depends on [X86_MCE_AMD || X86_MCE_INTEL]
  default [y] if [X86_MCE_AMD || X86_MCE_INTEL]
  inherited [X86_MCE_AMD || X86_MCE_INTEL]
 }
 config X86_MCE_INJECT tristate {
  depends on [X86_MCE]
  prompt "Machine check injector support" if [X86_MCE]
  inherited [X86_MCE]
 }
 config X86_THERMAL_VECTOR boolean {
  default [y] if [X86_MCE_INTEL]
  depends on [X86_MCE_INTEL]
  inherited [X86_MCE_INTEL]
 }
 config VM86 boolean {
  prompt "Enable VM86 support" if [X86_32 && EMBEDDED]
  default [y] if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config TOSHIBA tristate {
  prompt "Toshiba Laptop support" if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config I8K tristate {
  prompt "Dell laptop support" if []
 }
 config X86_REBOOTFIXUPS boolean {
  prompt "Enable X86 board specific fixups for reboot" if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config MICROCODE tristate {
  prompt "/dev/cpu/microcode - microcode support" if []
  select FW_LOADER if []
  config MICROCODE_INTEL boolean {
   prompt "Intel microcode patch loading support" if [MICROCODE]
   depends on [MICROCODE]
   default [MICROCODE] if [MICROCODE]
   select FW_LOADER if [MICROCODE]
   inherited [MICROCODE]
  }
  config MICROCODE_AMD boolean {
   prompt "AMD microcode patch loading support" if [MICROCODE]
   depends on [MICROCODE]
   select FW_LOADER if [MICROCODE]
   inherited [MICROCODE]
  }
  config MICROCODE_OLD_INTERFACE boolean {
   default [y] if [MICROCODE]
   depends on [MICROCODE]
   inherited [MICROCODE]
  }
 }
 config X86_MSR tristate {
  prompt "/dev/cpu/*/msr - Model-specific register support" if []
 }
 config X86_CPUID tristate {
  prompt "/dev/cpu/*/cpuid - CPU information support" if []
 }
 config X86_CPU_DEBUG tristate {
  prompt "/sys/kernel/debug/x86/cpu/* - CPU Debug support" if []
 }
 choice boolean {
  prompt "High Memory Support" if [X86_32]
  default [HIGHMEM4G] if [X86_32 && !X86_NUMAQ]
  default [HIGHMEM64G] if [X86_32 && X86_NUMAQ]
  depends on [X86_32]
  config NOHIGHMEM boolean {
   prompt "off" if [<choice> && !X86_NUMAQ]
   depends on [!X86_NUMAQ]
   inherited [<choice> && !X86_NUMAQ]
  }
  config HIGHMEM4G boolean {
   prompt "4GB" if [<choice> && !X86_NUMAQ]
   depends on [!X86_NUMAQ]
   inherited [<choice> && !X86_NUMAQ]
  }
  config HIGHMEM64G boolean {
   prompt "64GB" if [<choice> && !M386 && !M486]
   depends on [!M386 && !M486]
   select X86_PAE if [<choice> && !M386 && !M486]
   inherited [<choice> && !M386 && !M486]
  }
 }
 choice boolean {
  depends on [EXPERIMENTAL]
  prompt "Memory split" if [EXPERIMENTAL && X86_32 && EMBEDDED]
  default [VMSPLIT_3G] if [EXPERIMENTAL && X86_32]
  depends on [X86_32]
  config VMSPLIT_3G boolean {
   prompt "3G/1G user/kernel split" if [<choice>]
   inherited [<choice>]
  }
  config VMSPLIT_3G_OPT boolean {
   depends on [!X86_PAE]
   prompt "3G/1G user/kernel split (for full 1G low memory)" if [<choice> && !X86_PAE]
   inherited [<choice> && !X86_PAE]
  }
  config VMSPLIT_2G boolean {
   prompt "2G/2G user/kernel split" if [<choice>]
   inherited [<choice>]
  }
  config VMSPLIT_2G_OPT boolean {
   depends on [!X86_PAE]
   prompt "2G/2G user/kernel split (for full 2G low memory)" if [<choice> && !X86_PAE]
   inherited [<choice> && !X86_PAE]
  }
  config VMSPLIT_1G boolean {
   prompt "1G/3G user/kernel split" if [<choice>]
   inherited [<choice>]
  }
 }
 config PAGE_OFFSET hex {
  default [0xB0000000] if [X86_32 && VMSPLIT_3G_OPT]
  default [0x80000000] if [X86_32 && VMSPLIT_2G]
  default [0x78000000] if [X86_32 && VMSPLIT_2G_OPT]
  default [0x40000000] if [X86_32 && VMSPLIT_1G]
  default [0xC0000000] if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config HIGHMEM boolean {
  default [y] if [X86_32 && (HIGHMEM64G || HIGHMEM4G)]
  depends on [X86_32 && (HIGHMEM64G || HIGHMEM4G)]
  inherited [X86_32 && (HIGHMEM64G || HIGHMEM4G)]
 }
 config X86_PAE boolean {
  prompt "PAE (Physical Address Extension) Support" if [X86_32 && !HIGHMEM4G]
  depends on [X86_32 && !HIGHMEM4G]
  inherited [X86_32 && !HIGHMEM4G]
 }
 config ARCH_PHYS_ADDR_T_64BIT boolean {
  default [X86_64 || X86_PAE] if []
 }
 config DIRECT_GBPAGES boolean {
  prompt "Enable 1GB pages for kernel pagetables" if [X86_64 && EMBEDDED]
  default [y] if [X86_64]
  depends on [X86_64]
  inherited [X86_64]
 }
 config NUMA boolean {
  prompt "Numa Memory Allocation and Scheduler Support" if [SMP && (X86_64 || X86_32 && HIGHMEM64G && (X86_NUMAQ || X86_BIGSMP || X86_SUMMIT && ACPI) && EXPERIMENTAL)]
  depends on [SMP]
  depends on [X86_64 || X86_32 && HIGHMEM64G && (X86_NUMAQ || X86_BIGSMP || X86_SUMMIT && ACPI) && EXPERIMENTAL]
  default [y] if [SMP && (X86_64 || X86_32 && HIGHMEM64G && (X86_NUMAQ || X86_BIGSMP || X86_SUMMIT && ACPI) && EXPERIMENTAL) && (X86_NUMAQ || X86_SUMMIT || X86_BIGSMP)]
  inherited [SMP && (X86_64 || X86_32 && HIGHMEM64G && (X86_NUMAQ || X86_BIGSMP || X86_SUMMIT && ACPI) && EXPERIMENTAL)]
 }
 config K8_NUMA boolean {
  default [y] if [X86_64 && NUMA && PCI]
  prompt "Old style AMD Opteron NUMA detection" if [X86_64 && NUMA && PCI]
  depends on [X86_64 && NUMA && PCI]
  inherited [X86_64 && NUMA && PCI]
 }
 config X86_64_ACPI_NUMA boolean {
  default [y] if [X86_64 && NUMA && ACPI && PCI]
  prompt "ACPI NUMA detection" if [X86_64 && NUMA && ACPI && PCI]
  depends on [X86_64 && NUMA && ACPI && PCI]
  select ACPI_NUMA if [X86_64 && NUMA && ACPI && PCI]
  inherited [X86_64 && NUMA && ACPI && PCI]
  config NODES_SPAN_OTHER_NODES boolean {
   default [y] if [X86_64_ACPI_NUMA]
   depends on [X86_64_ACPI_NUMA]
   inherited [X86_64_ACPI_NUMA]
  }
 }
 config NUMA_EMU boolean {
  prompt "NUMA emulation" if [X86_64 && NUMA]
  depends on [X86_64 && NUMA]
  inherited [X86_64 && NUMA]
 }
 config NODES_SHIFT integer {
  prompt "Maximum NUMA Nodes (as a power of 2)" if [NEED_MULTIPLE_NODES && !MAXSMP]
  range [1 9] if [NEED_MULTIPLE_NODES]
  default [9] if [NEED_MULTIPLE_NODES && MAXSMP]
  default [6] if [NEED_MULTIPLE_NODES && X86_64]
  default [4] if [NEED_MULTIPLE_NODES && X86_NUMAQ]
  default [3] if [NEED_MULTIPLE_NODES]
  depends on [NEED_MULTIPLE_NODES]
  inherited [NEED_MULTIPLE_NODES]
 }
 config HAVE_ARCH_BOOTMEM boolean {
  default [y] if [X86_32 && NUMA]
  depends on [X86_32 && NUMA]
  inherited [X86_32 && NUMA]
 }
 config ARCH_HAVE_MEMORY_PRESENT boolean {
  default [y] if [X86_32 && DISCONTIGMEM]
  depends on [X86_32 && DISCONTIGMEM]
  inherited [X86_32 && DISCONTIGMEM]
 }
 config NEED_NODE_MEMMAP_SIZE boolean {
  default [y] if [X86_32 && (DISCONTIGMEM || SPARSEMEM)]
  depends on [X86_32 && (DISCONTIGMEM || SPARSEMEM)]
  inherited [X86_32 && (DISCONTIGMEM || SPARSEMEM)]
 }
 config HAVE_ARCH_ALLOC_REMAP boolean {
  default [y] if [X86_32 && NUMA]
  depends on [X86_32 && NUMA]
  inherited [X86_32 && NUMA]
 }
 config ARCH_FLATMEM_ENABLE boolean {
  default [y] if [X86_32 && ARCH_SELECT_MEMORY_MODEL && !NUMA]
  depends on [X86_32 && ARCH_SELECT_MEMORY_MODEL && !NUMA]
  inherited [X86_32 && ARCH_SELECT_MEMORY_MODEL && !NUMA]
 }
 config ARCH_DISCONTIGMEM_ENABLE boolean {
  default [y] if [NUMA && X86_32]
  depends on [NUMA && X86_32]
  inherited [NUMA && X86_32]
 }
 config ARCH_DISCONTIGMEM_DEFAULT boolean {
  default [y] if [NUMA && X86_32]
  depends on [NUMA && X86_32]
  inherited [NUMA && X86_32]
 }
 config ARCH_PROC_KCORE_TEXT boolean {
  default [y] if [X86_64 && PROC_KCORE]
  depends on [X86_64 && PROC_KCORE]
  inherited [X86_64 && PROC_KCORE]
 }
 config ARCH_SPARSEMEM_DEFAULT boolean {
  default [y] if [X86_64]
  depends on [X86_64]
  inherited [X86_64]
 }
 config ARCH_SPARSEMEM_ENABLE boolean {
  default [y] if [X86_64 || NUMA || EXPERIMENTAL && X86_32 || X86_32_NON_STANDARD]
  depends on [X86_64 || NUMA || EXPERIMENTAL && X86_32 || X86_32_NON_STANDARD]
  select SPARSEMEM_STATIC if [(X86_64 || NUMA || EXPERIMENTAL && X86_32 || X86_32_NON_STANDARD) && X86_32]
  select SPARSEMEM_VMEMMAP_ENABLE if [(X86_64 || NUMA || EXPERIMENTAL && X86_32 || X86_32_NON_STANDARD) && X86_64]
  inherited [X86_64 || NUMA || EXPERIMENTAL && X86_32 || X86_32_NON_STANDARD]
 }
 config ARCH_SELECT_MEMORY_MODEL boolean {
  default [y] if [ARCH_SPARSEMEM_ENABLE]
  depends on [ARCH_SPARSEMEM_ENABLE]
  inherited [ARCH_SPARSEMEM_ENABLE]
 }
 config ARCH_MEMORY_PROBE boolean {
  default [X86_64] if [MEMORY_HOTPLUG]
  depends on [MEMORY_HOTPLUG]
  inherited [MEMORY_HOTPLUG]
 }
 config SELECT_MEMORY_MODEL boolean {
  default [y] if [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
  depends on [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
  inherited [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
 }
 choice boolean {
  prompt "Memory model" if [SELECT_MEMORY_MODEL]
  depends on [SELECT_MEMORY_MODEL]
  default [DISCONTIGMEM_MANUAL] if [SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_DEFAULT]
  default [SPARSEMEM_MANUAL] if [SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_DEFAULT]
  default [FLATMEM_MANUAL] if [SELECT_MEMORY_MODEL]
  config FLATMEM_MANUAL boolean {
   prompt "Flat Memory" if [<choice> && (!ARCH_DISCONTIGMEM_ENABLE && !ARCH_SPARSEMEM_ENABLE || ARCH_FLATMEM_ENABLE)]
   depends on [!(ARCH_DISCONTIGMEM_ENABLE || ARCH_SPARSEMEM_ENABLE) || ARCH_FLATMEM_ENABLE]
   inherited [<choice> && (!ARCH_DISCONTIGMEM_ENABLE && !ARCH_SPARSEMEM_ENABLE || ARCH_FLATMEM_ENABLE)]
  }
  config DISCONTIGMEM_MANUAL boolean {
   prompt "Discontiguous Memory" if [<choice> && ARCH_DISCONTIGMEM_ENABLE]
   depends on [ARCH_DISCONTIGMEM_ENABLE]
   inherited [<choice> && ARCH_DISCONTIGMEM_ENABLE]
  }
  config SPARSEMEM_MANUAL boolean {
   prompt "Sparse Memory" if [<choice> && ARCH_SPARSEMEM_ENABLE]
   depends on [ARCH_SPARSEMEM_ENABLE]
   inherited [<choice> && ARCH_SPARSEMEM_ENABLE]
  }
 }
 config DISCONTIGMEM boolean {
  default [y] if [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
  depends on [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
  inherited [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
 }
 config SPARSEMEM boolean {
  default [y] if [!SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_ENABLE || SPARSEMEM_MANUAL]
  depends on [!SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_ENABLE || SPARSEMEM_MANUAL]
  inherited [!SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_ENABLE || SPARSEMEM_MANUAL]
 }
 config FLATMEM boolean {
  default [y] if [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
  depends on [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
  inherited [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
 }
 config FLAT_NODE_MEM_MAP boolean {
  default [y] if [!SPARSEMEM]
  depends on [!SPARSEMEM]
  inherited [!SPARSEMEM]
 }
 config NEED_MULTIPLE_NODES boolean {
  default [y] if [DISCONTIGMEM || NUMA]
  depends on [DISCONTIGMEM || NUMA]
  inherited [DISCONTIGMEM || NUMA]
 }
 config HAVE_MEMORY_PRESENT boolean {
  default [y] if [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
  depends on [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
  inherited [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
 }
 config SPARSEMEM_STATIC boolean {
 }
 config SPARSEMEM_EXTREME boolean {
  default [y] if [SPARSEMEM && !SPARSEMEM_STATIC]
  depends on [SPARSEMEM && !SPARSEMEM_STATIC]
  inherited [SPARSEMEM && !SPARSEMEM_STATIC]
 }
 config SPARSEMEM_VMEMMAP_ENABLE boolean {
 }
 config SPARSEMEM_VMEMMAP boolean {
  prompt "Sparse Memory virtual memmap" if [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
  depends on [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
  default [y] if [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
  inherited [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
 }
 config MEMORY_HOTPLUG boolean {
  prompt "Allow for memory hot-add" if [(SPARSEMEM || X86_64_ACPI_NUMA) && HOTPLUG && ARCH_ENABLE_MEMORY_HOTPLUG && (IA64 || X86 || PPC_BOOK3S_64 || SUPERH || S390)]
  depends on [SPARSEMEM || X86_64_ACPI_NUMA]
  depends on [HOTPLUG && ARCH_ENABLE_MEMORY_HOTPLUG]
  depends on [IA64 || X86 || PPC_BOOK3S_64 || SUPERH || S390]
  inherited [(SPARSEMEM || X86_64_ACPI_NUMA) && HOTPLUG && ARCH_ENABLE_MEMORY_HOTPLUG && (IA64 || X86 || PPC_BOOK3S_64 || SUPERH || S390)]
  config MEMORY_HOTPLUG_SPARSE boolean {
   default [y] if [SPARSEMEM && MEMORY_HOTPLUG]
   depends on [SPARSEMEM && MEMORY_HOTPLUG]
   inherited [SPARSEMEM && MEMORY_HOTPLUG]
  }
  config MEMORY_HOTREMOVE boolean {
   prompt "Allow for memory hot remove" if [MEMORY_HOTPLUG && ARCH_ENABLE_MEMORY_HOTREMOVE && MIGRATION]
   depends on [MEMORY_HOTPLUG && ARCH_ENABLE_MEMORY_HOTREMOVE]
   depends on [MIGRATION]
   inherited [MEMORY_HOTPLUG && ARCH_ENABLE_MEMORY_HOTREMOVE && MIGRATION]
  }
 }
 config PAGEFLAGS_EXTENDED boolean {
  default [y] if [64BIT || SPARSEMEM_VMEMMAP || !SPARSEMEM]
  depends on [64BIT || SPARSEMEM_VMEMMAP || !SPARSEMEM]
  inherited [64BIT || SPARSEMEM_VMEMMAP || !SPARSEMEM]
 }
 config SPLIT_PTLOCK_CPUS integer {
  default [4096] if [ARM && !CPU_CACHE_VIPT]
  default [4096] if [PARISC && !PA20]
  default [4] if []
 }
 config MIGRATION boolean {
  prompt "Page migration" if [NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE]
  default [y] if [NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE]
  depends on [NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE]
  inherited [NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE]
 }
 config PHYS_ADDR_T_64BIT boolean {
  default [64BIT || ARCH_PHYS_ADDR_T_64BIT] if []
 }
 config ZONE_DMA_FLAG integer {
  default [0] if [!ZONE_DMA]
  default [1] if []
 }
 config BOUNCE boolean {
  default [y] if [BLOCK && MMU && (ZONE_DMA || HIGHMEM)]
  depends on [BLOCK && MMU && (ZONE_DMA || HIGHMEM)]
  inherited [BLOCK && MMU && (ZONE_DMA || HIGHMEM)]
 }
 config NR_QUICK integer {
  depends on [QUICKLIST]
  default [2] if [QUICKLIST && (SUPERH || AVR32)]
  default [1] if [QUICKLIST]
  inherited [QUICKLIST]
 }
 config VIRT_TO_BUS boolean {
  default [y] if [!ARCH_NO_VIRT_TO_BUS]
  depends on [!ARCH_NO_VIRT_TO_BUS]
  inherited [!ARCH_NO_VIRT_TO_BUS]
 }
 config HAVE_MLOCK boolean {
  default [y] if [MMU]
 }
 config HAVE_MLOCKED_PAGE_BIT boolean {
  default [y] if [HAVE_MLOCK]
 }
 config MMU_NOTIFIER boolean {
 }
 config KSM boolean {
  prompt "Enable KSM for page merging" if [MMU]
  depends on [MMU]
  inherited [MMU]
 }
 config DEFAULT_MMAP_MIN_ADDR integer {
  prompt "Low address space to protect from user allocation" if []
  default [4096] if []
 }
 config ARCH_SUPPORTS_MEMORY_FAILURE boolean {
 }
 config MEMORY_FAILURE boolean {
  depends on [MMU]
  depends on [ARCH_SUPPORTS_MEMORY_FAILURE]
  prompt "Enable recovery from hardware memory errors" if [MMU && ARCH_SUPPORTS_MEMORY_FAILURE]
  inherited [MMU && ARCH_SUPPORTS_MEMORY_FAILURE]
  config HWPOISON_INJECT tristate {
   prompt "Poison pages injector" if [MEMORY_FAILURE && DEBUG_KERNEL]
   depends on [MEMORY_FAILURE && DEBUG_KERNEL]
   inherited [MEMORY_FAILURE && DEBUG_KERNEL]
  }
 }
 config NOMMU_INITIAL_TRIM_EXCESS integer {
  prompt "Turn on mmap() excess space trimming before booting" if [!MMU]
  depends on [!MMU]
  default [1] if [!MMU]
  inherited [!MMU]
 }
 config HIGHPTE boolean {
  prompt "Allocate 3rd-level pagetables from highmem" if [X86_32 && (HIGHMEM4G || HIGHMEM64G)]
  depends on [X86_32 && (HIGHMEM4G || HIGHMEM64G)]
  inherited [X86_32 && (HIGHMEM4G || HIGHMEM64G)]
 }
 config X86_CHECK_BIOS_CORRUPTION boolean {
  prompt "Check for low memory corruption" if []
  config X86_BOOTPARAM_MEMORY_CORRUPTION_CHECK boolean {
   prompt "Set the default setting of memory_corruption_check" if [X86_CHECK_BIOS_CORRUPTION]
   depends on [X86_CHECK_BIOS_CORRUPTION]
   default [y] if [X86_CHECK_BIOS_CORRUPTION]
   inherited [X86_CHECK_BIOS_CORRUPTION]
  }
 }
 config X86_RESERVE_LOW_64K boolean {
  prompt "Reserve low 64K of RAM on AMI/Phoenix BIOSen" if []
  default [y] if []
 }
 config MATH_EMULATION boolean {
  prompt "Math emulation" if [X86_32]
 }
 config MTRR boolean {
  prompt "MTRR (Memory Type Range Register) support" if []
  config MTRR_SANITIZER boolean {
   default [y] if [MTRR]
   prompt "MTRR cleanup support" if [MTRR]
   depends on [MTRR]
   inherited [MTRR]
   config MTRR_SANITIZER_ENABLE_DEFAULT integer {
    prompt "MTRR cleanup enable value (0-1)" if [MTRR_SANITIZER]
    range [0 1] if [MTRR_SANITIZER]
    default [0] if [MTRR_SANITIZER]
    depends on [MTRR_SANITIZER]
    inherited [MTRR_SANITIZER]
   }
   config MTRR_SANITIZER_SPARE_REG_NR_DEFAULT integer {
    prompt "MTRR cleanup spare reg num (0-7)" if [MTRR_SANITIZER]
    range [0 7] if [MTRR_SANITIZER]
    default [1] if [MTRR_SANITIZER]
    depends on [MTRR_SANITIZER]
    inherited [MTRR_SANITIZER]
   }
  }
  config X86_PAT boolean {
   prompt "x86 PAT support" if [MTRR]
   depends on [MTRR]
   inherited [MTRR]
   config ARCH_USES_PG_UNCACHED boolean {
    default [y] if [X86_PAT]
    depends on [X86_PAT]
    inherited [X86_PAT]
   }
  }
 }
 config EFI boolean {
  prompt "EFI runtime service support" if [ACPI]
  depends on [ACPI]
  inherited [ACPI]
 }
 config SECCOMP boolean {
  default [y] if []
  prompt "Enable seccomp to safely compute untrusted bytecode" if []
 }
 config CC_STACKPROTECTOR boolean {
  prompt "Enable -fstack-protector buffer overflow detection (EXPERIMENTAL)" if []
 }
 choice boolean {
  prompt "Timer frequency" if []
  default [HZ_250] if []
  config HZ_100 boolean {
   prompt "100 HZ" if [<choice>]
   inherited [<choice>]
  }
  config HZ_250 boolean {
   prompt "250 HZ" if [<choice>]
   inherited [<choice>]
  }
  config HZ_300 boolean {
   prompt "300 HZ" if [<choice>]
   inherited [<choice>]
  }
  config HZ_1000 boolean {
   prompt "1000 HZ" if [<choice>]
   inherited [<choice>]
  }
 }
 config HZ integer {
  default [100] if [HZ_100]
  default [250] if [HZ_250]
  default [300] if [HZ_300]
  default [1000] if [HZ_1000]
 }
 config SCHED_HRTICK boolean {
  default [HIGH_RES_TIMERS && (!SMP || USE_GENERIC_SMP_HELPERS)] if []
 }
 config KEXEC boolean {
  prompt "kexec system call" if []
 }
 config CRASH_DUMP boolean {
  prompt "kernel crash dumps" if [X86_64 || X86_32 && HIGHMEM]
  depends on [X86_64 || X86_32 && HIGHMEM]
  inherited [X86_64 || X86_32 && HIGHMEM]
 }
 config KEXEC_JUMP boolean {
  prompt "kexec jump (EXPERIMENTAL)" if [EXPERIMENTAL && KEXEC && HIBERNATION]
  depends on [EXPERIMENTAL]
  depends on [KEXEC && HIBERNATION]
  inherited [EXPERIMENTAL && KEXEC && HIBERNATION]
 }
 config PHYSICAL_START hex {
  prompt "Physical address where the kernel is loaded" if [EMBEDDED || CRASH_DUMP]
  default [0x1000000] if []
 }
 config RELOCATABLE boolean {
  prompt "Build a relocatable kernel" if []
  default [y] if []
  config X86_NEED_RELOCS boolean {
   default [y] if [X86_32 && RELOCATABLE]
   depends on [X86_32 && RELOCATABLE]
   inherited [X86_32 && RELOCATABLE]
  }
 }
 config PHYSICAL_ALIGN hex {
  prompt "Alignment value to which kernel should be aligned" if [X86_32]
  default [0x1000000] if []
  range [0x2000 0x1000000] if []
 }
 config HOTPLUG_CPU boolean {
  prompt "Support for hot-pluggable CPUs" if [SMP && HOTPLUG]
  depends on [SMP && HOTPLUG]
  inherited [SMP && HOTPLUG]
 }
 config COMPAT_VDSO boolean {
  default [y] if [X86_32 || IA32_EMULATION]
  prompt "Compat VDSO support" if [X86_32 || IA32_EMULATION]
  depends on [X86_32 || IA32_EMULATION]
  inherited [X86_32 || IA32_EMULATION]
 }
 config CMDLINE_BOOL boolean {
  prompt "Built-in kernel command line" if []
  default [n] if []
  config CMDLINE string {
   prompt "Built-in kernel command string" if [CMDLINE_BOOL]
   depends on [CMDLINE_BOOL]
   default [""] if [CMDLINE_BOOL]
   inherited [CMDLINE_BOOL]
  }
  config CMDLINE_OVERRIDE boolean {
   prompt "Built-in command line overrides boot loader arguments" if [CMDLINE_BOOL]
   default [n] if [CMDLINE_BOOL]
   depends on [CMDLINE_BOOL]
   inherited [CMDLINE_BOOL]
  }
 }
}
config ARCH_ENABLE_MEMORY_HOTPLUG boolean {
 default [y] if [X86_64 || X86_32 && HIGHMEM]
 depends on [X86_64 || X86_32 && HIGHMEM]
 inherited [X86_64 || X86_32 && HIGHMEM]
}
config ARCH_ENABLE_MEMORY_HOTREMOVE boolean {
 default [y] if [MEMORY_HOTPLUG]
 depends on [MEMORY_HOTPLUG]
 inherited [MEMORY_HOTPLUG]
}
config HAVE_ARCH_EARLY_PFN_TO_NID boolean {
 default [X86_64] if [NUMA]
 depends on [NUMA]
 inherited [NUMA]
}
menu "Power management and ACPI options" {
 config ARCH_HIBERNATION_HEADER boolean {
  default [y] if [X86_64 && HIBERNATION]
  depends on [X86_64 && HIBERNATION]
  inherited [X86_64 && HIBERNATION]
 }
 config PM boolean {
  prompt "Power Management support" if [!IA64_HP_SIM]
  depends on [!IA64_HP_SIM]
  inherited [!IA64_HP_SIM]
  config PM_DEBUG boolean {
   prompt "Power Management Debug Support" if [PM]
   depends on [PM]
   inherited [PM]
   config PM_VERBOSE boolean {
    prompt "Verbose Power Management debugging" if [PM_DEBUG]
    depends on [PM_DEBUG]
    default [n] if [PM_DEBUG]
    inherited [PM_DEBUG]
   }
   config CAN_PM_TRACE boolean {
    default [y] if [PM_DEBUG && PM_SLEEP && EXPERIMENTAL]
    depends on [PM_DEBUG && PM_SLEEP && EXPERIMENTAL]
    inherited [PM_DEBUG && PM_SLEEP && EXPERIMENTAL]
   }
  }
 }
 config PM_TRACE boolean {
 }
 config PM_TRACE_RTC boolean {
  prompt "Suspend/resume event tracing" if [CAN_PM_TRACE && X86]
  depends on [CAN_PM_TRACE]
  depends on [X86]
  select PM_TRACE if [CAN_PM_TRACE && X86]
  default [n] if [CAN_PM_TRACE && X86]
  inherited [CAN_PM_TRACE && X86]
 }
 config PM_SLEEP_SMP boolean {
  depends on [SMP]
  depends on [ARCH_SUSPEND_POSSIBLE || ARCH_HIBERNATION_POSSIBLE]
  depends on [PM_SLEEP]
  select HOTPLUG_CPU if [SMP && (ARCH_SUSPEND_POSSIBLE || ARCH_HIBERNATION_POSSIBLE) && PM_SLEEP]
  default [y] if [SMP && (ARCH_SUSPEND_POSSIBLE || ARCH_HIBERNATION_POSSIBLE) && PM_SLEEP]
  inherited [SMP && (ARCH_SUSPEND_POSSIBLE || ARCH_HIBERNATION_POSSIBLE) && PM_SLEEP]
 }
 config PM_SLEEP boolean {
  depends on [SUSPEND || HIBERNATION || XEN_SAVE_RESTORE]
  default [y] if [SUSPEND || HIBERNATION || XEN_SAVE_RESTORE]
  inherited [SUSPEND || HIBERNATION || XEN_SAVE_RESTORE]
 }
 config SUSPEND boolean {
  prompt "Suspend to RAM and standby" if [PM && ARCH_SUSPEND_POSSIBLE]
  depends on [PM && ARCH_SUSPEND_POSSIBLE]
  default [y] if [PM && ARCH_SUSPEND_POSSIBLE]
  inherited [PM && ARCH_SUSPEND_POSSIBLE]
  config PM_TEST_SUSPEND boolean {
   prompt "Test suspend/resume and wakealarm during bootup" if [SUSPEND && PM_DEBUG && RTC_CLASS="y"]
   depends on [SUSPEND && PM_DEBUG && RTC_CLASS="y"]
   inherited [SUSPEND && PM_DEBUG && RTC_CLASS="y"]
  }
  config SUSPEND_FREEZER boolean {
   prompt "Enable freezer for suspend to RAM/standby" if [SUSPEND && (ARCH_WANTS_FREEZER_CONTROL || BROKEN)]
   depends on [SUSPEND]
   default [y] if [SUSPEND]
   inherited [SUSPEND]
  }
 }
 config HIBERNATION_NVS boolean {
 }
 config HIBERNATION boolean {
  prompt "Hibernation (aka 'suspend to disk')" if [PM && SWAP && ARCH_HIBERNATION_POSSIBLE]
  depends on [PM && SWAP && ARCH_HIBERNATION_POSSIBLE]
  select HIBERNATION_NVS if [PM && SWAP && ARCH_HIBERNATION_POSSIBLE && HAS_IOMEM]
  inherited [PM && SWAP && ARCH_HIBERNATION_POSSIBLE]
  config PM_STD_PARTITION string {
   prompt "Default resume partition" if [HIBERNATION]
   depends on [HIBERNATION]
   default [""] if [HIBERNATION]
   inherited [HIBERNATION]
  }
 }
 config APM_EMULATION tristate {
  prompt "Advanced Power Management Emulation" if [PM && SYS_SUPPORTS_APM_EMULATION]
  depends on [PM && SYS_SUPPORTS_APM_EMULATION]
  inherited [PM && SYS_SUPPORTS_APM_EMULATION]
 }
 config PM_RUNTIME boolean {
  prompt "Run-time PM core functionality" if [PM]
  depends on [PM]
  inherited [PM]
 }
 menuconfig ACPI boolean {
  prompt "ACPI (Advanced Configuration and Power Interface) Support" if [!IA64_HP_SIM && (IA64 || X86) && PCI && PM]
  depends on [!IA64_HP_SIM]
  depends on [IA64 || X86]
  depends on [PCI]
  depends on [PM]
  select PNP if [!IA64_HP_SIM && (IA64 || X86) && PCI && PM]
  select CPU_IDLE if [!IA64_HP_SIM && (IA64 || X86) && PCI && PM]
  default [y] if [!IA64_HP_SIM && (IA64 || X86) && PCI && PM]
  inherited [!IA64_HP_SIM && (IA64 || X86) && PCI && PM]
  if [ACPI] {
   config ACPI_SLEEP boolean {
    depends on [SUSPEND || HIBERNATION]
    default [y] if [ACPI && (SUSPEND || HIBERNATION)]
    inherited [ACPI && (SUSPEND || HIBERNATION)]
   }
   config ACPI_PROCFS boolean {
    prompt "Deprecated /proc/acpi files" if [ACPI && PROC_FS]
    depends on [PROC_FS]
    inherited [ACPI && PROC_FS]
   }
   config ACPI_PROCFS_POWER boolean {
    prompt "Deprecated power /proc/acpi directories" if [ACPI && PROC_FS]
    depends on [PROC_FS]
    default [y] if [ACPI && PROC_FS]
    inherited [ACPI && PROC_FS]
   }
   config ACPI_POWER_METER tristate {
    prompt "ACPI 4.0 power meter" if [ACPI && HWMON]
    depends on [HWMON]
    inherited [ACPI && HWMON]
   }
   config ACPI_SYSFS_POWER boolean {
    prompt "Future power /sys interface" if [ACPI]
    select POWER_SUPPLY if [ACPI]
    default [y] if [ACPI]
    inherited [ACPI]
   }
   config ACPI_PROC_EVENT boolean {
    prompt "Deprecated /proc/acpi/event support" if [ACPI && PROC_FS]
    depends on [PROC_FS]
    default [y] if [ACPI && PROC_FS]
    inherited [ACPI && PROC_FS]
   }
   config ACPI_AC tristate {
    prompt "AC Adapter" if [ACPI && X86]
    depends on [X86]
    default [y] if [ACPI && X86]
    inherited [ACPI && X86]
   }
   config ACPI_BATTERY tristate {
    prompt "Battery" if [ACPI && X86]
    depends on [X86]
    default [y] if [ACPI && X86]
    inherited [ACPI && X86]
   }
   config ACPI_BUTTON tristate {
    prompt "Button" if [ACPI && INPUT]
    depends on [INPUT]
    default [y] if [ACPI && INPUT]
    inherited [ACPI && INPUT]
   }
   config ACPI_VIDEO tristate {
    prompt "Video" if [ACPI && X86 && BACKLIGHT_CLASS_DEVICE && VIDEO_OUTPUT_CONTROL && INPUT]
    depends on [X86 && BACKLIGHT_CLASS_DEVICE && VIDEO_OUTPUT_CONTROL]
    depends on [INPUT]
    select THERMAL if [ACPI && X86 && BACKLIGHT_CLASS_DEVICE && VIDEO_OUTPUT_CONTROL && INPUT]
    inherited [ACPI && X86 && BACKLIGHT_CLASS_DEVICE && VIDEO_OUTPUT_CONTROL && INPUT]
   }
   config ACPI_FAN tristate {
    prompt "Fan" if [ACPI]
    select THERMAL if [ACPI]
    default [y] if [ACPI]
    inherited [ACPI]
   }
   config ACPI_DOCK boolean {
    prompt "Dock" if [ACPI && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [ACPI && EXPERIMENTAL]
   }
   config ACPI_PROCESSOR tristate {
    prompt "Processor" if [ACPI]
    select THERMAL if [ACPI]
    default [y] if [ACPI]
    inherited [ACPI]
    config ACPI_HOTPLUG_CPU boolean {
     depends on [ACPI_PROCESSOR && HOTPLUG_CPU]
     select ACPI_CONTAINER if [ACPI && ACPI_PROCESSOR && HOTPLUG_CPU]
     default [y] if [ACPI && ACPI_PROCESSOR && HOTPLUG_CPU]
     inherited [ACPI && ACPI_PROCESSOR && HOTPLUG_CPU]
    }
    config ACPI_PROCESSOR_AGGREGATOR tristate {
     prompt "Processor Aggregator" if [ACPI && ACPI_PROCESSOR && EXPERIMENTAL && X86]
     depends on [ACPI_PROCESSOR]
     depends on [EXPERIMENTAL]
     depends on [X86]
     inherited [ACPI && ACPI_PROCESSOR && EXPERIMENTAL && X86]
    }
    config ACPI_THERMAL tristate {
     prompt "Thermal Zone" if [ACPI && ACPI_PROCESSOR]
     depends on [ACPI_PROCESSOR]
     select THERMAL if [ACPI && ACPI_PROCESSOR]
     default [y] if [ACPI && ACPI_PROCESSOR]
     inherited [ACPI && ACPI_PROCESSOR]
    }
   }
   config ACPI_NUMA boolean {
    prompt "NUMA support" if [ACPI && NUMA && (X86 || IA64)]
    depends on [NUMA]
    depends on [X86 || IA64]
    default [y] if [ACPI && NUMA && (X86 || IA64) && (IA64_GENERIC || IA64_SGI_SN2)]
    inherited [ACPI && NUMA && (X86 || IA64)]
   }
   config ACPI_CUSTOM_DSDT_FILE string {
    prompt "Custom DSDT Table file to include" if [ACPI && !STANDALONE]
    default [""] if [ACPI && !STANDALONE]
    depends on [!STANDALONE]
    inherited [ACPI && !STANDALONE]
   }
   config ACPI_CUSTOM_DSDT boolean {
    default [ACPI_CUSTOM_DSDT_FILE!=""] if [ACPI]
    inherited [ACPI]
   }
   config ACPI_BLACKLIST_YEAR integer {
    prompt "Disable ACPI for systems before Jan 1st this year" if [ACPI && X86_32]
    default [0] if [ACPI]
    inherited [ACPI]
   }
   config ACPI_DEBUG boolean {
    prompt "Debug Statements" if [ACPI]
    default [n] if [ACPI]
    inherited [ACPI]
    config ACPI_DEBUG_FUNC_TRACE boolean {
     prompt "Additionally enable ACPI function tracing" if [ACPI && ACPI_DEBUG]
     default [n] if [ACPI && ACPI_DEBUG]
     depends on [ACPI_DEBUG]
     inherited [ACPI && ACPI_DEBUG]
    }
   }
   config ACPI_PCI_SLOT tristate {
    prompt "PCI slot detection driver" if [ACPI && SYSFS]
    depends on [SYSFS]
    default [n] if [ACPI && SYSFS]
    inherited [ACPI && SYSFS]
   }
   config X86_PM_TIMER boolean {
    prompt "Power Management Timer Support" if [ACPI && X86 && EMBEDDED]
    depends on [X86]
    default [y] if [ACPI && X86]
    inherited [ACPI && X86]
   }
   config ACPI_CONTAINER tristate {
    prompt "Container and Module Devices (EXPERIMENTAL)" if [ACPI && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    default [ACPI_HOTPLUG_MEMORY || ACPI_HOTPLUG_CPU || ACPI_HOTPLUG_IO] if [ACPI && EXPERIMENTAL]
    inherited [ACPI && EXPERIMENTAL]
   }
   config ACPI_HOTPLUG_MEMORY tristate {
    prompt "Memory Hotplug" if [ACPI && MEMORY_HOTPLUG]
    depends on [MEMORY_HOTPLUG]
    default [n] if [ACPI && MEMORY_HOTPLUG]
    inherited [ACPI && MEMORY_HOTPLUG]
   }
   config ACPI_SBS tristate {
    prompt "Smart Battery System" if [ACPI && X86]
    depends on [X86]
    inherited [ACPI && X86]
   }
  }
 }
 menuconfig SFI boolean {
  prompt "SFI (Simple Firmware Interface) Support" if []
 }
 config X86_APM_BOOT boolean {
  default [y] if [APM || APM_MODULE]
  depends on [APM || APM_MODULE]
  inherited [APM || APM_MODULE]
 }
 menuconfig APM tristate {
  prompt "APM (Advanced Power Management) BIOS support" if [X86_32 && PM_SLEEP]
  depends on [X86_32 && PM_SLEEP]
  inherited [X86_32 && PM_SLEEP]
  if [APM] {
   config APM_IGNORE_USER_SUSPEND boolean {
    prompt "Ignore USER SUSPEND" if [APM]
    inherited [APM]
   }
   config APM_DO_ENABLE boolean {
    prompt "Enable PM at boot time" if [APM]
    inherited [APM]
   }
   config APM_CPU_IDLE boolean {
    prompt "Make CPU Idle calls when idle" if [APM]
    inherited [APM]
   }
   config APM_DISPLAY_BLANK boolean {
    prompt "Enable console blanking using APM" if [APM]
    inherited [APM]
   }
   config APM_ALLOW_INTS boolean {
    prompt "Allow interrupts during APM BIOS calls" if [APM]
    inherited [APM]
   }
  }
 }
 menu "CPU Frequency scaling" {
  config CPU_FREQ boolean {
   prompt "CPU Frequency scaling" if []
   if [CPU_FREQ] {
    config CPU_FREQ_TABLE tristate {
     inherited [CPU_FREQ]
    }
    config CPU_FREQ_DEBUG boolean {
     prompt "Enable CPUfreq debugging" if [CPU_FREQ]
     inherited [CPU_FREQ]
    }
    config CPU_FREQ_STAT tristate {
     prompt "CPU frequency translation statistics" if [CPU_FREQ]
     select CPU_FREQ_TABLE if [CPU_FREQ]
     default [y] if [CPU_FREQ]
     inherited [CPU_FREQ]
     config CPU_FREQ_STAT_DETAILS boolean {
      prompt "CPU frequency translation statistics details" if [CPU_FREQ && CPU_FREQ_STAT]
      depends on [CPU_FREQ_STAT]
      inherited [CPU_FREQ && CPU_FREQ_STAT]
     }
    }
    choice boolean {
     prompt "Default CPUFreq governor" if [CPU_FREQ]
     default [CPU_FREQ_DEFAULT_GOV_USERSPACE] if [CPU_FREQ && (CPU_FREQ_SA1100 || CPU_FREQ_SA1110)]
     default [CPU_FREQ_DEFAULT_GOV_PERFORMANCE] if [CPU_FREQ]
     config CPU_FREQ_DEFAULT_GOV_PERFORMANCE boolean {
      prompt "performance" if [<choice>]
      select CPU_FREQ_GOV_PERFORMANCE if [<choice>]
      inherited [<choice>]
     }
     config CPU_FREQ_DEFAULT_GOV_POWERSAVE boolean {
      prompt "powersave" if [<choice> && EMBEDDED]
      depends on [EMBEDDED]
      select CPU_FREQ_GOV_POWERSAVE if [<choice> && EMBEDDED]
      inherited [<choice> && EMBEDDED]
     }
     config CPU_FREQ_DEFAULT_GOV_USERSPACE boolean {
      prompt "userspace" if [<choice>]
      select CPU_FREQ_GOV_USERSPACE if [<choice>]
      inherited [<choice>]
     }
     config CPU_FREQ_DEFAULT_GOV_ONDEMAND boolean {
      prompt "ondemand" if [<choice>]
      select CPU_FREQ_GOV_ONDEMAND if [<choice>]
      select CPU_FREQ_GOV_PERFORMANCE if [<choice>]
      inherited [<choice>]
     }
     config CPU_FREQ_DEFAULT_GOV_CONSERVATIVE boolean {
      prompt "conservative" if [<choice>]
      select CPU_FREQ_GOV_CONSERVATIVE if [<choice>]
      select CPU_FREQ_GOV_PERFORMANCE if [<choice>]
      inherited [<choice>]
     }
    }
    config CPU_FREQ_GOV_PERFORMANCE tristate {
     prompt "'performance' governor" if [CPU_FREQ]
     inherited [CPU_FREQ]
    }
    config CPU_FREQ_GOV_POWERSAVE tristate {
     prompt "'powersave' governor" if [CPU_FREQ]
     inherited [CPU_FREQ]
    }
    config CPU_FREQ_GOV_USERSPACE tristate {
     prompt "'userspace' governor for userspace frequency scaling" if [CPU_FREQ]
     inherited [CPU_FREQ]
    }
    config CPU_FREQ_GOV_ONDEMAND tristate {
     prompt "'ondemand' cpufreq policy governor" if [CPU_FREQ]
     select CPU_FREQ_TABLE if [CPU_FREQ]
     inherited [CPU_FREQ]
    }
    config CPU_FREQ_GOV_CONSERVATIVE tristate {
     prompt "'conservative' cpufreq governor" if [CPU_FREQ]
     depends on [CPU_FREQ]
     inherited [CPU_FREQ]
    }
   }
   if [CPU_FREQ] {
    config X86_ACPI_CPUFREQ tristate {
     prompt "ACPI Processor P-States driver" if [CPU_FREQ && ACPI_PROCESSOR]
     select CPU_FREQ_TABLE if [CPU_FREQ && ACPI_PROCESSOR]
     depends on [ACPI_PROCESSOR]
     inherited [CPU_FREQ && ACPI_PROCESSOR]
    }
    config ELAN_CPUFREQ tristate {
     prompt "AMD Elan SC400 and SC410" if [CPU_FREQ && X86_ELAN]
     select CPU_FREQ_TABLE if [CPU_FREQ && X86_ELAN]
     depends on [X86_ELAN]
     inherited [CPU_FREQ && X86_ELAN]
    }
    config SC520_CPUFREQ tristate {
     prompt "AMD Elan SC520" if [CPU_FREQ && X86_ELAN]
     select CPU_FREQ_TABLE if [CPU_FREQ && X86_ELAN]
     depends on [X86_ELAN]
     inherited [CPU_FREQ && X86_ELAN]
    }
    config X86_POWERNOW_K6 tristate {
     prompt "AMD Mobile K6-2/K6-3 PowerNow!" if [CPU_FREQ && X86_32]
     select CPU_FREQ_TABLE if [CPU_FREQ && X86_32]
     depends on [X86_32]
     inherited [CPU_FREQ && X86_32]
    }
    config X86_POWERNOW_K7 tristate {
     prompt "AMD Mobile Athlon/Duron PowerNow!" if [CPU_FREQ && X86_32]
     select CPU_FREQ_TABLE if [CPU_FREQ && X86_32]
     depends on [X86_32]
     inherited [CPU_FREQ && X86_32]
     config X86_POWERNOW_K7_ACPI boolean {
      depends on [X86_POWERNOW_K7 && ACPI_PROCESSOR]
      depends on [!(X86_POWERNOW_K7="y" && ACPI_PROCESSOR="m")]
      depends on [X86_32]
      default [y] if [CPU_FREQ && X86_POWERNOW_K7 && ACPI_PROCESSOR && (X86_POWERNOW_K7!="y" || ACPI_PROCESSOR!="m") && X86_32]
      inherited [CPU_FREQ && X86_POWERNOW_K7 && ACPI_PROCESSOR && (X86_POWERNOW_K7!="y" || ACPI_PROCESSOR!="m") && X86_32]
     }
    }
    config X86_POWERNOW_K8 tristate {
     prompt "AMD Opteron/Athlon64 PowerNow!" if [CPU_FREQ && ACPI && ACPI_PROCESSOR]
     select CPU_FREQ_TABLE if [CPU_FREQ && ACPI && ACPI_PROCESSOR]
     depends on [ACPI && ACPI_PROCESSOR]
     inherited [CPU_FREQ && ACPI && ACPI_PROCESSOR]
    }
    config X86_GX_SUSPMOD tristate {
     prompt "Cyrix MediaGX/NatSemi Geode Suspend Modulation" if [CPU_FREQ && X86_32 && PCI]
     depends on [X86_32 && PCI]
     inherited [CPU_FREQ && X86_32 && PCI]
    }
    config X86_SPEEDSTEP_CENTRINO tristate {
     prompt "Intel Enhanced SpeedStep (deprecated)" if [CPU_FREQ && (X86_32 || X86_64 && ACPI_PROCESSOR)]
     select CPU_FREQ_TABLE if [CPU_FREQ && (X86_32 || X86_64 && ACPI_PROCESSOR)]
     select X86_SPEEDSTEP_CENTRINO_TABLE if [CPU_FREQ && (X86_32 || X86_64 && ACPI_PROCESSOR) && X86_32]
     depends on [X86_32 || X86_64 && ACPI_PROCESSOR]
     inherited [CPU_FREQ && (X86_32 || X86_64 && ACPI_PROCESSOR)]
     config X86_SPEEDSTEP_CENTRINO_TABLE boolean {
      prompt "Built-in tables for Banias CPUs" if [CPU_FREQ && X86_32 && X86_SPEEDSTEP_CENTRINO]
      depends on [X86_32 && X86_SPEEDSTEP_CENTRINO]
      default [y] if [CPU_FREQ && X86_32 && X86_SPEEDSTEP_CENTRINO]
      inherited [CPU_FREQ && X86_32 && X86_SPEEDSTEP_CENTRINO]
     }
    }
    config X86_SPEEDSTEP_ICH tristate {
     prompt "Intel Speedstep on ICH-M chipsets (ioport interface)" if [CPU_FREQ && X86_32]
     select CPU_FREQ_TABLE if [CPU_FREQ && X86_32]
     depends on [X86_32]
     inherited [CPU_FREQ && X86_32]
    }
    config X86_SPEEDSTEP_SMI tristate {
     prompt "Intel SpeedStep on 440BX/ZX/MX chipsets (SMI interface)" if [CPU_FREQ && X86_32 && EXPERIMENTAL]
     select CPU_FREQ_TABLE if [CPU_FREQ && X86_32 && EXPERIMENTAL]
     depends on [X86_32 && EXPERIMENTAL]
     inherited [CPU_FREQ && X86_32 && EXPERIMENTAL]
    }
    config X86_P4_CLOCKMOD tristate {
     prompt "Intel Pentium 4 clock modulation" if [CPU_FREQ]
     select CPU_FREQ_TABLE if [CPU_FREQ]
     inherited [CPU_FREQ]
    }
    config X86_CPUFREQ_NFORCE2 tristate {
     prompt "nVidia nForce2 FSB changing" if [CPU_FREQ && X86_32 && EXPERIMENTAL]
     depends on [X86_32 && EXPERIMENTAL]
     inherited [CPU_FREQ && X86_32 && EXPERIMENTAL]
    }
    config X86_LONGRUN tristate {
     prompt "Transmeta LongRun" if [CPU_FREQ && X86_32]
     depends on [X86_32]
     inherited [CPU_FREQ && X86_32]
    }
    config X86_LONGHAUL tristate {
     prompt "VIA Cyrix III Longhaul" if [CPU_FREQ && X86_32 && ACPI_PROCESSOR]
     select CPU_FREQ_TABLE if [CPU_FREQ && X86_32 && ACPI_PROCESSOR]
     depends on [X86_32 && ACPI_PROCESSOR]
     inherited [CPU_FREQ && X86_32 && ACPI_PROCESSOR]
    }
    config X86_E_POWERSAVER tristate {
     prompt "VIA C7 Enhanced PowerSaver (DANGEROUS)" if [CPU_FREQ && X86_32 && EXPERIMENTAL]
     select CPU_FREQ_TABLE if [CPU_FREQ && X86_32 && EXPERIMENTAL]
     depends on [X86_32 && EXPERIMENTAL]
     inherited [CPU_FREQ && X86_32 && EXPERIMENTAL]
    }
    config X86_SPEEDSTEP_LIB tristate {
     default [X86_SPEEDSTEP_ICH || X86_SPEEDSTEP_SMI || X86_P4_CLOCKMOD] if [CPU_FREQ]
     inherited [CPU_FREQ]
    }
    config X86_SPEEDSTEP_RELAXED_CAP_CHECK boolean {
     prompt "Relaxed speedstep capability checks" if [CPU_FREQ && X86_32 && (X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH)]
     depends on [X86_32 && (X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH)]
     inherited [CPU_FREQ && X86_32 && (X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH)]
    }
   }
  }
 }
 config CPU_IDLE boolean {
  prompt "CPU idle PM support" if []
  default [ACPI] if []
  config CPU_IDLE_GOV_LADDER boolean {
   depends on [CPU_IDLE]
   default [y] if [CPU_IDLE]
   inherited [CPU_IDLE]
  }
  config CPU_IDLE_GOV_MENU boolean {
   depends on [CPU_IDLE && NO_HZ]
   default [y] if [CPU_IDLE && NO_HZ]
   inherited [CPU_IDLE && NO_HZ]
  }
 }
 menu "Memory power savings" {
  depends on [X86_64]
  config I7300_IDLE_IOAT_CHANNEL boolean {
   inherited [X86_64]
  }
  config I7300_IDLE tristate {
   prompt "Intel chipset idle memory power saving driver" if [X86_64 && EXPERIMENTAL]
   select I7300_IDLE_IOAT_CHANNEL if [X86_64 && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   inherited [X86_64 && EXPERIMENTAL]
  }
 }
}
menu "Bus options (PCI etc.)" {
 config PCI boolean {
  prompt "PCI support" if []
  default [y] if []
  select ARCH_SUPPORTS_MSI if [X86_LOCAL_APIC && X86_IO_APIC]
  choice boolean {
   prompt "PCI access mode" if [X86_32 && PCI]
   depends on [X86_32 && PCI]
   default [PCI_GOANY] if [X86_32 && PCI]
   config PCI_GOBIOS boolean {
    prompt "BIOS" if [<choice>]
    inherited [<choice>]
   }
   config PCI_GOMMCONFIG boolean {
    prompt "MMConfig" if [<choice>]
    inherited [<choice>]
   }
   config PCI_GODIRECT boolean {
    prompt "Direct" if [<choice>]
    inherited [<choice>]
   }
   config PCI_GOOLPC boolean {
    prompt "OLPC" if [<choice> && OLPC]
    depends on [OLPC]
    inherited [<choice> && OLPC]
   }
   config PCI_GOANY boolean {
    prompt "Any" if [<choice>]
    inherited [<choice>]
   }
  }
  config PCI_BIOS boolean {
   default [y] if [X86_32 && PCI && (PCI_GOBIOS || PCI_GOANY)]
   depends on [X86_32 && PCI && (PCI_GOBIOS || PCI_GOANY)]
   inherited [X86_32 && PCI && (PCI_GOBIOS || PCI_GOANY)]
  }
  config PCI_DIRECT boolean {
   default [y] if [PCI && (X86_64 || PCI_GODIRECT || PCI_GOANY || PCI_GOOLPC)]
   depends on [PCI && (X86_64 || PCI_GODIRECT || PCI_GOANY || PCI_GOOLPC)]
   inherited [PCI && (X86_64 || PCI_GODIRECT || PCI_GOANY || PCI_GOOLPC)]
  }
  config PCI_MMCONFIG boolean {
   default [y] if [X86_32 && PCI && (ACPI || SFI) && (PCI_GOMMCONFIG || PCI_GOANY)]
   depends on [X86_32 && PCI && (ACPI || SFI) && (PCI_GOMMCONFIG || PCI_GOANY)]
   prompt "Support mmconfig PCI config space access" if [X86_64 && PCI && ACPI]
   depends on [X86_64 && PCI && ACPI]
   inherited [X86_32 && PCI && (ACPI || SFI) && (PCI_GOMMCONFIG || PCI_GOANY)]
  }
  config PCI_OLPC boolean {
   default [y] if [PCI && OLPC && (PCI_GOOLPC || PCI_GOANY)]
   depends on [PCI && OLPC && (PCI_GOOLPC || PCI_GOANY)]
   inherited [PCI && OLPC && (PCI_GOOLPC || PCI_GOANY)]
  }
  config PCI_DOMAINS boolean {
   default [y] if [PCI]
   depends on [PCI]
   inherited [PCI]
  }
  config PCI_MMCONFIG boolean {
   default [y] if [X86_32 && PCI && (ACPI || SFI) && (PCI_GOMMCONFIG || PCI_GOANY)]
   depends on [X86_32 && PCI && (ACPI || SFI) && (PCI_GOMMCONFIG || PCI_GOANY)]
   prompt "Support mmconfig PCI config space access" if [X86_64 && PCI && ACPI]
   depends on [X86_64 && PCI && ACPI]
   inherited [X86_64 && PCI && ACPI]
  }
 }
 config DMAR boolean {
  prompt "Support for DMA Remapping Devices (EXPERIMENTAL)" if [PCI_MSI && ACPI && EXPERIMENTAL]
  depends on [PCI_MSI && ACPI && EXPERIMENTAL]
  inherited [PCI_MSI && ACPI && EXPERIMENTAL]
  config DMAR_DEFAULT_ON boolean {
   default [y] if [DMAR]
   prompt "Enable DMA Remapping Devices by default" if [DMAR]
   depends on [DMAR]
   inherited [DMAR]
  }
  config DMAR_BROKEN_GFX_WA boolean {
   default [n] if [DMAR && BROKEN]
   prompt "Workaround broken graphics drivers (going away soon)" if [DMAR && BROKEN]
   depends on [DMAR && BROKEN]
   inherited [DMAR && BROKEN]
  }
  config DMAR_FLOPPY_WA boolean {
   default [y] if [DMAR]
   depends on [DMAR]
   inherited [DMAR]
  }
 }
 config INTR_REMAP boolean {
  prompt "Support for Interrupt Remapping (EXPERIMENTAL)" if [X86_64 && X86_IO_APIC && PCI_MSI && ACPI && EXPERIMENTAL]
  depends on [X86_64 && X86_IO_APIC && PCI_MSI && ACPI && EXPERIMENTAL]
  inherited [X86_64 && X86_IO_APIC && PCI_MSI && ACPI && EXPERIMENTAL]
 }
 config PCIEPORTBUS boolean {
  prompt "PCI Express support" if [PCI]
  depends on [PCI]
  inherited [PCI]
  config HOTPLUG_PCI_PCIE tristate {
   prompt "PCI Express Hotplug driver" if [HOTPLUG_PCI && PCIEPORTBUS]
   depends on [HOTPLUG_PCI && PCIEPORTBUS]
   inherited [HOTPLUG_PCI && PCIEPORTBUS]
  }
  config PCIEAER boolean {
   prompt "Root Port Advanced Error Reporting support" if [PCIEPORTBUS]
   depends on [PCIEPORTBUS]
   default [y] if [PCIEPORTBUS]
   inherited [PCIEPORTBUS]
   config PCIE_ECRC boolean {
    prompt "PCI Express ECRC settings control" if [PCIEAER]
    depends on [PCIEAER]
    inherited [PCIEAER]
   }
   config PCIEAER_INJECT tristate {
    prompt "PCIE AER error injector support" if [PCIEAER]
    depends on [PCIEAER]
    default [n] if [PCIEAER]
    inherited [PCIEAER]
   }
  }
  config PCIEASPM boolean {
   prompt "PCI Express ASPM support(Experimental)" if [PCI && EXPERIMENTAL && PCIEPORTBUS]
   depends on [PCI && EXPERIMENTAL && PCIEPORTBUS]
   default [n] if [PCI && EXPERIMENTAL && PCIEPORTBUS]
   inherited [PCI && EXPERIMENTAL && PCIEPORTBUS]
   config PCIEASPM_DEBUG boolean {
    prompt "Debug PCI Express ASPM" if [PCIEASPM]
    depends on [PCIEASPM]
    default [n] if [PCIEASPM]
    inherited [PCIEASPM]
   }
  }
 }
 config ARCH_SUPPORTS_MSI boolean {
  default [n] if []
 }
 config PCI_MSI boolean {
  prompt "Message Signaled Interrupts (MSI and MSI-X)" if [PCI && ARCH_SUPPORTS_MSI]
  depends on [PCI]
  depends on [ARCH_SUPPORTS_MSI]
  inherited [PCI && ARCH_SUPPORTS_MSI]
 }
 config PCI_LEGACY boolean {
  prompt "Enable deprecated pci_find_* API" if [PCI]
  depends on [PCI]
  default [y] if [PCI]
  inherited [PCI]
 }
 config PCI_DEBUG boolean {
  prompt "PCI Debugging" if [PCI && DEBUG_KERNEL]
  depends on [PCI && DEBUG_KERNEL]
  inherited [PCI && DEBUG_KERNEL]
 }
 config PCI_STUB tristate {
  prompt "PCI Stub driver" if [PCI]
  depends on [PCI]
  inherited [PCI]
 }
 config HT_IRQ boolean {
  prompt "Interrupts on hypertransport devices" if [PCI && X86_LOCAL_APIC && X86_IO_APIC]
  default [y] if [PCI && X86_LOCAL_APIC && X86_IO_APIC]
  depends on [PCI && X86_LOCAL_APIC && X86_IO_APIC]
  inherited [PCI && X86_LOCAL_APIC && X86_IO_APIC]
 }
 config PCI_IOV boolean {
  prompt "PCI IOV support" if [PCI]
  depends on [PCI]
  inherited [PCI]
 }
 config ISA_DMA_API boolean {
  default [y] if []
 }
 if [X86_32] {
  config ISA boolean {
   prompt "ISA support" if [X86_32]
   inherited [X86_32]
   config EISA boolean {
    prompt "EISA support" if [X86_32 && ISA]
    depends on [ISA]
    inherited [X86_32 && ISA]
    config EISA_VLB_PRIMING boolean {
     prompt "Vesa Local Bus priming" if [X86_32 && X86 && EISA]
     depends on [X86 && EISA]
     default [n] if [X86_32 && X86 && EISA]
     inherited [X86_32 && X86 && EISA]
    }
    config EISA_PCI_EISA boolean {
     prompt "Generic PCI/EISA bridge" if [X86_32 && !PARISC && PCI && EISA]
     depends on [!PARISC && PCI && EISA]
     default [y] if [X86_32 && !PARISC && PCI && EISA]
     inherited [X86_32 && !PARISC && PCI && EISA]
    }
    config EISA_VIRTUAL_ROOT boolean {
     prompt "EISA virtual root device" if [X86_32 && EISA && (ALPHA || X86)]
     depends on [EISA && (ALPHA || X86)]
     default [y] if [X86_32 && EISA && (ALPHA || X86)]
     inherited [X86_32 && EISA && (ALPHA || X86)]
    }
    config EISA_NAMES boolean {
     prompt "EISA device name database" if [X86_32 && EISA]
     depends on [EISA]
     default [y] if [X86_32 && EISA]
     inherited [X86_32 && EISA]
    }
   }
  }
  config MCA boolean {
   prompt "MCA support" if [X86_32]
   inherited [X86_32]
   config MCA_LEGACY boolean {
    prompt "Legacy MCA API Support" if [X86_32 && MCA]
    depends on [MCA]
    inherited [X86_32 && MCA]
    config MCA_PROC_FS boolean {
     prompt "Support for the mca entry in /proc" if [X86_32 && MCA_LEGACY && PROC_FS]
     depends on [MCA_LEGACY && PROC_FS]
     inherited [X86_32 && MCA_LEGACY && PROC_FS]
    }
   }
  }
  config SCx200 tristate {
   prompt "NatSemi SCx200 support" if [X86_32]
   inherited [X86_32]
   config SCx200HR_TIMER tristate {
    prompt "NatSemi SCx200 27MHz High-Resolution Timer Support" if [X86_32 && SCx200 && GENERIC_TIME]
    depends on [SCx200 && GENERIC_TIME]
    default [y] if [X86_32 && SCx200 && GENERIC_TIME]
    inherited [X86_32 && SCx200 && GENERIC_TIME]
   }
  }
  config GEODE_MFGPT_TIMER boolean {
   default [y] if [X86_32 && MGEODE_LX && GENERIC_TIME && GENERIC_CLOCKEVENTS]
   prompt "Geode Multi-Function General Purpose Timer (MFGPT) events" if [X86_32 && MGEODE_LX && GENERIC_TIME && GENERIC_CLOCKEVENTS]
   depends on [MGEODE_LX && GENERIC_TIME && GENERIC_CLOCKEVENTS]
   inherited [X86_32 && MGEODE_LX && GENERIC_TIME && GENERIC_CLOCKEVENTS]
  }
  config OLPC boolean {
   prompt "One Laptop Per Child support" if [X86_32]
   default [n] if [X86_32]
   inherited [X86_32]
  }
 }
 config K8_NB boolean {
  default [y] if [AGP_AMD64 || X86_64 && (GART_IOMMU || PCI && NUMA)]
  depends on [AGP_AMD64 || X86_64 && (GART_IOMMU || PCI && NUMA)]
  inherited [AGP_AMD64 || X86_64 && (GART_IOMMU || PCI && NUMA)]
 }
 menuconfig PCCARD tristate {
  prompt "PCCard (PCMCIA/CardBus) support" if [HOTPLUG]
  depends on [HOTPLUG]
  inherited [HOTPLUG]
  if [PCCARD] {
   config PCMCIA_DEBUG boolean {
    prompt "Enable PCCARD debugging" if [PCCARD]
    inherited [PCCARD]
   }
   config PCMCIA tristate {
    prompt "16-bit PCMCIA support" if [PCCARD]
    select CRC32 if [PCCARD]
    default [y] if [PCCARD]
    inherited [PCCARD]
    config PCMCIA_LOAD_CIS boolean {
     prompt "Load CIS updates from userspace (EXPERIMENTAL)" if [PCCARD && PCMCIA && EXPERIMENTAL]
     depends on [PCMCIA && EXPERIMENTAL]
     select FW_LOADER if [PCCARD && PCMCIA && EXPERIMENTAL]
     default [y] if [PCCARD && PCMCIA && EXPERIMENTAL]
     inherited [PCCARD && PCMCIA && EXPERIMENTAL]
    }
    config PCMCIA_IOCTL boolean {
     prompt "PCMCIA control ioctl (obsolete)" if [PCCARD && PCMCIA]
     depends on [PCMCIA]
     default [y] if [PCCARD && PCMCIA]
     inherited [PCCARD && PCMCIA]
    }
   }
   config CARDBUS boolean {
    prompt "32-bit CardBus support" if [PCCARD && PCI]
    depends on [PCI]
    default [y] if [PCCARD && PCI]
    inherited [PCCARD && PCI]
   }
   config YENTA tristate {
    prompt "CardBus yenta-compatible bridge support" if [PCCARD && PCI]
    depends on [PCI]
    select CARDBUS if [PCCARD && PCI && !EMBEDDED]
    select PCCARD_NONSTATIC if [PCCARD && PCI]
    inherited [PCCARD && PCI]
    config YENTA_O2 boolean {
     default [y] if [PCCARD && YENTA]
     prompt "Special initialization for O2Micro bridges" if [PCCARD && YENTA && EMBEDDED]
     depends on [YENTA]
     inherited [PCCARD && YENTA]
    }
    config YENTA_RICOH boolean {
     default [y] if [PCCARD && YENTA]
     prompt "Special initialization for Ricoh bridges" if [PCCARD && YENTA && EMBEDDED]
     depends on [YENTA]
     inherited [PCCARD && YENTA]
    }
    config YENTA_TI boolean {
     default [y] if [PCCARD && YENTA]
     prompt "Special initialization for TI and EnE bridges" if [PCCARD && YENTA && EMBEDDED]
     depends on [YENTA]
     inherited [PCCARD && YENTA]
     config YENTA_ENE_TUNE boolean {
      default [y] if [PCCARD && YENTA_TI && CARDBUS]
      prompt "Auto-tune EnE bridges for CB cards" if [PCCARD && YENTA_TI && CARDBUS && EMBEDDED]
      depends on [YENTA_TI && CARDBUS]
      inherited [PCCARD && YENTA_TI && CARDBUS]
     }
    }
    config YENTA_TOSHIBA boolean {
     default [y] if [PCCARD && YENTA]
     prompt "Special initialization for Toshiba ToPIC bridges" if [PCCARD && YENTA && EMBEDDED]
     depends on [YENTA]
     inherited [PCCARD && YENTA]
    }
   }
   config PD6729 tristate {
    prompt "Cirrus PD6729 compatible bridge support" if [PCCARD && PCMCIA && PCI]
    depends on [PCMCIA && PCI]
    select PCCARD_NONSTATIC if [PCCARD && PCMCIA && PCI]
    inherited [PCCARD && PCMCIA && PCI]
   }
   config I82092 tristate {
    prompt "i82092 compatible bridge support" if [PCCARD && PCMCIA && PCI]
    depends on [PCMCIA && PCI]
    select PCCARD_NONSTATIC if [PCCARD && PCMCIA && PCI]
    inherited [PCCARD && PCMCIA && PCI]
   }
   config I82365 tristate {
    prompt "i82365 compatible bridge support" if [PCCARD && PCMCIA && ISA]
    depends on [PCMCIA && ISA]
    select PCCARD_NONSTATIC if [PCCARD && PCMCIA && ISA]
    inherited [PCCARD && PCMCIA && ISA]
   }
   config TCIC tristate {
    prompt "Databook TCIC host bridge support" if [PCCARD && PCMCIA && ISA]
    depends on [PCMCIA && ISA]
    select PCCARD_NONSTATIC if [PCCARD && PCMCIA && ISA]
    inherited [PCCARD && PCMCIA && ISA]
   }
   config PCMCIA_M8XX tristate {
    prompt "MPC8xx PCMCIA support" if [PCCARD && PCMCIA && PPC && 8xx]
    depends on [PCMCIA && PPC && 8xx]
    select PCCARD_IODYN if [PCCARD && PCMCIA && PPC && 8xx]
    select PCCARD_NONSTATIC if [PCCARD && PCMCIA && PPC && 8xx]
    inherited [PCCARD && PCMCIA && PPC && 8xx]
   }
   config PCMCIA_AU1X00 tristate {
    prompt "Au1x00 pcmcia support" if [PCCARD && SOC_AU1X00 && PCMCIA]
    depends on [SOC_AU1X00 && PCMCIA]
    inherited [PCCARD && SOC_AU1X00 && PCMCIA]
   }
   config PCMCIA_BCM63XX tristate {
    prompt "bcm63xx pcmcia support" if [PCCARD && BCM63XX && PCMCIA]
    depends on [BCM63XX && PCMCIA]
    inherited [PCCARD && BCM63XX && PCMCIA]
   }
   config PCMCIA_SA1100 tristate {
    prompt "SA1100 support" if [PCCARD && ARM && ARCH_SA1100 && PCMCIA]
    depends on [ARM && ARCH_SA1100 && PCMCIA]
    inherited [PCCARD && ARM && ARCH_SA1100 && PCMCIA]
   }
   config PCMCIA_SA1111 tristate {
    prompt "SA1111 support" if [PCCARD && ARM && ARCH_SA1100 && SA1111 && PCMCIA]
    depends on [ARM && ARCH_SA1100 && SA1111 && PCMCIA]
    inherited [PCCARD && ARM && ARCH_SA1100 && SA1111 && PCMCIA]
   }
   config PCMCIA_PXA2XX tristate {
    prompt "PXA2xx support" if [PCCARD && ARM && ARCH_PXA && PCMCIA && (ARCH_LUBBOCK || MACH_MAINSTONE || PXA_SHARPSL || MACH_ARMCORE || ARCH_PXA_PALM || TRIZEPS_PCMCIA || ARCH_VIPER || ARCH_PXA_ESERIES || MACH_STARGATE2)]
    depends on [ARM && ARCH_PXA && PCMCIA]
    depends on [ARCH_LUBBOCK || MACH_MAINSTONE || PXA_SHARPSL || MACH_ARMCORE || ARCH_PXA_PALM || TRIZEPS_PCMCIA || ARCH_VIPER || ARCH_PXA_ESERIES || MACH_STARGATE2]
    inherited [PCCARD && ARM && ARCH_PXA && PCMCIA && (ARCH_LUBBOCK || MACH_MAINSTONE || PXA_SHARPSL || MACH_ARMCORE || ARCH_PXA_PALM || TRIZEPS_PCMCIA || ARCH_VIPER || ARCH_PXA_ESERIES || MACH_STARGATE2)]
   }
   config PCMCIA_PROBE boolean {
    default [y] if [PCCARD && ISA && !ARCH_SA1100 && !ARCH_CLPS711X && !PARISC]
    inherited [PCCARD]
   }
   config M32R_PCC boolean {
    prompt "M32R PCMCIA I/F" if [PCCARD && M32R && CHIP_M32700 && PCMCIA]
    depends on [M32R && CHIP_M32700 && PCMCIA]
    select PCCARD_NONSTATIC if [PCCARD && M32R && CHIP_M32700 && PCMCIA]
    inherited [PCCARD && M32R && CHIP_M32700 && PCMCIA]
   }
   config M32R_CFC boolean {
    prompt "M32R CF I/F Controller" if [PCCARD && M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
    depends on [M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
    select PCCARD_NONSTATIC if [PCCARD && M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
    inherited [PCCARD && M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
    config M32R_CFC_NUM integer {
     prompt "M32R CF I/F number" if [PCCARD && M32R_CFC]
     depends on [M32R_CFC]
     default [1] if [PCCARD && M32R_CFC && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
     inherited [PCCARD && M32R_CFC]
    }
   }
   config PCMCIA_VRC4171 tristate {
    prompt "NEC VRC4171 Card Controllers support" if [PCCARD && CPU_VR41XX && ISA && PCMCIA]
    depends on [CPU_VR41XX && ISA && PCMCIA]
    inherited [PCCARD && CPU_VR41XX && ISA && PCMCIA]
   }
   config PCMCIA_VRC4173 tristate {
    prompt "NEC VRC4173 CARDU support" if [PCCARD && CPU_VR41XX && PCI && PCMCIA]
    depends on [CPU_VR41XX && PCI && PCMCIA]
    inherited [PCCARD && CPU_VR41XX && PCI && PCMCIA]
   }
   config OMAP_CF tristate {
    prompt "OMAP CompactFlash Controller" if [PCCARD && PCMCIA && ARCH_OMAP16XX]
    depends on [PCMCIA && ARCH_OMAP16XX]
    inherited [PCCARD && PCMCIA && ARCH_OMAP16XX]
   }
   config BFIN_CFPCMCIA tristate {
    prompt "Blackfin CompactFlash PCMCIA Driver" if [PCCARD && PCMCIA && BLACKFIN]
    depends on [PCMCIA && BLACKFIN]
    inherited [PCCARD && PCMCIA && BLACKFIN]
   }
   config AT91_CF tristate {
    prompt "AT91 CompactFlash Controller" if [PCCARD && PCMCIA && ARCH_AT91RM9200]
    depends on [PCMCIA && ARCH_AT91RM9200]
    inherited [PCCARD && PCMCIA && ARCH_AT91RM9200]
   }
   config ELECTRA_CF tristate {
    prompt "Electra CompactFlash Controller" if [PCCARD && PCMCIA && PPC_PASEMI]
    depends on [PCMCIA && PPC_PASEMI]
    inherited [PCCARD && PCMCIA && PPC_PASEMI]
   }
   config PCCARD_NONSTATIC tristate {
    inherited [PCCARD]
   }
   config PCCARD_IODYN boolean {
    inherited [PCCARD]
   }
  }
 }
 menuconfig HOTPLUG_PCI tristate {
  prompt "Support for PCI Hotplug" if [PCI && HOTPLUG && SYSFS]
  depends on [PCI && HOTPLUG && SYSFS]
  inherited [PCI && HOTPLUG && SYSFS]
  if [HOTPLUG_PCI] {
   config HOTPLUG_PCI_FAKE tristate {
    prompt "Fake PCI Hotplug driver" if [HOTPLUG_PCI]
    inherited [HOTPLUG_PCI]
   }
   config HOTPLUG_PCI_COMPAQ tristate {
    prompt "Compaq PCI Hotplug driver" if [HOTPLUG_PCI && X86 && PCI_BIOS]
    depends on [X86 && PCI_BIOS]
    inherited [HOTPLUG_PCI && X86 && PCI_BIOS]
    config HOTPLUG_PCI_COMPAQ_NVRAM boolean {
     prompt "Save configuration into NVRAM on Compaq servers" if [HOTPLUG_PCI && HOTPLUG_PCI_COMPAQ]
     depends on [HOTPLUG_PCI_COMPAQ]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_COMPAQ]
    }
   }
   config HOTPLUG_PCI_IBM tristate {
    prompt "IBM PCI Hotplug driver" if [HOTPLUG_PCI && X86_IO_APIC && X86 && PCI_BIOS]
    depends on [X86_IO_APIC && X86 && PCI_BIOS]
    inherited [HOTPLUG_PCI && X86_IO_APIC && X86 && PCI_BIOS]
   }
   config HOTPLUG_PCI_ACPI tristate {
    prompt "ACPI PCI Hotplug driver" if [HOTPLUG_PCI && (!ACPI_DOCK && ACPI || ACPI_DOCK)]
    depends on [!ACPI_DOCK && ACPI || ACPI_DOCK]
    inherited [HOTPLUG_PCI && (!ACPI_DOCK && ACPI || ACPI_DOCK)]
    config HOTPLUG_PCI_ACPI_IBM tristate {
     prompt "ACPI PCI Hotplug driver IBM extensions" if [HOTPLUG_PCI && HOTPLUG_PCI_ACPI]
     depends on [HOTPLUG_PCI_ACPI]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_ACPI]
    }
   }
   config HOTPLUG_PCI_CPCI boolean {
    prompt "CompactPCI Hotplug driver" if [HOTPLUG_PCI]
    inherited [HOTPLUG_PCI]
    config HOTPLUG_PCI_CPCI_ZT5550 tristate {
     prompt "Ziatech ZT5550 CompactPCI Hotplug driver" if [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
     depends on [HOTPLUG_PCI_CPCI && X86]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
    }
    config HOTPLUG_PCI_CPCI_GENERIC tristate {
     prompt "Generic port I/O CompactPCI Hotplug driver" if [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
     depends on [HOTPLUG_PCI_CPCI && X86]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
    }
   }
   config HOTPLUG_PCI_SHPC tristate {
    prompt "SHPC PCI Hotplug driver" if [HOTPLUG_PCI]
    inherited [HOTPLUG_PCI]
   }
   config HOTPLUG_PCI_RPA tristate {
    prompt "RPA PCI Hotplug driver" if [HOTPLUG_PCI && PPC_PSERIES && EEH && !HOTPLUG_PCI_FAKE]
    depends on [PPC_PSERIES && EEH && !HOTPLUG_PCI_FAKE]
    inherited [HOTPLUG_PCI && PPC_PSERIES && EEH && !HOTPLUG_PCI_FAKE]
    config HOTPLUG_PCI_RPA_DLPAR tristate {
     prompt "RPA Dynamic Logical Partitioning for I/O slots" if [HOTPLUG_PCI && HOTPLUG_PCI_RPA]
     depends on [HOTPLUG_PCI_RPA]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_RPA]
    }
   }
   config HOTPLUG_PCI_SGI tristate {
    prompt "SGI PCI Hotplug Support" if [HOTPLUG_PCI && (IA64_SGI_SN2 || IA64_GENERIC)]
    depends on [IA64_SGI_SN2 || IA64_GENERIC]
    inherited [HOTPLUG_PCI && (IA64_SGI_SN2 || IA64_GENERIC)]
   }
  }
 }
}
menu "Executable file formats / Emulations" {
 config BINFMT_ELF boolean {
  prompt "Kernel support for ELF binaries" if [MMU && (BROKEN || !FRV)]
  depends on [MMU && (BROKEN || !FRV)]
  default [y] if [MMU && (BROKEN || !FRV)]
  inherited [MMU && (BROKEN || !FRV)]
  config COMPAT_BINFMT_ELF boolean {
   depends on [COMPAT && BINFMT_ELF]
   inherited [COMPAT && BINFMT_ELF]
  }
 }
 config BINFMT_ELF_FDPIC boolean {
  prompt "Kernel support for FDPIC ELF binaries" if [FRV || BLACKFIN || SUPERH32 && !MMU]
  default [y] if [FRV || BLACKFIN || SUPERH32 && !MMU]
  depends on [FRV || BLACKFIN || SUPERH32 && !MMU]
  inherited [FRV || BLACKFIN || SUPERH32 && !MMU]
 }
 config CORE_DUMP_DEFAULT_ELF_HEADERS boolean {
  prompt "Write ELF core dumps with partial segments" if [BINFMT_ELF && ELF_CORE]
  default [n] if [BINFMT_ELF && ELF_CORE]
  depends on [BINFMT_ELF && ELF_CORE]
  inherited [BINFMT_ELF && ELF_CORE]
 }
 config BINFMT_FLAT boolean {
  prompt "Kernel support for flat binaries" if [!MMU && (!FRV || BROKEN)]
  depends on [!MMU && (!FRV || BROKEN)]
  inherited [!MMU && (!FRV || BROKEN)]
  config BINFMT_ZFLAT boolean {
   prompt "Enable ZFLAT support" if [BINFMT_FLAT]
   depends on [BINFMT_FLAT]
   select ZLIB_INFLATE if [BINFMT_FLAT]
   inherited [BINFMT_FLAT]
  }
  config BINFMT_SHARED_FLAT boolean {
   prompt "Enable shared FLAT support" if [BINFMT_FLAT]
   depends on [BINFMT_FLAT]
   inherited [BINFMT_FLAT]
  }
 }
 config HAVE_AOUT boolean {
  default [n] if []
 }
 config BINFMT_AOUT tristate {
  prompt "Kernel support for a.out and ECOFF binaries" if [HAVE_AOUT]
  depends on [HAVE_AOUT]
  inherited [HAVE_AOUT]
  config OSF4_COMPAT boolean {
   prompt "OSF/1 v4 readv/writev compatibility" if [ALPHA && BINFMT_AOUT]
   depends on [ALPHA && BINFMT_AOUT]
   inherited [ALPHA && BINFMT_AOUT]
  }
 }
 config BINFMT_EM86 tristate {
  prompt "Kernel support for Linux/Intel ELF binaries" if [ALPHA]
  depends on [ALPHA]
  inherited [ALPHA]
 }
 config BINFMT_SOM tristate {
  prompt "Kernel support for SOM binaries" if [PARISC && HPUX]
  depends on [PARISC && HPUX]
  inherited [PARISC && HPUX]
 }
 config BINFMT_MISC tristate {
  prompt "Kernel support for MISC binaries" if []
 }
 config IA32_EMULATION boolean {
  prompt "IA32 Emulation" if [X86_64]
  depends on [X86_64]
  select COMPAT_BINFMT_ELF if [X86_64]
  inherited [X86_64]
  config IA32_AOUT tristate {
   prompt "IA32 a.out support" if [IA32_EMULATION]
   depends on [IA32_EMULATION]
   inherited [IA32_EMULATION]
  }
  config COMPAT boolean {
   default [y] if [IA32_EMULATION]
   depends on [IA32_EMULATION]
   inherited [IA32_EMULATION]
  }
 }
 config COMPAT_FOR_U64_ALIGNMENT boolean {
  default [COMPAT] if [X86_64]
  depends on [X86_64]
  inherited [X86_64]
 }
 config SYSVIPC_COMPAT boolean {
  default [y] if [COMPAT && SYSVIPC]
  depends on [COMPAT && SYSVIPC]
  inherited [COMPAT && SYSVIPC]
 }
}
config HAVE_ATOMIC_IOMAP boolean {
 default [y] if [X86_32]
 depends on [X86_32]
 inherited [X86_32]
}
menuconfig NET boolean {
 prompt "Networking support" if []
 select NLATTR if []
 if [NET] {
  config WANT_COMPAT_NETLINK_MESSAGES boolean {
   inherited [NET]
  }
  config COMPAT_NETLINK_MESSAGES boolean {
   default [y] if [NET && COMPAT && (WIRELESS_EXT || WANT_COMPAT_NETLINK_MESSAGES)]
   depends on [COMPAT]
   depends on [WIRELESS_EXT || WANT_COMPAT_NETLINK_MESSAGES]
   inherited [NET && COMPAT && (WIRELESS_EXT || WANT_COMPAT_NETLINK_MESSAGES)]
  }
  menu "Networking options" {
   depends on [NET]
   config PACKET tristate {
    prompt "Packet socket" if [NET]
    inherited [NET]
    config PACKET_MMAP boolean {
     prompt "Packet socket: mmapped IO" if [NET && PACKET]
     depends on [PACKET]
     inherited [NET && PACKET]
    }
   }
   config UNIX tristate {
    prompt "Unix domain sockets" if [NET]
    inherited [NET]
   }
   config XFRM boolean {
    select CRYPTO if [NET]
    depends on [NET]
    inherited [NET]
   }
   config XFRM_USER tristate {
    prompt "Transformation user configuration interface" if [NET && INET && XFRM]
    depends on [INET && XFRM]
    inherited [NET && INET && XFRM]
   }
   config XFRM_SUB_POLICY boolean {
    prompt "Transformation sub policy support (EXPERIMENTAL)" if [NET && XFRM && EXPERIMENTAL]
    depends on [XFRM && EXPERIMENTAL]
    inherited [NET && XFRM && EXPERIMENTAL]
   }
   config XFRM_MIGRATE boolean {
    prompt "Transformation migrate database (EXPERIMENTAL)" if [NET && XFRM && EXPERIMENTAL]
    depends on [XFRM && EXPERIMENTAL]
    inherited [NET && XFRM && EXPERIMENTAL]
   }
   config XFRM_STATISTICS boolean {
    prompt "Transformation statistics (EXPERIMENTAL)" if [NET && INET && XFRM && PROC_FS && EXPERIMENTAL]
    depends on [INET && XFRM && PROC_FS && EXPERIMENTAL]
    inherited [NET && INET && XFRM && PROC_FS && EXPERIMENTAL]
   }
   config XFRM_IPCOMP tristate {
    select XFRM if [NET]
    select CRYPTO if [NET]
    select CRYPTO_DEFLATE if [NET]
    inherited [NET]
   }
   config NET_KEY tristate {
    prompt "PF_KEY sockets" if [NET]
    select XFRM if [NET]
    inherited [NET]
    config NET_KEY_MIGRATE boolean {
     prompt "PF_KEY MIGRATE (EXPERIMENTAL)" if [NET && NET_KEY && EXPERIMENTAL]
     depends on [NET_KEY && EXPERIMENTAL]
     select XFRM_MIGRATE if [NET && NET_KEY && EXPERIMENTAL]
     inherited [NET && NET_KEY && EXPERIMENTAL]
    }
   }
   config IUCV tristate {
    prompt "IUCV support (S390 - z/VM only)" if [NET && S390]
    depends on [S390]
    inherited [NET && S390]
    config AFIUCV tristate {
     prompt "AF_IUCV support (S390 - z/VM only)" if [NET && IUCV]
     depends on [IUCV]
     inherited [NET && IUCV]
    }
   }
   config INET boolean {
    prompt "TCP/IP networking" if [NET]
    inherited [NET]
    if [NET && INET] {
     config IP_MULTICAST boolean {
      prompt "IP: multicasting" if [NET && INET]
      inherited [NET && INET]
     }
     config IP_ADVANCED_ROUTER boolean {
      prompt "IP: advanced router" if [NET && INET]
      inherited [NET && INET]
      choice boolean {
       prompt "Choose IP: FIB lookup algorithm (choose FIB_HASH if unsure)" if [NET && INET && IP_ADVANCED_ROUTER]
       depends on [IP_ADVANCED_ROUTER]
       default [ASK_IP_FIB_HASH] if [NET && INET && IP_ADVANCED_ROUTER]
       config ASK_IP_FIB_HASH boolean {
        prompt "FIB_HASH" if [<choice>]
        inherited [<choice>]
       }
       config IP_FIB_TRIE boolean {
        prompt "FIB_TRIE" if [<choice>]
        inherited [<choice>]
       }
      }
     }
     config IP_FIB_HASH boolean {
      default [ASK_IP_FIB_HASH || !IP_ADVANCED_ROUTER] if [NET && INET]
      inherited [NET && INET]
     }
     config IP_FIB_TRIE_STATS boolean {
      prompt "FIB TRIE statistics" if [NET && INET && IP_FIB_TRIE]
      depends on [IP_FIB_TRIE]
      inherited [NET && INET && IP_FIB_TRIE]
     }
     config IP_MULTIPLE_TABLES boolean {
      prompt "IP: policy routing" if [NET && INET && IP_ADVANCED_ROUTER]
      depends on [IP_ADVANCED_ROUTER]
      select FIB_RULES if [NET && INET && IP_ADVANCED_ROUTER]
      inherited [NET && INET && IP_ADVANCED_ROUTER]
     }
     config IP_ROUTE_MULTIPATH boolean {
      prompt "IP: equal cost multipath" if [NET && INET && IP_ADVANCED_ROUTER]
      depends on [IP_ADVANCED_ROUTER]
      inherited [NET && INET && IP_ADVANCED_ROUTER]
     }
     config IP_ROUTE_VERBOSE boolean {
      prompt "IP: verbose route monitoring" if [NET && INET && IP_ADVANCED_ROUTER]
      depends on [IP_ADVANCED_ROUTER]
      inherited [NET && INET && IP_ADVANCED_ROUTER]
     }
     config IP_PNP boolean {
      prompt "IP: kernel level autoconfiguration" if [NET && INET]
      inherited [NET && INET]
      config IP_PNP_DHCP boolean {
       prompt "IP: DHCP support" if [NET && INET && IP_PNP]
       depends on [IP_PNP]
       inherited [NET && INET && IP_PNP]
      }
      config IP_PNP_BOOTP boolean {
       prompt "IP: BOOTP support" if [NET && INET && IP_PNP]
       depends on [IP_PNP]
       inherited [NET && INET && IP_PNP]
      }
      config IP_PNP_RARP boolean {
       prompt "IP: RARP support" if [NET && INET && IP_PNP]
       depends on [IP_PNP]
       inherited [NET && INET && IP_PNP]
      }
     }
     config NET_IPIP tristate {
      prompt "IP: tunneling" if [NET && INET]
      select INET_TUNNEL if [NET && INET]
      inherited [NET && INET]
     }
     config NET_IPGRE tristate {
      prompt "IP: GRE tunnels over IP" if [NET && INET]
      inherited [NET && INET]
      config NET_IPGRE_BROADCAST boolean {
       prompt "IP: broadcast GRE over IP" if [NET && INET && IP_MULTICAST && NET_IPGRE]
       depends on [IP_MULTICAST && NET_IPGRE]
       inherited [NET && INET && IP_MULTICAST && NET_IPGRE]
      }
     }
     config IP_MROUTE boolean {
      prompt "IP: multicast routing" if [NET && INET && IP_MULTICAST]
      depends on [IP_MULTICAST]
      inherited [NET && INET && IP_MULTICAST]
      config IP_PIMSM_V1 boolean {
       prompt "IP: PIM-SM version 1 support" if [NET && INET && IP_MROUTE]
       depends on [IP_MROUTE]
       inherited [NET && INET && IP_MROUTE]
      }
      config IP_PIMSM_V2 boolean {
       prompt "IP: PIM-SM version 2 support" if [NET && INET && IP_MROUTE]
       depends on [IP_MROUTE]
       inherited [NET && INET && IP_MROUTE]
      }
     }
     config ARPD boolean {
      prompt "IP: ARP daemon support" if [NET && INET]
      inherited [NET && INET]
     }
     config SYN_COOKIES boolean {
      prompt "IP: TCP syncookie support (disabled per default)" if [NET && INET]
      inherited [NET && INET]
     }
     config INET_AH tristate {
      prompt "IP: AH transformation" if [NET && INET]
      select XFRM if [NET && INET]
      select CRYPTO if [NET && INET]
      select CRYPTO_HMAC if [NET && INET]
      select CRYPTO_MD5 if [NET && INET]
      select CRYPTO_SHA1 if [NET && INET]
      inherited [NET && INET]
     }
     config INET_ESP tristate {
      prompt "IP: ESP transformation" if [NET && INET]
      select XFRM if [NET && INET]
      select CRYPTO if [NET && INET]
      select CRYPTO_AUTHENC if [NET && INET]
      select CRYPTO_HMAC if [NET && INET]
      select CRYPTO_MD5 if [NET && INET]
      select CRYPTO_CBC if [NET && INET]
      select CRYPTO_SHA1 if [NET && INET]
      select CRYPTO_DES if [NET && INET]
      inherited [NET && INET]
     }
     config INET_IPCOMP tristate {
      prompt "IP: IPComp transformation" if [NET && INET]
      select INET_XFRM_TUNNEL if [NET && INET]
      select XFRM_IPCOMP if [NET && INET]
      inherited [NET && INET]
     }
     config INET_XFRM_TUNNEL tristate {
      select INET_TUNNEL if [NET && INET]
      default [n] if [NET && INET]
      inherited [NET && INET]
     }
     config INET_TUNNEL tristate {
      default [n] if [NET && INET]
      inherited [NET && INET]
     }
     config INET_XFRM_MODE_TRANSPORT tristate {
      prompt "IP: IPsec transport mode" if [NET && INET]
      default [y] if [NET && INET]
      select XFRM if [NET && INET]
      inherited [NET && INET]
     }
     config INET_XFRM_MODE_TUNNEL tristate {
      prompt "IP: IPsec tunnel mode" if [NET && INET]
      default [y] if [NET && INET]
      select XFRM if [NET && INET]
      inherited [NET && INET]
     }
     config INET_XFRM_MODE_BEET tristate {
      prompt "IP: IPsec BEET mode" if [NET && INET]
      default [y] if [NET && INET]
      select XFRM if [NET && INET]
      inherited [NET && INET]
     }
     config INET_LRO boolean {
      prompt "Large Receive Offload (ipv4/tcp)" if [NET && INET]
      default [y] if [NET && INET]
      inherited [NET && INET]
     }
     config INET_DIAG tristate {
      prompt "INET: socket monitoring interface" if [NET && INET]
      default [y] if [NET && INET]
      inherited [NET && INET]
      config INET_TCP_DIAG tristate {
       depends on [INET_DIAG]
       default [INET_DIAG] if [NET && INET && INET_DIAG]
       inherited [NET && INET && INET_DIAG]
      }
     }
     menuconfig TCP_CONG_ADVANCED boolean {
      prompt "TCP: advanced congestion control" if [NET && INET]
      inherited [NET && INET]
      if [NET && INET && TCP_CONG_ADVANCED] {
       config TCP_CONG_BIC tristate {
        prompt "Binary Increase Congestion (BIC) control" if [NET && INET && TCP_CONG_ADVANCED]
        default [m] if [NET && INET && TCP_CONG_ADVANCED]
        inherited [NET && INET && TCP_CONG_ADVANCED]
       }
       config TCP_CONG_CUBIC tristate {
        prompt "CUBIC TCP" if [NET && INET && TCP_CONG_ADVANCED]
        default [y] if [NET && INET && TCP_CONG_ADVANCED]
        depends on [!TCP_CONG_ADVANCED]
        default [y] if [NET && INET && !TCP_CONG_ADVANCED]
        inherited [NET && INET && TCP_CONG_ADVANCED]
       }
       config TCP_CONG_WESTWOOD tristate {
        prompt "TCP Westwood+" if [NET && INET && TCP_CONG_ADVANCED]
        default [m] if [NET && INET && TCP_CONG_ADVANCED]
        inherited [NET && INET && TCP_CONG_ADVANCED]
       }
       config TCP_CONG_HTCP tristate {
        prompt "H-TCP" if [NET && INET && TCP_CONG_ADVANCED]
        default [m] if [NET && INET && TCP_CONG_ADVANCED]
        inherited [NET && INET && TCP_CONG_ADVANCED]
       }
       config TCP_CONG_HSTCP tristate {
        prompt "High Speed TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_HYBLA tristate {
        prompt "TCP-Hybla congestion control algorithm" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_VEGAS tristate {
        prompt "TCP Vegas" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_SCALABLE tristate {
        prompt "Scalable TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_LP tristate {
        prompt "TCP Low Priority" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_VENO tristate {
        prompt "TCP Veno" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_YEAH tristate {
        prompt "YeAH TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        select TCP_CONG_VEGAS if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_ILLINOIS tristate {
        prompt "TCP Illinois" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       choice boolean {
        prompt "Default TCP congestion control" if [NET && INET && TCP_CONG_ADVANCED]
        default [DEFAULT_CUBIC] if [NET && INET && TCP_CONG_ADVANCED]
        config DEFAULT_BIC boolean {
         prompt "Bic" if [<choice> && TCP_CONG_BIC="y"]
         inherited [<choice>]
        }
        config DEFAULT_CUBIC boolean {
         prompt "Cubic" if [<choice> && TCP_CONG_CUBIC="y"]
         inherited [<choice>]
        }
        config DEFAULT_HTCP boolean {
         prompt "Htcp" if [<choice> && TCP_CONG_HTCP="y"]
         inherited [<choice>]
        }
        config DEFAULT_VEGAS boolean {
         prompt "Vegas" if [<choice> && TCP_CONG_VEGAS="y"]
         inherited [<choice>]
        }
        config DEFAULT_WESTWOOD boolean {
         prompt "Westwood" if [<choice> && TCP_CONG_WESTWOOD="y"]
         inherited [<choice>]
        }
        config DEFAULT_RENO boolean {
         prompt "Reno" if [<choice>]
         inherited [<choice>]
        }
       }
      }
      config TCP_CONG_CUBIC tristate {
       prompt "CUBIC TCP" if [NET && INET && TCP_CONG_ADVANCED]
       default [y] if [NET && INET && TCP_CONG_ADVANCED]
       depends on [!TCP_CONG_ADVANCED]
       default [y] if [NET && INET && !TCP_CONG_ADVANCED]
       inherited [NET && INET && !TCP_CONG_ADVANCED]
      }
     }
     config DEFAULT_TCP_CONG string {
      default ["bic"] if [NET && INET && DEFAULT_BIC]
      default ["cubic"] if [NET && INET && DEFAULT_CUBIC]
      default ["htcp"] if [NET && INET && DEFAULT_HTCP]
      default ["vegas"] if [NET && INET && DEFAULT_VEGAS]
      default ["westwood"] if [NET && INET && DEFAULT_WESTWOOD]
      default ["reno"] if [NET && INET && DEFAULT_RENO]
      default ["cubic"] if [NET && INET]
      inherited [NET && INET]
     }
     config TCP_MD5SIG boolean {
      prompt "TCP: MD5 Signature Option support (RFC2385) (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      select CRYPTO if [NET && INET && EXPERIMENTAL]
      select CRYPTO_MD5 if [NET && INET && EXPERIMENTAL]
      inherited [NET && INET && EXPERIMENTAL]
     }
     menuconfig IPV6 tristate {
      prompt "The IPv6 protocol" if [NET && INET]
      default [m] if [NET && INET]
      inherited [NET && INET]
      if [NET && INET && IPV6] {
       config IPV6_PRIVACY boolean {
        prompt "IPv6: Privacy Extensions (RFC 3041) support" if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_ROUTER_PREF boolean {
        prompt "IPv6: Router Preference (RFC 4191) support" if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
        config IPV6_ROUTE_INFO boolean {
         prompt "IPv6: Route Information (RFC 4191) support (EXPERIMENTAL)" if [NET && INET && IPV6 && IPV6_ROUTER_PREF && EXPERIMENTAL]
         depends on [IPV6_ROUTER_PREF && EXPERIMENTAL]
         inherited [NET && INET && IPV6 && IPV6_ROUTER_PREF && EXPERIMENTAL]
        }
       }
       config IPV6_OPTIMISTIC_DAD boolean {
        prompt "IPv6: Enable RFC 4429 Optimistic DAD (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
       }
       config INET6_AH tristate {
        prompt "IPv6: AH transformation" if [NET && INET && IPV6]
        select XFRM if [NET && INET && IPV6]
        select CRYPTO if [NET && INET && IPV6]
        select CRYPTO_HMAC if [NET && INET && IPV6]
        select CRYPTO_MD5 if [NET && INET && IPV6]
        select CRYPTO_SHA1 if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_ESP tristate {
        prompt "IPv6: ESP transformation" if [NET && INET && IPV6]
        select XFRM if [NET && INET && IPV6]
        select CRYPTO if [NET && INET && IPV6]
        select CRYPTO_AUTHENC if [NET && INET && IPV6]
        select CRYPTO_HMAC if [NET && INET && IPV6]
        select CRYPTO_MD5 if [NET && INET && IPV6]
        select CRYPTO_CBC if [NET && INET && IPV6]
        select CRYPTO_SHA1 if [NET && INET && IPV6]
        select CRYPTO_DES if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_IPCOMP tristate {
        prompt "IPv6: IPComp transformation" if [NET && INET && IPV6]
        select INET6_XFRM_TUNNEL if [NET && INET && IPV6]
        select XFRM_IPCOMP if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_MIP6 tristate {
        prompt "IPv6: Mobility (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        select XFRM if [NET && INET && IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
       }
       config INET6_XFRM_TUNNEL tristate {
        select INET6_TUNNEL if [NET && INET && IPV6]
        default [n] if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_TUNNEL tristate {
        default [n] if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_XFRM_MODE_TRANSPORT tristate {
        prompt "IPv6: IPsec transport mode" if [NET && INET && IPV6]
        default [IPV6] if [NET && INET && IPV6]
        select XFRM if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_XFRM_MODE_TUNNEL tristate {
        prompt "IPv6: IPsec tunnel mode" if [NET && INET && IPV6]
        default [IPV6] if [NET && INET && IPV6]
        select XFRM if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_XFRM_MODE_BEET tristate {
        prompt "IPv6: IPsec BEET mode" if [NET && INET && IPV6]
        default [IPV6] if [NET && INET && IPV6]
        select XFRM if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_XFRM_MODE_ROUTEOPTIMIZATION tristate {
        prompt "IPv6: MIPv6 route optimization mode (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        select XFRM if [NET && INET && IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
       }
       config IPV6_SIT tristate {
        prompt "IPv6: IPv6-in-IPv4 tunnel (SIT driver)" if [NET && INET && IPV6]
        select INET_TUNNEL if [NET && INET && IPV6]
        select IPV6_NDISC_NODETYPE if [NET && INET && IPV6]
        default [y] if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_NDISC_NODETYPE boolean {
        inherited [NET && INET && IPV6]
       }
       config IPV6_TUNNEL tristate {
        prompt "IPv6: IP-in-IPv6 tunnel (RFC2473)" if [NET && INET && IPV6]
        select INET6_TUNNEL if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_MULTIPLE_TABLES boolean {
        prompt "IPv6: Multiple Routing Tables" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        select FIB_RULES if [NET && INET && IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
        config IPV6_SUBTREES boolean {
         prompt "IPv6: source address based routing" if [NET && INET && IPV6 && IPV6_MULTIPLE_TABLES]
         depends on [IPV6_MULTIPLE_TABLES]
         inherited [NET && INET && IPV6 && IPV6_MULTIPLE_TABLES]
        }
       }
       config IPV6_MROUTE boolean {
        prompt "IPv6: multicast routing (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
        config IPV6_PIMSM_V2 boolean {
         prompt "IPv6: PIM-SM version 2 support (EXPERIMENTAL)" if [NET && INET && IPV6 && IPV6_MROUTE]
         depends on [IPV6_MROUTE]
         inherited [NET && INET && IPV6 && IPV6_MROUTE]
        }
       }
      }
     }
     config NETLABEL boolean {
      prompt "NetLabel subsystem support" if [NET && INET && SECURITY]
      depends on [SECURITY]
      default [n] if [NET && INET && SECURITY]
      inherited [NET && INET && SECURITY]
     }
    }
   }
   config NETWORK_SECMARK boolean {
    prompt "Security Marking" if [NET]
    inherited [NET]
   }
   menuconfig NETFILTER boolean {
    prompt "Network packet filtering framework (Netfilter)" if [NET]
    inherited [NET]
    if [NET && NETFILTER] {
     config NETFILTER_DEBUG boolean {
      prompt "Network packet filtering debugging" if [NET && NETFILTER]
      depends on [NETFILTER]
      inherited [NET && NETFILTER]
     }
     config NETFILTER_ADVANCED boolean {
      prompt "Advanced netfilter configuration" if [NET && NETFILTER]
      depends on [NETFILTER]
      default [y] if [NET && NETFILTER]
      inherited [NET && NETFILTER]
      config BRIDGE_NETFILTER boolean {
       prompt "Bridged IP/ARP packets filtering" if [NET && BRIDGE && NETFILTER && INET && NETFILTER_ADVANCED]
       depends on [BRIDGE && NETFILTER && INET]
       depends on [NETFILTER_ADVANCED]
       default [y] if [NET && BRIDGE && NETFILTER && INET && NETFILTER_ADVANCED]
       inherited [NET && BRIDGE && NETFILTER && INET && NETFILTER_ADVANCED]
      }
     }
     menu "Core Netfilter Configuration" {
      depends on [NET && INET && NETFILTER]
      config NETFILTER_NETLINK tristate {
       inherited [NET && INET && NETFILTER]
      }
      config NETFILTER_NETLINK_QUEUE tristate {
       prompt "Netfilter NFQUEUE over NFNETLINK interface" if [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       depends on [NETFILTER_ADVANCED]
       select NETFILTER_NETLINK if [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER && NETFILTER_ADVANCED]
      }
      config NETFILTER_NETLINK_LOG tristate {
       prompt "Netfilter LOG over NFNETLINK interface" if [NET && INET && NETFILTER]
       default [m] if [NET && INET && NETFILTER && !NETFILTER_ADVANCED]
       select NETFILTER_NETLINK if [NET && INET && NETFILTER]
       inherited [NET && INET && NETFILTER]
      }
      config NF_CONNTRACK tristate {
       prompt "Netfilter connection tracking support" if [NET && INET && NETFILTER]
       default [m] if [NET && INET && NETFILTER && !NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER]
       if [NET && INET && NETFILTER && NF_CONNTRACK] {
        config NF_CT_ACCT boolean {
         prompt "Connection tracking flow accounting" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_MARK boolean {
         prompt "Connection mark tracking support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_SECMARK boolean {
         prompt "Connection tracking security mark support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETWORK_SECMARK]
         depends on [NETWORK_SECMARK]
         default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && NETWORK_SECMARK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETWORK_SECMARK]
        }
        config NF_CONNTRACK_EVENTS boolean {
         prompt "Connection tracking events" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CT_PROTO_DCCP tristate {
         prompt "DCCP protocol connection tracking support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_ADVANCED]
         default [IP_DCCP] if [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
        }
        config NF_CT_PROTO_GRE tristate {
         inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        }
        config NF_CT_PROTO_SCTP tristate {
         prompt "SCTP protocol connection tracking support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_ADVANCED]
         default [IP_SCTP] if [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
        }
        config NF_CT_PROTO_UDPLITE tristate {
         prompt "UDP-Lite protocol connection tracking support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_AMANDA tristate {
         prompt "Amanda backup protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select TEXTSEARCH if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         select TEXTSEARCH_KMP if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_FTP tristate {
         prompt "FTP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        }
        config NF_CONNTRACK_H323 tristate {
         prompt "H.323 protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK && (IPV6 || IPV6="n") && NETFILTER_ADVANCED]
         depends on [IPV6 || IPV6="n"]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && (IPV6 || IPV6="n") && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_IRC tristate {
         prompt "IRC protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        }
        config NF_CONNTRACK_NETBIOS_NS tristate {
         prompt "NetBIOS name service protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_PPTP tristate {
         prompt "PPtP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NF_CT_PROTO_GRE if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_SANE tristate {
         prompt "SANE protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_SIP tristate {
         prompt "SIP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        }
        config NF_CONNTRACK_TFTP tristate {
         prompt "TFTP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CT_NETLINK tristate {
         prompt "Connection tracking netlink interface" if [NET && INET && NETFILTER && NF_CONNTRACK]
         select NETFILTER_NETLINK if [NET && INET && NETFILTER && NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        }
       }
      }
      config NETFILTER_TPROXY tristate {
       prompt "Transparent proxying support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_MANGLE && NETFILTER_ADVANCED]
       depends on [EXPERIMENTAL]
       depends on [IP_NF_MANGLE]
       depends on [NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_MANGLE && NETFILTER_ADVANCED]
      }
      config NETFILTER_XTABLES tristate {
       prompt "Netfilter Xtables support (required for ip_tables)" if [NET && INET && NETFILTER]
       default [m] if [NET && INET && NETFILTER && !NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER]
       if [NET && INET && NETFILTER && NETFILTER_XTABLES] {
        config NETFILTER_XT_TARGET_CLASSIFY tristate {
         prompt "\"CLASSIFY\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_CONNMARK tristate {
         prompt "\"CONNMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         select NF_CONNTRACK_MARK if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_CONNSECMARK tristate {
         prompt "\"CONNSECMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NF_CONNTRACK_SECMARK]
         depends on [NF_CONNTRACK && NF_CONNTRACK_SECMARK]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NF_CONNTRACK_SECMARK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NF_CONNTRACK_SECMARK]
        }
        config NETFILTER_XT_TARGET_DSCP tristate {
         prompt "\"DSCP\" and \"TOS\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
         depends on [IP_NF_MANGLE || IP6_NF_MANGLE]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_HL tristate {
         prompt "\"HL\" hoplimit target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
         depends on [IP_NF_MANGLE || IP6_NF_MANGLE]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_LED tristate {
         prompt "\"LED\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && LEDS_CLASS && LEDS_TRIGGERS && NETFILTER_ADVANCED]
         depends on [LEDS_CLASS && LEDS_TRIGGERS]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && LEDS_CLASS && LEDS_TRIGGERS && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_MARK tristate {
         prompt "\"MARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_NFLOG tristate {
         prompt "\"NFLOG\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && !NETFILTER_ADVANCED]
         select NETFILTER_NETLINK_LOG if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_NFQUEUE tristate {
         prompt "\"NFQUEUE\" target Support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_NOTRACK tristate {
         prompt "\"NOTRACK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [IP_NF_RAW || IP6_NF_RAW]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_RATEEST tristate {
         prompt "\"RATEEST\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_TPROXY tristate {
         prompt "\"TPROXY\" target support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_TPROXY]
         depends on [NETFILTER_XTABLES]
         depends on [NETFILTER_ADVANCED]
         select NF_DEFRAG_IPV4 if [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_TRACE tristate {
         prompt "\"TRACE\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && NETFILTER_ADVANCED]
         depends on [IP_NF_RAW || IP6_NF_RAW]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_SECMARK tristate {
         prompt "\"SECMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETWORK_SECMARK]
         depends on [NETWORK_SECMARK]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETWORK_SECMARK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETWORK_SECMARK]
        }
        config NETFILTER_XT_TARGET_TCPMSS tristate {
         prompt "\"TCPMSS\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IPV6 || IPV6="n")]
         depends on [IPV6 || IPV6="n"]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IPV6 || IPV6="n") && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IPV6 || IPV6="n")]
        }
        config NETFILTER_XT_TARGET_TCPOPTSTRIP tristate {
         prompt "\"TCPOPTSTRIP\" target support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [IP_NF_MANGLE || IP6_NF_MANGLE]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_CLUSTER tristate {
         prompt "\"cluster\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_COMMENT tristate {
         prompt "\"comment\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_CONNBYTES tristate {
         prompt "\"connbytes\" per-connection counter match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         select NF_CT_ACCT if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_CONNLIMIT tristate {
         prompt "\"connlimit\" match support\"" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_CONNMARK tristate {
         prompt "\"connmark\" connection mark match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         select NF_CONNTRACK_MARK if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_CONNTRACK tristate {
         prompt "\"conntrack\" connection tracking match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         depends on [NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
        }
        config NETFILTER_XT_MATCH_DCCP tristate {
         prompt "\"dccp\" protocol match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         default [IP_DCCP] if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_DSCP tristate {
         prompt "\"dscp\" and \"tos\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_ESP tristate {
         prompt "\"esp\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_HASHLIMIT tristate {
         prompt "\"hashlimit\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP6_NF_IPTABLES || IP6_NF_IPTABLES="n") && NETFILTER_ADVANCED]
         depends on [IP6_NF_IPTABLES || IP6_NF_IPTABLES="n"]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP6_NF_IPTABLES || IP6_NF_IPTABLES="n") && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_HELPER tristate {
         prompt "\"helper\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_HL tristate {
         prompt "\"hl\" hoplimit/TTL match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_IPRANGE tristate {
         prompt "\"iprange\" address range match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_LENGTH tristate {
         prompt "\"length\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_LIMIT tristate {
         prompt "\"limit\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_MAC tristate {
         prompt "\"mac\" address match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_MARK tristate {
         prompt "\"mark\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_MULTIPORT tristate {
         prompt "\"multiport\" Multiple port match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_OWNER tristate {
         prompt "\"owner\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_POLICY tristate {
         prompt "IPsec \"policy\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && XFRM]
         depends on [XFRM]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && XFRM && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && XFRM]
        }
        config NETFILTER_XT_MATCH_PHYSDEV tristate {
         prompt "\"physdev\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && BRIDGE && BRIDGE_NETFILTER && NETFILTER_ADVANCED]
         depends on [BRIDGE && BRIDGE_NETFILTER]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && BRIDGE && BRIDGE_NETFILTER && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_PKTTYPE tristate {
         prompt "\"pkttype\" packet type match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_QUOTA tristate {
         prompt "\"quota\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_RATEEST tristate {
         prompt "\"rateest\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NETFILTER_XT_TARGET_RATEEST if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_REALM tristate {
         prompt "\"realm\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NET_CLS_ROUTE if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_RECENT tristate {
         prompt "\"recent\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         config NETFILTER_XT_MATCH_RECENT_PROC_COMPAT boolean {
          prompt "Enable obsolete /proc/net/ipt_recent" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_XT_MATCH_RECENT && PROC_FS]
          depends on [NETFILTER_XT_MATCH_RECENT && PROC_FS]
          inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_XT_MATCH_RECENT && PROC_FS]
         }
        }
        config NETFILTER_XT_MATCH_SCTP tristate {
         prompt "\"sctp\" protocol match support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_ADVANCED]
         default [IP_SCTP] if [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_SOCKET tristate {
         prompt "\"socket\" match support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED && (!NF_CONNTRACK || NF_CONNTRACK)]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_TPROXY]
         depends on [NETFILTER_XTABLES]
         depends on [NETFILTER_ADVANCED]
         depends on [!NF_CONNTRACK || NF_CONNTRACK]
         select NF_DEFRAG_IPV4 if [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED && (!NF_CONNTRACK || NF_CONNTRACK)]
         inherited [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED && (!NF_CONNTRACK || NF_CONNTRACK)]
        }
        config NETFILTER_XT_MATCH_STATE tristate {
         prompt "\"state\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         depends on [NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
        }
        config NETFILTER_XT_MATCH_STATISTIC tristate {
         prompt "\"statistic\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_STRING tristate {
         prompt "\"string\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select TEXTSEARCH if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         select TEXTSEARCH_KMP if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         select TEXTSEARCH_BM if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         select TEXTSEARCH_FSM if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_TCPMSS tristate {
         prompt "\"tcpmss\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_TIME tristate {
         prompt "\"time\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_U32 tristate {
         prompt "\"u32\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_OSF tristate {
         prompt "\"osf\" Passive OS fingerprint match" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED && NETFILTER_NETLINK]
         depends on [NETFILTER_ADVANCED && NETFILTER_NETLINK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED && NETFILTER_NETLINK]
        }
       }
      }
     }
     menuconfig IP_VS tristate {
      prompt "IP virtual server support" if [NET && INET && NETFILTER]
      depends on [NET && INET && NETFILTER]
      inherited [NET && INET && NETFILTER]
      if [NET && NETFILTER && IP_VS] {
       config IP_VS_IPV6 boolean {
        prompt "IPv6 support for IPVS" if [NET && NETFILTER && IP_VS && EXPERIMENTAL && (IPV6="y" || IP_VS="IPV6")]
        depends on [EXPERIMENTAL && (IPV6="y" || IP_VS="IPV6")]
        inherited [NET && NETFILTER && IP_VS && EXPERIMENTAL && (IPV6="y" || IP_VS="IPV6")]
       }
       config IP_VS_DEBUG boolean {
        prompt "IP virtual server debugging" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_TAB_BITS integer {
        prompt "IPVS connection table size (the Nth power of 2)" if [NET && NETFILTER && IP_VS]
        range [8 20] if [NET && NETFILTER && IP_VS]
        default [12] if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_PROTO_TCP boolean {
        prompt "TCP load balancing support" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_PROTO_UDP boolean {
        prompt "UDP load balancing support" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_PROTO_AH_ESP boolean {
        depends on [UNDEFINED]
        inherited [NET && NETFILTER && IP_VS && UNDEFINED]
       }
       config IP_VS_PROTO_ESP boolean {
        prompt "ESP load balancing support" if [NET && NETFILTER && IP_VS]
        select IP_VS_PROTO_AH_ESP if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_PROTO_AH boolean {
        prompt "AH load balancing support" if [NET && NETFILTER && IP_VS]
        select IP_VS_PROTO_AH_ESP if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_RR tristate {
        prompt "round-robin scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_WRR tristate {
        prompt "weighted round-robin scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_LC tristate {
        prompt "least-connection scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_WLC tristate {
        prompt "weighted least-connection scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_LBLC tristate {
        prompt "locality-based least-connection scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_LBLCR tristate {
        prompt "locality-based least-connection with replication scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_DH tristate {
        prompt "destination hashing scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_SH tristate {
        prompt "source hashing scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_SED tristate {
        prompt "shortest expected delay scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_NQ tristate {
        prompt "never queue scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_FTP tristate {
        prompt "FTP protocol helper" if [NET && NETFILTER && IP_VS && IP_VS_PROTO_TCP]
        depends on [IP_VS_PROTO_TCP]
        inherited [NET && NETFILTER && IP_VS && IP_VS_PROTO_TCP]
       }
      }
     }
     menu "IP: Netfilter Configuration" {
      depends on [NET && INET && NETFILTER]
      config NF_DEFRAG_IPV4 tristate {
       default [n] if [NET && INET && NETFILTER]
       inherited [NET && INET && NETFILTER]
      }
      config NF_CONNTRACK_IPV4 tristate {
       prompt "IPv4 connection tracking support (required for NAT)" if [NET && INET && NETFILTER && NF_CONNTRACK]
       depends on [NF_CONNTRACK]
       default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && !NETFILTER_ADVANCED]
       select NF_DEFRAG_IPV4 if [NET && INET && NETFILTER && NF_CONNTRACK]
       inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       config NF_CONNTRACK_PROC_COMPAT boolean {
        prompt "proc/sysctl compatibility with old connection tracking" if [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
        depends on [NF_CONNTRACK_IPV4]
        default [y] if [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
       }
      }
      config IP_NF_QUEUE tristate {
       prompt "IP Userspace queueing via NETLINK (OBSOLETE)" if [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       depends on [NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER && NETFILTER_ADVANCED]
      }
      config IP_NF_IPTABLES tristate {
       prompt "IP tables support (required for filtering/masq/NAT)" if [NET && INET && NETFILTER]
       default [m] if [NET && INET && NETFILTER && !NETFILTER_ADVANCED]
       select NETFILTER_XTABLES if [NET && INET && NETFILTER]
       inherited [NET && INET && NETFILTER]
       if [NET && INET && NETFILTER && IP_NF_IPTABLES] {
        config IP_NF_MATCH_ADDRTYPE tristate {
         prompt "\"addrtype\" address type match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_MATCH_AH tristate {
         prompt "\"ah\" match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_MATCH_ECN tristate {
         prompt "\"ecn\" match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_MATCH_TTL tristate {
         prompt "\"ttl\" match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NETFILTER_XT_MATCH_HL if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_FILTER tristate {
         prompt "Packet filtering" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
         config IP_NF_TARGET_REJECT tristate {
          prompt "REJECT target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_FILTER]
          depends on [IP_NF_FILTER]
          default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_FILTER && !NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_FILTER]
         }
        }
        config IP_NF_TARGET_LOG tristate {
         prompt "LOG target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_TARGET_ULOG tristate {
         prompt "ULOG target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config NF_NAT tristate {
         prompt "Full NAT" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK_IPV4]
         depends on [NF_CONNTRACK_IPV4]
         default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK_IPV4 && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK_IPV4]
         config NF_NAT_NEEDED boolean {
          depends on [NF_NAT]
          default [y] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT]
         }
         config IP_NF_TARGET_MASQUERADE tristate {
          prompt "MASQUERADE target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT]
          depends on [NF_NAT]
          default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && !NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT]
         }
         config IP_NF_TARGET_NETMAP tristate {
          prompt "NETMAP target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
          depends on [NF_NAT]
          depends on [NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
         }
         config IP_NF_TARGET_REDIRECT tristate {
          prompt "REDIRECT target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
          depends on [NF_NAT]
          depends on [NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
         }
         config NF_NAT_SNMP_BASIC tristate {
          prompt "Basic SNMP-ALG support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
          depends on [NF_NAT]
          depends on [NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
         }
         config NF_NAT_PROTO_DCCP tristate {
          depends on [NF_NAT && NF_CT_PROTO_DCCP]
          default [NF_NAT && NF_CT_PROTO_DCCP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_DCCP]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_DCCP]
         }
         config NF_NAT_PROTO_GRE tristate {
          depends on [NF_NAT && NF_CT_PROTO_GRE]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_GRE]
         }
         config NF_NAT_PROTO_UDPLITE tristate {
          depends on [NF_NAT && NF_CT_PROTO_UDPLITE]
          default [NF_NAT && NF_CT_PROTO_UDPLITE] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_UDPLITE]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_UDPLITE]
         }
         config NF_NAT_PROTO_SCTP tristate {
          default [NF_NAT && NF_CT_PROTO_SCTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_SCTP]
          depends on [NF_NAT && NF_CT_PROTO_SCTP]
          select LIBCRC32C if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_SCTP]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_SCTP]
         }
         config NF_NAT_FTP tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_FTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_IRC tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_IRC] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_TFTP tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_TFTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_AMANDA tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_AMANDA] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_PPTP tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_PPTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          select NF_NAT_PROTO_GRE if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_H323 tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_H323] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_SIP tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_SIP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
        }
        config IP_NF_MANGLE tristate {
         prompt "Packet mangling" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
         config IP_NF_TARGET_CLUSTERIP tristate {
          prompt "CLUSTERIP target support (EXPERIMENTAL)" if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_MANGLE && EXPERIMENTAL && NF_CONNTRACK_IPV4 && NETFILTER_ADVANCED]
          depends on [IP_NF_MANGLE && EXPERIMENTAL]
          depends on [NF_CONNTRACK_IPV4]
          depends on [NETFILTER_ADVANCED]
          select NF_CONNTRACK_MARK if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_MANGLE && EXPERIMENTAL && NF_CONNTRACK_IPV4 && NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_MANGLE && EXPERIMENTAL && NF_CONNTRACK_IPV4 && NETFILTER_ADVANCED]
         }
         config IP_NF_TARGET_ECN tristate {
          prompt "ECN target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_MANGLE && NETFILTER_ADVANCED]
          depends on [IP_NF_MANGLE]
          depends on [NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_MANGLE && NETFILTER_ADVANCED]
         }
        }
        config IP_NF_TARGET_TTL tristate {
         prompt "\"TTL\" target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NETFILTER_XT_TARGET_HL if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_RAW tristate {
         prompt "raw table support (required for NOTRACK/TRACE)" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_SECURITY tristate {
         prompt "Security table" if [NET && INET && NETFILTER && IP_NF_IPTABLES && SECURITY && NETFILTER_ADVANCED]
         depends on [SECURITY]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && SECURITY && NETFILTER_ADVANCED]
        }
       }
      }
      config IP_NF_ARPTABLES tristate {
       prompt "ARP tables support" if [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       select NETFILTER_XTABLES if [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       depends on [NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       if [NET && INET && NETFILTER && IP_NF_ARPTABLES] {
        config IP_NF_ARPFILTER tristate {
         prompt "ARP packet filtering" if [NET && INET && NETFILTER && IP_NF_ARPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_ARPTABLES]
        }
        config IP_NF_ARP_MANGLE tristate {
         prompt "ARP payload mangling" if [NET && INET && NETFILTER && IP_NF_ARPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_ARPTABLES]
        }
       }
      }
     }
     menu "IPv6: Netfilter Configuration" {
      depends on [NET && INET && IPV6 && NETFILTER]
      config NF_CONNTRACK_IPV6 tristate {
       prompt "IPv6 connection tracking support" if [NET && NETFILTER && INET && IPV6 && NF_CONNTRACK]
       depends on [INET && IPV6 && NF_CONNTRACK]
       default [m] if [NET && NETFILTER && INET && IPV6 && NF_CONNTRACK && !NETFILTER_ADVANCED]
       inherited [NET && NETFILTER && INET && IPV6 && NF_CONNTRACK]
      }
      config IP6_NF_QUEUE tristate {
       prompt "IP6 Userspace queueing via NETLINK (OBSOLETE)" if [NET && INET && IPV6 && NETFILTER && NETFILTER_ADVANCED]
       depends on [INET && IPV6 && NETFILTER]
       depends on [NETFILTER_ADVANCED]
       inherited [NET && INET && IPV6 && NETFILTER && NETFILTER_ADVANCED]
      }
      config IP6_NF_IPTABLES tristate {
       prompt "IP6 tables support (required for filtering)" if [NET && NETFILTER && INET && IPV6]
       depends on [INET && IPV6]
       select NETFILTER_XTABLES if [NET && NETFILTER && INET && IPV6]
       default [m] if [NET && NETFILTER && INET && IPV6 && !NETFILTER_ADVANCED]
       inherited [NET && NETFILTER && INET && IPV6]
       if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES] {
        config IP6_NF_MATCH_AH tristate {
         prompt "\"ah\" match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_EUI64 tristate {
         prompt "\"eui64\" address check" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_FRAG tristate {
         prompt "\"frag\" Fragmentation header match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_OPTS tristate {
         prompt "\"hbh\" hop-by-hop and \"dst\" opts header match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_HL tristate {
         prompt "\"hl\" hoplimit match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NETFILTER_XT_MATCH_HL if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_IPV6HEADER tristate {
         prompt "\"ipv6header\" IPv6 Extension Headers Match" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
         default [m] if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_MH tristate {
         prompt "\"mh\" match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_RT tristate {
         prompt "\"rt\" Routing header match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_TARGET_HL tristate {
         prompt "\"HL\" hoplimit target support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NETFILTER_XT_TARGET_HL if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_TARGET_LOG tristate {
         prompt "LOG target support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
         default [m] if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
        }
        config IP6_NF_FILTER tristate {
         prompt "Packet filtering" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
         default [m] if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
         config IP6_NF_TARGET_REJECT tristate {
          prompt "REJECT target support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && IP6_NF_FILTER]
          depends on [IP6_NF_FILTER]
          default [m] if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && IP6_NF_FILTER && !NETFILTER_ADVANCED]
          inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && IP6_NF_FILTER]
         }
        }
        config IP6_NF_MANGLE tristate {
         prompt "Packet mangling" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
         default [m] if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
        }
        config IP6_NF_RAW tristate {
         prompt "raw table support (required for TRACE)" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_SECURITY tristate {
         prompt "Security table" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && SECURITY && NETFILTER_ADVANCED]
         depends on [SECURITY]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && SECURITY && NETFILTER_ADVANCED]
        }
       }
      }
     }
     menu "DECnet: Netfilter Configuration" {
      depends on [NET && DECNET && NETFILTER && EXPERIMENTAL && NETFILTER_ADVANCED]
      config DECNET_NF_GRABULATOR tristate {
       prompt "Routing message grabulator (for userland routing daemon)" if [NET && DECNET && NETFILTER && EXPERIMENTAL && NETFILTER_ADVANCED]
       inherited [NET && DECNET && NETFILTER && EXPERIMENTAL && NETFILTER_ADVANCED]
      }
     }
     menuconfig BRIDGE_NF_EBTABLES tristate {
      prompt "Ethernet Bridge tables (ebtables) support" if [NET && NETFILTER && BRIDGE && BRIDGE_NETFILTER]
      depends on [BRIDGE && BRIDGE_NETFILTER]
      select NETFILTER_XTABLES if [NET && NETFILTER && BRIDGE && BRIDGE_NETFILTER]
      inherited [NET && NETFILTER && BRIDGE && BRIDGE_NETFILTER]
      if [NET && NETFILTER && BRIDGE_NF_EBTABLES] {
       config BRIDGE_EBT_BROUTE tristate {
        prompt "ebt: broute table support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_T_FILTER tristate {
        prompt "ebt: filter table support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_T_NAT tristate {
        prompt "ebt: nat table support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_802_3 tristate {
        prompt "ebt: 802.3 filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_AMONG tristate {
        prompt "ebt: among filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_ARP tristate {
        prompt "ebt: ARP filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_IP tristate {
        prompt "ebt: IP filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_IP6 tristate {
        prompt "ebt: IP6 filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES && IPV6]
        depends on [BRIDGE_NF_EBTABLES && IPV6]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES && IPV6]
       }
       config BRIDGE_EBT_LIMIT tristate {
        prompt "ebt: limit match support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_MARK tristate {
        prompt "ebt: mark filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_PKTTYPE tristate {
        prompt "ebt: packet type filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_STP tristate {
        prompt "ebt: STP filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_VLAN tristate {
        prompt "ebt: 802.1Q VLAN filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_ARPREPLY tristate {
        prompt "ebt: arp reply target support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES && INET]
        depends on [BRIDGE_NF_EBTABLES && INET]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES && INET]
       }
       config BRIDGE_EBT_DNAT tristate {
        prompt "ebt: dnat target support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_MARK_T tristate {
        prompt "ebt: mark target support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_REDIRECT tristate {
        prompt "ebt: redirect target support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_SNAT tristate {
        prompt "ebt: snat target support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_LOG tristate {
        prompt "ebt: log support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_ULOG tristate {
        prompt "ebt: ulog support (OBSOLETE)" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_NFLOG tristate {
        prompt "ebt: nflog support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
      }
     }
    }
   }
   menuconfig IP_DCCP tristate {
    prompt "The DCCP Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
    depends on [INET && EXPERIMENTAL]
    inherited [NET && INET && EXPERIMENTAL]
    if [NET && IP_DCCP] {
     config INET_DCCP_DIAG tristate {
      depends on [INET_DIAG]
      default [y] if [NET && IP_DCCP="y" && INET_DIAG="y"]
      default [m] if [NET && IP_DCCP && INET_DIAG]
      inherited [NET && IP_DCCP && INET_DIAG]
     }
     menu "DCCP CCIDs Configuration (EXPERIMENTAL)" {
      depends on [NET && IP_DCCP && EXPERIMENTAL]
      config IP_DCCP_CCID2_DEBUG boolean {
       prompt "CCID-2 debugging messages" if [NET && IP_DCCP && EXPERIMENTAL]
       inherited [NET && IP_DCCP && EXPERIMENTAL]
      }
      config IP_DCCP_CCID3 boolean {
       prompt "CCID-3 (TCP-Friendly) (EXPERIMENTAL)" if [NET && IP_DCCP && EXPERIMENTAL]
       default [y] if [NET && EXPERIMENTAL && IP_DCCP]
       inherited [NET && IP_DCCP && EXPERIMENTAL]
       config IP_DCCP_CCID3_DEBUG boolean {
        prompt "CCID-3 debugging messages" if [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
        depends on [IP_DCCP_CCID3]
        inherited [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
       }
       config IP_DCCP_CCID3_RTO integer {
        prompt "Use higher bound for nofeedback timer" if [NET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
        default [100] if [NET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
        depends on [IP_DCCP_CCID3 && EXPERIMENTAL]
        inherited [NET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
       }
      }
      config IP_DCCP_TFRC_LIB boolean {
       default [y] if [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
       inherited [NET && IP_DCCP && EXPERIMENTAL]
      }
      config IP_DCCP_TFRC_DEBUG boolean {
       default [y] if [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3_DEBUG]
       inherited [NET && IP_DCCP && EXPERIMENTAL]
      }
     }
     menu "DCCP Kernel Hacking" {
      depends on [NET && IP_DCCP && DEBUG_KERNEL]
      config IP_DCCP_DEBUG boolean {
       prompt "DCCP debug messages" if [NET && IP_DCCP && DEBUG_KERNEL]
       inherited [NET && IP_DCCP && DEBUG_KERNEL]
      }
      config NET_DCCPPROBE tristate {
       prompt "DCCP connection probing" if [NET && IP_DCCP && DEBUG_KERNEL && PROC_FS && KPROBES]
       depends on [PROC_FS && KPROBES]
       inherited [NET && IP_DCCP && DEBUG_KERNEL && PROC_FS && KPROBES]
      }
     }
    }
   }
   menuconfig IP_SCTP tristate {
    prompt "The SCTP Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    depends on [INET && EXPERIMENTAL]
    depends on [IPV6 || IPV6="n"]
    select CRYPTO if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    select CRYPTO_HMAC if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    select CRYPTO_SHA1 if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    select CRYPTO_MD5 if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n") && SCTP_HMAC_MD5]
    select LIBCRC32C if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    inherited [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    if [NET && IP_SCTP] {
     config SCTP_DBG_MSG boolean {
      prompt "SCTP: Debug messages" if [NET && IP_SCTP]
      inherited [NET && IP_SCTP]
     }
     config SCTP_DBG_OBJCNT boolean {
      prompt "SCTP: Debug object counts" if [NET && IP_SCTP && PROC_FS]
      depends on [PROC_FS]
      inherited [NET && IP_SCTP && PROC_FS]
     }
     choice boolean {
      prompt "SCTP: Cookie HMAC Algorithm" if [NET && IP_SCTP]
      default [SCTP_HMAC_MD5] if [NET && IP_SCTP]
      config SCTP_HMAC_NONE boolean {
       prompt "None" if [<choice>]
       inherited [<choice>]
      }
      config SCTP_HMAC_SHA1 boolean {
       prompt "HMAC-SHA1" if [<choice>]
       inherited [<choice>]
      }
      config SCTP_HMAC_MD5 boolean {
       prompt "HMAC-MD5" if [<choice>]
       inherited [<choice>]
      }
     }
    }
   }
   config RDS tristate {
    prompt "The RDS Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
    depends on [INET && EXPERIMENTAL]
    inherited [NET && INET && EXPERIMENTAL]
    config RDS_RDMA tristate {
     prompt "RDS over Infiniband and iWARP" if [NET && RDS && INFINIBAND && INFINIBAND_ADDR_TRANS]
     depends on [RDS && INFINIBAND && INFINIBAND_ADDR_TRANS]
     inherited [NET && RDS && INFINIBAND && INFINIBAND_ADDR_TRANS]
    }
    config RDS_TCP tristate {
     prompt "RDS over TCP" if [NET && RDS]
     depends on [RDS]
     inherited [NET && RDS]
    }
    config RDS_DEBUG boolean {
     prompt "RDS debugging messages" if [NET && RDS]
     depends on [RDS]
     default [n] if [NET && RDS]
     inherited [NET && RDS]
    }
   }
   menuconfig TIPC tristate {
    prompt "The TIPC Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
    depends on [INET && EXPERIMENTAL]
    inherited [NET && INET && EXPERIMENTAL]
    if [NET && TIPC] {
     config TIPC_ADVANCED boolean {
      prompt "TIPC: Advanced configuration" if [NET && TIPC]
      default [n] if [NET && TIPC]
      inherited [NET && TIPC]
      config TIPC_ZONES integer {
       prompt "Maximum number of zones in network" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [3] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
      config TIPC_CLUSTERS integer {
       prompt "Maximum number of clusters in a zone" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [1] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
      config TIPC_NODES integer {
       prompt "Maximum number of nodes in cluster" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [255] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
      config TIPC_SLAVE_NODES integer {
       prompt "Maximum number of slave nodes in cluster" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [0] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
      config TIPC_PORTS integer {
       prompt "Maximum number of ports in a node" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [8191] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
      config TIPC_LOG integer {
       prompt "Size of log buffer" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [0] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
     }
     config TIPC_DEBUG boolean {
      prompt "Enable debugging support" if [NET && TIPC]
      default [n] if [NET && TIPC]
      inherited [NET && TIPC]
     }
    }
   }
   config ATM tristate {
    prompt "Asynchronous Transfer Mode (ATM)" if [NET]
    inherited [NET]
    config ATM_CLIP tristate {
     prompt "Classical IP over ATM" if [NET && ATM && INET]
     depends on [ATM && INET]
     inherited [NET && ATM && INET]
     config ATM_CLIP_NO_ICMP boolean {
      prompt "Do NOT send ICMP if no neighbour" if [NET && ATM_CLIP]
      depends on [ATM_CLIP]
      inherited [NET && ATM_CLIP]
     }
    }
    config ATM_LANE tristate {
     prompt "LAN Emulation (LANE) support" if [NET && ATM]
     depends on [ATM]
     inherited [NET && ATM]
     config ATM_MPOA tristate {
      prompt "Multi-Protocol Over ATM (MPOA) support" if [NET && ATM && INET && ATM_LANE!="n"]
      depends on [ATM && INET && ATM_LANE!="n"]
      inherited [NET && ATM && INET && ATM_LANE!="n"]
     }
    }
    config ATM_BR2684 tristate {
     prompt "RFC1483/2684 Bridged protocols" if [NET && ATM && INET]
     depends on [ATM && INET]
     inherited [NET && ATM && INET]
     config ATM_BR2684_IPFILTER boolean {
      prompt "Per-VC IP filter kludge" if [NET && ATM_BR2684]
      depends on [ATM_BR2684]
      inherited [NET && ATM_BR2684]
     }
    }
   }
   config STP tristate {
    select LLC if [NET]
    inherited [NET]
   }
   config GARP tristate {
    select STP if [NET]
    inherited [NET]
   }
   config BRIDGE tristate {
    prompt "802.1d Ethernet Bridging" if [NET]
    select LLC if [NET]
    select STP if [NET]
    inherited [NET]
   }
   menuconfig NET_DSA boolean {
    prompt "Distributed Switch Architecture support" if [NET && EXPERIMENTAL && !S390]
    default [n] if [NET && EXPERIMENTAL && !S390]
    depends on [EXPERIMENTAL && !S390]
    select PHYLIB if [NET && EXPERIMENTAL && !S390]
    inherited [NET && EXPERIMENTAL && !S390]
    if [NET && NET_DSA] {
     config NET_DSA_TAG_DSA boolean {
      default [n] if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_TAG_EDSA boolean {
      default [n] if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_TAG_TRAILER boolean {
      default [n] if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_MV88E6XXX boolean {
      default [n] if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_MV88E6060 boolean {
      prompt "Marvell 88E6060 ethernet switch chip support" if [NET && NET_DSA]
      select NET_DSA_TAG_TRAILER if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_MV88E6XXX_NEED_PPU boolean {
      default [n] if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_MV88E6131 boolean {
      prompt "Marvell 88E6095/6095F/6131 ethernet switch chip support" if [NET && NET_DSA]
      select NET_DSA_MV88E6XXX if [NET && NET_DSA]
      select NET_DSA_MV88E6XXX_NEED_PPU if [NET && NET_DSA]
      select NET_DSA_TAG_DSA if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_MV88E6123_61_65 boolean {
      prompt "Marvell 88E6123/6161/6165 ethernet switch chip support" if [NET && NET_DSA]
      select NET_DSA_MV88E6XXX if [NET && NET_DSA]
      select NET_DSA_TAG_EDSA if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
    }
   }
   config VLAN_8021Q tristate {
    prompt "802.1Q VLAN Support" if [NET]
    inherited [NET]
    config VLAN_8021Q_GVRP boolean {
     prompt "GVRP (GARP VLAN Registration Protocol) support" if [NET && VLAN_8021Q]
     depends on [VLAN_8021Q]
     select GARP if [NET && VLAN_8021Q]
     inherited [NET && VLAN_8021Q]
    }
   }
   config DECNET tristate {
    prompt "DECnet Support" if [NET]
    inherited [NET]
    config DECNET_ROUTER boolean {
     prompt "DECnet: router support (EXPERIMENTAL)" if [NET && DECNET && EXPERIMENTAL]
     depends on [DECNET && EXPERIMENTAL]
     select FIB_RULES if [NET && DECNET && EXPERIMENTAL]
     inherited [NET && DECNET && EXPERIMENTAL]
    }
   }
   config LLC tristate {
    depends on [NET]
    inherited [NET]
   }
   config LLC2 tristate {
    prompt "ANSI/IEEE 802.2 LLC type 2 Support" if [NET]
    select LLC if [NET]
    inherited [NET]
   }
   config IPX tristate {
    prompt "The IPX protocol" if [NET]
    select LLC if [NET]
    inherited [NET]
    config IPX_INTERN boolean {
     prompt "IPX: Full internal IPX network" if [NET && IPX]
     depends on [IPX]
     inherited [NET && IPX]
    }
   }
   config ATALK tristate {
    prompt "Appletalk protocol support" if [NET]
    select LLC if [NET]
    inherited [NET]
    config DEV_APPLETALK tristate {
     prompt "Appletalk interfaces support" if [NET && ATALK]
     depends on [ATALK]
     inherited [NET && ATALK]
     config LTPC tristate {
      prompt "Apple/Farallon LocalTalk PC support" if [NET && DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
      depends on [DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
      inherited [NET && DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
     }
     config COPS tristate {
      prompt "COPS LocalTalk PC support" if [NET && DEV_APPLETALK && (ISA || EISA)]
      depends on [DEV_APPLETALK && (ISA || EISA)]
      inherited [NET && DEV_APPLETALK && (ISA || EISA)]
      config COPS_DAYNA boolean {
       prompt "Dayna firmware support" if [NET && COPS]
       depends on [COPS]
       inherited [NET && COPS]
      }
      config COPS_TANGENT boolean {
       prompt "Tangent firmware support" if [NET && COPS]
       depends on [COPS]
       inherited [NET && COPS]
      }
     }
     config IPDDP tristate {
      prompt "Appletalk-IP driver support" if [NET && DEV_APPLETALK && ATALK]
      depends on [DEV_APPLETALK && ATALK]
      inherited [NET && DEV_APPLETALK && ATALK]
      config IPDDP_ENCAP boolean {
       prompt "IP to Appletalk-IP Encapsulation support" if [NET && IPDDP]
       depends on [IPDDP]
       inherited [NET && IPDDP]
      }
      config IPDDP_DECAP boolean {
       prompt "Appletalk-IP to IP Decapsulation support" if [NET && IPDDP]
       depends on [IPDDP]
       inherited [NET && IPDDP]
      }
     }
    }
   }
   config X25 tristate {
    prompt "CCITT X.25 Packet Layer (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NET && EXPERIMENTAL]
   }
   config LAPB tristate {
    prompt "LAPB Data Link Driver (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NET && EXPERIMENTAL]
   }
   config ECONET tristate {
    prompt "Acorn Econet/AUN protocols (EXPERIMENTAL)" if [NET && EXPERIMENTAL && INET]
    depends on [EXPERIMENTAL && INET]
    inherited [NET && EXPERIMENTAL && INET]
    config ECONET_AUNUDP boolean {
     prompt "AUN over UDP" if [NET && ECONET]
     depends on [ECONET]
     inherited [NET && ECONET]
    }
    config ECONET_NATIVE boolean {
     prompt "Native Econet" if [NET && ECONET]
     depends on [ECONET]
     inherited [NET && ECONET]
    }
   }
   config WAN_ROUTER tristate {
    prompt "WAN router" if [NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NET && EXPERIMENTAL]
   }
   config PHONET tristate {
    prompt "Phonet protocols family" if [NET]
    inherited [NET]
   }
   config IEEE802154 tristate {
    prompt "IEEE Std 802.15.4 Low-Rate Wireless Personal Area Networks support (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NET && EXPERIMENTAL]
   }
   menuconfig NET_SCHED boolean {
    prompt "QoS and/or fair queueing" if [NET]
    select NET_SCH_FIFO if [NET]
    inherited [NET]
    if [NET && NET_SCHED] {
     config NET_SCH_CBQ tristate {
      prompt "Class Based Queueing (CBQ)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_HTB tristate {
      prompt "Hierarchical Token Bucket (HTB)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_HFSC tristate {
      prompt "Hierarchical Fair Service Curve (HFSC)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_ATM tristate {
      prompt "ATM Virtual Circuits (ATM)" if [NET && NET_SCHED && ATM]
      depends on [ATM]
      inherited [NET && NET_SCHED && ATM]
     }
     config NET_SCH_PRIO tristate {
      prompt "Multi Band Priority Queueing (PRIO)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_MULTIQ tristate {
      prompt "Hardware Multiqueue-aware Multi Band Queuing (MULTIQ)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_RED tristate {
      prompt "Random Early Detection (RED)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_SFQ tristate {
      prompt "Stochastic Fairness Queueing (SFQ)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_TEQL tristate {
      prompt "True Link Equalizer (TEQL)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_TBF tristate {
      prompt "Token Bucket Filter (TBF)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_GRED tristate {
      prompt "Generic Random Early Detection (GRED)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_DSMARK tristate {
      prompt "Differentiated Services marker (DSMARK)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_NETEM tristate {
      prompt "Network emulator (NETEM)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_DRR tristate {
      prompt "Deficit Round Robin scheduler (DRR)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_INGRESS tristate {
      prompt "Ingress Qdisc" if [NET && NET_SCHED && NET_CLS_ACT]
      depends on [NET_CLS_ACT]
      inherited [NET && NET_SCHED && NET_CLS_ACT]
     }
     config NET_CLS boolean {
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_BASIC tristate {
      prompt "Elementary classification (BASIC)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_TCINDEX tristate {
      prompt "Traffic-Control Index (TCINDEX)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_ROUTE4 tristate {
      prompt "Routing decision (ROUTE)" if [NET && NET_SCHED]
      select NET_CLS_ROUTE if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_ROUTE boolean {
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_FW tristate {
      prompt "Netfilter mark (FW)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_U32 tristate {
      prompt "Universal 32bit comparisons w/ hashing (U32)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
      config CLS_U32_PERF boolean {
       prompt "Performance counters support" if [NET && NET_SCHED && NET_CLS_U32]
       depends on [NET_CLS_U32]
       inherited [NET && NET_SCHED && NET_CLS_U32]
      }
      config CLS_U32_MARK boolean {
       prompt "Netfilter marks support" if [NET && NET_SCHED && NET_CLS_U32]
       depends on [NET_CLS_U32]
       inherited [NET && NET_SCHED && NET_CLS_U32]
      }
     }
     config NET_CLS_RSVP tristate {
      prompt "IPv4 Resource Reservation Protocol (RSVP)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_RSVP6 tristate {
      prompt "IPv6 Resource Reservation Protocol (RSVP6)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_FLOW tristate {
      prompt "Flow classifier" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_CGROUP boolean {
      prompt "Control Group Classifier" if [NET && NET_SCHED && CGROUPS]
      select NET_CLS if [NET && NET_SCHED && CGROUPS]
      depends on [CGROUPS]
      inherited [NET && NET_SCHED && CGROUPS]
     }
     config NET_EMATCH boolean {
      prompt "Extended Matches" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
      config NET_EMATCH_STACK integer {
       prompt "Stack size" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       default [32] if [NET && NET_SCHED && NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
      config NET_EMATCH_CMP tristate {
       prompt "Simple packet data comparison" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
      config NET_EMATCH_NBYTE tristate {
       prompt "Multi byte comparison" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
      config NET_EMATCH_U32 tristate {
       prompt "U32 key" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
      config NET_EMATCH_META tristate {
       prompt "Metadata" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
      config NET_EMATCH_TEXT tristate {
       prompt "Textsearch" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       select TEXTSEARCH if [NET && NET_SCHED && NET_EMATCH]
       select TEXTSEARCH_KMP if [NET && NET_SCHED && NET_EMATCH]
       select TEXTSEARCH_BM if [NET && NET_SCHED && NET_EMATCH]
       select TEXTSEARCH_FSM if [NET && NET_SCHED && NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
     }
     config NET_CLS_ACT boolean {
      prompt "Actions" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
      config NET_ACT_POLICE tristate {
       prompt "Traffic Policing" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
      config NET_ACT_GACT tristate {
       prompt "Generic actions" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
       config GACT_PROB boolean {
        prompt "Probability support" if [NET && NET_SCHED && NET_ACT_GACT]
        depends on [NET_ACT_GACT]
        inherited [NET && NET_SCHED && NET_ACT_GACT]
       }
      }
      config NET_ACT_MIRRED tristate {
       prompt "Redirecting and Mirroring" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
      config NET_ACT_IPT tristate {
       prompt "IPtables targets" if [NET && NET_SCHED && NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
       depends on [NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
       inherited [NET && NET_SCHED && NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
      }
      config NET_ACT_NAT tristate {
       prompt "Stateless NAT" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
      config NET_ACT_PEDIT tristate {
       prompt "Packet Editing" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
      config NET_ACT_SIMP tristate {
       prompt "Simple Example (Debug)" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
      config NET_ACT_SKBEDIT tristate {
       prompt "SKB Editing" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
     }
     config NET_CLS_IND boolean {
      prompt "Incoming device classification" if [NET && NET_SCHED && (NET_CLS_U32 || NET_CLS_FW)]
      depends on [NET_CLS_U32 || NET_CLS_FW]
      inherited [NET && NET_SCHED && (NET_CLS_U32 || NET_CLS_FW)]
     }
    }
   }
   config NET_SCH_FIFO boolean {
    inherited [NET]
   }
   config DCB boolean {
    prompt "Data Center Bridging support" if [NET]
    default [n] if [NET]
    inherited [NET]
   }
   menu "Network testing" {
    depends on [NET]
    config NET_PKTGEN tristate {
     prompt "Packet Generator (USE WITH CAUTION)" if [NET && PROC_FS]
     depends on [PROC_FS]
     inherited [NET && PROC_FS]
    }
    config NET_TCPPROBE tristate {
     prompt "TCP connection probing" if [NET && INET && EXPERIMENTAL && PROC_FS && KPROBES]
     depends on [INET && EXPERIMENTAL && PROC_FS && KPROBES]
     inherited [NET && INET && EXPERIMENTAL && PROC_FS && KPROBES]
    }
    config NET_DROP_MONITOR boolean {
     prompt "Network packet drop alerting service" if [NET && INET && EXPERIMENTAL && TRACEPOINTS]
     depends on [INET && EXPERIMENTAL && TRACEPOINTS]
     inherited [NET && INET && EXPERIMENTAL && TRACEPOINTS]
    }
   }
  }
  menuconfig HAMRADIO boolean {
   depends on [NET && !S390]
   prompt "Amateur Radio support" if [NET && !S390]
   inherited [NET && !S390]
   config AX25 tristate {
    prompt "Amateur Radio AX.25 Level 2 protocol" if [NET && HAMRADIO]
    depends on [HAMRADIO]
    inherited [NET && HAMRADIO]
    config AX25_DAMA_SLAVE boolean {
     prompt "AX.25 DAMA Slave support" if [NET && AX25]
     default [y] if [NET && AX25]
     depends on [AX25]
     inherited [NET && AX25]
     config AX25_DAMA_MASTER boolean {
      prompt "AX.25 DAMA Master support" if [NET && AX25_DAMA_SLAVE && BROKEN]
      depends on [AX25_DAMA_SLAVE && BROKEN]
      inherited [NET && AX25_DAMA_SLAVE && BROKEN]
     }
    }
    config NETROM tristate {
     prompt "Amateur Radio NET/ROM protocol" if [NET && AX25]
     depends on [AX25]
     inherited [NET && AX25]
    }
    config ROSE tristate {
     prompt "Amateur Radio X.25 PLP (Rose)" if [NET && AX25]
     depends on [AX25]
     inherited [NET && AX25]
    }
    menu "AX.25 network device drivers" {
     depends on [NET && HAMRADIO && AX25]
     config MKISS tristate {
      prompt "Serial port KISS driver" if [NET && HAMRADIO && AX25]
      depends on [AX25]
      select CRC16 if [NET && HAMRADIO && AX25]
      inherited [NET && HAMRADIO && AX25]
     }
     config 6PACK tristate {
      prompt "Serial port 6PACK driver" if [NET && HAMRADIO && AX25]
      depends on [AX25]
      inherited [NET && HAMRADIO && AX25]
     }
     config BPQETHER tristate {
      prompt "BPQ Ethernet driver" if [NET && HAMRADIO && AX25]
      depends on [AX25]
      inherited [NET && HAMRADIO && AX25]
     }
     config DMASCC tristate {
      prompt "High-speed (DMA) SCC driver for AX.25" if [NET && HAMRADIO && ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
      depends on [ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
      inherited [NET && HAMRADIO && ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
     }
     config SCC tristate {
      prompt "Z8530 SCC driver" if [NET && HAMRADIO && ISA && AX25 && ISA_DMA_API]
      depends on [ISA && AX25 && ISA_DMA_API]
      inherited [NET && HAMRADIO && ISA && AX25 && ISA_DMA_API]
      config SCC_DELAY boolean {
       prompt "additional delay for PA0HZP OptoSCC compatible boards" if [NET && HAMRADIO && AX25 && SCC]
       depends on [SCC]
       inherited [NET && HAMRADIO && AX25 && SCC]
      }
      config SCC_TRXECHO boolean {
       prompt "support for TRX that feedback the tx signal to rx" if [NET && HAMRADIO && AX25 && SCC]
       depends on [SCC]
       inherited [NET && HAMRADIO && AX25 && SCC]
      }
     }
     config BAYCOM_SER_FDX tristate {
      prompt "BAYCOM ser12 fullduplex driver for AX.25" if [NET && HAMRADIO && AX25 && !S390]
      depends on [AX25 && !S390]
      select CRC_CCITT if [NET && HAMRADIO && AX25 && !S390]
      inherited [NET && HAMRADIO && AX25 && !S390]
     }
     config BAYCOM_SER_HDX tristate {
      prompt "BAYCOM ser12 halfduplex driver for AX.25" if [NET && HAMRADIO && AX25 && !S390]
      depends on [AX25 && !S390]
      select CRC_CCITT if [NET && HAMRADIO && AX25 && !S390]
      inherited [NET && HAMRADIO && AX25 && !S390]
     }
     config BAYCOM_PAR tristate {
      prompt "BAYCOM picpar and par96 driver for AX.25" if [NET && HAMRADIO && PARPORT && AX25]
      depends on [PARPORT && AX25]
      select CRC_CCITT if [NET && HAMRADIO && PARPORT && AX25]
      inherited [NET && HAMRADIO && PARPORT && AX25]
     }
     config BAYCOM_EPP tristate {
      prompt "BAYCOM epp driver for AX.25" if [NET && HAMRADIO && PARPORT && AX25 && !64BIT]
      depends on [PARPORT && AX25 && !64BIT]
      select CRC_CCITT if [NET && HAMRADIO && PARPORT && AX25 && !64BIT]
      inherited [NET && HAMRADIO && PARPORT && AX25 && !64BIT]
     }
     config YAM tristate {
      prompt "YAM driver for AX.25" if [NET && HAMRADIO && AX25 && !S390]
      depends on [AX25 && !S390]
      inherited [NET && HAMRADIO && AX25 && !S390]
     }
    }
   }
  }
  menuconfig CAN tristate {
   depends on [NET]
   prompt "CAN bus subsystem support" if [NET]
   inherited [NET]
   config CAN_RAW tristate {
    prompt "Raw CAN Protocol (raw access with CAN-ID filtering)" if [NET && CAN]
    depends on [CAN]
    default [N] if [NET && CAN]
    inherited [NET && CAN]
   }
   config CAN_BCM tristate {
    prompt "Broadcast Manager CAN Protocol (with content filtering)" if [NET && CAN]
    depends on [CAN]
    default [N] if [NET && CAN]
    inherited [NET && CAN]
   }
   menu "CAN Device Drivers" {
    depends on [NET && CAN]
    config CAN_VCAN tristate {
     prompt "Virtual Local CAN Interface (vcan)" if [NET && CAN]
     depends on [CAN]
     default [N] if [NET && CAN]
     inherited [NET && CAN]
    }
    config CAN_DEV tristate {
     prompt "Platform CAN drivers with Netlink support" if [NET && CAN]
     depends on [CAN]
     default [Y] if [NET && CAN]
     inherited [NET && CAN]
     config CAN_CALC_BITTIMING boolean {
      prompt "CAN bit-timing calculation" if [NET && CAN && CAN_DEV]
      depends on [CAN_DEV]
      default [Y] if [NET && CAN && CAN_DEV]
      inherited [NET && CAN && CAN_DEV]
     }
     config CAN_AT91 tristate {
      prompt "Atmel AT91 onchip CAN controller" if [NET && CAN && CAN_DEV && ARCH_AT91SAM9263]
      depends on [CAN_DEV && ARCH_AT91SAM9263]
      inherited [NET && CAN && CAN_DEV && ARCH_AT91SAM9263]
     }
     menuconfig CAN_SJA1000 tristate {
      prompt "Philips/NXP SJA1000 devices" if [NET && CAN && CAN_DEV && HAS_IOMEM]
      depends on [CAN_DEV && HAS_IOMEM]
      inherited [NET && CAN && CAN_DEV && HAS_IOMEM]
      if [NET && CAN && CAN_SJA1000] {
       config CAN_SJA1000_ISA tristate {
        prompt "ISA Bus based legacy SJA1000 driver" if [NET && CAN && CAN_SJA1000 && ISA]
        depends on [ISA]
        inherited [NET && CAN && CAN_SJA1000 && ISA]
       }
       config CAN_SJA1000_PLATFORM tristate {
        prompt "Generic Platform Bus based SJA1000 driver" if [NET && CAN && CAN_SJA1000]
        inherited [NET && CAN && CAN_SJA1000]
       }
       config CAN_SJA1000_OF_PLATFORM tristate {
        prompt "Generic OF Platform Bus based SJA1000 driver" if [NET && CAN && CAN_SJA1000 && PPC_OF]
        depends on [PPC_OF]
        inherited [NET && CAN && CAN_SJA1000 && PPC_OF]
       }
       config CAN_EMS_PCI tristate {
        prompt "EMS CPC-PCI, CPC-PCIe and CPC-104P Card" if [NET && CAN && CAN_SJA1000 && PCI]
        depends on [PCI]
        inherited [NET && CAN && CAN_SJA1000 && PCI]
       }
       config CAN_KVASER_PCI tristate {
        prompt "Kvaser PCIcanx and Kvaser PCIcan PCI Cards" if [NET && CAN && CAN_SJA1000 && PCI]
        depends on [PCI]
        inherited [NET && CAN && CAN_SJA1000 && PCI]
       }
      }
     }
     menu "CAN USB interfaces" {
      depends on [NET && CAN && USB && CAN_DEV]
      config CAN_EMS_USB tristate {
       prompt "EMS CPC-USB/ARM7 CAN/USB interface" if [NET && CAN && USB && CAN_DEV]
       inherited [NET && CAN && USB && CAN_DEV]
      }
     }
    }
    config CAN_DEBUG_DEVICES boolean {
     prompt "CAN devices debugging messages" if [NET && CAN]
     depends on [CAN]
     default [N] if [NET && CAN]
     inherited [NET && CAN]
    }
   }
  }
  menuconfig IRDA tristate {
   depends on [NET && !S390]
   prompt "IrDA (infrared) subsystem support" if [NET && !S390]
   select CRC_CCITT if [NET && !S390]
   inherited [NET && !S390]
   config IRLAN tristate {
    prompt "IrLAN protocol" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   config IRNET tristate {
    prompt "IrNET protocol" if [NET && IRDA && PPP]
    depends on [IRDA && PPP]
    inherited [NET && IRDA && PPP]
   }
   config IRCOMM tristate {
    prompt "IrCOMM protocol" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   config IRDA_ULTRA boolean {
    prompt "Ultra (connectionless) protocol" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   config IRDA_CACHE_LAST_LSAP boolean {
    prompt "Cache last LSAP" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   config IRDA_FAST_RR boolean {
    prompt "Fast RRs (low latency)" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   config IRDA_DEBUG boolean {
    prompt "Debug information" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   menu "Infrared-port device drivers" {
    depends on [NET && IRDA!="n"]
    config IRTTY_SIR tristate {
     prompt "IrTTY (uses Linux serial driver)" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config BFIN_SIR tristate {
     prompt "Blackfin SIR on UART" if [NET && BLACKFIN && IRDA]
     depends on [BLACKFIN && IRDA]
     default [n] if [NET && BLACKFIN && IRDA]
     inherited [NET && BLACKFIN && IRDA]
     config BFIN_SIR0 boolean {
      prompt "Blackfin SIR on UART0" if [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART0]
      depends on [BFIN_SIR && !SERIAL_BFIN_UART0]
      inherited [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART0]
     }
     config BFIN_SIR1 boolean {
      prompt "Blackfin SIR on UART1" if [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART1 && !BF531 && !BF532 && !BF533 && !BF561]
      depends on [BFIN_SIR && !SERIAL_BFIN_UART1 && !BF531 && !BF532 && !BF533 && !BF561]
      inherited [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART1 && !BF531 && !BF532 && !BF533 && !BF561]
     }
     config BFIN_SIR2 boolean {
      prompt "Blackfin SIR on UART2" if [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART2 && (BF54x || BF538 || BF539)]
      depends on [BFIN_SIR && !SERIAL_BFIN_UART2 && (BF54x || BF538 || BF539)]
      inherited [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART2 && (BF54x || BF538 || BF539)]
     }
     config BFIN_SIR3 boolean {
      prompt "Blackfin SIR on UART3" if [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART3 && BF54x]
      depends on [BFIN_SIR && !SERIAL_BFIN_UART3 && BF54x]
      inherited [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART3 && BF54x]
     }
     choice boolean {
      prompt "SIR Mode" if [NET && IRDA && BFIN_SIR]
      depends on [BFIN_SIR]
      default [SIR_BFIN_DMA] if [NET && IRDA && BFIN_SIR]
      config SIR_BFIN_DMA boolean {
       prompt "DMA mode" if [<choice> && !DMA_UNCACHED_NONE]
       depends on [!DMA_UNCACHED_NONE]
       inherited [<choice> && !DMA_UNCACHED_NONE]
      }
      config SIR_BFIN_PIO boolean {
       prompt "PIO mode" if [<choice>]
       inherited [<choice>]
      }
     }
    }
    config DONGLE boolean {
     prompt "Serial dongle support" if [NET && IRDA && IRTTY_SIR]
     depends on [IRTTY_SIR]
     inherited [NET && IRDA && IRTTY_SIR]
     config ESI_DONGLE tristate {
      prompt "ESI JetEye PC dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
      depends on [IRTTY_SIR && DONGLE && IRDA]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA]
     }
     config ACTISYS_DONGLE tristate {
      prompt "ACTiSYS IR-220L and IR220L+ dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
      depends on [IRTTY_SIR && DONGLE && IRDA]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA]
     }
     config TEKRAM_DONGLE tristate {
      prompt "Tekram IrMate 210B dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
      depends on [IRTTY_SIR && DONGLE && IRDA]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA]
     }
     config TOIM3232_DONGLE tristate {
      prompt "TOIM3232 IrDa dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
      depends on [IRTTY_SIR && DONGLE && IRDA]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA]
     }
     config LITELINK_DONGLE tristate {
      prompt "Parallax LiteLink dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
      depends on [IRTTY_SIR && DONGLE && IRDA]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA]
     }
     config MA600_DONGLE tristate {
      prompt "Mobile Action MA600 dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
     }
     config GIRBIL_DONGLE tristate {
      prompt "Greenwich GIrBIL dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
     }
     config MCP2120_DONGLE tristate {
      prompt "Microchip MCP2120" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
     }
     config OLD_BELKIN_DONGLE tristate {
      prompt "Old Belkin dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
     }
     config ACT200L_DONGLE tristate {
      prompt "ACTiSYS IR-200L dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
     }
    }
    config KINGSUN_DONGLE tristate {
     prompt "KingSun/DonShine DS-620 IrDA-USB dongle" if [NET && IRDA && USB && EXPERIMENTAL]
     depends on [IRDA && USB && EXPERIMENTAL]
     inherited [NET && IRDA && USB && EXPERIMENTAL]
    }
    config EP7211_DONGLE tristate {
     prompt "EP7211 I/R support" if [NET && IRTTY_SIR && ARCH_EP7211 && IRDA && EXPERIMENTAL]
     depends on [IRTTY_SIR && ARCH_EP7211 && IRDA && EXPERIMENTAL]
     inherited [NET && IRTTY_SIR && ARCH_EP7211 && IRDA && EXPERIMENTAL]
    }
    config KSDAZZLE_DONGLE tristate {
     prompt "KingSun Dazzle IrDA-USB dongle (EXPERIMENTAL)" if [NET && IRDA && USB && EXPERIMENTAL]
     depends on [IRDA && USB && EXPERIMENTAL]
     inherited [NET && IRDA && USB && EXPERIMENTAL]
    }
    config KS959_DONGLE tristate {
     prompt "KingSun KS-959 IrDA-USB dongle (EXPERIMENTAL)" if [NET && IRDA && USB && EXPERIMENTAL]
     depends on [IRDA && USB && EXPERIMENTAL]
     inherited [NET && IRDA && USB && EXPERIMENTAL]
    }
    config USB_IRDA tristate {
     prompt "IrDA USB dongles" if [NET && IRDA && USB]
     depends on [IRDA && USB]
     select FW_LOADER if [NET && IRDA && USB]
     inherited [NET && IRDA && USB]
    }
    config SIGMATEL_FIR tristate {
     prompt "SigmaTel STIr4200 bridge (EXPERIMENTAL)" if [NET && IRDA && USB && EXPERIMENTAL]
     depends on [IRDA && USB && EXPERIMENTAL]
     select CRC32 if [NET && IRDA && USB && EXPERIMENTAL]
     inherited [NET && IRDA && USB && EXPERIMENTAL]
    }
    config NSC_FIR tristate {
     prompt "NSC PC87108/PC87338" if [NET && IRDA && ISA_DMA_API]
     depends on [IRDA && ISA_DMA_API]
     inherited [NET && IRDA && ISA_DMA_API]
    }
    config WINBOND_FIR tristate {
     prompt "Winbond W83977AF (IR)" if [NET && IRDA && ISA_DMA_API]
     depends on [IRDA && ISA_DMA_API]
     inherited [NET && IRDA && ISA_DMA_API]
    }
    config TOSHIBA_FIR tristate {
     prompt "Toshiba Type-O IR Port" if [NET && IRDA && PCI && !64BIT && VIRT_TO_BUS]
     depends on [IRDA && PCI && !64BIT && VIRT_TO_BUS]
     inherited [NET && IRDA && PCI && !64BIT && VIRT_TO_BUS]
    }
    config AU1000_FIR tristate {
     prompt "Alchemy Au1000 SIR/FIR" if [NET && SOC_AU1000 && IRDA]
     depends on [SOC_AU1000 && IRDA]
     inherited [NET && SOC_AU1000 && IRDA]
    }
    config SMC_IRCC_FIR tristate {
     prompt "SMSC IrCC (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
     depends on [EXPERIMENTAL && IRDA && ISA_DMA_API]
     inherited [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
    }
    config ALI_FIR tristate {
     prompt "ALi M5123 FIR (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
     depends on [EXPERIMENTAL && IRDA && ISA_DMA_API]
     inherited [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
    }
    config VLSI_FIR tristate {
     prompt "VLSI 82C147 SIR/MIR/FIR (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && PCI]
     depends on [EXPERIMENTAL && IRDA && PCI]
     inherited [NET && EXPERIMENTAL && IRDA && PCI]
    }
    config SA1100_FIR tristate {
     prompt "SA1100 Internal IR" if [NET && ARCH_SA1100 && IRDA]
     depends on [ARCH_SA1100 && IRDA]
     inherited [NET && ARCH_SA1100 && IRDA]
    }
    config VIA_FIR tristate {
     prompt "VIA VT8231/VT1211 SIR/MIR/FIR" if [NET && IRDA && ISA_DMA_API]
     depends on [IRDA && ISA_DMA_API]
     inherited [NET && IRDA && ISA_DMA_API]
    }
    config PXA_FICP tristate {
     prompt "Intel PXA2xx Internal FICP" if [NET && ARCH_PXA && IRDA]
     depends on [ARCH_PXA && IRDA]
     inherited [NET && ARCH_PXA && IRDA]
    }
    config MCS_FIR tristate {
     prompt "MosChip MCS7780 IrDA-USB dongle" if [NET && IRDA && USB && EXPERIMENTAL]
     depends on [IRDA && USB && EXPERIMENTAL]
     select CRC32 if [NET && IRDA && USB && EXPERIMENTAL]
     inherited [NET && IRDA && USB && EXPERIMENTAL]
    }
   }
  }
  menuconfig BT tristate {
   prompt "Bluetooth subsystem support" if [NET && !S390 && (RFKILL || !RFKILL)]
   depends on [NET && !S390]
   depends on [RFKILL || !RFKILL]
   inherited [NET && !S390 && (RFKILL || !RFKILL)]
   config BT_L2CAP tristate {
    prompt "L2CAP protocol support" if [NET && BT]
    depends on [BT]
    select CRC16 if [NET && BT]
    inherited [NET && BT]
   }
   config BT_SCO tristate {
    prompt "SCO links support" if [NET && BT]
    depends on [BT]
    inherited [NET && BT]
   }
   config BT_RFCOMM tristate {
    prompt "RFCOMM protocol support" if [NET && BT && BT_L2CAP]
    depends on [BT && BT_L2CAP]
    inherited [NET && BT && BT_L2CAP]
    config BT_RFCOMM_TTY boolean {
     prompt "RFCOMM TTY support" if [NET && BT_RFCOMM]
     depends on [BT_RFCOMM]
     inherited [NET && BT_RFCOMM]
    }
   }
   config BT_BNEP tristate {
    prompt "BNEP protocol support" if [NET && BT && BT_L2CAP]
    depends on [BT && BT_L2CAP]
    select CRC32 if [NET && BT && BT_L2CAP]
    inherited [NET && BT && BT_L2CAP]
    config BT_BNEP_MC_FILTER boolean {
     prompt "Multicast filter support" if [NET && BT_BNEP]
     depends on [BT_BNEP]
     inherited [NET && BT_BNEP]
    }
    config BT_BNEP_PROTO_FILTER boolean {
     prompt "Protocol filter support" if [NET && BT_BNEP]
     depends on [BT_BNEP]
     inherited [NET && BT_BNEP]
    }
   }
   config BT_CMTP tristate {
    prompt "CMTP protocol support" if [NET && BT && BT_L2CAP && ISDN_CAPI]
    depends on [BT && BT_L2CAP && ISDN_CAPI]
    inherited [NET && BT && BT_L2CAP && ISDN_CAPI]
   }
   config BT_HIDP tristate {
    prompt "HIDP protocol support" if [NET && BT && BT_L2CAP && INPUT]
    depends on [BT && BT_L2CAP && INPUT]
    select HID if [NET && BT && BT_L2CAP && INPUT]
    inherited [NET && BT && BT_L2CAP && INPUT]
   }
   menu "Bluetooth device drivers" {
    depends on [NET && BT]
    config BT_HCIBTUSB tristate {
     prompt "HCI USB driver" if [NET && BT && USB]
     depends on [USB]
     inherited [NET && BT && USB]
    }
    config BT_HCIBTSDIO tristate {
     prompt "HCI SDIO driver" if [NET && BT && MMC]
     depends on [MMC]
     inherited [NET && BT && MMC]
    }
    config BT_HCIUART tristate {
     prompt "HCI UART driver" if [NET && BT]
     inherited [NET && BT]
     config BT_HCIUART_H4 boolean {
      prompt "UART (H4) protocol support" if [NET && BT && BT_HCIUART]
      depends on [BT_HCIUART]
      inherited [NET && BT && BT_HCIUART]
     }
     config BT_HCIUART_BCSP boolean {
      prompt "BCSP protocol support" if [NET && BT && BT_HCIUART]
      depends on [BT_HCIUART]
      select BITREVERSE if [NET && BT && BT_HCIUART]
      inherited [NET && BT && BT_HCIUART]
     }
     config BT_HCIUART_LL boolean {
      prompt "HCILL protocol support" if [NET && BT && BT_HCIUART]
      depends on [BT_HCIUART]
      inherited [NET && BT && BT_HCIUART]
     }
    }
    config BT_HCIBCM203X tristate {
     prompt "HCI BCM203x USB driver" if [NET && BT && USB]
     depends on [USB]
     select FW_LOADER if [NET && BT && USB]
     inherited [NET && BT && USB]
    }
    config BT_HCIBPA10X tristate {
     prompt "HCI BPA10x USB driver" if [NET && BT && USB]
     depends on [USB]
     inherited [NET && BT && USB]
    }
    config BT_HCIBFUSB tristate {
     prompt "HCI BlueFRITZ! USB driver" if [NET && BT && USB]
     depends on [USB]
     select FW_LOADER if [NET && BT && USB]
     inherited [NET && BT && USB]
    }
    config BT_HCIDTL1 tristate {
     prompt "HCI DTL1 (PC Card) driver" if [NET && BT && PCMCIA]
     depends on [PCMCIA]
     inherited [NET && BT && PCMCIA]
    }
    config BT_HCIBT3C tristate {
     prompt "HCI BT3C (PC Card) driver" if [NET && BT && PCMCIA]
     depends on [PCMCIA]
     select FW_LOADER if [NET && BT && PCMCIA]
     inherited [NET && BT && PCMCIA]
    }
    config BT_HCIBLUECARD tristate {
     prompt "HCI BlueCard (PC Card) driver" if [NET && BT && PCMCIA]
     depends on [PCMCIA]
     inherited [NET && BT && PCMCIA]
    }
    config BT_HCIBTUART tristate {
     prompt "HCI UART (PC Card) device driver" if [NET && BT && PCMCIA]
     depends on [PCMCIA]
     inherited [NET && BT && PCMCIA]
    }
    config BT_HCIVHCI tristate {
     prompt "HCI VHCI (Virtual HCI device) driver" if [NET && BT]
     inherited [NET && BT]
    }
    config BT_MRVL tristate {
     prompt "Marvell Bluetooth driver support" if [NET && BT]
     inherited [NET && BT]
     config BT_MRVL_SDIO tristate {
      prompt "Marvell BT-over-SDIO driver" if [NET && BT && BT_MRVL && MMC]
      depends on [BT_MRVL && MMC]
      select FW_LOADER if [NET && BT && BT_MRVL && MMC]
      inherited [NET && BT && BT_MRVL && MMC]
     }
    }
   }
  }
  config AF_RXRPC tristate {
   prompt "RxRPC session sockets" if [NET && INET && EXPERIMENTAL]
   depends on [INET && EXPERIMENTAL]
   select CRYPTO if [NET && INET && EXPERIMENTAL]
   select KEYS if [NET && INET && EXPERIMENTAL]
   inherited [NET && INET && EXPERIMENTAL]
   config AF_RXRPC_DEBUG boolean {
    prompt "RxRPC dynamic debugging" if [NET && AF_RXRPC]
    depends on [AF_RXRPC]
    inherited [NET && AF_RXRPC]
   }
   config RXKAD tristate {
    prompt "RxRPC Kerberos security" if [NET && AF_RXRPC]
    depends on [AF_RXRPC]
    select CRYPTO if [NET && AF_RXRPC]
    select CRYPTO_MANAGER if [NET && AF_RXRPC]
    select CRYPTO_BLKCIPHER if [NET && AF_RXRPC]
    select CRYPTO_PCBC if [NET && AF_RXRPC]
    select CRYPTO_FCRYPT if [NET && AF_RXRPC]
    inherited [NET && AF_RXRPC]
   }
  }
  config FIB_RULES boolean {
   inherited [NET]
  }
  menuconfig WIRELESS boolean {
   prompt "Wireless" if [NET && !S390]
   depends on [!S390]
   default [y] if [NET && !S390]
   inherited [NET && !S390]
   if [NET && WIRELESS] {
    config CFG80211 tristate {
     prompt "cfg80211 - wireless configuration API" if [NET && WIRELESS && (RFKILL || !RFKILL)]
     depends on [RFKILL || !RFKILL]
     inherited [NET && WIRELESS && (RFKILL || !RFKILL)]
     config NL80211_TESTMODE boolean {
      prompt "nl80211 testmode command" if [NET && WIRELESS && CFG80211]
      depends on [CFG80211]
      inherited [NET && WIRELESS && CFG80211]
     }
     config CFG80211_DEVELOPER_WARNINGS boolean {
      prompt "enable developer warnings" if [NET && WIRELESS && CFG80211]
      depends on [CFG80211]
      default [n] if [NET && WIRELESS && CFG80211]
      inherited [NET && WIRELESS && CFG80211]
     }
     config CFG80211_REG_DEBUG boolean {
      prompt "cfg80211 regulatory debugging" if [NET && WIRELESS && CFG80211]
      depends on [CFG80211]
      default [n] if [NET && WIRELESS && CFG80211]
      inherited [NET && WIRELESS && CFG80211]
     }
     config CFG80211_DEFAULT_PS boolean {
      prompt "enable powersave by default" if [NET && WIRELESS && CFG80211]
      depends on [CFG80211]
      default [y] if [NET && WIRELESS && CFG80211]
      inherited [NET && WIRELESS && CFG80211]
     }
    }
    config CFG80211_DEFAULT_PS_VALUE integer {
     default [1] if [NET && WIRELESS && CFG80211_DEFAULT_PS]
     default [0] if [NET && WIRELESS]
     inherited [NET && WIRELESS]
    }
    config CFG80211_DEBUGFS boolean {
     prompt "cfg80211 DebugFS entries" if [NET && WIRELESS && CFG80211 && DEBUG_FS]
     depends on [CFG80211 && DEBUG_FS]
     inherited [NET && WIRELESS && CFG80211 && DEBUG_FS]
    }
    config WIRELESS_OLD_REGULATORY boolean {
     prompt "Old wireless static regulatory definitions" if [NET && WIRELESS]
     default [n] if [NET && WIRELESS]
     inherited [NET && WIRELESS]
    }
    config WIRELESS_EXT boolean {
     prompt "Wireless extensions" if [NET && WIRELESS]
     default [y] if [NET && WIRELESS]
     inherited [NET && WIRELESS]
     config WIRELESS_EXT_SYSFS boolean {
      prompt "Wireless extensions sysfs files" if [NET && WIRELESS && WIRELESS_EXT && SYSFS]
      default [y] if [NET && WIRELESS && WIRELESS_EXT && SYSFS]
      depends on [WIRELESS_EXT && SYSFS]
      inherited [NET && WIRELESS && WIRELESS_EXT && SYSFS]
     }
    }
    config LIB80211 tristate {
     prompt "Common routines for IEEE802.11 drivers" if [NET && WIRELESS]
     default [n] if [NET && WIRELESS]
     inherited [NET && WIRELESS]
    }
    config LIB80211_CRYPT_WEP tristate {
     inherited [NET && WIRELESS]
    }
    config LIB80211_CRYPT_CCMP tristate {
     inherited [NET && WIRELESS]
    }
    config LIB80211_CRYPT_TKIP tristate {
     inherited [NET && WIRELESS]
    }
    config LIB80211_DEBUG boolean {
     prompt "lib80211 debugging messages" if [NET && WIRELESS && LIB80211]
     depends on [LIB80211]
     default [n] if [NET && WIRELESS && LIB80211]
     inherited [NET && WIRELESS && LIB80211]
    }
    config MAC80211 tristate {
     prompt "Generic IEEE 802.11 Networking Stack (mac80211)" if [NET && WIRELESS && CFG80211]
     depends on [CFG80211]
     select CRYPTO if [NET && WIRELESS && CFG80211]
     select CRYPTO_ECB if [NET && WIRELESS && CFG80211]
     select CRYPTO_ARC4 if [NET && WIRELESS && CFG80211]
     select CRYPTO_AES if [NET && WIRELESS && CFG80211]
     select CRC32 if [NET && WIRELESS && CFG80211]
     inherited [NET && WIRELESS && CFG80211]
    }
    if [NET && WIRELESS && MAC80211!="n"] {
     config MAC80211_RC_PID boolean {
      prompt "PID controller based rate control algorithm" if [NET && WIRELESS && MAC80211 && EMBEDDED]
      inherited [NET && WIRELESS && MAC80211]
     }
     config MAC80211_RC_MINSTREL boolean {
      prompt "Minstrel" if [NET && WIRELESS && MAC80211 && EMBEDDED]
      default [y] if [NET && WIRELESS && MAC80211]
      inherited [NET && WIRELESS && MAC80211]
     }
     choice boolean {
      prompt "Default rate control algorithm" if [NET && WIRELESS && MAC80211]
      default [MAC80211_RC_DEFAULT_MINSTREL] if [NET && WIRELESS && MAC80211]
      config MAC80211_RC_DEFAULT_PID boolean {
       prompt "PID controller based rate control algorithm" if [<choice> && MAC80211_RC_PID]
       depends on [MAC80211_RC_PID]
       inherited [<choice> && MAC80211_RC_PID]
      }
      config MAC80211_RC_DEFAULT_MINSTREL boolean {
       prompt "Minstrel" if [<choice> && MAC80211_RC_MINSTREL]
       depends on [MAC80211_RC_MINSTREL]
       inherited [<choice> && MAC80211_RC_MINSTREL]
      }
     }
     config MAC80211_RC_DEFAULT string {
      default ["minstrel"] if [NET && WIRELESS && MAC80211 && MAC80211_RC_DEFAULT_MINSTREL]
      default ["pid"] if [NET && WIRELESS && MAC80211 && MAC80211_RC_DEFAULT_PID]
      default [""] if [NET && WIRELESS && MAC80211]
      inherited [NET && WIRELESS && MAC80211]
     }
    }
    config MAC80211_MESH boolean {
     prompt "Enable mac80211 mesh networking (pre-802.11s) support" if [NET && WIRELESS && MAC80211 && EXPERIMENTAL]
     depends on [MAC80211 && EXPERIMENTAL]
     inherited [NET && WIRELESS && MAC80211 && EXPERIMENTAL]
    }
    config MAC80211_LEDS boolean {
     prompt "Enable LED triggers" if [NET && WIRELESS && MAC80211]
     depends on [MAC80211]
     select NEW_LEDS if [NET && WIRELESS && MAC80211]
     select LEDS_TRIGGERS if [NET && WIRELESS && MAC80211]
     inherited [NET && WIRELESS && MAC80211]
    }
    config MAC80211_DEBUGFS boolean {
     prompt "Export mac80211 internals in DebugFS" if [NET && WIRELESS && MAC80211 && DEBUG_FS]
     depends on [MAC80211 && DEBUG_FS]
     inherited [NET && WIRELESS && MAC80211 && DEBUG_FS]
    }
    menuconfig MAC80211_DEBUG_MENU boolean {
     prompt "Select mac80211 debugging features" if [NET && WIRELESS && MAC80211]
     depends on [MAC80211]
     inherited [NET && WIRELESS && MAC80211]
     config MAC80211_DEBUG_PACKET_ALIGNMENT boolean {
      prompt "Enable packet alignment debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_NOINLINE boolean {
      prompt "Do not inline TX/RX handlers" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_VERBOSE_DEBUG boolean {
      prompt "Verbose debugging output" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_HT_DEBUG boolean {
      prompt "Verbose HT debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_TKIP_DEBUG boolean {
      prompt "Verbose TKIP debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_IBSS_DEBUG boolean {
      prompt "Verbose IBSS debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_VERBOSE_PS_DEBUG boolean {
      prompt "Verbose powersave mode debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_VERBOSE_MPL_DEBUG boolean {
      prompt "Verbose mesh peer link debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU && MAC80211_MESH]
      depends on [MAC80211_DEBUG_MENU]
      depends on [MAC80211_MESH]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU && MAC80211_MESH]
     }
     config MAC80211_DEBUG_COUNTERS boolean {
      prompt "Extra statistics for TX/RX debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU && MAC80211_DEBUGFS]
      depends on [MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUGFS]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU && MAC80211_DEBUGFS]
     }
     config MAC80211_DRIVER_API_TRACER boolean {
      prompt "Driver API tracer" if [NET && WIRELESS && MAC80211_DEBUG_MENU && EVENT_TRACING]
      depends on [MAC80211_DEBUG_MENU]
      depends on [EVENT_TRACING]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU && EVENT_TRACING]
     }
    }
   }
  }
  menuconfig WIMAX tristate {
   prompt "WiMAX Wireless Broadband support" if [NET && (RFKILL || !RFKILL)]
   depends on [RFKILL || !RFKILL]
   inherited [NET && (RFKILL || !RFKILL)]
   config WIMAX_DEBUG_LEVEL integer {
    prompt "WiMAX debug level" if [NET && WIMAX]
    depends on [WIMAX]
    default [8] if [NET && WIMAX]
    inherited [NET && WIMAX]
   }
  }
  menuconfig RFKILL tristate {
   prompt "RF switch subsystem support" if [NET]
   inherited [NET]
   config RFKILL_LEDS boolean {
    depends on [RFKILL]
    depends on [LEDS_TRIGGERS="y" || RFKILL="LEDS_TRIGGERS"]
    default [y] if [NET && RFKILL && (LEDS_TRIGGERS || RFKILL="LEDS_TRIGGERS")]
    inherited [NET && RFKILL && (LEDS_TRIGGERS || RFKILL="LEDS_TRIGGERS")]
   }
   config RFKILL_INPUT boolean {
    prompt "RF switch input support" if [NET && RFKILL && (INPUT="y" || RFKILL="INPUT") && EMBEDDED]
    depends on [RFKILL]
    depends on [INPUT="y" || RFKILL="INPUT"]
    default [y] if [NET && RFKILL && (INPUT="y" || RFKILL="INPUT") && !EMBEDDED]
    inherited [NET && RFKILL && (INPUT="y" || RFKILL="INPUT")]
   }
  }
  menuconfig NET_9P tristate {
   depends on [NET && EXPERIMENTAL]
   prompt "Plan 9 Resource Sharing Support (9P2000) (Experimental)" if [NET && EXPERIMENTAL]
   inherited [NET && EXPERIMENTAL]
   if [NET && NET_9P] {
    config NET_9P_VIRTIO tristate {
     depends on [EXPERIMENTAL && VIRTIO]
     prompt "9P Virtio Transport (Experimental)" if [NET && NET_9P && EXPERIMENTAL && VIRTIO]
     inherited [NET && NET_9P && EXPERIMENTAL && VIRTIO]
    }
    config NET_9P_RDMA tristate {
     depends on [INET && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
     prompt "9P RDMA Transport (Experimental)" if [NET && NET_9P && INET && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
     inherited [NET && NET_9P && INET && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
    }
    config NET_9P_DEBUG boolean {
     prompt "Debug information" if [NET && NET_9P]
     inherited [NET && NET_9P]
    }
   }
  }
 }
}
menu "Device Drivers" {
 menu "Generic Driver Options" {
  config UEVENT_HELPER_PATH string {
   prompt "path to uevent helper" if [HOTPLUG]
   depends on [HOTPLUG]
   default ["/sbin/hotplug"] if [HOTPLUG]
   inherited [HOTPLUG]
  }
  config DEVTMPFS boolean {
   prompt "Create a kernel maintained /dev tmpfs (EXPERIMENTAL)" if [HOTPLUG && SHMEM && TMPFS]
   depends on [HOTPLUG && SHMEM && TMPFS]
   inherited [HOTPLUG && SHMEM && TMPFS]
   config DEVTMPFS_MOUNT boolean {
    prompt "Automount devtmpfs at /dev" if [DEVTMPFS]
    depends on [DEVTMPFS]
    inherited [DEVTMPFS]
   }
  }
  config STANDALONE boolean {
   prompt "Select only drivers that don't need compile-time external firmware" if [EXPERIMENTAL]
   default [y] if []
  }
  config PREVENT_FIRMWARE_BUILD boolean {
   prompt "Prevent firmware from being built" if []
   default [y] if []
  }
  config FW_LOADER tristate {
   prompt "Userspace firmware loading support" if [HOTPLUG && EMBEDDED]
   depends on [HOTPLUG]
   default [y] if [HOTPLUG]
   inherited [HOTPLUG]
   config FIRMWARE_IN_KERNEL boolean {
    prompt "Include in-kernel firmware blobs in kernel binary" if [FW_LOADER]
    depends on [FW_LOADER]
    default [y] if [FW_LOADER]
    inherited [FW_LOADER]
   }
   config EXTRA_FIRMWARE string {
    prompt "External firmware blobs to build into the kernel binary" if [FW_LOADER]
    depends on [FW_LOADER]
    inherited [FW_LOADER]
   }
  }
  config EXTRA_FIRMWARE_DIR string {
   prompt "Firmware blobs root directory" if [EXTRA_FIRMWARE!=""]
   depends on [EXTRA_FIRMWARE!=""]
   default ["firmware"] if [EXTRA_FIRMWARE!=""]
   inherited [EXTRA_FIRMWARE!=""]
  }
  config DEBUG_DRIVER boolean {
   prompt "Driver Core verbose debug messages" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_DEVRES boolean {
   prompt "Managed device resources verbose debug messages" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config SYS_HYPERVISOR boolean {
   default [n] if []
  }
 }
 menuconfig CONNECTOR tristate {
  prompt "Connector - unified userspace <-> kernelspace linker" if [NET]
  depends on [NET]
  inherited [NET]
  if [CONNECTOR] {
   config PROC_EVENTS boolean {
    prompt "Report process events to userspace" if [CONNECTOR="y"]
    depends on [CONNECTOR="y"]
    default [y] if [CONNECTOR="y"]
    inherited [CONNECTOR="y"]
   }
  }
 }
 menuconfig MTD tristate {
  prompt "Memory Technology Device (MTD) support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [MTD] {
   config MTD_DEBUG boolean {
    prompt "Debugging" if [MTD]
    inherited [MTD]
    config MTD_DEBUG_VERBOSE integer {
     prompt "Debugging verbosity (0 = quiet, 3 = noisy)" if [MTD && MTD_DEBUG]
     depends on [MTD_DEBUG]
     default [0] if [MTD && MTD_DEBUG]
     inherited [MTD && MTD_DEBUG]
    }
   }
   config MTD_TESTS tristate {
    prompt "MTD tests support" if [MTD && m && <choice>]
    depends on [m]
    inherited [MTD && m && <choice>]
   }
   config MTD_CONCAT tristate {
    prompt "MTD concatenating support" if [MTD]
    inherited [MTD]
   }
   config MTD_PARTITIONS boolean {
    prompt "MTD partitioning support" if [MTD]
    inherited [MTD]
    config MTD_REDBOOT_PARTS tristate {
     prompt "RedBoot partition table parsing" if [MTD && MTD_PARTITIONS]
     depends on [MTD_PARTITIONS]
     inherited [MTD && MTD_PARTITIONS]
     config MTD_REDBOOT_DIRECTORY_BLOCK integer {
      prompt "Location of RedBoot partition table" if [MTD && MTD_REDBOOT_PARTS]
      depends on [MTD_REDBOOT_PARTS]
      default [-1] if [MTD && MTD_REDBOOT_PARTS]
      inherited [MTD && MTD_REDBOOT_PARTS]
     }
     config MTD_REDBOOT_PARTS_UNALLOCATED boolean {
      prompt "Include unallocated flash regions" if [MTD && MTD_REDBOOT_PARTS]
      depends on [MTD_REDBOOT_PARTS]
      inherited [MTD && MTD_REDBOOT_PARTS]
     }
     config MTD_REDBOOT_PARTS_READONLY boolean {
      prompt "Force read-only for RedBoot system images" if [MTD && MTD_REDBOOT_PARTS]
      depends on [MTD_REDBOOT_PARTS]
      inherited [MTD && MTD_REDBOOT_PARTS]
     }
    }
    config MTD_CMDLINE_PARTS boolean {
     prompt "Command line partition table parsing" if [MTD_PARTITIONS && MTD="y"]
     depends on [MTD_PARTITIONS="y" && MTD="y"]
     inherited [MTD_PARTITIONS && MTD="y"]
    }
    config MTD_AFS_PARTS tristate {
     prompt "ARM Firmware Suite partition parsing" if [MTD && ARM && MTD_PARTITIONS]
     depends on [ARM && MTD_PARTITIONS]
     inherited [MTD && ARM && MTD_PARTITIONS]
    }
    config MTD_OF_PARTS tristate {
     prompt "Flash partition map based on OF description" if [MTD && (MICROBLAZE || PPC_OF) && MTD_PARTITIONS]
     depends on [(MICROBLAZE || PPC_OF) && MTD_PARTITIONS]
     inherited [MTD && (MICROBLAZE || PPC_OF) && MTD_PARTITIONS]
    }
    config MTD_AR7_PARTS tristate {
     prompt "TI AR7 partitioning support" if [MTD && MTD_PARTITIONS]
     depends on [MTD_PARTITIONS]
     inherited [MTD && MTD_PARTITIONS]
    }
   }
   config MTD_CHAR tristate {
    prompt "Direct char device access to MTD devices" if [MTD]
    inherited [MTD]
   }
   config HAVE_MTD_OTP boolean {
    inherited [MTD]
   }
   config MTD_BLKDEVS tristate {
    prompt "Common interface to block layer for MTD 'translation layers'" if [MTD && BLOCK]
    depends on [BLOCK]
    default [n] if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config MTD_BLOCK tristate {
    prompt "Caching block device access to MTD devices" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
    config MTD_BLOCK_RO tristate {
     prompt "Readonly block device access to MTD devices" if [MTD && MTD_BLOCK!="y" && BLOCK]
     depends on [MTD_BLOCK!="y" && BLOCK]
     select MTD_BLKDEVS if [MTD && MTD_BLOCK!="y" && BLOCK]
     inherited [MTD && MTD_BLOCK!="y" && BLOCK]
    }
   }
   config FTL tristate {
    prompt "FTL (Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config NFTL tristate {
    prompt "NFTL (NAND Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
    config NFTL_RW boolean {
     prompt "Write support for NFTL" if [MTD && NFTL]
     depends on [NFTL]
     inherited [MTD && NFTL]
    }
   }
   config INFTL tristate {
    prompt "INFTL (Inverse NAND Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config RFD_FTL tristate {
    prompt "Resident Flash Disk (Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config SSFDC tristate {
    prompt "NAND SSFDC (SmartMedia) read only translation layer" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config MTD_OOPS tristate {
    prompt "Log panic/oops to an MTD buffer" if [MTD]
    depends on [MTD]
    inherited [MTD]
   }
   menu "RAM/ROM/Flash chip drivers" {
    depends on [MTD]
    config MTD_CFI tristate {
     prompt "Detect flash chips by Common Flash Interface (CFI) probe" if [MTD]
     select MTD_GEN_PROBE if [MTD]
     select MTD_CFI_UTIL if [MTD]
     inherited [MTD]
    }
    config MTD_JEDECPROBE tristate {
     prompt "Detect non-CFI AMD/JEDEC-compatible flash chips" if [MTD]
     select MTD_GEN_PROBE if [MTD]
     inherited [MTD]
    }
    config MTD_GEN_PROBE tristate {
     inherited [MTD]
    }
    config MTD_CFI_ADV_OPTIONS boolean {
     prompt "Flash chip driver advanced configuration options" if [MTD && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     inherited [MTD && MTD_GEN_PROBE]
     choice boolean {
      prompt "Flash cmd/query data swapping" if [MTD && MTD_CFI_ADV_OPTIONS]
      depends on [MTD_CFI_ADV_OPTIONS]
      default [MTD_CFI_NOSWAP] if [MTD && MTD_CFI_ADV_OPTIONS]
      config MTD_CFI_NOSWAP boolean {
       prompt "NO" if [<choice>]
       inherited [<choice>]
      }
      config MTD_CFI_BE_BYTE_SWAP boolean {
       prompt "BIG_ENDIAN_BYTE" if [<choice>]
       inherited [<choice>]
      }
      config MTD_CFI_LE_BYTE_SWAP boolean {
       prompt "LITTLE_ENDIAN_BYTE" if [<choice>]
       inherited [<choice>]
      }
     }
     config MTD_CFI_GEOMETRY boolean {
      prompt "Specific CFI Flash geometry selection" if [MTD && MTD_CFI_ADV_OPTIONS]
      depends on [MTD_CFI_ADV_OPTIONS]
      inherited [MTD && MTD_CFI_ADV_OPTIONS]
      config MTD_MAP_BANK_WIDTH_1 boolean {
       prompt "Support  8-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_2 boolean {
       prompt "Support 16-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_4 boolean {
       prompt "Support 32-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_8 boolean {
       prompt "Support 64-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_16 boolean {
       prompt "Support 128-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_32 boolean {
       prompt "Support 256-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I1 boolean {
       prompt "Support 1-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I2 boolean {
       prompt "Support 2-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I4 boolean {
       prompt "Support 4-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I8 boolean {
       prompt "Support 8-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
     }
     config MTD_OTP boolean {
      prompt "Protection Registers aka one-time programmable (OTP) bits" if [MTD && MTD_CFI_ADV_OPTIONS]
      depends on [MTD_CFI_ADV_OPTIONS]
      select HAVE_MTD_OTP if [MTD && MTD_CFI_ADV_OPTIONS]
      default [n] if [MTD && MTD_CFI_ADV_OPTIONS]
      inherited [MTD && MTD_CFI_ADV_OPTIONS]
     }
    }
    config MTD_CFI_INTELEXT tristate {
     prompt "Support for Intel/Sharp flash chips" if [MTD && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     select MTD_CFI_UTIL if [MTD && MTD_GEN_PROBE]
     inherited [MTD && MTD_GEN_PROBE]
    }
    config MTD_CFI_AMDSTD tristate {
     prompt "Support for AMD/Fujitsu/Spansion flash chips" if [MTD && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     select MTD_CFI_UTIL if [MTD && MTD_GEN_PROBE]
     inherited [MTD && MTD_GEN_PROBE]
    }
    config MTD_CFI_STAA tristate {
     prompt "Support for ST (Advanced Architecture) flash chips" if [MTD && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     select MTD_CFI_UTIL if [MTD && MTD_GEN_PROBE]
     inherited [MTD && MTD_GEN_PROBE]
    }
    config MTD_CFI_UTIL tristate {
     inherited [MTD]
    }
    config MTD_RAM tristate {
     prompt "Support for RAM chips in bus mapping" if [MTD]
     inherited [MTD]
    }
    config MTD_ROM tristate {
     prompt "Support for ROM chips in bus mapping" if [MTD]
     inherited [MTD]
    }
    config MTD_ABSENT tristate {
     prompt "Support for absent chips in bus mapping" if [MTD]
     inherited [MTD]
    }
    config MTD_XIP boolean {
     prompt "XIP aware MTD support" if [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
     depends on [!SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
     default [y] if [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP && XIP_KERNEL]
     inherited [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
    }
   }
   menu "Mapping drivers for chip access" {
    depends on [MTD]
    config MTD_COMPLEX_MAPPINGS boolean {
     prompt "Support non-linear mappings of flash chips" if [MTD]
     inherited [MTD]
    }
    config MTD_PHYSMAP tristate {
     prompt "Flash device in physical memory map" if [MTD && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM || MTD_LPDDR)]
     depends on [MTD_CFI || MTD_JEDECPROBE || MTD_ROM || MTD_LPDDR]
     inherited [MTD && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM || MTD_LPDDR)]
     config MTD_PHYSMAP_COMPAT boolean {
      prompt "Physmap compat support" if [MTD && MTD_PHYSMAP]
      depends on [MTD_PHYSMAP]
      default [n] if [MTD && MTD_PHYSMAP]
      inherited [MTD && MTD_PHYSMAP]
      config MTD_PHYSMAP_START hex {
       prompt "Physical start address of flash mapping" if [MTD && MTD_PHYSMAP_COMPAT]
       depends on [MTD_PHYSMAP_COMPAT]
       default [0x8000000] if [MTD && MTD_PHYSMAP_COMPAT]
       inherited [MTD && MTD_PHYSMAP_COMPAT]
      }
      config MTD_PHYSMAP_LEN hex {
       prompt "Physical length of flash mapping" if [MTD && MTD_PHYSMAP_COMPAT]
       depends on [MTD_PHYSMAP_COMPAT]
       default [0] if [MTD && MTD_PHYSMAP_COMPAT]
       inherited [MTD && MTD_PHYSMAP_COMPAT]
      }
      config MTD_PHYSMAP_BANKWIDTH integer {
       prompt "Bank width in octets" if [MTD && MTD_PHYSMAP_COMPAT]
       depends on [MTD_PHYSMAP_COMPAT]
       default [2] if [MTD && MTD_PHYSMAP_COMPAT]
       inherited [MTD && MTD_PHYSMAP_COMPAT]
      }
     }
    }
    config MTD_PHYSMAP_OF tristate {
     prompt "Flash device in physical memory map based on OF description" if [MTD && (MICROBLAZE || PPC_OF) && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
     depends on [(MICROBLAZE || PPC_OF) && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
     inherited [MTD && (MICROBLAZE || PPC_OF) && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
    }
    config MTD_PMC_MSP_EVM tristate {
     prompt "CFI Flash device mapped on PMC-Sierra MSP" if [MTD && PMC_MSP && MTD_CFI]
     depends on [PMC_MSP && MTD_CFI]
     select MTD_PARTITIONS if [MTD && PMC_MSP && MTD_CFI]
     inherited [MTD && PMC_MSP && MTD_CFI]
     choice boolean {
      prompt "Maximum mappable memory available for flash IO" if [MTD && MTD_PMC_MSP_EVM]
      depends on [MTD_PMC_MSP_EVM]
      default [MSP_FLASH_MAP_LIMIT_32M] if [MTD && MTD_PMC_MSP_EVM]
      config MSP_FLASH_MAP_LIMIT_32M boolean {
       prompt "32M" if [<choice>]
       inherited [<choice>]
      }
     }
    }
    config MSP_FLASH_MAP_LIMIT hex {
     default [0x02000000] if [MTD && MSP_FLASH_MAP_LIMIT_32M]
     depends on [MSP_FLASH_MAP_LIMIT_32M]
     inherited [MTD && MSP_FLASH_MAP_LIMIT_32M]
    }
    config MTD_SUN_UFLASH tristate {
     prompt "Sun Microsystems userflash support" if [MTD && SPARC && MTD_CFI && PCI]
     depends on [SPARC && MTD_CFI && PCI]
     inherited [MTD && SPARC && MTD_CFI && PCI]
    }
    config MTD_SC520CDP tristate {
     prompt "CFI Flash device mapped on AMD SC520 CDP" if [MTD && X86 && MTD_CFI && MTD_CONCAT]
     depends on [X86 && MTD_CFI && MTD_CONCAT]
     inherited [MTD && X86 && MTD_CFI && MTD_CONCAT]
    }
    config MTD_NETSC520 tristate {
     prompt "CFI Flash device mapped on AMD NetSc520" if [MTD && X86 && MTD_CFI && MTD_PARTITIONS]
     depends on [X86 && MTD_CFI && MTD_PARTITIONS]
     inherited [MTD && X86 && MTD_CFI && MTD_PARTITIONS]
    }
    config MTD_TS5500 tristate {
     prompt "JEDEC Flash device mapped on Technologic Systems TS-5500" if [MTD && X86]
     depends on [X86]
     select MTD_PARTITIONS if [MTD && X86]
     select MTD_JEDECPROBE if [MTD && X86]
     select MTD_CFI_AMDSTD if [MTD && X86]
     inherited [MTD && X86]
    }
    config MTD_SBC_GXX tristate {
     prompt "CFI Flash device mapped on Arcom SBC-GXx boards" if [MTD && X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
     depends on [X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_PXA2XX tristate {
     prompt "CFI Flash device mapped on Intel XScale PXA2xx based boards" if [MTD && (PXA25x || PXA27x) && MTD_CFI_INTELEXT]
     depends on [(PXA25x || PXA27x) && MTD_CFI_INTELEXT]
     select MTD_PARTITIONS if [MTD && (PXA25x || PXA27x) && MTD_CFI_INTELEXT]
     inherited [MTD && (PXA25x || PXA27x) && MTD_CFI_INTELEXT]
    }
    config MTD_OCTAGON tristate {
     prompt "JEDEC Flash device mapped on Octagon 5066 SBC" if [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     depends on [X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_VMAX tristate {
     prompt "JEDEC Flash device mapped on Tempustech VMAX SBC301" if [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     depends on [X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_SCx200_DOCFLASH tristate {
     prompt "Flash device mapped with DOCCS on NatSemi SCx200" if [MTD && SCx200 && MTD_CFI && MTD_PARTITIONS]
     depends on [SCx200 && MTD_CFI && MTD_PARTITIONS]
     inherited [MTD && SCx200 && MTD_CFI && MTD_PARTITIONS]
    }
    config MTD_AMD76XROM tristate {
     prompt "BIOS flash chip on AMD76x southbridge" if [MTD && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD && X86 && MTD_JEDECPROBE]
    }
    config MTD_ICHXROM tristate {
     prompt "BIOS flash chip on Intel Controller Hub 2/3/4/5" if [MTD && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD && X86 && MTD_JEDECPROBE]
    }
    config MTD_ESB2ROM tristate {
     prompt "BIOS flash chip on Intel ESB Controller Hub 2" if [MTD && X86 && MTD_JEDECPROBE && PCI]
     depends on [X86 && MTD_JEDECPROBE && PCI]
     inherited [MTD && X86 && MTD_JEDECPROBE && PCI]
    }
    config MTD_CK804XROM tristate {
     prompt "BIOS flash chip on Nvidia CK804" if [MTD && X86 && MTD_JEDECPROBE && PCI]
     depends on [X86 && MTD_JEDECPROBE && PCI]
     inherited [MTD && X86 && MTD_JEDECPROBE && PCI]
    }
    config MTD_SCB2_FLASH tristate {
     prompt "BIOS flash chip on Intel SCB2 boards" if [MTD && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD && X86 && MTD_JEDECPROBE]
    }
    config MTD_TSUNAMI tristate {
     prompt "Flash chips on Tsunami TIG bus" if [MTD && ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
     depends on [ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_NETtel tristate {
     prompt "CFI flash device on SnapGear/SecureEdge" if [MTD && X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
     depends on [X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
     inherited [MTD && X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
    }
    config MTD_ALCHEMY tristate {
     prompt "AMD Alchemy Pb1xxx/Db1xxx/RDK MTD support" if [MTD && SOC_AU1X00 && MTD_PARTITIONS && MTD_CFI]
     depends on [SOC_AU1X00 && MTD_PARTITIONS && MTD_CFI]
     inherited [MTD && SOC_AU1X00 && MTD_PARTITIONS && MTD_CFI]
    }
    config MTD_DILNETPC tristate {
     prompt "CFI Flash device mapped on DIL/Net PC" if [MTD && X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT && BROKEN]
     depends on [X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT && BROKEN]
     inherited [MTD && X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT && BROKEN]
     config MTD_DILNETPC_BOOTSIZE hex {
      prompt "Size of DIL/Net PC flash boot partition" if [MTD && MTD_DILNETPC]
      depends on [MTD_DILNETPC]
      default [0x80000] if [MTD && MTD_DILNETPC]
      inherited [MTD && MTD_DILNETPC]
     }
    }
    config MTD_L440GX tristate {
     prompt "BIOS flash chip on Intel L440GX boards" if [MTD && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD && X86 && MTD_JEDECPROBE]
    }
    config MTD_TQM8XXL tristate {
     prompt "CFI Flash device mapped on TQM8XXL" if [MTD && MTD_CFI && TQM8xxL]
     depends on [MTD_CFI && TQM8xxL]
     inherited [MTD && MTD_CFI && TQM8xxL]
    }
    config MTD_RPXLITE tristate {
     prompt "CFI Flash device mapped on RPX Lite or CLLF" if [MTD && MTD_CFI && (RPXCLASSIC || RPXLITE)]
     depends on [MTD_CFI && (RPXCLASSIC || RPXLITE)]
     inherited [MTD && MTD_CFI && (RPXCLASSIC || RPXLITE)]
    }
    config MTD_MBX860 tristate {
     prompt "System flash on MBX860 board" if [MTD && MTD_CFI && MBX]
     depends on [MTD_CFI && MBX]
     inherited [MTD && MTD_CFI && MBX]
    }
    config MTD_DBOX2 tristate {
     prompt "CFI Flash device mapped on D-Box2" if [MTD && DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
     depends on [DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
     inherited [MTD && DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
    }
    config MTD_CFI_FLAGADM tristate {
     prompt "CFI Flash device mapping on FlagaDM" if [MTD && 8xx && MTD_CFI]
     depends on [8xx && MTD_CFI]
     inherited [MTD && 8xx && MTD_CFI]
    }
    config MTD_REDWOOD tristate {
     prompt "CFI Flash devices mapped on IBM Redwood" if [MTD && MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
     depends on [MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
     inherited [MTD && MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
    }
    config MTD_SOLUTIONENGINE tristate {
     prompt "CFI Flash device mapped on Hitachi SolutionEngine" if [MTD && SUPERH && SOLUTION_ENGINE && MTD_CFI && MTD_REDBOOT_PARTS]
     depends on [SUPERH && SOLUTION_ENGINE && MTD_CFI && MTD_REDBOOT_PARTS]
     inherited [MTD && SUPERH && SOLUTION_ENGINE && MTD_CFI && MTD_REDBOOT_PARTS]
    }
    config MTD_ARM_INTEGRATOR tristate {
     prompt "CFI Flash device mapped on ARM Integrator/P720T" if [MTD && ARM && MTD_CFI]
     depends on [ARM && MTD_CFI]
     inherited [MTD && ARM && MTD_CFI]
    }
    config MTD_CDB89712 tristate {
     prompt "Cirrus CDB89712 evaluation board mappings" if [MTD && MTD_CFI && ARCH_CDB89712]
     depends on [MTD_CFI && ARCH_CDB89712]
     inherited [MTD && MTD_CFI && ARCH_CDB89712]
    }
    config MTD_SA1100 tristate {
     prompt "CFI Flash device mapped on StrongARM SA11x0" if [MTD && MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
     depends on [MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
     inherited [MTD && MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
    }
    config MTD_IPAQ tristate {
     prompt "CFI Flash device mapped on Compaq/HP iPAQ" if [MTD && IPAQ_HANDHELD && MTD_CFI]
     depends on [IPAQ_HANDHELD && MTD_CFI]
     inherited [MTD && IPAQ_HANDHELD && MTD_CFI]
    }
    config MTD_DC21285 tristate {
     prompt "CFI Flash device mapped on DC21285 Footbridge" if [MTD && MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
     depends on [MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_IXP4XX tristate {
     prompt "CFI Flash device mapped on Intel IXP4xx based systems" if [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
     depends on [MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
     inherited [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
    }
    config MTD_IXP2000 tristate {
     prompt "CFI Flash device mapped on Intel IXP2000 based systems" if [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
     depends on [MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
     inherited [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
    }
    config MTD_FORTUNET tristate {
     prompt "CFI Flash device mapped on the FortuNet board" if [MTD && MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
     depends on [MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
     inherited [MTD && MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
    }
    config MTD_AUTCPU12 tristate {
     prompt "NV-RAM mapping AUTCPU12 board" if [MTD && ARCH_AUTCPU12]
     depends on [ARCH_AUTCPU12]
     inherited [MTD && ARCH_AUTCPU12]
    }
    config MTD_EDB7312 tristate {
     prompt "CFI Flash device mapped on EDB7312" if [MTD && ARCH_EDB7312 && MTD_CFI]
     depends on [ARCH_EDB7312 && MTD_CFI]
     inherited [MTD && ARCH_EDB7312 && MTD_CFI]
    }
    config MTD_IMPA7 tristate {
     prompt "JEDEC Flash device mapped on impA7" if [MTD && ARM && MTD_JEDECPROBE]
     depends on [ARM && MTD_JEDECPROBE]
     inherited [MTD && ARM && MTD_JEDECPROBE]
    }
    config MTD_CEIVA tristate {
     prompt "JEDEC Flash device mapped on Ceiva/Polaroid PhotoMax Digital Picture Frame" if [MTD && MTD_JEDECPROBE && ARCH_CEIVA]
     depends on [MTD_JEDECPROBE && ARCH_CEIVA]
     inherited [MTD && MTD_JEDECPROBE && ARCH_CEIVA]
    }
    config MTD_H720X tristate {
     prompt "Hynix evaluation board mappings" if [MTD && MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
     depends on [MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
     inherited [MTD && MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
    }
    config MTD_OMAP_NOR tristate {
     prompt "TI OMAP board mappings" if [MTD && MTD_CFI && ARCH_OMAP]
     depends on [MTD_CFI && ARCH_OMAP]
     inherited [MTD && MTD_CFI && ARCH_OMAP]
    }
    config MTD_PCI tristate {
     prompt "PCI MTD driver" if [MTD && PCI && MTD_COMPLEX_MAPPINGS]
     depends on [PCI && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && PCI && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_PCMCIA tristate {
     prompt "PCMCIA MTD driver" if [MTD && PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
     depends on [PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
     inherited [MTD && PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
     config MTD_PCMCIA_ANONYMOUS boolean {
      prompt "Use PCMCIA MTD drivers for anonymous PCMCIA cards" if [MTD && MTD_PCMCIA]
      depends on [MTD_PCMCIA]
      inherited [MTD && MTD_PCMCIA]
     }
    }
    config MTD_BFIN_ASYNC tristate {
     prompt "Blackfin BF533-STAMP Flash Chip Support" if [MTD && BFIN533_STAMP && MTD_CFI && MTD_COMPLEX_MAPPINGS]
     depends on [BFIN533_STAMP && MTD_CFI && MTD_COMPLEX_MAPPINGS]
     select MTD_PARTITIONS if [MTD && BFIN533_STAMP && MTD_CFI && MTD_COMPLEX_MAPPINGS]
     default [y] if [MTD && BFIN533_STAMP && MTD_CFI && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && BFIN533_STAMP && MTD_CFI && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_GPIO_ADDR tristate {
     prompt "GPIO-assisted Flash Chip Support" if [MTD && (GENERIC_GPIO || GPIOLIB) && MTD_COMPLEX_MAPPINGS]
     depends on [GENERIC_GPIO || GPIOLIB]
     depends on [MTD_COMPLEX_MAPPINGS]
     select MTD_PARTITIONS if [MTD && (GENERIC_GPIO || GPIOLIB) && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && (GENERIC_GPIO || GPIOLIB) && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_UCLINUX boolean {
     prompt "Generic uClinux RAM/ROM filesystem support" if [MTD && MTD_PARTITIONS && MTD_RAM="y" && !MMU]
     depends on [MTD_PARTITIONS && MTD_RAM="y" && !MMU]
     inherited [MTD && MTD_PARTITIONS && MTD_RAM="y" && !MMU]
    }
    config MTD_WRSBC8260 tristate {
     prompt "Map driver for WindRiver PowerQUICC II MPC82xx board" if [MTD && (SBC82xx || SBC8560)]
     depends on [SBC82xx || SBC8560]
     select MTD_PARTITIONS if [MTD && (SBC82xx || SBC8560)]
     select MTD_MAP_BANK_WIDTH_4 if [MTD && (SBC82xx || SBC8560)]
     select MTD_MAP_BANK_WIDTH_1 if [MTD && (SBC82xx || SBC8560)]
     select MTD_CFI_I1 if [MTD && (SBC82xx || SBC8560)]
     select MTD_CFI_I4 if [MTD && (SBC82xx || SBC8560)]
     inherited [MTD && (SBC82xx || SBC8560)]
    }
    config MTD_DMV182 tristate {
     prompt "Map driver for Dy-4 SVME/DMV-182 board." if [MTD && DMV182]
     depends on [DMV182]
     select MTD_PARTITIONS if [MTD && DMV182]
     select MTD_MAP_BANK_WIDTH_32 if [MTD && DMV182]
     select MTD_CFI_I8 if [MTD && DMV182]
     select MTD_CFI_AMDSTD if [MTD && DMV182]
     inherited [MTD && DMV182]
    }
    config MTD_INTEL_VR_NOR tristate {
     prompt "NOR flash on Intel Vermilion Range Expansion Bus CS0" if [MTD && PCI]
     depends on [PCI]
     inherited [MTD && PCI]
    }
    config MTD_RBTX4939 tristate {
     prompt "Map driver for RBTX4939 board" if [MTD && TOSHIBA_RBTX4939 && MTD_CFI && MTD_COMPLEX_MAPPINGS]
     depends on [TOSHIBA_RBTX4939 && MTD_CFI && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && TOSHIBA_RBTX4939 && MTD_CFI && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_PLATRAM tristate {
     prompt "Map driver for platform device RAM (mtd-ram)" if [MTD]
     select MTD_RAM if [MTD]
     inherited [MTD]
    }
    config MTD_VMU tristate {
     prompt "Map driver for Dreamcast VMU" if [MTD && MAPLE]
     depends on [MAPLE]
     inherited [MTD && MAPLE]
    }
   }
   menu "Self-contained MTD device drivers" {
    depends on [MTD]
    config MTD_PMC551 tristate {
     prompt "Ramix PMC551 PCI Mezzanine RAM card support" if [MTD && PCI]
     depends on [PCI]
     inherited [MTD && PCI]
     config MTD_PMC551_BUGFIX boolean {
      prompt "PMC551 256M DRAM Bugfix" if [MTD && MTD_PMC551]
      depends on [MTD_PMC551]
      inherited [MTD && MTD_PMC551]
     }
     config MTD_PMC551_DEBUG boolean {
      prompt "PMC551 Debugging" if [MTD && MTD_PMC551]
      depends on [MTD_PMC551]
      inherited [MTD && MTD_PMC551]
     }
    }
    config MTD_MS02NV tristate {
     prompt "DEC MS02-NV NVRAM module support" if [MTD && MACH_DECSTATION]
     depends on [MACH_DECSTATION]
     inherited [MTD && MACH_DECSTATION]
    }
    config MTD_DATAFLASH tristate {
     prompt "Support for AT45xxx DataFlash" if [MTD && SPI_MASTER && EXPERIMENTAL]
     depends on [SPI_MASTER && EXPERIMENTAL]
     inherited [MTD && SPI_MASTER && EXPERIMENTAL]
     config MTD_DATAFLASH_WRITE_VERIFY boolean {
      prompt "Verify DataFlash page writes" if [MTD && MTD_DATAFLASH]
      depends on [MTD_DATAFLASH]
      inherited [MTD && MTD_DATAFLASH]
     }
     config MTD_DATAFLASH_OTP boolean {
      prompt "DataFlash OTP support (Security Register)" if [MTD && MTD_DATAFLASH]
      depends on [MTD_DATAFLASH]
      select HAVE_MTD_OTP if [MTD && MTD_DATAFLASH]
      inherited [MTD && MTD_DATAFLASH]
     }
    }
    config MTD_M25P80 tristate {
     prompt "Support most SPI Flash chips (AT26DF, M25P, W25X, ...)" if [MTD && SPI_MASTER && EXPERIMENTAL]
     depends on [SPI_MASTER && EXPERIMENTAL]
     inherited [MTD && SPI_MASTER && EXPERIMENTAL]
     config M25PXX_USE_FAST_READ boolean {
      prompt "Use FAST_READ OPCode allowing SPI CLK <= 50MHz" if [MTD && MTD_M25P80]
      depends on [MTD_M25P80]
      default [y] if [MTD && MTD_M25P80]
      inherited [MTD && MTD_M25P80]
     }
    }
    config MTD_SST25L tristate {
     prompt "Support SST25L (non JEDEC) SPI Flash chips" if [MTD && SPI_MASTER]
     depends on [SPI_MASTER]
     inherited [MTD && SPI_MASTER]
    }
    config MTD_SLRAM tristate {
     prompt "Uncached system RAM" if [MTD]
     inherited [MTD]
    }
    config MTD_PHRAM tristate {
     prompt "Physical system RAM" if [MTD]
     inherited [MTD]
    }
    config MTD_LART tristate {
     prompt "28F160xx flash driver for LART" if [MTD && SA1100_LART]
     depends on [SA1100_LART]
     inherited [MTD && SA1100_LART]
    }
    config MTD_MTDRAM tristate {
     prompt "Test driver using RAM" if [MTD]
     inherited [MTD]
     config MTDRAM_TOTAL_SIZE integer {
      prompt "MTDRAM device size in KiB" if [MTD && MTD_MTDRAM]
      depends on [MTD_MTDRAM]
      default [4096] if [MTD && MTD_MTDRAM]
      inherited [MTD && MTD_MTDRAM]
     }
     config MTDRAM_ERASE_SIZE integer {
      prompt "MTDRAM erase block size in KiB" if [MTD && MTD_MTDRAM]
      depends on [MTD_MTDRAM]
      default [128] if [MTD && MTD_MTDRAM]
      inherited [MTD && MTD_MTDRAM]
     }
     config MTDRAM_ABS_POS hex {
      prompt "SRAM Hexadecimal Absolute position or 0" if [MTD && MTD_MTDRAM="y"]
      depends on [MTD_MTDRAM="y"]
      default [0] if [MTD && MTD_MTDRAM="y"]
      inherited [MTD && MTD_MTDRAM="y"]
     }
    }
    config MTD_BLOCK2MTD tristate {
     prompt "MTD using block device" if [MTD && BLOCK]
     depends on [BLOCK]
     inherited [MTD && BLOCK]
    }
    config MTD_DOC2000 tristate {
     prompt "M-Systems Disk-On-Chip 2000 and Millennium (DEPRECATED)" if [MTD]
     select MTD_DOCPROBE if [MTD]
     select MTD_NAND_IDS if [MTD]
     inherited [MTD]
    }
    config MTD_DOC2001 tristate {
     prompt "M-Systems Disk-On-Chip Millennium-only alternative driver (DEPRECATED)" if [MTD]
     select MTD_DOCPROBE if [MTD]
     select MTD_NAND_IDS if [MTD]
     inherited [MTD]
    }
    config MTD_DOC2001PLUS tristate {
     prompt "M-Systems Disk-On-Chip Millennium Plus" if [MTD]
     select MTD_DOCPROBE if [MTD]
     select MTD_NAND_IDS if [MTD]
     inherited [MTD]
    }
    config MTD_DOCPROBE tristate {
     select MTD_DOCECC if [MTD]
     inherited [MTD]
    }
    config MTD_DOCECC tristate {
     inherited [MTD]
    }
    config MTD_DOCPROBE_ADVANCED boolean {
     prompt "Advanced detection options for DiskOnChip" if [MTD && MTD_DOCPROBE]
     depends on [MTD_DOCPROBE]
     inherited [MTD && MTD_DOCPROBE]
     config MTD_DOCPROBE_ADDRESS hex {
      prompt "Physical address of DiskOnChip" if [MTD && MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED]
      depends on [MTD_DOCPROBE]
      default [0x0000] if [MTD && MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED]
      default [0] if [MTD && MTD_DOCPROBE && !MTD_DOCPROBE_ADVANCED]
      inherited [MTD && MTD_DOCPROBE]
     }
     config MTD_DOCPROBE_HIGH boolean {
      prompt "Probe high addresses" if [MTD && MTD_DOCPROBE_ADVANCED]
      depends on [MTD_DOCPROBE_ADVANCED]
      inherited [MTD && MTD_DOCPROBE_ADVANCED]
     }
     config MTD_DOCPROBE_55AA boolean {
      prompt "Probe for 0x55 0xAA BIOS Extension Signature" if [MTD && MTD_DOCPROBE_ADVANCED]
      depends on [MTD_DOCPROBE_ADVANCED]
      inherited [MTD && MTD_DOCPROBE_ADVANCED]
     }
    }
   }
   menuconfig MTD_NAND tristate {
    prompt "NAND Device Support" if [MTD]
    depends on [MTD]
    select MTD_NAND_IDS if [MTD]
    inherited [MTD]
    if [MTD && MTD_NAND] {
     config MTD_NAND_VERIFY_WRITE boolean {
      prompt "Verify NAND page writes" if [MTD && MTD_NAND]
      inherited [MTD && MTD_NAND]
     }
     config MTD_NAND_ECC_SMC boolean {
      prompt "NAND ECC Smart Media byte order" if [MTD && MTD_NAND]
      default [n] if [MTD && MTD_NAND]
      inherited [MTD && MTD_NAND]
     }
     config MTD_NAND_MUSEUM_IDS boolean {
      prompt "Enable chip ids for obsolete ancient NAND devices" if [MTD && MTD_NAND]
      depends on [MTD_NAND]
      default [n] if [MTD && MTD_NAND]
      inherited [MTD && MTD_NAND]
     }
     config MTD_NAND_AUTCPU12 tristate {
      prompt "SmartMediaCard on autronix autcpu12 board" if [MTD && MTD_NAND && ARCH_AUTCPU12]
      depends on [ARCH_AUTCPU12]
      inherited [MTD && MTD_NAND && ARCH_AUTCPU12]
     }
     config MTD_NAND_EDB7312 tristate {
      prompt "Support for Cirrus Logic EBD7312 evaluation board" if [MTD && MTD_NAND && ARCH_EDB7312]
      depends on [ARCH_EDB7312]
      inherited [MTD && MTD_NAND && ARCH_EDB7312]
     }
     config MTD_NAND_H1900 tristate {
      prompt "iPAQ H1900 flash" if [MTD && MTD_NAND && ARCH_PXA && MTD_PARTITIONS]
      depends on [ARCH_PXA && MTD_PARTITIONS]
      inherited [MTD && MTD_NAND && ARCH_PXA && MTD_PARTITIONS]
     }
     config MTD_NAND_GPIO tristate {
      prompt "GPIO NAND Flash driver" if [MTD && MTD_NAND && GENERIC_GPIO && ARM]
      depends on [GENERIC_GPIO && ARM]
      inherited [MTD && MTD_NAND && GENERIC_GPIO && ARM]
     }
     config MTD_NAND_SPIA tristate {
      prompt "NAND Flash device on SPIA board" if [MTD && MTD_NAND && ARCH_P720T]
      depends on [ARCH_P720T]
      inherited [MTD && MTD_NAND && ARCH_P720T]
     }
     config MTD_NAND_AMS_DELTA tristate {
      prompt "NAND Flash device on Amstrad E3" if [MTD && MTD_NAND && MACH_AMS_DELTA]
      depends on [MACH_AMS_DELTA]
      inherited [MTD && MTD_NAND && MACH_AMS_DELTA]
     }
     config MTD_NAND_OMAP2 tristate {
      prompt "NAND Flash device on OMAP2 and OMAP3" if [MTD && ARM && MTD_NAND && (ARCH_OMAP2 || ARCH_OMAP3)]
      depends on [ARM && MTD_NAND && (ARCH_OMAP2 || ARCH_OMAP3)]
      inherited [MTD && ARM && MTD_NAND && (ARCH_OMAP2 || ARCH_OMAP3)]
      config MTD_NAND_OMAP_PREFETCH boolean {
       prompt "GPMC prefetch support for NAND Flash device" if [MTD && MTD_NAND && MTD_NAND_OMAP2]
       depends on [MTD_NAND && MTD_NAND_OMAP2]
       default [y] if [MTD && MTD_NAND && MTD_NAND_OMAP2]
       inherited [MTD && MTD_NAND && MTD_NAND_OMAP2]
       config MTD_NAND_OMAP_PREFETCH_DMA boolean {
        depends on [MTD_NAND_OMAP_PREFETCH]
        prompt "DMA mode" if [MTD && MTD_NAND && MTD_NAND_OMAP_PREFETCH]
        default [n] if [MTD && MTD_NAND && MTD_NAND_OMAP_PREFETCH]
        inherited [MTD && MTD_NAND && MTD_NAND_OMAP_PREFETCH]
       }
      }
     }
     config MTD_NAND_TS7250 tristate {
      prompt "NAND Flash device on TS-7250 board" if [MTD && MTD_NAND && MACH_TS72XX]
      depends on [MACH_TS72XX]
      inherited [MTD && MTD_NAND && MACH_TS72XX]
     }
     config MTD_NAND_IDS tristate {
      inherited [MTD && MTD_NAND]
     }
     config MTD_NAND_AU1550 tristate {
      prompt "Au1550/1200 NAND support" if [MTD && MTD_NAND && (SOC_AU1200 || SOC_AU1550)]
      depends on [SOC_AU1200 || SOC_AU1550]
      inherited [MTD && MTD_NAND && (SOC_AU1200 || SOC_AU1550)]
     }
     config MTD_NAND_BF5XX tristate {
      prompt "Blackfin on-chip NAND Flash Controller driver" if [MTD && (BF54x || BF52x) && MTD_NAND]
      depends on [(BF54x || BF52x) && MTD_NAND]
      inherited [MTD && (BF54x || BF52x) && MTD_NAND]
      config MTD_NAND_BF5XX_HWECC boolean {
       prompt "BF5XX NAND Hardware ECC" if [MTD && MTD_NAND && MTD_NAND_BF5XX]
       default [y] if [MTD && MTD_NAND && MTD_NAND_BF5XX]
       depends on [MTD_NAND_BF5XX]
       inherited [MTD && MTD_NAND && MTD_NAND_BF5XX]
       config MTD_NAND_BF5XX_BOOTROM_ECC boolean {
        prompt "Use Blackfin BootROM ECC Layout" if [MTD && MTD_NAND && MTD_NAND_BF5XX_HWECC]
        default [n] if [MTD && MTD_NAND && MTD_NAND_BF5XX_HWECC]
        depends on [MTD_NAND_BF5XX_HWECC]
        inherited [MTD && MTD_NAND && MTD_NAND_BF5XX_HWECC]
       }
      }
     }
     config MTD_NAND_RTC_FROM4 tristate {
      prompt "Renesas Flash ROM 4-slot interface board (FROM_BOARD4)" if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
      depends on [SH_SOLUTION_ENGINE]
      select REED_SOLOMON if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
      select REED_SOLOMON_DEC8 if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
      select BITREVERSE if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
      inherited [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
     }
     config MTD_NAND_PPCHAMELEONEVB tristate {
      prompt "NAND Flash device on PPChameleonEVB board" if [MTD && MTD_NAND && PPCHAMELEONEVB && BROKEN]
      depends on [PPCHAMELEONEVB && BROKEN]
      inherited [MTD && MTD_NAND && PPCHAMELEONEVB && BROKEN]
     }
     config MTD_NAND_S3C2410 tristate {
      prompt "NAND Flash support for Samsung S3C SoCs" if [MTD && MTD_NAND && (ARCH_S3C2410 || ARCH_S3C64XX)]
      depends on [ARCH_S3C2410 || ARCH_S3C64XX]
      inherited [MTD && MTD_NAND && (ARCH_S3C2410 || ARCH_S3C64XX)]
      config MTD_NAND_S3C2410_DEBUG boolean {
       prompt "Samsung S3C NAND driver debug" if [MTD && MTD_NAND && MTD_NAND_S3C2410]
       depends on [MTD_NAND_S3C2410]
       inherited [MTD && MTD_NAND && MTD_NAND_S3C2410]
      }
      config MTD_NAND_S3C2410_HWECC boolean {
       prompt "Samsung S3C NAND Hardware ECC" if [MTD && MTD_NAND && MTD_NAND_S3C2410]
       depends on [MTD_NAND_S3C2410]
       inherited [MTD && MTD_NAND && MTD_NAND_S3C2410]
      }
     }
     config MTD_NAND_NDFC tristate {
      prompt "NDFC NanD Flash Controller" if [MTD && MTD_NAND && 4xx]
      depends on [4xx]
      select MTD_NAND_ECC_SMC if [MTD && MTD_NAND && 4xx]
      inherited [MTD && MTD_NAND && 4xx]
     }
     config MTD_NAND_S3C2410_CLKSTOP boolean {
      prompt "Samsung S3C NAND IDLE clock stop" if [MTD && MTD_NAND && MTD_NAND_S3C2410]
      depends on [MTD_NAND_S3C2410]
      default [n] if [MTD && MTD_NAND && MTD_NAND_S3C2410]
      inherited [MTD && MTD_NAND && MTD_NAND_S3C2410]
     }
     config MTD_NAND_DISKONCHIP tristate {
      prompt "DiskOnChip 2000, Millennium and Millennium Plus (NAND reimplementation) (EXPERIMENTAL)" if [MTD && MTD_NAND && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      select REED_SOLOMON if [MTD && MTD_NAND && EXPERIMENTAL]
      select REED_SOLOMON_DEC16 if [MTD && MTD_NAND && EXPERIMENTAL]
      inherited [MTD && MTD_NAND && EXPERIMENTAL]
      config MTD_NAND_DISKONCHIP_PROBE_ADVANCED boolean {
       prompt "Advanced detection options for DiskOnChip" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
       depends on [MTD_NAND_DISKONCHIP]
       inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
       config MTD_NAND_DISKONCHIP_PROBE_ADDRESS hex {
        prompt "Physical address of DiskOnChip" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
        depends on [MTD_NAND_DISKONCHIP]
        default [0] if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
        inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
       }
       config MTD_NAND_DISKONCHIP_PROBE_HIGH boolean {
        prompt "Probe high addresses" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
        depends on [MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
        inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
       }
      }
      config MTD_NAND_DISKONCHIP_BBTWRITE boolean {
       prompt "Allow BBT writes on DiskOnChip Millennium and 2000TSOP" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
       depends on [MTD_NAND_DISKONCHIP]
       inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
      }
     }
     config MTD_NAND_SHARPSL tristate {
      prompt "Support for NAND Flash on Sharp SL Series (C7xx + others)" if [MTD && MTD_NAND && ARCH_PXA]
      depends on [ARCH_PXA]
      inherited [MTD && MTD_NAND && ARCH_PXA]
     }
     config MTD_NAND_BASLER_EXCITE tristate {
      prompt "Support for NAND Flash on Basler eXcite" if [MTD && MTD_NAND && BASLER_EXCITE]
      depends on [BASLER_EXCITE]
      inherited [MTD && MTD_NAND && BASLER_EXCITE]
     }
     config MTD_NAND_CAFE tristate {
      prompt "NAND support for OLPC CAFÉ chip" if [MTD && MTD_NAND && PCI]
      depends on [PCI]
      select REED_SOLOMON if [MTD && MTD_NAND && PCI]
      select REED_SOLOMON_DEC16 if [MTD && MTD_NAND && PCI]
      inherited [MTD && MTD_NAND && PCI]
     }
     config MTD_NAND_CS553X tristate {
      prompt "NAND support for CS5535/CS5536 (AMD Geode companion chip)" if [MTD && MTD_NAND && X86_32]
      depends on [X86_32]
      inherited [MTD && MTD_NAND && X86_32]
     }
     config MTD_NAND_ATMEL tristate {
      prompt "Support for NAND Flash / SmartMedia on AT91 and AVR32" if [MTD && MTD_NAND && (ARCH_AT91 || AVR32)]
      depends on [ARCH_AT91 || AVR32]
      inherited [MTD && MTD_NAND && (ARCH_AT91 || AVR32)]
      choice boolean {
       prompt "ECC management for NAND Flash / SmartMedia on AT91 / AVR32" if [MTD && MTD_NAND && MTD_NAND_ATMEL]
       depends on [MTD_NAND_ATMEL]
       config MTD_NAND_ATMEL_ECC_HW boolean {
        prompt "Hardware ECC" if [<choice> && (ARCH_AT91SAM9263 || ARCH_AT91SAM9260 || AVR32)]
        depends on [ARCH_AT91SAM9263 || ARCH_AT91SAM9260 || AVR32]
        inherited [<choice> && (ARCH_AT91SAM9263 || ARCH_AT91SAM9260 || AVR32)]
       }
       config MTD_NAND_ATMEL_ECC_SOFT boolean {
        prompt "Software ECC" if [<choice>]
        inherited [<choice>]
       }
       config MTD_NAND_ATMEL_ECC_NONE boolean {
        prompt "No ECC (testing only, DANGEROUS)" if [<choice> && DEBUG_KERNEL]
        depends on [DEBUG_KERNEL]
        inherited [<choice> && DEBUG_KERNEL]
       }
      }
     }
     config MTD_NAND_PXA3xx tristate {
      prompt "Support for NAND flash devices on PXA3xx" if [MTD && MTD_NAND && PXA3xx]
      depends on [MTD_NAND && PXA3xx]
      inherited [MTD && MTD_NAND && PXA3xx]
      config MTD_NAND_PXA3xx_BUILTIN boolean {
       prompt "Use builtin definitions for some NAND chips (deprecated)" if [MTD && MTD_NAND && MTD_NAND_PXA3xx]
       depends on [MTD_NAND_PXA3xx]
       inherited [MTD && MTD_NAND && MTD_NAND_PXA3xx]
      }
     }
     config MTD_NAND_CM_X270 tristate {
      prompt "Support for NAND Flash on CM-X270 modules" if [MTD && MTD_NAND && MACH_ARMCORE]
      depends on [MTD_NAND && MACH_ARMCORE]
      inherited [MTD && MTD_NAND && MACH_ARMCORE]
     }
     config MTD_NAND_PASEMI tristate {
      prompt "NAND support for PA Semi PWRficient" if [MTD && MTD_NAND && PPC_PASEMI]
      depends on [MTD_NAND && PPC_PASEMI]
      inherited [MTD && MTD_NAND && PPC_PASEMI]
     }
     config MTD_NAND_TMIO tristate {
      prompt "NAND Flash device on Toshiba Mobile IO Controller" if [MTD && MTD_NAND && MFD_TMIO]
      depends on [MTD_NAND && MFD_TMIO]
      inherited [MTD && MTD_NAND && MFD_TMIO]
     }
     config MTD_NAND_NANDSIM tristate {
      prompt "Support for NAND Flash Simulator" if [MTD && MTD_NAND && MTD_PARTITIONS]
      depends on [MTD_PARTITIONS]
      inherited [MTD && MTD_NAND && MTD_PARTITIONS]
     }
     config MTD_NAND_PLATFORM tristate {
      prompt "Support for generic platform NAND driver" if [MTD && MTD_NAND]
      depends on [MTD_NAND]
      inherited [MTD && MTD_NAND]
     }
     config MTD_ALAUDA tristate {
      prompt "MTD driver for Olympus MAUSB-10 and Fujifilm DPC-R1" if [MTD && MTD_NAND && USB]
      depends on [MTD_NAND && USB]
      inherited [MTD && MTD_NAND && USB]
     }
     config MTD_NAND_ORION tristate {
      prompt "NAND Flash support for Marvell Orion SoC" if [MTD && PLAT_ORION && MTD_NAND]
      depends on [PLAT_ORION && MTD_NAND]
      inherited [MTD && PLAT_ORION && MTD_NAND]
     }
     config MTD_NAND_FSL_ELBC tristate {
      prompt "NAND support for Freescale eLBC controllers" if [MTD && MTD_NAND && PPC_OF]
      depends on [MTD_NAND && PPC_OF]
      inherited [MTD && MTD_NAND && PPC_OF]
     }
     config MTD_NAND_FSL_UPM tristate {
      prompt "Support for NAND on Freescale UPM" if [MTD && MTD_NAND && (PPC_83xx || PPC_85xx)]
      depends on [MTD_NAND && (PPC_83xx || PPC_85xx)]
      select FSL_LBC if [MTD && MTD_NAND && (PPC_83xx || PPC_85xx)]
      inherited [MTD && MTD_NAND && (PPC_83xx || PPC_85xx)]
     }
     config MTD_NAND_MXC tristate {
      prompt "MXC NAND support" if [MTD && MTD_NAND && (ARCH_MX2 || ARCH_MX3)]
      depends on [ARCH_MX2 || ARCH_MX3]
      inherited [MTD && MTD_NAND && (ARCH_MX2 || ARCH_MX3)]
     }
     config MTD_NAND_NOMADIK tristate {
      prompt "ST Nomadik 8815 NAND support" if [MTD && MTD_NAND && ARCH_NOMADIK]
      depends on [ARCH_NOMADIK]
      inherited [MTD && MTD_NAND && ARCH_NOMADIK]
     }
     config MTD_NAND_SH_FLCTL tristate {
      prompt "Support for NAND on Renesas SuperH FLCTL" if [MTD && MTD_NAND && SUPERH && CPU_SUBTYPE_SH7723]
      depends on [MTD_NAND && SUPERH && CPU_SUBTYPE_SH7723]
      inherited [MTD && MTD_NAND && SUPERH && CPU_SUBTYPE_SH7723]
     }
     config MTD_NAND_DAVINCI tristate {
      prompt "Support NAND on DaVinci SoC" if [MTD && MTD_NAND && ARCH_DAVINCI]
      depends on [ARCH_DAVINCI]
      inherited [MTD && MTD_NAND && ARCH_DAVINCI]
     }
     config MTD_NAND_TXX9NDFMC tristate {
      prompt "NAND Flash support for TXx9 SoC" if [MTD && MTD_NAND && (SOC_TX4938 || SOC_TX4939)]
      depends on [SOC_TX4938 || SOC_TX4939]
      inherited [MTD && MTD_NAND && (SOC_TX4938 || SOC_TX4939)]
     }
     config MTD_NAND_SOCRATES tristate {
      prompt "Support for NAND on Socrates board" if [MTD && MTD_NAND && SOCRATES]
      depends on [MTD_NAND && SOCRATES]
      inherited [MTD && MTD_NAND && SOCRATES]
     }
     config MTD_NAND_W90P910 tristate {
      prompt "Support for NAND on w90p910 evaluation board." if [MTD && MTD_NAND && ARCH_W90X900 && MTD_PARTITIONS]
      depends on [ARCH_W90X900 && MTD_PARTITIONS]
      inherited [MTD && MTD_NAND && ARCH_W90X900 && MTD_PARTITIONS]
     }
    }
   }
   menuconfig MTD_ONENAND tristate {
    prompt "OneNAND Device Support" if [MTD]
    depends on [MTD]
    select MTD_PARTITIONS if [MTD]
    inherited [MTD]
    if [MTD && MTD_ONENAND] {
     config MTD_ONENAND_VERIFY_WRITE boolean {
      prompt "Verify OneNAND page writes" if [MTD && MTD_ONENAND]
      inherited [MTD && MTD_ONENAND]
     }
     config MTD_ONENAND_GENERIC tristate {
      prompt "OneNAND Flash device via platform device driver" if [MTD && MTD_ONENAND]
      inherited [MTD && MTD_ONENAND]
     }
     config MTD_ONENAND_OMAP2 tristate {
      prompt "OneNAND on OMAP2/OMAP3 support" if [MTD && MTD_ONENAND && (ARCH_OMAP2 || ARCH_OMAP3)]
      depends on [MTD_ONENAND && (ARCH_OMAP2 || ARCH_OMAP3)]
      inherited [MTD && MTD_ONENAND && (ARCH_OMAP2 || ARCH_OMAP3)]
     }
     config MTD_ONENAND_OTP boolean {
      prompt "OneNAND OTP Support" if [MTD && MTD_ONENAND]
      select HAVE_MTD_OTP if [MTD && MTD_ONENAND]
      inherited [MTD && MTD_ONENAND]
     }
     config MTD_ONENAND_2X_PROGRAM boolean {
      prompt "OneNAND 2X program support" if [MTD && MTD_ONENAND]
      inherited [MTD && MTD_ONENAND]
     }
     config MTD_ONENAND_SIM tristate {
      prompt "OneNAND simulator support" if [MTD && MTD_ONENAND]
      inherited [MTD && MTD_ONENAND]
     }
    }
   }
   menu "LPDDR flash memory drivers" {
    depends on [MTD]
    config MTD_LPDDR tristate {
     prompt "Support for LPDDR flash chips" if [MTD]
     select MTD_QINFO_PROBE if [MTD]
     inherited [MTD]
     config MTD_QINFO_PROBE tristate {
      depends on [MTD_LPDDR]
      prompt "Detect flash chips by QINFO probe" if [MTD && MTD_LPDDR]
      inherited [MTD && MTD_LPDDR]
     }
    }
   }
   menu "UBI - Unsorted block images" {
    depends on [MTD]
    config MTD_UBI tristate {
     prompt "Enable UBI" if [MTD]
     depends on [MTD]
     select CRC32 if [MTD]
     inherited [MTD]
     config MTD_UBI_WL_THRESHOLD integer {
      prompt "UBI wear-leveling threshold" if [MTD && MTD_UBI]
      default [4096] if [MTD && MTD_UBI]
      range [2 65536] if [MTD && MTD_UBI]
      depends on [MTD_UBI]
      inherited [MTD && MTD_UBI]
     }
     config MTD_UBI_BEB_RESERVE integer {
      prompt "Percentage of reserved eraseblocks for bad eraseblocks handling" if [MTD && MTD_UBI]
      default [1] if [MTD && MTD_UBI]
      range [0 25] if [MTD && MTD_UBI]
      depends on [MTD_UBI]
      inherited [MTD && MTD_UBI]
     }
     config MTD_UBI_GLUEBI tristate {
      prompt "MTD devices emulation driver (gluebi)" if [MTD && MTD_UBI]
      default [n] if [MTD && MTD_UBI]
      depends on [MTD_UBI]
      inherited [MTD && MTD_UBI]
     }
     config MTD_UBI_DEBUG boolean {
      prompt "UBI debugging" if [MTD && SYSFS && MTD_UBI]
      depends on [SYSFS]
      depends on [MTD_UBI]
      select DEBUG_FS if [MTD && SYSFS && MTD_UBI]
      select KALLSYMS_ALL if [MTD && SYSFS && MTD_UBI]
      inherited [MTD && SYSFS && MTD_UBI]
      config MTD_UBI_DEBUG_MSG boolean {
       prompt "UBI debugging messages" if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_PARANOID boolean {
       prompt "Extra self-checks" if [MTD && MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_DISABLE_BGT boolean {
       prompt "Do not enable the UBI background thread" if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_EMULATE_BITFLIPS boolean {
       prompt "Emulate flash bit-flips" if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_EMULATE_WRITE_FAILURES boolean {
       prompt "Emulate flash write failures" if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_EMULATE_ERASE_FAILURES boolean {
       prompt "Emulate flash erase failures" if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      menu "Additional UBI debugging messages" {
       depends on [MTD && MTD_UBI_DEBUG]
       config MTD_UBI_DEBUG_MSG_BLD boolean {
        prompt "Additional UBI initialization and build messages" if [MTD && MTD_UBI_DEBUG]
        default [n] if [MTD && MTD_UBI_DEBUG]
        depends on [MTD_UBI_DEBUG]
        inherited [MTD && MTD_UBI_DEBUG]
       }
       config MTD_UBI_DEBUG_MSG_EBA boolean {
        prompt "Eraseblock association unit messages" if [MTD && MTD_UBI_DEBUG]
        default [n] if [MTD && MTD_UBI_DEBUG]
        depends on [MTD_UBI_DEBUG]
        inherited [MTD && MTD_UBI_DEBUG]
       }
       config MTD_UBI_DEBUG_MSG_WL boolean {
        prompt "Wear-leveling unit messages" if [MTD && MTD_UBI_DEBUG]
        default [n] if [MTD && MTD_UBI_DEBUG]
        depends on [MTD_UBI_DEBUG]
        inherited [MTD && MTD_UBI_DEBUG]
       }
       config MTD_UBI_DEBUG_MSG_IO boolean {
        prompt "Input/output unit messages" if [MTD && MTD_UBI_DEBUG]
        default [n] if [MTD && MTD_UBI_DEBUG]
        depends on [MTD_UBI_DEBUG]
        inherited [MTD && MTD_UBI_DEBUG]
       }
      }
     }
    }
   }
  }
 }
 config OF_DEVICE boolean {
  default [y] if [OF && (SPARC || PPC_OF || MICROBLAZE)]
  depends on [OF && (SPARC || PPC_OF || MICROBLAZE)]
  inherited [OF && (SPARC || PPC_OF || MICROBLAZE)]
 }
 config OF_GPIO boolean {
  default [y] if [OF && (PPC_OF || MICROBLAZE) && GPIOLIB]
  depends on [OF && (PPC_OF || MICROBLAZE) && GPIOLIB]
  inherited [OF && (PPC_OF || MICROBLAZE) && GPIOLIB]
 }
 config OF_I2C tristate {
  default [I2C] if [(PPC_OF || MICROBLAZE) && I2C]
  depends on [(PPC_OF || MICROBLAZE) && I2C]
  inherited [(PPC_OF || MICROBLAZE) && I2C]
 }
 config OF_SPI tristate {
  default [SPI] if [OF && (PPC_OF || MICROBLAZE) && SPI]
  depends on [OF && (PPC_OF || MICROBLAZE) && SPI]
  inherited [OF && (PPC_OF || MICROBLAZE) && SPI]
 }
 config OF_MDIO tristate {
  default [PHYLIB] if [OF && PHYLIB]
  depends on [OF && PHYLIB]
  inherited [OF && PHYLIB]
 }
 menuconfig PARPORT tristate {
  prompt "Parallel port support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [PARPORT] {
   config PARPORT_PC tristate {
    prompt "PC-style hardware" if [PARPORT && (!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV && (!M68K || ISA) && !MN10300 && !AVR32 && !BLACKFIN]
    depends on [(!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV && (!M68K || ISA) && !MN10300 && !AVR32 && !BLACKFIN]
    inherited [PARPORT && (!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV && (!M68K || ISA) && !MN10300 && !AVR32 && !BLACKFIN]
    config PARPORT_SERIAL tristate {
     prompt "Multi-IO cards (parallel and serial)" if [PARPORT && SERIAL_8250_PCI && PARPORT_PC && PCI]
     depends on [SERIAL_8250_PCI && PARPORT_PC && PCI]
     inherited [PARPORT && SERIAL_8250_PCI && PARPORT_PC && PCI]
    }
    config PARPORT_PC_FIFO boolean {
     prompt "Use FIFO/DMA if available (EXPERIMENTAL)" if [PARPORT && PARPORT_PC && EXPERIMENTAL]
     depends on [PARPORT_PC && EXPERIMENTAL]
     inherited [PARPORT && PARPORT_PC && EXPERIMENTAL]
    }
    config PARPORT_PC_SUPERIO boolean {
     prompt "SuperIO chipset support (EXPERIMENTAL)" if [PARPORT && PARPORT_PC && EXPERIMENTAL]
     depends on [PARPORT_PC && EXPERIMENTAL]
     inherited [PARPORT && PARPORT_PC && EXPERIMENTAL]
    }
    config PARPORT_PC_PCMCIA tristate {
     prompt "Support for PCMCIA management for PC-style ports" if [PARPORT && PCMCIA && PARPORT_PC]
     depends on [PCMCIA && PARPORT_PC]
     inherited [PARPORT && PCMCIA && PARPORT_PC]
    }
   }
   config PARPORT_IP32 tristate {
    prompt "SGI IP32 builtin port (EXPERIMENTAL)" if [PARPORT && SGI_IP32 && EXPERIMENTAL]
    depends on [SGI_IP32 && EXPERIMENTAL]
    select PARPORT_NOT_PC if [PARPORT && SGI_IP32 && EXPERIMENTAL]
    inherited [PARPORT && SGI_IP32 && EXPERIMENTAL]
   }
   config PARPORT_AMIGA tristate {
    prompt "Amiga builtin port" if [PARPORT && AMIGA]
    depends on [AMIGA]
    select PARPORT_NOT_PC if [PARPORT && AMIGA]
    inherited [PARPORT && AMIGA]
   }
   config PARPORT_MFC3 tristate {
    prompt "Multiface III parallel port" if [PARPORT && ZORRO]
    depends on [ZORRO]
    select PARPORT_NOT_PC if [PARPORT && ZORRO]
    inherited [PARPORT && ZORRO]
   }
   config PARPORT_ATARI tristate {
    prompt "Atari hardware" if [PARPORT && ATARI]
    depends on [ATARI]
    select PARPORT_NOT_PC if [PARPORT && ATARI]
    inherited [PARPORT && ATARI]
   }
   config PARPORT_GSC tristate {
    default [GSC] if [PARPORT]
    select PARPORT_NOT_PC if [PARPORT]
    inherited [PARPORT]
   }
   config PARPORT_SUNBPP tristate {
    prompt "Sparc hardware (EXPERIMENTAL)" if [PARPORT && SBUS && EXPERIMENTAL]
    depends on [SBUS && EXPERIMENTAL]
    select PARPORT_NOT_PC if [PARPORT && SBUS && EXPERIMENTAL]
    inherited [PARPORT && SBUS && EXPERIMENTAL]
   }
   config PARPORT_AX88796 tristate {
    prompt "AX88796 Parallel Port" if [PARPORT]
    select PARPORT_NOT_PC if [PARPORT]
    inherited [PARPORT]
   }
   config PARPORT_1284 boolean {
    prompt "IEEE 1284 transfer modes" if [PARPORT]
    inherited [PARPORT]
   }
   config PARPORT_NOT_PC boolean {
    inherited [PARPORT]
   }
  }
 }
 menuconfig PNP boolean {
  prompt "Plug and Play support" if [HAS_IOMEM && (ISA || ACPI)]
  depends on [HAS_IOMEM]
  depends on [ISA || ACPI]
  inherited [HAS_IOMEM && (ISA || ACPI)]
  config PNP_DEBUG_MESSAGES boolean {
   default [y] if [PNP]
   prompt "PNP debugging messages" if [PNP]
   depends on [PNP]
   inherited [PNP]
  }
  if [PNP] {
   config ISAPNP boolean {
    prompt "ISA Plug and Play support" if [PNP && ISA]
    depends on [ISA]
    inherited [PNP && ISA]
   }
   config PNPBIOS boolean {
    prompt "Plug and Play BIOS support (EXPERIMENTAL)" if [PNP && ISA && X86 && EXPERIMENTAL]
    depends on [ISA && X86 && EXPERIMENTAL]
    default [n] if [PNP && ISA && X86 && EXPERIMENTAL]
    inherited [PNP && ISA && X86 && EXPERIMENTAL]
    config PNPBIOS_PROC_FS boolean {
     prompt "Plug and Play BIOS /proc interface" if [PNP && PNPBIOS && PROC_FS]
     depends on [PNPBIOS && PROC_FS]
     inherited [PNP && PNPBIOS && PROC_FS]
    }
   }
   config PNPACPI boolean {
    default [PNP && ACPI] if [PNP]
    inherited [PNP]
   }
  }
 }
 menuconfig BLK_DEV boolean {
  prompt "Block devices" if [BLOCK]
  depends on [BLOCK]
  default [y] if [BLOCK]
  inherited [BLOCK]
  if [BLK_DEV] {
   config BLK_DEV_FD tristate {
    prompt "Normal floppy disk support" if [BLK_DEV && ARCH_MAY_HAVE_PC_FDC]
    depends on [ARCH_MAY_HAVE_PC_FDC]
    inherited [BLK_DEV && ARCH_MAY_HAVE_PC_FDC]
   }
   config AMIGA_FLOPPY tristate {
    prompt "Amiga floppy support" if [BLK_DEV && AMIGA]
    depends on [AMIGA]
    inherited [BLK_DEV && AMIGA]
   }
   config ATARI_FLOPPY tristate {
    prompt "Atari floppy support" if [BLK_DEV && ATARI]
    depends on [ATARI]
    inherited [BLK_DEV && ATARI]
   }
   config MAC_FLOPPY tristate {
    prompt "Support for PowerMac floppy" if [BLK_DEV && PPC_PMAC && !PPC_PMAC64]
    depends on [PPC_PMAC && !PPC_PMAC64]
    inherited [BLK_DEV && PPC_PMAC && !PPC_PMAC64]
   }
   config BLK_DEV_SWIM tristate {
    prompt "Support for SWIM Macintosh floppy" if [BLK_DEV && M68K && MAC]
    depends on [M68K && MAC]
    inherited [BLK_DEV && M68K && MAC]
   }
   config AMIGA_Z2RAM tristate {
    prompt "Amiga Zorro II ramdisk support" if [BLK_DEV && ZORRO]
    depends on [ZORRO]
    inherited [BLK_DEV && ZORRO]
   }
   config BLK_DEV_XD tristate {
    prompt "XT hard disk support" if [BLK_DEV && ISA && ISA_DMA_API]
    depends on [ISA && ISA_DMA_API]
    select CHECK_SIGNATURE if [BLK_DEV && ISA && ISA_DMA_API]
    inherited [BLK_DEV && ISA && ISA_DMA_API]
   }
   config PARIDE tristate {
    prompt "Parallel port IDE device support" if [BLK_DEV && PARPORT_PC]
    depends on [PARPORT_PC]
    inherited [BLK_DEV && PARPORT_PC]
   }
   config GDROM tristate {
    prompt "SEGA Dreamcast GD-ROM drive" if [BLK_DEV && SH_DREAMCAST]
    depends on [SH_DREAMCAST]
    inherited [BLK_DEV && SH_DREAMCAST]
   }
   config PARIDE_PD tristate {
    prompt "Parallel port IDE disks" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_PCD tristate {
    prompt "Parallel port ATAPI CD-ROMs" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_PF tristate {
    prompt "Parallel port ATAPI disks" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_PT tristate {
    prompt "Parallel port ATAPI tapes" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_PG tristate {
    prompt "Parallel port generic ATAPI devices" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_ATEN tristate {
    prompt "ATEN EH-100 protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_BPCK tristate {
    prompt "MicroSolutions backpack (Series 5) protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_BPCK6 tristate {
    prompt "MicroSolutions backpack (Series 6) protocol" if [BLK_DEV && PARIDE && !64BIT]
    depends on [PARIDE && !64BIT]
    inherited [BLK_DEV && PARIDE && !64BIT]
   }
   config PARIDE_COMM tristate {
    prompt "DataStor Commuter protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_DSTR tristate {
    prompt "DataStor EP-2000 protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_FIT2 tristate {
    prompt "FIT TD-2000 protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_FIT3 tristate {
    prompt "FIT TD-3000 protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_EPAT tristate {
    prompt "Shuttle EPAT/EPEZ protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
    config PARIDE_EPATC8 boolean {
     prompt "Support c7/c8 chips (EXPERIMENTAL)" if [BLK_DEV && PARIDE_EPAT && EXPERIMENTAL]
     depends on [PARIDE_EPAT && EXPERIMENTAL]
     inherited [BLK_DEV && PARIDE_EPAT && EXPERIMENTAL]
    }
   }
   config PARIDE_EPIA tristate {
    prompt "Shuttle EPIA protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_FRIQ tristate {
    prompt "Freecom IQ ASIC-2 protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_FRPW tristate {
    prompt "FreeCom power protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_KBIC tristate {
    prompt "KingByte KBIC-951A/971A protocols" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_KTTI tristate {
    prompt "KT PHd protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_ON20 tristate {
    prompt "OnSpec 90c20 protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config PARIDE_ON26 tristate {
    prompt "OnSpec 90c26 protocol" if [BLK_DEV && PARIDE]
    depends on [PARIDE]
    inherited [BLK_DEV && PARIDE]
   }
   config BLK_CPQ_DA tristate {
    prompt "Compaq SMART2 support" if [BLK_DEV && PCI && VIRT_TO_BUS]
    depends on [PCI && VIRT_TO_BUS]
    inherited [BLK_DEV && PCI && VIRT_TO_BUS]
   }
   config BLK_CPQ_CISS_DA tristate {
    prompt "Compaq Smart Array 5xxx support" if [BLK_DEV && PCI]
    depends on [PCI]
    inherited [BLK_DEV && PCI]
    config CISS_SCSI_TAPE boolean {
     prompt "SCSI tape drive support for Smart Array 5xxx" if [BLK_DEV && BLK_CPQ_CISS_DA && PROC_FS && (SCSI="y" || SCSI="BLK_CPQ_CISS_DA")]
     depends on [BLK_CPQ_CISS_DA && PROC_FS]
     depends on [SCSI="y" || SCSI="BLK_CPQ_CISS_DA"]
     inherited [BLK_DEV && BLK_CPQ_CISS_DA && PROC_FS && (SCSI="y" || SCSI="BLK_CPQ_CISS_DA")]
    }
   }
   config BLK_DEV_DAC960 tristate {
    prompt "Mylex DAC960/DAC1100 PCI RAID Controller support" if [BLK_DEV && PCI]
    depends on [PCI]
    inherited [BLK_DEV && PCI]
   }
   config BLK_DEV_UMEM tristate {
    prompt "Micro Memory MM5415 Battery Backed RAM support (EXPERIMENTAL)" if [BLK_DEV && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [BLK_DEV && PCI && EXPERIMENTAL]
   }
   config BLK_DEV_UBD boolean {
    prompt "Virtual block device" if [BLK_DEV && UML]
    depends on [UML]
    inherited [BLK_DEV && UML]
    config BLK_DEV_UBD_SYNC boolean {
     prompt "Always do synchronous disk IO for UBD" if [BLK_DEV && BLK_DEV_UBD]
     depends on [BLK_DEV_UBD]
     inherited [BLK_DEV && BLK_DEV_UBD]
    }
   }
   config BLK_DEV_COW_COMMON boolean {
    default [BLK_DEV_UBD] if [BLK_DEV]
    inherited [BLK_DEV]
   }
   config BLK_DEV_LOOP tristate {
    prompt "Loopback device support" if [BLK_DEV]
    inherited [BLK_DEV]
    config BLK_DEV_CRYPTOLOOP tristate {
     prompt "Cryptoloop Support" if [BLK_DEV && BLK_DEV_LOOP]
     select CRYPTO if [BLK_DEV && BLK_DEV_LOOP]
     select CRYPTO_CBC if [BLK_DEV && BLK_DEV_LOOP]
     depends on [BLK_DEV_LOOP]
     inherited [BLK_DEV && BLK_DEV_LOOP]
    }
   }
   config BLK_DEV_NBD tristate {
    prompt "Network block device support" if [BLK_DEV && NET]
    depends on [NET]
    inherited [BLK_DEV && NET]
   }
   config BLK_DEV_OSD tristate {
    prompt "OSD object-as-blkdev support" if [BLK_DEV && SCSI_OSD_ULD]
    depends on [SCSI_OSD_ULD]
    inherited [BLK_DEV && SCSI_OSD_ULD]
   }
   config BLK_DEV_SX8 tristate {
    prompt "Promise SATA SX8 support" if [BLK_DEV && PCI]
    depends on [PCI]
    inherited [BLK_DEV && PCI]
   }
   config BLK_DEV_UB tristate {
    prompt "Low Performance USB Block driver" if [BLK_DEV && USB]
    depends on [USB]
    inherited [BLK_DEV && USB]
   }
   config BLK_DEV_RAM tristate {
    prompt "RAM block device support" if [BLK_DEV]
    inherited [BLK_DEV]
    config BLK_DEV_RAM_COUNT integer {
     prompt "Default number of RAM disks" if [BLK_DEV && BLK_DEV_RAM]
     default [16] if [BLK_DEV && BLK_DEV_RAM]
     depends on [BLK_DEV_RAM]
     inherited [BLK_DEV && BLK_DEV_RAM]
    }
    config BLK_DEV_RAM_SIZE integer {
     prompt "Default RAM disk size (kbytes)" if [BLK_DEV && BLK_DEV_RAM]
     depends on [BLK_DEV_RAM]
     default [4096] if [BLK_DEV && BLK_DEV_RAM]
     inherited [BLK_DEV && BLK_DEV_RAM]
    }
    config BLK_DEV_XIP boolean {
     prompt "Support XIP filesystems on RAM block device" if [BLK_DEV && BLK_DEV_RAM]
     depends on [BLK_DEV_RAM]
     default [n] if [BLK_DEV && BLK_DEV_RAM]
     inherited [BLK_DEV && BLK_DEV_RAM]
    }
   }
   config CDROM_PKTCDVD tristate {
    prompt "Packet writing on CD/DVD media" if [BLK_DEV && !UML]
    depends on [!UML]
    inherited [BLK_DEV && !UML]
    config CDROM_PKTCDVD_BUFFERS integer {
     prompt "Free buffers for data gathering" if [BLK_DEV && CDROM_PKTCDVD]
     depends on [CDROM_PKTCDVD]
     default [8] if [BLK_DEV && CDROM_PKTCDVD]
     inherited [BLK_DEV && CDROM_PKTCDVD]
    }
    config CDROM_PKTCDVD_WCACHE boolean {
     prompt "Enable write caching (EXPERIMENTAL)" if [BLK_DEV && CDROM_PKTCDVD && EXPERIMENTAL]
     depends on [CDROM_PKTCDVD && EXPERIMENTAL]
     inherited [BLK_DEV && CDROM_PKTCDVD && EXPERIMENTAL]
    }
   }
   config ATA_OVER_ETH tristate {
    prompt "ATA over Ethernet support" if [BLK_DEV && NET]
    depends on [NET]
    inherited [BLK_DEV && NET]
   }
   config MG_DISK tristate {
    prompt "mGine mflash, gflash support" if [BLK_DEV && ARM && GPIOLIB]
    depends on [ARM && GPIOLIB]
    inherited [BLK_DEV && ARM && GPIOLIB]
    config MG_DISK_RES integer {
     prompt "Size of reserved area before MBR" if [BLK_DEV && MG_DISK]
     depends on [MG_DISK]
     default [0] if [BLK_DEV && MG_DISK]
     inherited [BLK_DEV && MG_DISK]
    }
   }
   config SUNVDC tristate {
    prompt "Sun Virtual Disk Client support" if [BLK_DEV && SUN_LDOMS]
    depends on [SUN_LDOMS]
    inherited [BLK_DEV && SUN_LDOMS]
   }
   config BLK_DEV_XPRAM tristate {
    prompt "XPRAM disk support" if [BLK_DEV && S390 && BLOCK]
    depends on [S390 && BLOCK]
    inherited [BLK_DEV && S390 && BLOCK]
   }
   config DCSSBLK tristate {
    prompt "DCSSBLK support" if [BLK_DEV && S390 && BLOCK]
    depends on [S390 && BLOCK]
    inherited [BLK_DEV && S390 && BLOCK]
   }
   config DASD tristate {
    prompt "Support for DASD devices" if [BLK_DEV && CCW && BLOCK]
    depends on [CCW && BLOCK]
    select IOSCHED_DEADLINE if [BLK_DEV && CCW && BLOCK]
    inherited [BLK_DEV && CCW && BLOCK]
    config DASD_PROFILE boolean {
     prompt "Profiling support for dasd devices" if [BLK_DEV && DASD]
     depends on [DASD]
     inherited [BLK_DEV && DASD]
    }
    config DASD_ECKD tristate {
     prompt "Support for ECKD Disks" if [BLK_DEV && DASD]
     depends on [DASD]
     inherited [BLK_DEV && DASD]
    }
    config DASD_FBA tristate {
     prompt "Support for FBA  Disks" if [BLK_DEV && DASD]
     depends on [DASD]
     inherited [BLK_DEV && DASD]
    }
    config DASD_DIAG tristate {
     prompt "Support for DIAG access to Disks" if [BLK_DEV && DASD]
     depends on [DASD]
     inherited [BLK_DEV && DASD]
    }
    config DASD_EER boolean {
     prompt "Extended error reporting (EER)" if [BLK_DEV && DASD]
     depends on [DASD]
     inherited [BLK_DEV && DASD]
    }
   }
   config XILINX_SYSACE tristate {
    prompt "Xilinx SystemACE support" if [BLK_DEV && (4xx || MICROBLAZE)]
    depends on [4xx || MICROBLAZE]
    inherited [BLK_DEV && (4xx || MICROBLAZE)]
   }
   config XEN_BLKDEV_FRONTEND tristate {
    prompt "Xen virtual block device support" if [BLK_DEV && XEN]
    depends on [XEN]
    default [y] if [BLK_DEV && XEN]
    inherited [BLK_DEV && XEN]
   }
   config VIRTIO_BLK tristate {
    prompt "Virtio block driver (EXPERIMENTAL)" if [BLK_DEV && EXPERIMENTAL && VIRTIO]
    depends on [EXPERIMENTAL && VIRTIO]
    inherited [BLK_DEV && EXPERIMENTAL && VIRTIO]
   }
   config BLK_DEV_HD boolean {
    prompt "Very old hard disk (MFM/RLL/IDE) driver" if [BLK_DEV && HAVE_IDE && (!ARM || ARCH_RPC || ARCH_SHARK || BROKEN)]
    depends on [HAVE_IDE]
    depends on [!ARM || ARCH_RPC || ARCH_SHARK || BROKEN]
    inherited [BLK_DEV && HAVE_IDE && (!ARM || ARCH_RPC || ARCH_SHARK || BROKEN)]
   }
  }
 }
 menuconfig MISC_DEVICES boolean {
  prompt "Misc devices" if []
  default [y] if []
  if [MISC_DEVICES] {
   config ATMEL_PWM tristate {
    prompt "Atmel AT32/AT91 PWM support" if [MISC_DEVICES && (AVR32 || ARCH_AT91SAM9263 || ARCH_AT91SAM9RL || ARCH_AT91CAP9)]
    depends on [AVR32 || ARCH_AT91SAM9263 || ARCH_AT91SAM9RL || ARCH_AT91CAP9]
    inherited [MISC_DEVICES && (AVR32 || ARCH_AT91SAM9263 || ARCH_AT91SAM9RL || ARCH_AT91CAP9)]
   }
   config ATMEL_TCLIB boolean {
    prompt "Atmel AT32/AT91 Timer/Counter Library" if [MISC_DEVICES && (AVR32 || ARCH_AT91)]
    depends on [AVR32 || ARCH_AT91]
    inherited [MISC_DEVICES && (AVR32 || ARCH_AT91)]
    config ATMEL_TCB_CLKSRC boolean {
     prompt "TC Block Clocksource" if [MISC_DEVICES && ATMEL_TCLIB && GENERIC_TIME]
     depends on [ATMEL_TCLIB && GENERIC_TIME]
     default [y] if [MISC_DEVICES && ATMEL_TCLIB && GENERIC_TIME]
     inherited [MISC_DEVICES && ATMEL_TCLIB && GENERIC_TIME]
     config ATMEL_TCB_CLKSRC_BLOCK integer {
      depends on [ATMEL_TCB_CLKSRC]
      prompt "TC Block" if [MISC_DEVICES && ATMEL_TCB_CLKSRC && (ARCH_AT91RM9200 || ARCH_AT91SAM9260 || CPU_AT32AP700X)]
      default [0] if [MISC_DEVICES && ATMEL_TCB_CLKSRC]
      range [0 1] if [MISC_DEVICES && ATMEL_TCB_CLKSRC]
      inherited [MISC_DEVICES && ATMEL_TCB_CLKSRC]
     }
    }
   }
   config IBM_ASM tristate {
    prompt "Device driver for IBM RSA service processor" if [MISC_DEVICES && X86 && PCI && INPUT && EXPERIMENTAL]
    depends on [X86 && PCI && INPUT && EXPERIMENTAL]
    inherited [MISC_DEVICES && X86 && PCI && INPUT && EXPERIMENTAL]
   }
   config PHANTOM tristate {
    prompt "Sensable PHANToM (PCI)" if [MISC_DEVICES && PCI]
    depends on [PCI]
    inherited [MISC_DEVICES && PCI]
   }
   config SGI_IOC4 tristate {
    prompt "SGI IOC4 Base IO support" if [MISC_DEVICES && PCI]
    depends on [PCI]
    inherited [MISC_DEVICES && PCI]
   }
   config TIFM_CORE tristate {
    prompt "TI Flash Media interface support (EXPERIMENTAL)" if [MISC_DEVICES && EXPERIMENTAL && PCI]
    depends on [EXPERIMENTAL && PCI]
    inherited [MISC_DEVICES && EXPERIMENTAL && PCI]
    config TIFM_7XX1 tristate {
     prompt "TI Flash Media PCI74xx/PCI76xx host adapter support (EXPERIMENTAL)" if [MISC_DEVICES && PCI && TIFM_CORE && EXPERIMENTAL]
     depends on [PCI && TIFM_CORE && EXPERIMENTAL]
     default [TIFM_CORE] if [MISC_DEVICES && PCI && TIFM_CORE && EXPERIMENTAL]
     inherited [MISC_DEVICES && PCI && TIFM_CORE && EXPERIMENTAL]
    }
   }
   config ICS932S401 tristate {
    prompt "Integrated Circuits ICS932S401" if [MISC_DEVICES && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [MISC_DEVICES && I2C && EXPERIMENTAL]
   }
   config ATMEL_SSC tristate {
    prompt "Device driver for Atmel SSC peripheral" if [MISC_DEVICES && (AVR32 || ARCH_AT91)]
    depends on [AVR32 || ARCH_AT91]
    inherited [MISC_DEVICES && (AVR32 || ARCH_AT91)]
   }
   config ENCLOSURE_SERVICES tristate {
    prompt "Enclosure Services" if [MISC_DEVICES]
    default [n] if [MISC_DEVICES]
    inherited [MISC_DEVICES]
   }
   config SGI_XP tristate {
    prompt "Support communication between SGI SSIs" if [MISC_DEVICES && NET && (IA64_GENERIC || IA64_SGI_SN2 || IA64_SGI_UV || X86_UV) && SMP]
    depends on [NET]
    depends on [(IA64_GENERIC || IA64_SGI_SN2 || IA64_SGI_UV || X86_UV) && SMP]
    select IA64_UNCACHED_ALLOCATOR if [MISC_DEVICES && NET && (IA64_GENERIC || IA64_SGI_SN2 || IA64_SGI_UV || X86_UV) && SMP && (IA64_GENERIC || IA64_SGI_SN2)]
    select GENERIC_ALLOCATOR if [MISC_DEVICES && NET && (IA64_GENERIC || IA64_SGI_SN2 || IA64_SGI_UV || X86_UV) && SMP && (IA64_GENERIC || IA64_SGI_SN2)]
    select SGI_GRU if [MISC_DEVICES && NET && (IA64_GENERIC || IA64_SGI_SN2 || IA64_SGI_UV || X86_UV) && X86_64 && SMP]
    inherited [MISC_DEVICES && NET && (IA64_GENERIC || IA64_SGI_SN2 || IA64_SGI_UV || X86_UV) && SMP]
   }
   config HP_ILO tristate {
    prompt "Channel interface driver for HP iLO/iLO2 processor" if [MISC_DEVICES && PCI]
    depends on [PCI]
    default [n] if [MISC_DEVICES && PCI]
    inherited [MISC_DEVICES && PCI]
   }
   config SGI_GRU tristate {
    prompt "SGI GRU driver" if [MISC_DEVICES && X86_UV && SMP]
    depends on [X86_UV && SMP]
    default [n] if [MISC_DEVICES && X86_UV && SMP]
    select MMU_NOTIFIER if [MISC_DEVICES && X86_UV && SMP]
    inherited [MISC_DEVICES && X86_UV && SMP]
    config SGI_GRU_DEBUG boolean {
     prompt "SGI GRU driver debug" if [MISC_DEVICES && SGI_GRU]
     depends on [SGI_GRU]
     default [n] if [MISC_DEVICES && SGI_GRU]
     inherited [MISC_DEVICES && SGI_GRU]
    }
   }
   config DELL_LAPTOP tristate {
    prompt "Dell Laptop Extras (EXPERIMENTAL)" if [MISC_DEVICES && X86 && DCDBAS && EXPERIMENTAL && BACKLIGHT_CLASS_DEVICE && RFKILL && POWER_SUPPLY]
    depends on [X86]
    depends on [DCDBAS]
    depends on [EXPERIMENTAL]
    depends on [BACKLIGHT_CLASS_DEVICE]
    depends on [RFKILL]
    depends on [POWER_SUPPLY]
    default [n] if [MISC_DEVICES && X86 && DCDBAS && EXPERIMENTAL && BACKLIGHT_CLASS_DEVICE && RFKILL && POWER_SUPPLY]
    prompt "Dell Laptop Extras (EXPERIMENTAL)" if [X86_PLATFORM_DEVICES && X86 && DCDBAS && EXPERIMENTAL && BACKLIGHT_CLASS_DEVICE && (RFKILL || RFKILL="n") && POWER_SUPPLY]
    depends on [X86]
    depends on [DCDBAS]
    depends on [EXPERIMENTAL]
    depends on [BACKLIGHT_CLASS_DEVICE]
    depends on [RFKILL || RFKILL="n"]
    depends on [POWER_SUPPLY]
    default [n] if [X86_PLATFORM_DEVICES && X86 && DCDBAS && EXPERIMENTAL && BACKLIGHT_CLASS_DEVICE && (RFKILL || RFKILL="n") && POWER_SUPPLY]
    inherited [MISC_DEVICES && X86 && DCDBAS && EXPERIMENTAL && BACKLIGHT_CLASS_DEVICE && RFKILL && POWER_SUPPLY]
   }
   config ISL29003 tristate {
    prompt "Intersil ISL29003 ambient light sensor" if [MISC_DEVICES && I2C && SYSFS]
    depends on [I2C && SYSFS]
    inherited [MISC_DEVICES && I2C && SYSFS]
   }
   config EP93XX_PWM tristate {
    prompt "EP93xx PWM support" if [MISC_DEVICES && ARCH_EP93XX]
    depends on [ARCH_EP93XX]
    inherited [MISC_DEVICES && ARCH_EP93XX]
   }
   menuconfig C2PORT tristate {
    prompt "Silicon Labs C2 port support (EXPERIMENTAL)" if [MISC_DEVICES && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    default [no] if [MISC_DEVICES && EXPERIMENTAL]
    inherited [MISC_DEVICES && EXPERIMENTAL]
    if [MISC_DEVICES && C2PORT] {
     config C2PORT_DURAMAR_2150 tristate {
      prompt "C2 port support for Eurotech's Duramar 2150 (EXPERIMENTAL)" if [MISC_DEVICES && X86 && C2PORT]
      depends on [X86 && C2PORT]
      default [no] if [MISC_DEVICES && X86 && C2PORT]
      inherited [MISC_DEVICES && X86 && C2PORT]
     }
    }
   }
   menu "EEPROM support" {
    depends on [MISC_DEVICES]
    config EEPROM_AT24 tristate {
     prompt "I2C EEPROMs from most vendors" if [MISC_DEVICES && I2C && SYSFS]
     depends on [I2C && SYSFS]
     inherited [MISC_DEVICES && I2C && SYSFS]
    }
    config EEPROM_AT25 tristate {
     prompt "SPI EEPROMs from most vendors" if [MISC_DEVICES && SPI && SYSFS]
     depends on [SPI && SYSFS]
     inherited [MISC_DEVICES && SPI && SYSFS]
    }
    config EEPROM_LEGACY tristate {
     prompt "Old I2C EEPROM reader" if [MISC_DEVICES && I2C && SYSFS]
     depends on [I2C && SYSFS]
     inherited [MISC_DEVICES && I2C && SYSFS]
    }
    config EEPROM_MAX6875 tristate {
     prompt "Maxim MAX6874/5 power supply supervisor" if [MISC_DEVICES && I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     inherited [MISC_DEVICES && I2C && EXPERIMENTAL]
    }
    config EEPROM_93CX6 tristate {
     prompt "EEPROM 93CX6 support" if [MISC_DEVICES]
     inherited [MISC_DEVICES]
    }
   }
   config CB710_CORE tristate {
    prompt "ENE CB710/720 Flash memory card reader support" if [MISC_DEVICES && PCI]
    depends on [PCI]
    inherited [MISC_DEVICES && PCI]
    config CB710_DEBUG boolean {
     prompt "Enable driver debugging" if [MISC_DEVICES && CB710_CORE]
     depends on [CB710_CORE]
     default [n] if [MISC_DEVICES && CB710_CORE]
     inherited [MISC_DEVICES && CB710_CORE]
    }
    config CB710_DEBUG_ASSUMPTIONS boolean {
     depends on [CB710_CORE]
     default [y] if [MISC_DEVICES && CB710_CORE]
     inherited [MISC_DEVICES && CB710_CORE]
    }
   }
  }
 }
 config HAVE_IDE boolean {
 }
 menuconfig IDE tristate {
  prompt "ATA/ATAPI/MFM/RLL support" if [HAVE_IDE && BLOCK]
  depends on [HAVE_IDE]
  depends on [BLOCK]
  inherited [HAVE_IDE && BLOCK]
  if [IDE] {
   config IDE_XFER_MODE boolean {
    inherited [IDE]
   }
   config IDE_TIMINGS boolean {
    select IDE_XFER_MODE if [IDE]
    inherited [IDE]
   }
   config IDE_ATAPI boolean {
    inherited [IDE]
   }
   config IDE_LEGACY boolean {
    inherited [IDE]
   }
   config BLK_DEV_IDE_SATA boolean {
    prompt "Support for SATA (deprecated; conflicts with libata SATA driver)" if [IDE]
    default [n] if [IDE]
    inherited [IDE]
   }
   config IDE_GD tristate {
    prompt "generic ATA/ATAPI disk support" if [IDE]
    default [y] if [IDE]
    inherited [IDE]
    config IDE_GD_ATA boolean {
     prompt "ATA disk support" if [IDE && IDE_GD]
     depends on [IDE_GD]
     default [y] if [IDE && IDE_GD]
     inherited [IDE && IDE_GD]
    }
    config IDE_GD_ATAPI boolean {
     prompt "ATAPI floppy support" if [IDE && IDE_GD]
     depends on [IDE_GD]
     select IDE_ATAPI if [IDE && IDE_GD]
     inherited [IDE && IDE_GD]
    }
   }
   config BLK_DEV_IDECS tristate {
    prompt "PCMCIA IDE support" if [IDE && PCMCIA]
    depends on [PCMCIA]
    inherited [IDE && PCMCIA]
   }
   config BLK_DEV_DELKIN tristate {
    prompt "Cardbus IDE support (Delkin/ASKA/Workbit)" if [IDE && CARDBUS && PCI]
    depends on [CARDBUS && PCI]
    inherited [IDE && CARDBUS && PCI]
   }
   config BLK_DEV_IDECD tristate {
    prompt "Include IDE/ATAPI CDROM support" if [IDE]
    select IDE_ATAPI if [IDE]
    inherited [IDE]
    config BLK_DEV_IDECD_VERBOSE_ERRORS boolean {
     prompt "Verbose error logging for IDE/ATAPI CDROM driver" if [IDE && BLK_DEV_IDECD && EMBEDDED]
     depends on [BLK_DEV_IDECD]
     default [y] if [IDE && BLK_DEV_IDECD]
     inherited [IDE && BLK_DEV_IDECD]
    }
   }
   config BLK_DEV_IDETAPE tristate {
    prompt "Include IDE/ATAPI TAPE support" if [IDE]
    select IDE_ATAPI if [IDE]
    inherited [IDE]
   }
   config BLK_DEV_IDEACPI boolean {
    prompt "IDE ACPI support" if [IDE && ACPI]
    depends on [ACPI]
    inherited [IDE && ACPI]
   }
   config IDE_TASK_IOCTL boolean {
    prompt "IDE Taskfile Access" if [IDE]
    inherited [IDE]
   }
   config IDE_PROC_FS boolean {
    prompt "legacy /proc/ide/ support" if [IDE && PROC_FS]
    depends on [IDE && PROC_FS]
    default [y] if [IDE && PROC_FS]
    inherited [IDE && PROC_FS]
   }
   config IDE_GENERIC tristate {
    prompt "generic/default IDE chipset support" if [IDE && (ALPHA || X86 || IA64 || M32R || MIPS || ARCH_RPC || ARCH_SHARK)]
    depends on [ALPHA || X86 || IA64 || M32R || MIPS || ARCH_RPC || ARCH_SHARK]
    default [ARM && (ARCH_RPC || ARCH_SHARK)] if [IDE && (ALPHA || X86 || IA64 || M32R || MIPS || ARCH_RPC || ARCH_SHARK)]
    inherited [IDE && (ALPHA || X86 || IA64 || M32R || MIPS || ARCH_RPC || ARCH_SHARK)]
   }
   config BLK_DEV_PLATFORM tristate {
    prompt "Platform driver for IDE interfaces" if [IDE]
    inherited [IDE]
   }
   config BLK_DEV_CMD640 tristate {
    prompt "CMD640 chipset bugfix/support" if [IDE && X86]
    depends on [X86]
    select IDE_TIMINGS if [IDE && X86]
    inherited [IDE && X86]
    config BLK_DEV_CMD640_ENHANCED boolean {
     prompt "CMD640 enhanced support" if [IDE && BLK_DEV_CMD640]
     depends on [BLK_DEV_CMD640]
     inherited [IDE && BLK_DEV_CMD640]
    }
   }
   config BLK_DEV_IDEPNP tristate {
    prompt "PNP EIDE support" if [IDE && PNP]
    depends on [PNP]
    inherited [IDE && PNP]
   }
   config BLK_DEV_IDEDMA_SFF boolean {
    inherited [IDE]
   }
   if [IDE && PCI] {
    config BLK_DEV_IDEPCI boolean {
     inherited [IDE && PCI]
    }
    config IDEPCI_PCIBUS_ORDER boolean {
     prompt "Probe IDE PCI devices in the PCI bus order (DEPRECATED)" if [PCI && IDE="y" && BLK_DEV_IDEPCI]
     depends on [IDE="y" && BLK_DEV_IDEPCI]
     default [y] if [PCI && IDE="y" && BLK_DEV_IDEPCI]
     inherited [PCI && IDE="y" && BLK_DEV_IDEPCI]
    }
    config BLK_DEV_OFFBOARD boolean {
     prompt "Boot off-board chipsets first support (DEPRECATED)" if [IDE && PCI && BLK_DEV_IDEPCI && (BLK_DEV_AEC62XX || BLK_DEV_GENERIC || BLK_DEV_HPT366 || BLK_DEV_PDC202XX_NEW || BLK_DEV_PDC202XX_OLD || BLK_DEV_TC86C001)]
     depends on [BLK_DEV_IDEPCI && (BLK_DEV_AEC62XX || BLK_DEV_GENERIC || BLK_DEV_HPT366 || BLK_DEV_PDC202XX_NEW || BLK_DEV_PDC202XX_OLD || BLK_DEV_TC86C001)]
     inherited [IDE && PCI && BLK_DEV_IDEPCI && (BLK_DEV_AEC62XX || BLK_DEV_GENERIC || BLK_DEV_HPT366 || BLK_DEV_PDC202XX_NEW || BLK_DEV_PDC202XX_OLD || BLK_DEV_TC86C001)]
    }
    config BLK_DEV_GENERIC tristate {
     prompt "Generic PCI IDE Chipset Support" if [IDE && PCI]
     select BLK_DEV_IDEPCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_OPTI621 tristate {
     prompt "OPTi 82C621 chipset enhanced support (EXPERIMENTAL)" if [IDE && PCI && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     select BLK_DEV_IDEPCI if [IDE && PCI && EXPERIMENTAL]
     inherited [IDE && PCI && EXPERIMENTAL]
    }
    config BLK_DEV_RZ1000 tristate {
     prompt "RZ1000 chipset bugfix/support" if [IDE && PCI && X86]
     depends on [X86]
     select BLK_DEV_IDEPCI if [IDE && PCI && X86]
     inherited [IDE && PCI && X86]
    }
    config BLK_DEV_IDEDMA_PCI boolean {
     select BLK_DEV_IDEPCI if [IDE && PCI]
     select BLK_DEV_IDEDMA_SFF if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_AEC62XX tristate {
     prompt "AEC62XX chipset support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_ALI15X3 tristate {
     prompt "ALI M15x3 chipset support" if [IDE && PCI]
     select IDE_TIMINGS if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_AMD74XX tristate {
     prompt "AMD and nVidia IDE support" if [IDE && PCI && !ARM]
     depends on [!ARM]
     select IDE_TIMINGS if [IDE && PCI && !ARM]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI && !ARM]
     inherited [IDE && PCI && !ARM]
    }
    config BLK_DEV_ATIIXP tristate {
     prompt "ATI IXP chipset IDE support" if [IDE && PCI && X86]
     depends on [X86]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI && X86]
     inherited [IDE && PCI && X86]
    }
    config BLK_DEV_CMD64X tristate {
     prompt "CMD64{3|6|8|9} chipset support" if [IDE && PCI]
     select IDE_TIMINGS if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_TRIFLEX tristate {
     prompt "Compaq Triflex IDE support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_CY82C693 tristate {
     prompt "CY82C693 chipset support" if [IDE && PCI && ALPHA]
     depends on [ALPHA]
     select IDE_TIMINGS if [IDE && PCI && ALPHA]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI && ALPHA]
     inherited [IDE && PCI && ALPHA]
    }
    config BLK_DEV_CS5520 tristate {
     prompt "Cyrix CS5510/20 MediaGX chipset support (VERY EXPERIMENTAL)" if [IDE && PCI && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI && EXPERIMENTAL]
     inherited [IDE && PCI && EXPERIMENTAL]
    }
    config BLK_DEV_CS5530 tristate {
     prompt "Cyrix/National Semiconductor CS5530 MediaGX chipset support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_CS5535 tristate {
     prompt "AMD CS5535 chipset support" if [IDE && PCI && X86 && !X86_64]
     depends on [X86 && !X86_64]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI && X86 && !X86_64]
     inherited [IDE && PCI && X86 && !X86_64]
    }
    config BLK_DEV_CS5536 tristate {
     prompt "CS5536 chipset support" if [IDE && PCI && X86_32]
     depends on [X86_32]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI && X86_32]
     inherited [IDE && PCI && X86_32]
    }
    config BLK_DEV_HPT366 tristate {
     prompt "HPT36X/37X chipset support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_JMICRON tristate {
     prompt "JMicron JMB36x support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_SC1200 tristate {
     prompt "National SCx200 chipset support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_PIIX tristate {
     prompt "Intel PIIX/ICH chipsets support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_IT8172 tristate {
     prompt "IT8172 IDE support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_IT8213 tristate {
     prompt "IT8213 IDE support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_IT821X tristate {
     prompt "IT821X IDE support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_NS87415 tristate {
     prompt "NS87415 chipset support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_PDC202XX_OLD tristate {
     prompt "PROMISE PDC202{46|62|65|67} support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_PDC202XX_NEW tristate {
     prompt "PROMISE PDC202{68|69|70|71|75|76|77} support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_SVWKS tristate {
     prompt "ServerWorks OSB4/CSB5/CSB6 chipsets support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_SGIIOC4 tristate {
     prompt "Silicon Graphics IOC4 chipset ATA/ATAPI support" if [IDE && PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
     depends on [(IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
     inherited [IDE && PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
    }
    config BLK_DEV_SIIMAGE tristate {
     prompt "Silicon Image chipset support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_SIS5513 tristate {
     prompt "SiS5513 chipset support" if [IDE && PCI && X86]
     depends on [X86]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI && X86]
     inherited [IDE && PCI && X86]
    }
    config BLK_DEV_SL82C105 tristate {
     prompt "Winbond SL82c105 support" if [IDE && PCI && (PPC || ARM)]
     depends on [PPC || ARM]
     select IDE_TIMINGS if [IDE && PCI && (PPC || ARM)]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI && (PPC || ARM)]
     inherited [IDE && PCI && (PPC || ARM)]
    }
    config BLK_DEV_SLC90E66 tristate {
     prompt "SLC90E66 chipset support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_TRM290 tristate {
     prompt "Tekram TRM290 chipset support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_VIA82CXXX tristate {
     prompt "VIA82CXXX chipset support" if [IDE && PCI]
     select IDE_TIMINGS if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_TC86C001 tristate {
     prompt "Toshiba TC86C001 support" if [IDE && PCI]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
     inherited [IDE && PCI]
    }
    config BLK_DEV_CELLEB tristate {
     prompt "Toshiba's Cell Reference Set IDE support" if [IDE && PCI && PPC_CELLEB]
     depends on [PPC_CELLEB]
     select BLK_DEV_IDEDMA_PCI if [IDE && PCI && PPC_CELLEB]
     inherited [IDE && PCI && PPC_CELLEB]
    }
   }
   config BLK_DEV_IDE_PMAC tristate {
    prompt "PowerMac on-board IDE support" if [IDE && PPC_PMAC]
    depends on [PPC_PMAC]
    select IDE_TIMINGS if [IDE && PPC_PMAC]
    select BLK_DEV_IDEDMA_PCI if [IDE && PPC_PMAC]
    inherited [IDE && PPC_PMAC]
    config BLK_DEV_IDE_PMAC_ATA100FIRST boolean {
     prompt "Probe on-board ATA/100 (Kauai) first" if [IDE && BLK_DEV_IDE_PMAC]
     depends on [BLK_DEV_IDE_PMAC]
     inherited [IDE && BLK_DEV_IDE_PMAC]
    }
   }
   config BLK_DEV_IDE_AU1XXX boolean {
    prompt "IDE for AMD Alchemy Au1200" if [IDE && SOC_AU1200]
    depends on [SOC_AU1200]
    select IDE_XFER_MODE if [IDE && SOC_AU1200]
    inherited [IDE && SOC_AU1200]
    choice boolean {
     prompt "IDE Mode for AMD Alchemy Au1200" if [IDE && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
     default [CONFIG_BLK_DEV_IDE_AU1XXX_PIO_DBDMA] if [IDE && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
     depends on [SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
     config BLK_DEV_IDE_AU1XXX_PIO_DBDMA boolean {
      prompt "PIO+DbDMA IDE for AMD Alchemy Au1200" if [<choice>]
      inherited [<choice>]
     }
     config BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA boolean {
      prompt "MDMA2+DbDMA IDE for AMD Alchemy Au1200" if [<choice> && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
      depends on [SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
      inherited [<choice> && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
     }
    }
   }
   config BLK_DEV_IDE_TX4938 tristate {
    prompt "TX4938 internal IDE support" if [IDE && SOC_TX4938]
    depends on [SOC_TX4938]
    select IDE_TIMINGS if [IDE && SOC_TX4938]
    inherited [IDE && SOC_TX4938]
   }
   config BLK_DEV_IDE_TX4939 tristate {
    prompt "TX4939 internal IDE support" if [IDE && SOC_TX4939]
    depends on [SOC_TX4939]
    select BLK_DEV_IDEDMA_SFF if [IDE && SOC_TX4939]
    inherited [IDE && SOC_TX4939]
   }
   config BLK_DEV_IDE_AT91 tristate {
    prompt "Atmel AT91 (SAM9, CAP9, AT572D940HF) IDE support" if [IDE && ARM && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
    depends on [ARM && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
    select IDE_TIMINGS if [IDE && ARM && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
    inherited [IDE && ARM && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
   }
   config BLK_DEV_IDE_ICSIDE tristate {
    prompt "ICS IDE interface support" if [IDE && ARM && ARCH_ACORN]
    depends on [ARM && ARCH_ACORN]
    inherited [IDE && ARM && ARCH_ACORN]
    config BLK_DEV_IDEDMA_ICS boolean {
     prompt "ICS DMA support" if [IDE && BLK_DEV_IDE_ICSIDE]
     depends on [BLK_DEV_IDE_ICSIDE]
     inherited [IDE && BLK_DEV_IDE_ICSIDE]
    }
   }
   config BLK_DEV_IDE_RAPIDE tristate {
    prompt "RapIDE interface support" if [IDE && ARM && ARCH_ACORN]
    depends on [ARM && ARCH_ACORN]
    inherited [IDE && ARM && ARCH_ACORN]
   }
   config IDE_H8300 tristate {
    prompt "H8300 IDE support" if [IDE && H8300]
    depends on [H8300]
    default [y] if [IDE && H8300]
    inherited [IDE && H8300]
   }
   config BLK_DEV_GAYLE tristate {
    prompt "Amiga Gayle IDE interface support" if [IDE && AMIGA]
    depends on [AMIGA]
    inherited [IDE && AMIGA]
   }
   config BLK_DEV_BUDDHA tristate {
    prompt "Buddha/Catweasel/X-Surf IDE interface support (EXPERIMENTAL)" if [IDE && ZORRO && EXPERIMENTAL]
    depends on [ZORRO && EXPERIMENTAL]
    inherited [IDE && ZORRO && EXPERIMENTAL]
   }
   config BLK_DEV_FALCON_IDE tristate {
    prompt "Falcon IDE interface support" if [IDE && ATARI]
    depends on [ATARI]
    inherited [IDE && ATARI]
   }
   config BLK_DEV_MAC_IDE tristate {
    prompt "Macintosh Quadra/Powerbook IDE interface support" if [IDE && MAC]
    depends on [MAC]
    inherited [IDE && MAC]
   }
   config BLK_DEV_Q40IDE tristate {
    prompt "Q40/Q60 IDE interface support" if [IDE && Q40]
    depends on [Q40]
    inherited [IDE && Q40]
   }
   config BLK_DEV_PALMCHIP_BK3710 tristate {
    prompt "Palmchip bk3710 IDE controller support" if [IDE && ARCH_DAVINCI]
    depends on [ARCH_DAVINCI]
    select IDE_TIMINGS if [IDE && ARCH_DAVINCI]
    select BLK_DEV_IDEDMA_SFF if [IDE && ARCH_DAVINCI]
    inherited [IDE && ARCH_DAVINCI]
   }
   if [IDE && ISA && (ALPHA || X86 || MIPS)] {
    config BLK_DEV_4DRIVES tristate {
     prompt "Generic 4 drives/port support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
     inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
    }
    config BLK_DEV_ALI14XX tristate {
     prompt "ALI M14xx support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
     select IDE_TIMINGS if [IDE && ISA && (ALPHA || X86 || MIPS)]
     select IDE_LEGACY if [IDE && ISA && (ALPHA || X86 || MIPS)]
     inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
    }
    config BLK_DEV_DTC2278 tristate {
     prompt "DTC-2278 support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
     select IDE_XFER_MODE if [IDE && ISA && (ALPHA || X86 || MIPS)]
     select IDE_LEGACY if [IDE && ISA && (ALPHA || X86 || MIPS)]
     inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
    }
    config BLK_DEV_HT6560B tristate {
     prompt "Holtek HT6560B support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
     select IDE_TIMINGS if [IDE && ISA && (ALPHA || X86 || MIPS)]
     select IDE_LEGACY if [IDE && ISA && (ALPHA || X86 || MIPS)]
     inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
    }
    config BLK_DEV_QD65XX tristate {
     prompt "QDI QD65xx support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
     select IDE_TIMINGS if [IDE && ISA && (ALPHA || X86 || MIPS)]
     select IDE_LEGACY if [IDE && ISA && (ALPHA || X86 || MIPS)]
     inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
    }
    config BLK_DEV_UMC8672 tristate {
     prompt "UMC-8672 support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
     select IDE_XFER_MODE if [IDE && ISA && (ALPHA || X86 || MIPS)]
     select IDE_LEGACY if [IDE && ISA && (ALPHA || X86 || MIPS)]
     inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
    }
   }
   config BLK_DEV_IDEDMA boolean {
    default [BLK_DEV_IDEDMA_SFF || BLK_DEV_IDEDMA_ICS || BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA] if [IDE]
    select IDE_XFER_MODE if [IDE]
    inherited [IDE]
   }
  }
 }
 menu "SCSI device support" {
  config RAID_ATTRS tristate {
   prompt "RAID Transport Class" if [BLOCK]
   default [n] if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
  }
  config SCSI tristate {
   prompt "SCSI device support" if [BLOCK]
   depends on [BLOCK]
   select SCSI_DMA if [BLOCK && HAS_DMA]
   inherited [BLOCK]
  }
  config SCSI_DMA boolean {
   default [n] if []
  }
  config SCSI_TGT tristate {
   prompt "SCSI target support" if [SCSI && EXPERIMENTAL]
   depends on [SCSI && EXPERIMENTAL]
   inherited [SCSI && EXPERIMENTAL]
  }
  config SCSI_NETLINK boolean {
   default [n] if []
   select NET if []
  }
  config SCSI_PROC_FS boolean {
   prompt "legacy /proc/scsi/ support" if [SCSI && PROC_FS]
   depends on [SCSI && PROC_FS]
   default [y] if [SCSI && PROC_FS]
   inherited [SCSI && PROC_FS]
  }
  config BLK_DEV_SD tristate {
   prompt "SCSI disk support" if [SCSI]
   depends on [SCSI]
   select CRC_T10DIF if [SCSI && BLK_DEV_INTEGRITY]
   inherited [SCSI]
  }
  config CHR_DEV_ST tristate {
   prompt "SCSI tape support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config CHR_DEV_OSST tristate {
   prompt "SCSI OnStream SC-x0 tape support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config BLK_DEV_SR tristate {
   prompt "SCSI CDROM support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
   config BLK_DEV_SR_VENDOR boolean {
    prompt "Enable vendor-specific extensions (for SCSI CDROM)" if [BLK_DEV_SR]
    depends on [BLK_DEV_SR]
    inherited [BLK_DEV_SR]
   }
  }
  config CHR_DEV_SG tristate {
   prompt "SCSI generic support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config CHR_DEV_SCH tristate {
   prompt "SCSI media changer support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_ENCLOSURE tristate {
   prompt "SCSI Enclosure Support" if [SCSI && ENCLOSURE_SERVICES]
   depends on [SCSI && ENCLOSURE_SERVICES]
   inherited [SCSI && ENCLOSURE_SERVICES]
  }
  config SCSI_MULTI_LUN boolean {
   prompt "Probe all LUNs on each SCSI device" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_CONSTANTS boolean {
   prompt "Verbose SCSI error reporting (kernel size +=12K)" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_LOGGING boolean {
   prompt "SCSI logging facility" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_SCAN_ASYNC boolean {
   prompt "Asynchronous SCSI scanning" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_WAIT_SCAN tristate {
   default [m] if [SCSI && MODULES]
   depends on [SCSI]
   depends on [MODULES]
   inherited [SCSI && MODULES]
  }
  menu "SCSI Transports" {
   depends on [SCSI]
   config SCSI_SPI_ATTRS tristate {
    prompt "Parallel SCSI (SPI) Transport Attributes" if [SCSI]
    depends on [SCSI]
    inherited [SCSI]
   }
   config SCSI_FC_ATTRS tristate {
    prompt "FiberChannel Transport Attributes" if [SCSI]
    depends on [SCSI]
    select SCSI_NETLINK if [SCSI]
    inherited [SCSI]
    config SCSI_FC_TGT_ATTRS boolean {
     prompt "SCSI target support for FiberChannel Transport Attributes" if [SCSI && SCSI_FC_ATTRS && (SCSI_TGT="y" || SCSI_TGT="SCSI_FC_ATTRS")]
     depends on [SCSI_FC_ATTRS]
     depends on [SCSI_TGT="y" || SCSI_TGT="SCSI_FC_ATTRS"]
     inherited [SCSI && SCSI_FC_ATTRS && (SCSI_TGT="y" || SCSI_TGT="SCSI_FC_ATTRS")]
    }
   }
   config SCSI_ISCSI_ATTRS tristate {
    prompt "iSCSI Transport Attributes" if [SCSI && NET]
    depends on [SCSI && NET]
    inherited [SCSI && NET]
   }
   config SCSI_SAS_ATTRS tristate {
    prompt "SAS Transport Attributes" if [SCSI && BLK_DEV_BSG]
    depends on [SCSI && BLK_DEV_BSG]
    inherited [SCSI && BLK_DEV_BSG]
   }
   config SCSI_SAS_LIBSAS tristate {
    prompt "SAS Domain Transport Attributes" if [SCSI]
    depends on [SCSI]
    select SCSI_SAS_ATTRS if [SCSI]
    inherited [SCSI]
    config SCSI_SAS_ATA boolean {
     prompt "ATA support for libsas (requires libata)" if [SCSI && SCSI_SAS_LIBSAS && (ATA="y" || ATA="SCSI_SAS_LIBSAS")]
     depends on [SCSI_SAS_LIBSAS]
     depends on [ATA="y" || ATA="SCSI_SAS_LIBSAS"]
     inherited [SCSI && SCSI_SAS_LIBSAS && (ATA="y" || ATA="SCSI_SAS_LIBSAS")]
    }
    config SCSI_SAS_HOST_SMP boolean {
     prompt "Support for SMP interpretation for SAS hosts" if [SCSI && SCSI_SAS_LIBSAS]
     default [y] if [SCSI && SCSI_SAS_LIBSAS]
     depends on [SCSI_SAS_LIBSAS]
     inherited [SCSI && SCSI_SAS_LIBSAS]
    }
    config SCSI_SAS_LIBSAS_DEBUG boolean {
     prompt "Compile the SAS Domain Transport Attributes in debug mode" if [SCSI && SCSI_SAS_LIBSAS]
     default [y] if [SCSI && SCSI_SAS_LIBSAS]
     depends on [SCSI_SAS_LIBSAS]
     inherited [SCSI && SCSI_SAS_LIBSAS]
    }
   }
   config SCSI_SRP_ATTRS tristate {
    prompt "SRP Transport Attributes" if [SCSI]
    depends on [SCSI]
    inherited [SCSI]
    config SCSI_SRP_TGT_ATTRS boolean {
     prompt "SCSI target support for SRP Transport Attributes" if [SCSI && SCSI_SRP_ATTRS && (SCSI_TGT="y" || SCSI_TGT="SCSI_SRP_ATTRS")]
     depends on [SCSI_SRP_ATTRS]
     depends on [SCSI_TGT="y" || SCSI_TGT="SCSI_SRP_ATTRS"]
     inherited [SCSI && SCSI_SRP_ATTRS && (SCSI_TGT="y" || SCSI_TGT="SCSI_SRP_ATTRS")]
    }
   }
  }
  menuconfig SCSI_LOWLEVEL boolean {
   prompt "SCSI low-level drivers" if [SCSI]
   depends on [SCSI]
   default [y] if [SCSI]
   inherited [SCSI]
   if [SCSI_LOWLEVEL && SCSI] {
    config ISCSI_TCP tristate {
     prompt "iSCSI Initiator over TCP/IP" if [SCSI_LOWLEVEL && SCSI && INET]
     depends on [SCSI && INET]
     select CRYPTO if [SCSI_LOWLEVEL && SCSI && INET]
     select CRYPTO_MD5 if [SCSI_LOWLEVEL && SCSI && INET]
     select CRYPTO_CRC32C if [SCSI_LOWLEVEL && SCSI && INET]
     select SCSI_ISCSI_ATTRS if [SCSI_LOWLEVEL && SCSI && INET]
     inherited [SCSI_LOWLEVEL && SCSI && INET]
    }
    config SCSI_CXGB3_ISCSI tristate {
     prompt "Chelsio S3xx iSCSI support" if [SCSI_LOWLEVEL && SCSI && CHELSIO_T3_DEPENDS]
     depends on [CHELSIO_T3_DEPENDS]
     select CHELSIO_T3 if [SCSI_LOWLEVEL && SCSI && CHELSIO_T3_DEPENDS]
     select SCSI_ISCSI_ATTRS if [SCSI_LOWLEVEL && SCSI && CHELSIO_T3_DEPENDS]
     inherited [SCSI_LOWLEVEL && SCSI && CHELSIO_T3_DEPENDS]
    }
    config SCSI_BNX2_ISCSI tristate {
     prompt "Broadcom NetXtreme II iSCSI support" if [SCSI_LOWLEVEL && SCSI && PCI]
     select SCSI_ISCSI_ATTRS if [SCSI_LOWLEVEL && SCSI && PCI]
     select NETDEVICES if [SCSI_LOWLEVEL && SCSI && PCI]
     select NETDEV_1000 if [SCSI_LOWLEVEL && SCSI && PCI]
     select CNIC if [SCSI_LOWLEVEL && SCSI && PCI]
     depends on [PCI]
     inherited [SCSI_LOWLEVEL && SCSI && PCI]
    }
    config BE2ISCSI tristate {
     prompt "ServerEngines' 10Gbps iSCSI - BladeEngine 2" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_ISCSI_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SGIWD93_SCSI tristate {
     prompt "SGI WD93C93 SCSI Driver" if [SCSI_LOWLEVEL && SGI_HAS_WD93 && SCSI]
     depends on [SGI_HAS_WD93 && SCSI]
     inherited [SCSI_LOWLEVEL && SGI_HAS_WD93 && SCSI]
    }
    config BLK_DEV_3W_XXXX_RAID tristate {
     prompt "3ware 5/6/7/8xxx ATA-RAID support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_3W_9XXX tristate {
     prompt "3ware 9xxx SATA-RAID support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_7000FASST tristate {
     prompt "7000FASST SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
     depends on [ISA && SCSI && ISA_DMA_API]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
     inherited [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
    }
    config SCSI_ACARD tristate {
     prompt "ACARD SCSI support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_AHA152X tristate {
     prompt "Adaptec AHA152X/2825 support" if [SCSI_LOWLEVEL && ISA && SCSI && !64BIT]
     depends on [ISA && SCSI && !64BIT]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI && !64BIT]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && ISA && SCSI && !64BIT]
     inherited [SCSI_LOWLEVEL && ISA && SCSI && !64BIT]
    }
    config SCSI_AHA1542 tristate {
     prompt "Adaptec AHA1542 support" if [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
     depends on [ISA && SCSI && ISA_DMA_API]
     inherited [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
    }
    config SCSI_AHA1740 tristate {
     prompt "Adaptec AHA1740 support" if [SCSI_LOWLEVEL && EISA && SCSI]
     depends on [EISA && SCSI]
     inherited [SCSI_LOWLEVEL && EISA && SCSI]
    }
    config SCSI_AACRAID tristate {
     prompt "Adaptec AACRAID support" if [SCSI_LOWLEVEL && SCSI && PCI]
     depends on [SCSI && PCI]
     inherited [SCSI_LOWLEVEL && SCSI && PCI]
    }
    config SCSI_AIC7XXX tristate {
     prompt "Adaptec AIC7xxx Fast -> U160 support (New Driver)" if [SCSI_LOWLEVEL && (PCI || EISA) && SCSI]
     depends on [(PCI || EISA) && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && (PCI || EISA) && SCSI]
     inherited [SCSI_LOWLEVEL && (PCI || EISA) && SCSI]
     config AIC7XXX_CMDS_PER_DEVICE integer {
      prompt "Maximum number of TCQ commands per device" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
      depends on [SCSI_AIC7XXX]
      default [32] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
     }
     config AIC7XXX_RESET_DELAY_MS integer {
      prompt "Initial bus reset delay in milli-seconds" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
      depends on [SCSI_AIC7XXX]
      default [5000] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
     }
     config AIC7XXX_BUILD_FIRMWARE boolean {
      prompt "Build Adapter Firmware with Kernel Build" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX && !PREVENT_FIRMWARE_BUILD]
      depends on [SCSI_AIC7XXX && !PREVENT_FIRMWARE_BUILD]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX && !PREVENT_FIRMWARE_BUILD]
     }
     config AIC7XXX_DEBUG_ENABLE boolean {
      prompt "Compile in Debugging Code" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
      depends on [SCSI_AIC7XXX]
      default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
     }
     config AIC7XXX_DEBUG_MASK integer {
      prompt "Debug code enable mask (2047 for all debugging)" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
      depends on [SCSI_AIC7XXX]
      default [0] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
     }
     config AIC7XXX_REG_PRETTY_PRINT boolean {
      prompt "Decode registers during diagnostics" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
      depends on [SCSI_AIC7XXX]
      default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC7XXX]
     }
    }
    config SCSI_AIC7XXX_OLD tristate {
     prompt "Adaptec AIC7xxx support (old driver)" if [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI]
     depends on [(ISA || EISA || PCI) && SCSI]
     inherited [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI]
    }
    config SCSI_AIC79XX tristate {
     prompt "Adaptec AIC79xx U320 support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
     config AIC79XX_CMDS_PER_DEVICE integer {
      prompt "Maximum number of TCQ commands per device" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
      depends on [SCSI_AIC79XX]
      default [32] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
     }
     config AIC79XX_RESET_DELAY_MS integer {
      prompt "Initial bus reset delay in milli-seconds" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
      depends on [SCSI_AIC79XX]
      default [5000] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
     }
     config AIC79XX_BUILD_FIRMWARE boolean {
      prompt "Build Adapter Firmware with Kernel Build" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX && !PREVENT_FIRMWARE_BUILD]
      depends on [SCSI_AIC79XX && !PREVENT_FIRMWARE_BUILD]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX && !PREVENT_FIRMWARE_BUILD]
     }
     config AIC79XX_DEBUG_ENABLE boolean {
      prompt "Compile in Debugging Code" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
      depends on [SCSI_AIC79XX]
      default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
     }
     config AIC79XX_DEBUG_MASK integer {
      prompt "Debug code enable mask (16383 for all debugging)" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
      depends on [SCSI_AIC79XX]
      default [0] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
     }
     config AIC79XX_REG_PRETTY_PRINT boolean {
      prompt "Decode registers during diagnostics" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
      depends on [SCSI_AIC79XX]
      default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC79XX]
     }
    }
    config SCSI_AIC94XX tristate {
     prompt "Adaptec AIC94xx SAS/SATA support" if [SCSI_LOWLEVEL && SCSI && PCI]
     depends on [PCI]
     select SCSI_SAS_LIBSAS if [SCSI_LOWLEVEL && SCSI && PCI]
     select FW_LOADER if [SCSI_LOWLEVEL && SCSI && PCI]
     inherited [SCSI_LOWLEVEL && SCSI && PCI]
     config AIC94XX_DEBUG boolean {
      prompt "Compile in debug mode" if [SCSI_LOWLEVEL && SCSI && SCSI_AIC94XX]
      default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_AIC94XX]
      depends on [SCSI_AIC94XX]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_AIC94XX]
     }
    }
    config SCSI_MVSAS tristate {
     prompt "Marvell 88SE64XX/88SE94XX SAS/SATA support" if [SCSI_LOWLEVEL && SCSI && PCI]
     depends on [PCI]
     select SCSI_SAS_LIBSAS if [SCSI_LOWLEVEL && SCSI && PCI]
     select FW_LOADER if [SCSI_LOWLEVEL && SCSI && PCI]
     inherited [SCSI_LOWLEVEL && SCSI && PCI]
     config SCSI_MVSAS_DEBUG boolean {
      prompt "Compile in debug mode" if [SCSI_LOWLEVEL && SCSI && SCSI_MVSAS]
      default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_MVSAS]
      depends on [SCSI_MVSAS]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_MVSAS]
     }
    }
    config SCSI_DPT_I2O tristate {
     prompt "Adaptec I2O RAID support " if [SCSI_LOWLEVEL && SCSI && PCI && VIRT_TO_BUS]
     depends on [SCSI && PCI && VIRT_TO_BUS]
     inherited [SCSI_LOWLEVEL && SCSI && PCI && VIRT_TO_BUS]
    }
    config SCSI_ADVANSYS tristate {
     prompt "AdvanSys SCSI support" if [SCSI_LOWLEVEL && SCSI && VIRT_TO_BUS && (ISA || EISA || PCI)]
     depends on [SCSI && VIRT_TO_BUS]
     depends on [ISA || EISA || PCI]
     inherited [SCSI_LOWLEVEL && SCSI && VIRT_TO_BUS && (ISA || EISA || PCI)]
    }
    config SCSI_IN2000 tristate {
     prompt "Always IN2000 SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_ARCMSR tristate {
     prompt "ARECA (ARC11xx/12xx/13xx/16xx) SATA/SAS RAID Host Adapter" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
     config SCSI_ARCMSR_AER boolean {
      prompt "Enable PCI Error Recovery Capability in Areca Driver(ARCMSR)" if [SCSI_LOWLEVEL && SCSI && SCSI_ARCMSR && PCIEAER]
      depends on [SCSI_ARCMSR && PCIEAER]
      default [n] if [SCSI_LOWLEVEL && SCSI && SCSI_ARCMSR && PCIEAER]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_ARCMSR && PCIEAER]
     }
    }
    config MEGARAID_NEWGEN boolean {
     prompt "LSI Logic New Generation RAID Device Drivers" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
     config MEGARAID_MM tristate {
      prompt "LSI Logic Management Module (New Driver)" if [SCSI_LOWLEVEL && PCI && SCSI && MEGARAID_NEWGEN]
      depends on [PCI && SCSI && MEGARAID_NEWGEN]
      inherited [SCSI_LOWLEVEL && PCI && SCSI && MEGARAID_NEWGEN]
      config MEGARAID_MAILBOX tristate {
       prompt "LSI Logic MegaRAID Driver (New Driver)" if [SCSI_LOWLEVEL && PCI && SCSI && MEGARAID_MM]
       depends on [PCI && SCSI && MEGARAID_MM]
       inherited [SCSI_LOWLEVEL && PCI && SCSI && MEGARAID_MM]
      }
     }
    }
    config MEGARAID_LEGACY tristate {
     prompt "LSI Logic Legacy MegaRAID Driver" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config MEGARAID_SAS tristate {
     prompt "LSI Logic MegaRAID SAS RAID Module" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_MPT2SAS tristate {
     prompt "LSI MPT Fusion SAS 2.0 Device Driver" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_SAS_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
     config SCSI_MPT2SAS_MAX_SGE integer {
      prompt "LSI MPT Fusion Max number of SG Entries (16 - 128)" if [SCSI_LOWLEVEL && PCI && SCSI && SCSI_MPT2SAS]
      depends on [PCI && SCSI && SCSI_MPT2SAS]
      default [128] if [SCSI_LOWLEVEL && PCI && SCSI && SCSI_MPT2SAS]
      range [16 128] if [SCSI_LOWLEVEL && PCI && SCSI && SCSI_MPT2SAS]
      inherited [SCSI_LOWLEVEL && PCI && SCSI && SCSI_MPT2SAS]
     }
     config SCSI_MPT2SAS_LOGGING boolean {
      prompt "LSI MPT Fusion logging facility" if [SCSI_LOWLEVEL && PCI && SCSI && SCSI_MPT2SAS]
      depends on [PCI && SCSI && SCSI_MPT2SAS]
      inherited [SCSI_LOWLEVEL && PCI && SCSI && SCSI_MPT2SAS]
     }
    }
    config SCSI_HPTIOP tristate {
     prompt "HighPoint RocketRAID 3xxx/4xxx Controller support" if [SCSI_LOWLEVEL && SCSI && PCI]
     depends on [SCSI && PCI]
     inherited [SCSI_LOWLEVEL && SCSI && PCI]
    }
    config SCSI_BUSLOGIC tristate {
     prompt "BusLogic SCSI support" if [SCSI_LOWLEVEL && (PCI || ISA || MCA) && SCSI && ISA_DMA_API && VIRT_TO_BUS]
     depends on [(PCI || ISA || MCA) && SCSI && ISA_DMA_API && VIRT_TO_BUS]
     inherited [SCSI_LOWLEVEL && (PCI || ISA || MCA) && SCSI && ISA_DMA_API && VIRT_TO_BUS]
     config SCSI_FLASHPOINT boolean {
      prompt "FlashPoint support" if [SCSI_LOWLEVEL && SCSI && SCSI_BUSLOGIC && PCI && X86_32]
      depends on [SCSI_BUSLOGIC && PCI && X86_32]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_BUSLOGIC && PCI && X86_32]
     }
    }
    config LIBFC tristate {
     prompt "LibFC module" if [SCSI_LOWLEVEL && SCSI]
     select SCSI_FC_ATTRS if [SCSI_LOWLEVEL && SCSI]
     select CRC32 if [SCSI_LOWLEVEL && SCSI]
     inherited [SCSI_LOWLEVEL && SCSI]
    }
    config LIBFCOE tristate {
     prompt "LibFCoE module" if [SCSI_LOWLEVEL && SCSI]
     select LIBFC if [SCSI_LOWLEVEL && SCSI]
     inherited [SCSI_LOWLEVEL && SCSI]
    }
    config FCOE tristate {
     prompt "FCoE module" if [SCSI_LOWLEVEL && SCSI && PCI]
     depends on [PCI]
     select LIBFCOE if [SCSI_LOWLEVEL && SCSI && PCI]
     inherited [SCSI_LOWLEVEL && SCSI && PCI]
    }
    config FCOE_FNIC tristate {
     prompt "Cisco FNIC Driver" if [SCSI_LOWLEVEL && SCSI && PCI && X86]
     depends on [PCI && X86]
     select LIBFC if [SCSI_LOWLEVEL && SCSI && PCI && X86]
     inherited [SCSI_LOWLEVEL && SCSI && PCI && X86]
    }
    config SCSI_DMX3191D tristate {
     prompt "DMX3191D SCSI support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_DTC3280 tristate {
     prompt "DTC3180/3280 SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_EATA tristate {
     prompt "EATA ISA/EISA/PCI (DPT and generic EATA/DMA-compliant boards) support" if [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && ISA_DMA_API]
     depends on [(ISA || EISA || PCI) && SCSI && ISA_DMA_API]
     inherited [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && ISA_DMA_API]
     config SCSI_EATA_TAGGED_QUEUE boolean {
      prompt "enable tagged command queueing" if [SCSI_LOWLEVEL && SCSI && SCSI_EATA]
      depends on [SCSI_EATA]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_EATA]
     }
     config SCSI_EATA_LINKED_COMMANDS boolean {
      prompt "enable elevator sorting" if [SCSI_LOWLEVEL && SCSI && SCSI_EATA]
      depends on [SCSI_EATA]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_EATA]
     }
     config SCSI_EATA_MAX_TAGS integer {
      prompt "maximum number of queued commands" if [SCSI_LOWLEVEL && SCSI && SCSI_EATA]
      depends on [SCSI_EATA]
      default [16] if [SCSI_LOWLEVEL && SCSI && SCSI_EATA]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_EATA]
     }
    }
    config SCSI_EATA_PIO tristate {
     prompt "EATA-PIO (old DPT PM2001, PM2012A) support" if [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && BROKEN]
     depends on [(ISA || EISA || PCI) && SCSI && BROKEN]
     inherited [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && BROKEN]
    }
    config SCSI_FUTURE_DOMAIN tristate {
     prompt "Future Domain 16xx SCSI/AHA-2920A support" if [SCSI_LOWLEVEL && (ISA || PCI) && SCSI]
     depends on [(ISA || PCI) && SCSI]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && (ISA || PCI) && SCSI]
     inherited [SCSI_LOWLEVEL && (ISA || PCI) && SCSI]
    }
    config SCSI_FD_MCS tristate {
     prompt "Future Domain MCS-600/700 SCSI support" if [SCSI_LOWLEVEL && MCA_LEGACY && SCSI]
     depends on [MCA_LEGACY && SCSI]
     inherited [SCSI_LOWLEVEL && MCA_LEGACY && SCSI]
    }
    config SCSI_GDTH tristate {
     prompt "Intel/ICP (former GDT SCSI Disk Array) RAID Controller support" if [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && ISA_DMA_API]
     depends on [(ISA || EISA || PCI) && SCSI && ISA_DMA_API]
     inherited [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && ISA_DMA_API]
    }
    config SCSI_GENERIC_NCR5380 tristate {
     prompt "Generic NCR5380/53c400 SCSI PIO support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_GENERIC_NCR5380_MMIO tristate {
     prompt "Generic NCR5380/53c400 SCSI MMIO support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_GENERIC_NCR53C400 boolean {
     prompt "Enable NCR53c400 extensions" if [SCSI_LOWLEVEL && SCSI && SCSI_GENERIC_NCR5380]
     depends on [SCSI_GENERIC_NCR5380]
     inherited [SCSI_LOWLEVEL && SCSI && SCSI_GENERIC_NCR5380]
    }
    config SCSI_IBMMCA tristate {
     prompt "IBMMCA SCSI support" if [SCSI_LOWLEVEL && MCA && SCSI]
     depends on [MCA && SCSI]
     inherited [SCSI_LOWLEVEL && MCA && SCSI]
     config IBMMCA_SCSI_ORDER_STANDARD boolean {
      prompt "Standard SCSI-order" if [SCSI_LOWLEVEL && SCSI && SCSI_IBMMCA]
      depends on [SCSI_IBMMCA]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_IBMMCA]
     }
     config IBMMCA_SCSI_DEV_RESET boolean {
      prompt "Reset SCSI-devices at boottime" if [SCSI_LOWLEVEL && SCSI && SCSI_IBMMCA]
      depends on [SCSI_IBMMCA]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_IBMMCA]
     }
    }
    config SCSI_IPS tristate {
     prompt "IBM ServeRAID support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_IBMVSCSI tristate {
     prompt "IBM Virtual SCSI support" if [SCSI_LOWLEVEL && SCSI && (PPC_PSERIES || PPC_ISERIES)]
     depends on [PPC_PSERIES || PPC_ISERIES]
     select SCSI_SRP_ATTRS if [SCSI_LOWLEVEL && SCSI && (PPC_PSERIES || PPC_ISERIES)]
     select VIOPATH if [SCSI_LOWLEVEL && SCSI && (PPC_PSERIES || PPC_ISERIES) && PPC_ISERIES]
     inherited [SCSI_LOWLEVEL && SCSI && (PPC_PSERIES || PPC_ISERIES)]
    }
    config SCSI_IBMVSCSIS tristate {
     prompt "IBM Virtual SCSI Server support" if [SCSI_LOWLEVEL && SCSI && PPC_PSERIES && SCSI_SRP && SCSI_SRP_TGT_ATTRS]
     depends on [PPC_PSERIES && SCSI_SRP && SCSI_SRP_TGT_ATTRS]
     inherited [SCSI_LOWLEVEL && SCSI && PPC_PSERIES && SCSI_SRP && SCSI_SRP_TGT_ATTRS]
    }
    config SCSI_IBMVFC tristate {
     prompt "IBM Virtual FC support" if [SCSI_LOWLEVEL && PPC_PSERIES && SCSI]
     depends on [PPC_PSERIES && SCSI]
     select SCSI_FC_ATTRS if [SCSI_LOWLEVEL && PPC_PSERIES && SCSI]
     inherited [SCSI_LOWLEVEL && PPC_PSERIES && SCSI]
     config SCSI_IBMVFC_TRACE boolean {
      prompt "enable driver internal trace" if [SCSI_LOWLEVEL && SCSI && SCSI_IBMVFC]
      depends on [SCSI_IBMVFC]
      default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_IBMVFC]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_IBMVFC]
     }
    }
    config SCSI_INITIO tristate {
     prompt "Initio 9100U(W) support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_INIA100 tristate {
     prompt "Initio INI-A100U2W support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_PPA tristate {
     prompt "IOMEGA parallel port (ppa - older drives)" if [SCSI_LOWLEVEL && SCSI && PARPORT_PC]
     depends on [SCSI && PARPORT_PC]
     inherited [SCSI_LOWLEVEL && SCSI && PARPORT_PC]
    }
    config SCSI_IMM tristate {
     prompt "IOMEGA parallel port (imm - newer drives)" if [SCSI_LOWLEVEL && SCSI && PARPORT_PC]
     depends on [SCSI && PARPORT_PC]
     inherited [SCSI_LOWLEVEL && SCSI && PARPORT_PC]
    }
    config SCSI_IZIP_EPP16 boolean {
     prompt "ppa/imm option - Use slow (but safe) EPP-16" if [SCSI_LOWLEVEL && SCSI && (SCSI_PPA || SCSI_IMM)]
     depends on [SCSI_PPA || SCSI_IMM]
     inherited [SCSI_LOWLEVEL && SCSI && (SCSI_PPA || SCSI_IMM)]
    }
    config SCSI_IZIP_SLOW_CTR boolean {
     prompt "ppa/imm option - Assume slow parport control register" if [SCSI_LOWLEVEL && SCSI && (SCSI_PPA || SCSI_IMM)]
     depends on [SCSI_PPA || SCSI_IMM]
     inherited [SCSI_LOWLEVEL && SCSI && (SCSI_PPA || SCSI_IMM)]
    }
    config SCSI_NCR53C406A tristate {
     prompt "NCR53c406a SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_NCR_D700 tristate {
     prompt "NCR Dual 700 MCA SCSI support" if [SCSI_LOWLEVEL && MCA && SCSI]
     depends on [MCA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MCA && SCSI]
     inherited [SCSI_LOWLEVEL && MCA && SCSI]
    }
    config SCSI_LASI700 tristate {
     prompt "HP Lasi SCSI support for 53c700/710" if [SCSI_LOWLEVEL && GSC && SCSI]
     depends on [GSC && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && GSC && SCSI]
     inherited [SCSI_LOWLEVEL && GSC && SCSI]
    }
    config SCSI_SNI_53C710 tristate {
     prompt "SNI RM SCSI support for 53c710" if [SCSI_LOWLEVEL && SNI_RM && SCSI]
     depends on [SNI_RM && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && SNI_RM && SCSI]
     select 53C700_LE_ON_BE if [SCSI_LOWLEVEL && SNI_RM && SCSI]
     inherited [SCSI_LOWLEVEL && SNI_RM && SCSI]
    }
    config 53C700_LE_ON_BE boolean {
     depends on [SCSI_LASI700]
     default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_LASI700]
     inherited [SCSI_LOWLEVEL && SCSI && SCSI_LASI700]
    }
    config SCSI_STEX tristate {
     prompt "Promise SuperTrak EX Series support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config 53C700_BE_BUS boolean {
     depends on [SCSI_A4000T || SCSI_ZORRO7XX || MVME16x_SCSI || BVME6000_SCSI]
     default [y] if [SCSI_LOWLEVEL && SCSI && (SCSI_A4000T || SCSI_ZORRO7XX || MVME16x_SCSI || BVME6000_SCSI)]
     inherited [SCSI_LOWLEVEL && SCSI && (SCSI_A4000T || SCSI_ZORRO7XX || MVME16x_SCSI || BVME6000_SCSI)]
    }
    config SCSI_SYM53C8XX_2 tristate {
     prompt "SYM53C8XX Version 2 SCSI support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
     config SCSI_SYM53C8XX_DMA_ADDRESSING_MODE integer {
      prompt "DMA addressing mode" if [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
      depends on [SCSI_SYM53C8XX_2]
      default [1] if [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
     }
     config SCSI_SYM53C8XX_DEFAULT_TAGS integer {
      prompt "Default tagged command queue depth" if [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
      depends on [SCSI_SYM53C8XX_2]
      default [16] if [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
     }
     config SCSI_SYM53C8XX_MAX_TAGS integer {
      prompt "Maximum number of queued commands" if [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
      depends on [SCSI_SYM53C8XX_2]
      default [64] if [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
     }
     config SCSI_SYM53C8XX_MMIO boolean {
      prompt "Use memory mapped IO" if [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
      depends on [SCSI_SYM53C8XX_2]
      default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_SYM53C8XX_2]
     }
    }
    config SCSI_IPR tristate {
     prompt "IBM Power Linux RAID adapter support" if [SCSI_LOWLEVEL && PCI && SCSI && ATA]
     depends on [PCI && SCSI && ATA]
     select FW_LOADER if [SCSI_LOWLEVEL && PCI && SCSI && ATA]
     inherited [SCSI_LOWLEVEL && PCI && SCSI && ATA]
     config SCSI_IPR_TRACE boolean {
      prompt "enable driver internal trace" if [SCSI_LOWLEVEL && SCSI && SCSI_IPR]
      depends on [SCSI_IPR]
      default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_IPR]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_IPR]
     }
     config SCSI_IPR_DUMP boolean {
      prompt "enable adapter dump support" if [SCSI_LOWLEVEL && SCSI && SCSI_IPR]
      depends on [SCSI_IPR]
      default [y] if [SCSI_LOWLEVEL && SCSI && SCSI_IPR]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_IPR]
     }
    }
    config SCSI_ZALON tristate {
     prompt "Zalon SCSI support" if [SCSI_LOWLEVEL && GSC && SCSI]
     depends on [GSC && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && GSC && SCSI]
     inherited [SCSI_LOWLEVEL && GSC && SCSI]
    }
    config SCSI_NCR_Q720 tristate {
     prompt "NCR Quad 720 MCA SCSI support" if [SCSI_LOWLEVEL && MCA && SCSI]
     depends on [MCA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MCA && SCSI]
     inherited [SCSI_LOWLEVEL && MCA && SCSI]
    }
    config SCSI_NCR53C8XX_DEFAULT_TAGS integer {
     prompt "default tagged command queue depth" if [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
     depends on [SCSI_ZALON || SCSI_NCR_Q720]
     default [8] if [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
     inherited [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
    }
    config SCSI_NCR53C8XX_MAX_TAGS integer {
     prompt "maximum number of queued commands" if [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
     depends on [SCSI_ZALON || SCSI_NCR_Q720]
     default [32] if [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
     inherited [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
    }
    config SCSI_NCR53C8XX_SYNC integer {
     prompt "synchronous transfers frequency in MHz" if [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
     depends on [SCSI_ZALON || SCSI_NCR_Q720]
     default [20] if [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
     inherited [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
    }
    config SCSI_NCR53C8XX_NO_DISCONNECT boolean {
     prompt "not allow targets to disconnect" if [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS="0"]
     depends on [(SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS="0"]
     inherited [SCSI_LOWLEVEL && SCSI && (SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS="0"]
    }
    config SCSI_PAS16 tristate {
     prompt "PAS16 SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_QLOGIC_FAS tristate {
     prompt "Qlogic FAS SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_QLOGIC_1280 tristate {
     prompt "Qlogic QLA 1240/1x80/1x160 SCSI support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_QLOGICPTI tristate {
     prompt "PTI Qlogic, ISP Driver" if [SCSI_LOWLEVEL && SBUS && SCSI]
     depends on [SBUS && SCSI]
     inherited [SCSI_LOWLEVEL && SBUS && SCSI]
    }
    config SCSI_QLA_FC tristate {
     prompt "QLogic QLA2XXX Fibre Channel Support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_FC_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     select FW_LOADER if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_QLA_ISCSI tristate {
     prompt "QLogic ISP4XXX host adapter family support" if [SCSI_LOWLEVEL && PCI && SCSI && NET]
     depends on [PCI && SCSI && NET]
     select SCSI_ISCSI_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI && NET]
     inherited [SCSI_LOWLEVEL && PCI && SCSI && NET]
    }
    config SCSI_LPFC tristate {
     prompt "Emulex LightPulse Fibre Channel Support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_FC_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
     config SCSI_LPFC_DEBUG_FS boolean {
      prompt "Emulex LightPulse Fibre Channel debugfs Support" if [SCSI_LOWLEVEL && SCSI && SCSI_LPFC && DEBUG_FS]
      depends on [SCSI_LPFC && DEBUG_FS]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_LPFC && DEBUG_FS]
     }
    }
    config SCSI_SIM710 tristate {
     prompt "Simple 53c710 SCSI support (Compaq, NCR machines)" if [SCSI_LOWLEVEL && (EISA || MCA) && SCSI]
     depends on [(EISA || MCA) && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && (EISA || MCA) && SCSI]
     inherited [SCSI_LOWLEVEL && (EISA || MCA) && SCSI]
    }
    config SCSI_SYM53C416 tristate {
     prompt "Symbios 53c416 SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_DC395x tristate {
     prompt "Tekram DC395(U/UW/F) and DC315(U) SCSI support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && PCI && SCSI && EXPERIMENTAL]
     depends on [PCI && SCSI && EXPERIMENTAL]
     inherited [SCSI_LOWLEVEL && PCI && SCSI && EXPERIMENTAL]
    }
    config SCSI_DC390T tristate {
     prompt "Tekram DC390(T) and Am53/79C974 SCSI support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_T128 tristate {
     prompt "Trantor T128/T128F/T228 SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_U14_34F tristate {
     prompt "UltraStor 14F/34F support" if [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
     depends on [ISA && SCSI && ISA_DMA_API]
     inherited [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
     config SCSI_U14_34F_TAGGED_QUEUE boolean {
      prompt "enable tagged command queueing" if [SCSI_LOWLEVEL && SCSI && SCSI_U14_34F]
      depends on [SCSI_U14_34F]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_U14_34F]
     }
     config SCSI_U14_34F_LINKED_COMMANDS boolean {
      prompt "enable elevator sorting" if [SCSI_LOWLEVEL && SCSI && SCSI_U14_34F]
      depends on [SCSI_U14_34F]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_U14_34F]
     }
     config SCSI_U14_34F_MAX_TAGS integer {
      prompt "maximum number of queued commands" if [SCSI_LOWLEVEL && SCSI && SCSI_U14_34F]
      depends on [SCSI_U14_34F]
      default [8] if [SCSI_LOWLEVEL && SCSI && SCSI_U14_34F]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_U14_34F]
     }
    }
    config SCSI_ULTRASTOR tristate {
     prompt "UltraStor SCSI support" if [SCSI_LOWLEVEL && X86 && ISA && SCSI]
     depends on [X86 && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && X86 && ISA && SCSI]
    }
    config SCSI_NSP32 tristate {
     prompt "Workbit NinjaSCSI-32Bi/UDE support" if [SCSI_LOWLEVEL && PCI && SCSI && !64BIT]
     depends on [PCI && SCSI && !64BIT]
     inherited [SCSI_LOWLEVEL && PCI && SCSI && !64BIT]
    }
    config SCSI_DEBUG tristate {
     prompt "SCSI debugging host simulator" if [SCSI_LOWLEVEL && SCSI]
     depends on [SCSI]
     select CRC_T10DIF if [SCSI_LOWLEVEL && SCSI]
     inherited [SCSI_LOWLEVEL && SCSI]
    }
    config SCSI_MESH tristate {
     prompt "MESH (Power Mac internal SCSI) support" if [SCSI_LOWLEVEL && PPC32 && PPC_PMAC && SCSI]
     depends on [PPC32 && PPC_PMAC && SCSI]
     inherited [SCSI_LOWLEVEL && PPC32 && PPC_PMAC && SCSI]
     config SCSI_MESH_SYNC_RATE integer {
      prompt "maximum synchronous transfer rate (MB/s) (0 = async)" if [SCSI_LOWLEVEL && SCSI && SCSI_MESH]
      depends on [SCSI_MESH]
      default [5] if [SCSI_LOWLEVEL && SCSI && SCSI_MESH]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_MESH]
     }
     config SCSI_MESH_RESET_DELAY_MS integer {
      prompt "initial bus reset delay (ms) (0 = no reset)" if [SCSI_LOWLEVEL && SCSI && SCSI_MESH]
      depends on [SCSI_MESH]
      default [4000] if [SCSI_LOWLEVEL && SCSI && SCSI_MESH]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_MESH]
     }
    }
    config SCSI_MAC53C94 tristate {
     prompt "53C94 (Power Mac external SCSI) support" if [SCSI_LOWLEVEL && PPC32 && PPC_PMAC && SCSI]
     depends on [PPC32 && PPC_PMAC && SCSI]
     inherited [SCSI_LOWLEVEL && PPC32 && PPC_PMAC && SCSI]
    }
    config SCSI_ACORNSCSI_3 tristate {
     prompt "Acorn SCSI card (aka30) support" if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     depends on [ARCH_ACORN && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     config SCSI_ACORNSCSI_TAGGED_QUEUE boolean {
      prompt "Support SCSI 2 Tagged queueing" if [SCSI_LOWLEVEL && SCSI && SCSI_ACORNSCSI_3]
      depends on [SCSI_ACORNSCSI_3]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_ACORNSCSI_3]
     }
     config SCSI_ACORNSCSI_SYNC boolean {
      prompt "Support SCSI 2 Synchronous Transfers" if [SCSI_LOWLEVEL && SCSI && SCSI_ACORNSCSI_3]
      depends on [SCSI_ACORNSCSI_3]
      inherited [SCSI_LOWLEVEL && SCSI && SCSI_ACORNSCSI_3]
     }
    }
    config SCSI_ARXESCSI tristate {
     prompt "ARXE SCSI support" if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     depends on [ARCH_ACORN && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
    }
    config SCSI_CUMANA_2 tristate {
     prompt "CumanaSCSI II support" if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     depends on [ARCH_ACORN && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
    }
    config SCSI_EESOXSCSI tristate {
     prompt "EESOX support" if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     depends on [ARCH_ACORN && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
    }
    config SCSI_POWERTECSCSI tristate {
     prompt "PowerTec support" if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     depends on [ARCH_ACORN && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
    }
    config SCSI_CUMANA_1 tristate {
     prompt "CumanaSCSI I support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
     depends on [ARCH_ACORN && EXPERIMENTAL && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
    }
    config SCSI_OAK1 tristate {
     prompt "Oak SCSI support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
     depends on [ARCH_ACORN && EXPERIMENTAL && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
    }
    config JAZZ_ESP boolean {
     prompt "MIPS JAZZ FAS216 SCSI support" if [SCSI_LOWLEVEL && MACH_JAZZ && SCSI]
     depends on [MACH_JAZZ && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MACH_JAZZ && SCSI]
     inherited [SCSI_LOWLEVEL && MACH_JAZZ && SCSI]
    }
    config A3000_SCSI tristate {
     prompt "A3000 WD33C93A support" if [SCSI_LOWLEVEL && AMIGA && SCSI]
     depends on [AMIGA && SCSI]
     inherited [SCSI_LOWLEVEL && AMIGA && SCSI]
    }
    config A2091_SCSI tristate {
     prompt "A2091/A590 WD33C93A support" if [SCSI_LOWLEVEL && ZORRO && SCSI]
     depends on [ZORRO && SCSI]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI]
    }
    config GVP11_SCSI tristate {
     prompt "GVP Series II WD33C93A support" if [SCSI_LOWLEVEL && ZORRO && SCSI]
     depends on [ZORRO && SCSI]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI]
    }
    config SCSI_A4000T tristate {
     prompt "A4000T NCR53c710 SCSI support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && AMIGA && SCSI && EXPERIMENTAL]
     depends on [AMIGA && SCSI && EXPERIMENTAL]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && AMIGA && SCSI && EXPERIMENTAL]
     inherited [SCSI_LOWLEVEL && AMIGA && SCSI && EXPERIMENTAL]
    }
    config SCSI_ZORRO7XX tristate {
     prompt "Zorro NCR53c710 SCSI support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && ZORRO && SCSI && EXPERIMENTAL]
     depends on [ZORRO && SCSI && EXPERIMENTAL]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ZORRO && SCSI && EXPERIMENTAL]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI && EXPERIMENTAL]
    }
    config ATARI_SCSI tristate {
     prompt "Atari native SCSI support" if [SCSI_LOWLEVEL && ATARI && SCSI]
     depends on [ATARI && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ATARI && SCSI]
     select NVRAM if [SCSI_LOWLEVEL && ATARI && SCSI]
     inherited [SCSI_LOWLEVEL && ATARI && SCSI]
     config ATARI_SCSI_TOSHIBA_DELAY boolean {
      prompt "Long delays for Toshiba CD-ROMs" if [SCSI_LOWLEVEL && SCSI && ATARI_SCSI]
      depends on [ATARI_SCSI]
      inherited [SCSI_LOWLEVEL && SCSI && ATARI_SCSI]
     }
     config ATARI_SCSI_RESET_BOOT boolean {
      prompt "Reset SCSI-devices at boottime" if [SCSI_LOWLEVEL && SCSI && ATARI_SCSI]
      depends on [ATARI_SCSI]
      inherited [SCSI_LOWLEVEL && SCSI && ATARI_SCSI]
     }
    }
    config MAC_SCSI boolean {
     prompt "Macintosh NCR5380 SCSI" if [SCSI_LOWLEVEL && MAC && SCSI="y"]
     depends on [MAC && SCSI="y"]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MAC && SCSI="y"]
     inherited [SCSI_LOWLEVEL && MAC && SCSI="y"]
    }
    config SCSI_MAC_ESP tristate {
     prompt "Macintosh NCR53c9[46] SCSI" if [SCSI_LOWLEVEL && MAC && SCSI]
     depends on [MAC && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MAC && SCSI]
     inherited [SCSI_LOWLEVEL && MAC && SCSI]
    }
    config MVME147_SCSI boolean {
     prompt "WD33C93 SCSI driver for MVME147" if [SCSI_LOWLEVEL && MVME147 && SCSI="y"]
     depends on [MVME147 && SCSI="y"]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MVME147 && SCSI="y"]
     inherited [SCSI_LOWLEVEL && MVME147 && SCSI="y"]
    }
    config MVME16x_SCSI tristate {
     prompt "NCR53C710 SCSI driver for MVME16x" if [SCSI_LOWLEVEL && MVME16x && SCSI]
     depends on [MVME16x && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MVME16x && SCSI]
     inherited [SCSI_LOWLEVEL && MVME16x && SCSI]
    }
    config BVME6000_SCSI tristate {
     prompt "NCR53C710 SCSI driver for BVME6000" if [SCSI_LOWLEVEL && BVME6000 && SCSI]
     depends on [BVME6000 && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && BVME6000 && SCSI]
     inherited [SCSI_LOWLEVEL && BVME6000 && SCSI]
    }
    config SUN3_SCSI tristate {
     prompt "Sun3 NCR5380 SCSI" if [SCSI_LOWLEVEL && SUN3 && SCSI]
     depends on [SUN3 && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && SUN3 && SCSI]
     inherited [SCSI_LOWLEVEL && SUN3 && SCSI]
    }
    config SUN3X_ESP boolean {
     prompt "Sun3x ESP SCSI" if [SCSI_LOWLEVEL && SUN3X && SCSI="y"]
     depends on [SUN3X && SCSI="y"]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && SUN3X && SCSI="y"]
     inherited [SCSI_LOWLEVEL && SUN3X && SCSI="y"]
    }
    config SCSI_SUNESP tristate {
     prompt "Sparc ESP Scsi Driver" if [SCSI_LOWLEVEL && SBUS && SCSI]
     depends on [SBUS && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && SBUS && SCSI]
     inherited [SCSI_LOWLEVEL && SBUS && SCSI]
    }
    config ZFCP tristate {
     prompt "FCP host bus adapter driver for IBM eServer zSeries" if [SCSI_LOWLEVEL && S390 && QDIO && SCSI]
     depends on [S390 && QDIO && SCSI]
     select SCSI_FC_ATTRS if [SCSI_LOWLEVEL && S390 && QDIO && SCSI]
     inherited [SCSI_LOWLEVEL && S390 && QDIO && SCSI]
    }
    config SCSI_PMCRAID tristate {
     prompt "PMC SIERRA Linux MaxRAID adapter support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_SRP tristate {
     prompt "SCSI RDMA Protocol helper library" if [SCSI_LOWLEVEL && SCSI && PCI]
     depends on [SCSI && PCI]
     select SCSI_TGT if [SCSI_LOWLEVEL && SCSI && PCI]
     inherited [SCSI_LOWLEVEL && SCSI && PCI]
    }
    config SCSI_BFA_FC tristate {
     prompt "Brocade BFA Fibre Channel Support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_FC_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
   }
  }
  menuconfig SCSI_LOWLEVEL_PCMCIA boolean {
   prompt "PCMCIA SCSI adapter support" if [SCSI && PCMCIA]
   depends on [SCSI && PCMCIA]
   inherited [SCSI && PCMCIA]
   if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice>] {
    config PCMCIA_AHA152X tristate {
     prompt "Adaptec AHA152X PCMCIA support" if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice> && !64BIT]
     depends on [!64BIT]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice> && !64BIT]
     inherited [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice> && !64BIT]
    }
    config PCMCIA_FDOMAIN tristate {
     prompt "Future Domain PCMCIA support" if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice>]
     inherited [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice>]
    }
    config PCMCIA_NINJA_SCSI tristate {
     prompt "NinjaSCSI-3 / NinjaSCSI-32Bi (16bit) PCMCIA support" if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice> && !64BIT]
     depends on [!64BIT]
     inherited [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice> && !64BIT]
    }
    config PCMCIA_QLOGIC tristate {
     prompt "Qlogic PCMCIA support" if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice>]
     inherited [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice>]
    }
    config PCMCIA_SYM53C500 tristate {
     prompt "Symbios 53c500 PCMCIA support" if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice>]
     inherited [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && m && <choice>]
    }
   }
  }
  menuconfig SCSI_DH tristate {
   prompt "SCSI Device Handlers" if [SCSI]
   depends on [SCSI]
   default [n] if [SCSI]
   inherited [SCSI]
   config SCSI_DH_RDAC tristate {
    prompt "LSI RDAC Device Handler" if [SCSI_DH]
    depends on [SCSI_DH]
    inherited [SCSI_DH]
   }
   config SCSI_DH_HP_SW tristate {
    prompt "HP/COMPAQ MSA Device Handler" if [SCSI_DH]
    depends on [SCSI_DH]
    inherited [SCSI_DH]
   }
   config SCSI_DH_EMC tristate {
    prompt "EMC CLARiiON Device Handler" if [SCSI_DH]
    depends on [SCSI_DH]
    inherited [SCSI_DH]
   }
   config SCSI_DH_ALUA tristate {
    prompt "SPC-3 ALUA Device Handler (EXPERIMENTAL)" if [SCSI_DH && EXPERIMENTAL]
    depends on [SCSI_DH && EXPERIMENTAL]
    inherited [SCSI_DH && EXPERIMENTAL]
   }
  }
  config SCSI_OSD_INITIATOR tristate {
   prompt "OSD-Initiator library" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
   config SCSI_OSD_ULD tristate {
    prompt "OSD Upper Level driver" if [SCSI_OSD_INITIATOR]
    depends on [SCSI_OSD_INITIATOR]
    inherited [SCSI_OSD_INITIATOR]
   }
   config SCSI_OSD_DPRINT_SENSE integer {
    prompt "(0-2) When sense is returned, DEBUG print all sense descriptors" if [SCSI_OSD_INITIATOR]
    default [1] if [SCSI_OSD_INITIATOR]
    depends on [SCSI_OSD_INITIATOR]
    inherited [SCSI_OSD_INITIATOR]
   }
   config SCSI_OSD_DEBUG boolean {
    prompt "Compile All OSD modules with lots of DEBUG prints" if [SCSI_OSD_INITIATOR]
    default [n] if [SCSI_OSD_INITIATOR]
    depends on [SCSI_OSD_INITIATOR]
    inherited [SCSI_OSD_INITIATOR]
   }
  }
 }
 menuconfig ATA tristate {
  prompt "Serial ATA (prod) and Parallel ATA (experimental) drivers" if [HAS_IOMEM && BLOCK && (!M32R && !M68K || BROKEN)]
  depends on [HAS_IOMEM]
  depends on [BLOCK]
  depends on [!(M32R || M68K) || BROKEN]
  select SCSI if [HAS_IOMEM && BLOCK && (!M32R && !M68K || BROKEN)]
  inherited [HAS_IOMEM && BLOCK && (!M32R && !M68K || BROKEN)]
  if [ATA] {
   config ATA_NONSTANDARD boolean {
    default [n] if [ATA]
    inherited [ATA]
   }
   config ATA_VERBOSE_ERROR boolean {
    prompt "Verbose ATA error reporting" if [ATA]
    default [y] if [ATA]
    inherited [ATA]
   }
   config ATA_ACPI boolean {
    prompt "ATA ACPI Support" if [ATA && ACPI && PCI]
    depends on [ACPI && PCI]
    select ACPI_DOCK if [ATA && ACPI && PCI]
    default [y] if [ATA && ACPI && PCI]
    inherited [ATA && ACPI && PCI]
   }
   config SATA_PMP boolean {
    prompt "SATA Port Multiplier support" if [ATA]
    default [y] if [ATA]
    inherited [ATA]
   }
   config SATA_AHCI tristate {
    prompt "AHCI SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_SIL24 tristate {
    prompt "Silicon Image 3124/3132 SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_FSL tristate {
    prompt "Freescale 3.0Gbps SATA support" if [ATA && FSL_SOC]
    depends on [FSL_SOC]
    inherited [ATA && FSL_SOC]
   }
   config ATA_SFF boolean {
    prompt "ATA SFF support" if [ATA]
    default [y] if [ATA]
    inherited [ATA]
    if [ATA && ATA_SFF] {
     config SATA_SVW tristate {
      prompt "ServerWorks Frodo / Apple K2 SATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config ATA_PIIX tristate {
      prompt "Intel ESB, ICH, PIIX3, PIIX4 PATA/SATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config SATA_MV tristate {
      prompt "Marvell SATA support" if [ATA && ATA_SFF]
      inherited [ATA && ATA_SFF]
     }
     config SATA_NV tristate {
      prompt "NVIDIA SATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PDC_ADMA tristate {
      prompt "Pacific Digital ADMA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config SATA_QSTOR tristate {
      prompt "Pacific Digital SATA QStor support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config SATA_PROMISE tristate {
      prompt "Promise SATA TX2/TX4 support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config SATA_SX4 tristate {
      prompt "Promise SATA SX4 support (Experimental)" if [ATA && ATA_SFF && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && EXPERIMENTAL]
     }
     config SATA_SIL tristate {
      prompt "Silicon Image SATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config SATA_SIS tristate {
      prompt "SiS 964/965/966/180 SATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      select PATA_SIS if [ATA && ATA_SFF && PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config SATA_ULI tristate {
      prompt "ULi Electronics SATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config SATA_VIA tristate {
      prompt "VIA SATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config SATA_VITESSE tristate {
      prompt "VITESSE VSC-7174 / INTEL 31244 SATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config SATA_INIC162X tristate {
      prompt "Initio 162x SATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_ACPI tristate {
      prompt "ACPI firmware driver for PATA" if [ATA && ATA_SFF && ATA_ACPI]
      depends on [ATA_ACPI]
      inherited [ATA && ATA_SFF && ATA_ACPI]
     }
     config PATA_ALI tristate {
      prompt "ALi PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_AMD tristate {
      prompt "AMD/NVidia PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_ARTOP tristate {
      prompt "ARTOP 6210/6260 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_ATP867X tristate {
      prompt "ARTOP/Acard ATP867X PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_AT32 tristate {
      prompt "Atmel AVR32 PATA support (Experimental)" if [ATA && ATA_SFF && AVR32 && PLATFORM_AT32AP && EXPERIMENTAL]
      depends on [AVR32 && PLATFORM_AT32AP && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && AVR32 && PLATFORM_AT32AP && EXPERIMENTAL]
     }
     config PATA_ATIIXP tristate {
      prompt "ATI PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_CMD640_PCI tristate {
      prompt "CMD640 PCI PATA support (Experimental)" if [ATA && ATA_SFF && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && EXPERIMENTAL]
     }
     config PATA_CMD64X tristate {
      prompt "CMD64x PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_CS5520 tristate {
      prompt "CS5510/5520 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_CS5530 tristate {
      prompt "CS5530 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_CS5535 tristate {
      prompt "CS5535 PATA support (Experimental)" if [ATA && ATA_SFF && PCI && X86 && !X86_64 && EXPERIMENTAL]
      depends on [PCI && X86 && !X86_64 && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && X86 && !X86_64 && EXPERIMENTAL]
     }
     config PATA_CS5536 tristate {
      prompt "CS5536 PATA support" if [ATA && ATA_SFF && PCI && X86 && !X86_64]
      depends on [PCI && X86 && !X86_64]
      inherited [ATA && ATA_SFF && PCI && X86 && !X86_64]
     }
     config PATA_CYPRESS tristate {
      prompt "Cypress CY82C693 PATA support (Very Experimental)" if [ATA && ATA_SFF && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && EXPERIMENTAL]
     }
     config PATA_EFAR tristate {
      prompt "EFAR SLC90E66 support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config ATA_GENERIC tristate {
      prompt "Generic ATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_HPT366 tristate {
      prompt "HPT 366/368 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_HPT37X tristate {
      prompt "HPT 370/370A/371/372/374/302 PATA support (Experimental)" if [ATA && ATA_SFF && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && EXPERIMENTAL]
     }
     config PATA_HPT3X2N tristate {
      prompt "HPT 372N/302N PATA support (Experimental)" if [ATA && ATA_SFF && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && EXPERIMENTAL]
     }
     config PATA_HPT3X3 tristate {
      prompt "HPT 343/363 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
      config PATA_HPT3X3_DMA boolean {
       prompt "HPT 343/363 DMA support (Experimental)" if [ATA && ATA_SFF && PATA_HPT3X3]
       depends on [PATA_HPT3X3]
       inherited [ATA && ATA_SFF && PATA_HPT3X3]
      }
     }
     config PATA_ISAPNP tristate {
      prompt "ISA Plug and Play PATA support" if [ATA && ATA_SFF && ISAPNP]
      depends on [ISAPNP]
      inherited [ATA && ATA_SFF && ISAPNP]
     }
     config PATA_IT821X tristate {
      prompt "IT8211/2 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_IT8213 tristate {
      prompt "IT8213 PATA support (Experimental)" if [ATA && ATA_SFF && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && EXPERIMENTAL]
     }
     config PATA_JMICRON tristate {
      prompt "JMicron PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_LEGACY tristate {
      prompt "Legacy ISA PATA support (Experimental)" if [ATA && ATA_SFF && ISA && EXPERIMENTAL]
      depends on [ISA && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && ISA && EXPERIMENTAL]
     }
     config PATA_TRIFLEX tristate {
      prompt "Compaq Triflex PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_MARVELL tristate {
      prompt "Marvell PATA support via legacy mode" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_MPC52xx tristate {
      prompt "Freescale MPC52xx SoC internal IDE" if [ATA && ATA_SFF && PPC_MPC52xx && PPC_BESTCOMM]
      depends on [PPC_MPC52xx && PPC_BESTCOMM]
      select PPC_BESTCOMM_ATA if [ATA && ATA_SFF && PPC_MPC52xx && PPC_BESTCOMM]
      inherited [ATA && ATA_SFF && PPC_MPC52xx && PPC_BESTCOMM]
     }
     config PATA_MPIIX tristate {
      prompt "Intel PATA MPIIX support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_OLDPIIX tristate {
      prompt "Intel PATA old PIIX support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_NETCELL tristate {
      prompt "NETCELL Revolution RAID support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_NINJA32 tristate {
      prompt "Ninja32/Delkin Cardbus ATA support (Experimental)" if [ATA && ATA_SFF && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && EXPERIMENTAL]
     }
     config PATA_NS87410 tristate {
      prompt "Nat Semi NS87410 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_NS87415 tristate {
      prompt "Nat Semi NS87415 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_OPTI tristate {
      prompt "OPTI621/6215 PATA support (Very Experimental)" if [ATA && ATA_SFF && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && EXPERIMENTAL]
     }
     config PATA_OPTIDMA tristate {
      prompt "OPTI FireStar PATA support (Very Experimental)" if [ATA && ATA_SFF && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && EXPERIMENTAL]
     }
     config PATA_PALMLD tristate {
      prompt "Palm LifeDrive PATA support" if [ATA && ATA_SFF && MACH_PALMLD]
      depends on [MACH_PALMLD]
      inherited [ATA && ATA_SFF && MACH_PALMLD]
     }
     config PATA_PCMCIA tristate {
      prompt "PCMCIA PATA support" if [ATA && ATA_SFF && PCMCIA]
      depends on [PCMCIA]
      inherited [ATA && ATA_SFF && PCMCIA]
     }
     config PATA_PDC_OLD tristate {
      prompt "Older Promise PATA controller support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_QDI tristate {
      prompt "QDI VLB PATA support" if [ATA && ATA_SFF && ISA]
      depends on [ISA]
      inherited [ATA && ATA_SFF && ISA]
     }
     config PATA_RADISYS tristate {
      prompt "RADISYS 82600 PATA support (Experimental)" if [ATA && ATA_SFF && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && PCI && EXPERIMENTAL]
     }
     config PATA_RB532 tristate {
      prompt "RouterBoard 532 PATA CompactFlash support" if [ATA && ATA_SFF && MIKROTIK_RB532]
      depends on [MIKROTIK_RB532]
      inherited [ATA && ATA_SFF && MIKROTIK_RB532]
     }
     config PATA_RDC tristate {
      prompt "RDC PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_RZ1000 tristate {
      prompt "PC Tech RZ1000 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_SC1200 tristate {
      prompt "SC1200 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_SERVERWORKS tristate {
      prompt "SERVERWORKS OSB4/CSB5/CSB6/HT1000 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_PDC2027X tristate {
      prompt "Promise PATA 2027x support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_SIL680 tristate {
      prompt "CMD / Silicon Image 680 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_SIS tristate {
      prompt "SiS PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_VIA tristate {
      prompt "VIA PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_WINBOND tristate {
      prompt "Winbond SL82C105 PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_WINBOND_VLB tristate {
      prompt "Winbond W83759A VLB PATA support (Experimental)" if [ATA && ATA_SFF && ISA && EXPERIMENTAL]
      depends on [ISA && EXPERIMENTAL]
      inherited [ATA && ATA_SFF && ISA && EXPERIMENTAL]
     }
     config HAVE_PATA_PLATFORM boolean {
      inherited [ATA && ATA_SFF]
     }
     config PATA_PLATFORM tristate {
      prompt "Generic platform device PATA support" if [ATA && ATA_SFF && (EMBEDDED || PPC || HAVE_PATA_PLATFORM)]
      depends on [EMBEDDED || PPC || HAVE_PATA_PLATFORM]
      inherited [ATA && ATA_SFF && (EMBEDDED || PPC || HAVE_PATA_PLATFORM)]
     }
     config PATA_AT91 tristate {
      prompt "PATA support for AT91SAM9260" if [ATA && ATA_SFF && ARM && ARCH_AT91]
      depends on [ARM && ARCH_AT91]
      inherited [ATA && ATA_SFF && ARM && ARCH_AT91]
     }
     config PATA_OF_PLATFORM tristate {
      prompt "OpenFirmware platform device PATA support" if [ATA && ATA_SFF && PATA_PLATFORM && PPC_OF]
      depends on [PATA_PLATFORM && PPC_OF]
      inherited [ATA && ATA_SFF && PATA_PLATFORM && PPC_OF]
     }
     config PATA_ICSIDE tristate {
      prompt "Acorn ICS PATA support" if [ATA && ATA_SFF && ARM && ARCH_ACORN]
      depends on [ARM && ARCH_ACORN]
      inherited [ATA && ATA_SFF && ARM && ARCH_ACORN]
     }
     config PATA_IXP4XX_CF tristate {
      prompt "IXP4XX Compact Flash support" if [ATA && ATA_SFF && ARCH_IXP4XX]
      depends on [ARCH_IXP4XX]
      inherited [ATA && ATA_SFF && ARCH_IXP4XX]
     }
     config PATA_OCTEON_CF tristate {
      prompt "OCTEON Boot Bus Compact Flash support" if [ATA && ATA_SFF && CPU_CAVIUM_OCTEON]
      depends on [CPU_CAVIUM_OCTEON]
      inherited [ATA && ATA_SFF && CPU_CAVIUM_OCTEON]
     }
     config PATA_SCC tristate {
      prompt "Toshiba's Cell Reference Set IDE support" if [ATA && ATA_SFF && PCI && PPC_CELLEB]
      depends on [PCI && PPC_CELLEB]
      inherited [ATA && ATA_SFF && PCI && PPC_CELLEB]
     }
     config PATA_SCH tristate {
      prompt "Intel SCH PATA support" if [ATA && ATA_SFF && PCI]
      depends on [PCI]
      inherited [ATA && ATA_SFF && PCI]
     }
     config PATA_BF54X tristate {
      prompt "Blackfin 54x ATAPI support" if [ATA && ATA_SFF && (BF542 || BF548 || BF549)]
      depends on [BF542 || BF548 || BF549]
      inherited [ATA && ATA_SFF && (BF542 || BF548 || BF549)]
     }
    }
   }
  }
 }
 menuconfig MD boolean {
  prompt "Multiple devices driver support (RAID and LVM)" if [BLOCK]
  depends on [BLOCK]
  inherited [BLOCK]
  if [MD] {
   config BLK_DEV_MD tristate {
    prompt "RAID support" if [MD]
    inherited [MD]
    config MD_AUTODETECT boolean {
     prompt "Autodetect RAID arrays during kernel boot" if [MD && BLK_DEV_MD="y"]
     depends on [BLK_DEV_MD="y"]
     default [y] if [MD && BLK_DEV_MD="y"]
     inherited [MD && BLK_DEV_MD="y"]
    }
    config MD_LINEAR tristate {
     prompt "Linear (append) mode" if [MD && BLK_DEV_MD]
     depends on [BLK_DEV_MD]
     inherited [MD && BLK_DEV_MD]
    }
    config MD_RAID0 tristate {
     prompt "RAID-0 (striping) mode" if [MD && BLK_DEV_MD]
     depends on [BLK_DEV_MD]
     inherited [MD && BLK_DEV_MD]
    }
    config MD_RAID1 tristate {
     prompt "RAID-1 (mirroring) mode" if [MD && BLK_DEV_MD]
     depends on [BLK_DEV_MD]
     inherited [MD && BLK_DEV_MD]
    }
    config MD_RAID10 tristate {
     prompt "RAID-10 (mirrored striping) mode (EXPERIMENTAL)" if [MD && BLK_DEV_MD && EXPERIMENTAL]
     depends on [BLK_DEV_MD && EXPERIMENTAL]
     inherited [MD && BLK_DEV_MD && EXPERIMENTAL]
    }
    config MD_RAID456 tristate {
     prompt "RAID-4/RAID-5/RAID-6 mode" if [MD && BLK_DEV_MD]
     depends on [BLK_DEV_MD]
     select MD_RAID6_PQ if [MD && BLK_DEV_MD]
     select ASYNC_MEMCPY if [MD && BLK_DEV_MD]
     select ASYNC_XOR if [MD && BLK_DEV_MD]
     select ASYNC_PQ if [MD && BLK_DEV_MD]
     select ASYNC_RAID6_RECOV if [MD && BLK_DEV_MD]
     inherited [MD && BLK_DEV_MD]
     config MULTICORE_RAID456 boolean {
      prompt "RAID-4/RAID-5/RAID-6 Multicore processing (EXPERIMENTAL)" if [MD && MD_RAID456 && SMP && EXPERIMENTAL]
      depends on [MD_RAID456]
      depends on [SMP]
      depends on [EXPERIMENTAL]
      inherited [MD && MD_RAID456 && SMP && EXPERIMENTAL]
     }
    }
   }
   config MD_RAID6_PQ tristate {
    inherited [MD]
   }
   config ASYNC_RAID6_TEST tristate {
    prompt "Self test for hardware accelerated raid6 recovery" if [MD && MD_RAID6_PQ]
    depends on [MD_RAID6_PQ]
    select ASYNC_RAID6_RECOV if [MD && MD_RAID6_PQ]
    inherited [MD && MD_RAID6_PQ]
   }
   config MD_MULTIPATH tristate {
    prompt "Multipath I/O support" if [MD && BLK_DEV_MD]
    depends on [BLK_DEV_MD]
    inherited [MD && BLK_DEV_MD]
   }
   config MD_FAULTY tristate {
    prompt "Faulty test module for MD" if [MD && BLK_DEV_MD]
    depends on [BLK_DEV_MD]
    inherited [MD && BLK_DEV_MD]
   }
   config BLK_DEV_DM tristate {
    prompt "Device mapper support" if [MD]
    inherited [MD]
    config DM_DEBUG boolean {
     prompt "Device mapper debugging support" if [MD && BLK_DEV_DM]
     depends on [BLK_DEV_DM]
     inherited [MD && BLK_DEV_DM]
    }
    config DM_CRYPT tristate {
     prompt "Crypt target support" if [MD && BLK_DEV_DM]
     depends on [BLK_DEV_DM]
     select CRYPTO if [MD && BLK_DEV_DM]
     select CRYPTO_CBC if [MD && BLK_DEV_DM]
     inherited [MD && BLK_DEV_DM]
    }
    config DM_SNAPSHOT tristate {
     prompt "Snapshot target" if [MD && BLK_DEV_DM]
     depends on [BLK_DEV_DM]
     inherited [MD && BLK_DEV_DM]
    }
    config DM_MIRROR tristate {
     prompt "Mirror target" if [MD && BLK_DEV_DM]
     depends on [BLK_DEV_DM]
     inherited [MD && BLK_DEV_DM]
     config DM_LOG_USERSPACE tristate {
      prompt "Mirror userspace logging (EXPERIMENTAL)" if [MD && DM_MIRROR && EXPERIMENTAL && NET]
      depends on [DM_MIRROR && EXPERIMENTAL && NET]
      select CONNECTOR if [MD && DM_MIRROR && EXPERIMENTAL && NET]
      inherited [MD && DM_MIRROR && EXPERIMENTAL && NET]
     }
    }
    config DM_ZERO tristate {
     prompt "Zero target" if [MD && BLK_DEV_DM]
     depends on [BLK_DEV_DM]
     inherited [MD && BLK_DEV_DM]
    }
    config DM_MULTIPATH tristate {
     prompt "Multipath target" if [MD && BLK_DEV_DM && (SCSI_DH || !SCSI_DH)]
     depends on [BLK_DEV_DM]
     depends on [SCSI_DH || !SCSI_DH]
     inherited [MD && BLK_DEV_DM && (SCSI_DH || !SCSI_DH)]
     config DM_MULTIPATH_QL tristate {
      prompt "I/O Path Selector based on the number of in-flight I/Os" if [MD && DM_MULTIPATH]
      depends on [DM_MULTIPATH]
      inherited [MD && DM_MULTIPATH]
     }
     config DM_MULTIPATH_ST tristate {
      prompt "I/O Path Selector based on the service time" if [MD && DM_MULTIPATH]
      depends on [DM_MULTIPATH]
      inherited [MD && DM_MULTIPATH]
     }
    }
    config DM_DELAY tristate {
     prompt "I/O delaying target (EXPERIMENTAL)" if [MD && BLK_DEV_DM && EXPERIMENTAL]
     depends on [BLK_DEV_DM && EXPERIMENTAL]
     inherited [MD && BLK_DEV_DM && EXPERIMENTAL]
    }
    config DM_UEVENT boolean {
     prompt "DM uevents (EXPERIMENTAL)" if [MD && BLK_DEV_DM && EXPERIMENTAL]
     depends on [BLK_DEV_DM && EXPERIMENTAL]
     inherited [MD && BLK_DEV_DM && EXPERIMENTAL]
    }
   }
  }
 }
 menuconfig FUSION boolean {
  prompt "Fusion MPT device support" if [PCI]
  depends on [PCI]
  inherited [PCI]
  if [FUSION] {
   config FUSION_SPI tristate {
    prompt "Fusion MPT ScsiHost drivers for SPI" if [FUSION && PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_SPI_ATTRS if [FUSION && PCI && SCSI]
    inherited [FUSION && PCI && SCSI]
   }
   config FUSION_FC tristate {
    prompt "Fusion MPT ScsiHost drivers for FC" if [FUSION && PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_FC_ATTRS if [FUSION && PCI && SCSI]
    inherited [FUSION && PCI && SCSI]
   }
   config FUSION_SAS tristate {
    prompt "Fusion MPT ScsiHost drivers for SAS" if [FUSION && PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_SAS_ATTRS if [FUSION && PCI && SCSI]
    inherited [FUSION && PCI && SCSI]
   }
   config FUSION_MAX_SGE integer {
    prompt "Maximum number of scatter gather entries (16 - 128)" if [FUSION]
    default [128] if [FUSION]
    range [16 128] if [FUSION]
    inherited [FUSION]
   }
   config FUSION_CTL tristate {
    prompt "Fusion MPT misc device (ioctl) driver" if [FUSION && (FUSION_SPI || FUSION_FC || FUSION_SAS)]
    depends on [FUSION_SPI || FUSION_FC || FUSION_SAS]
    inherited [FUSION && (FUSION_SPI || FUSION_FC || FUSION_SAS)]
   }
   config FUSION_LAN tristate {
    prompt "Fusion MPT LAN driver" if [FUSION && FUSION_FC && NET_FC]
    depends on [FUSION_FC && NET_FC]
    inherited [FUSION && FUSION_FC && NET_FC]
   }
   config FUSION_LOGGING boolean {
    prompt "Fusion MPT logging facility" if [FUSION]
    inherited [FUSION]
   }
  }
 }
 menu "IEEE 1394 (FireWire) support" {
  depends on [PCI || BROKEN]
  config FIREWIRE tristate {
   prompt "FireWire driver stack" if [PCI || BROKEN]
   select CRC_ITU_T if [PCI || BROKEN]
   inherited [PCI || BROKEN]
   config FIREWIRE_OHCI tristate {
    prompt "OHCI-1394 controllers" if [(PCI || BROKEN) && PCI && FIREWIRE]
    depends on [PCI && FIREWIRE]
    inherited [(PCI || BROKEN) && PCI && FIREWIRE]
    config FIREWIRE_OHCI_DEBUG boolean {
     depends on [FIREWIRE_OHCI]
     default [y] if [(PCI || BROKEN) && FIREWIRE_OHCI]
     inherited [(PCI || BROKEN) && FIREWIRE_OHCI]
    }
   }
   config FIREWIRE_SBP2 tristate {
    prompt "Storage devices (SBP-2 protocol)" if [(PCI || BROKEN) && FIREWIRE && SCSI]
    depends on [FIREWIRE && SCSI]
    inherited [(PCI || BROKEN) && FIREWIRE && SCSI]
   }
   config FIREWIRE_NET tristate {
    prompt "IP networking over 1394 (EXPERIMENTAL)" if [(PCI || BROKEN) && FIREWIRE && INET && EXPERIMENTAL]
    depends on [FIREWIRE && INET && EXPERIMENTAL]
    inherited [(PCI || BROKEN) && FIREWIRE && INET && EXPERIMENTAL]
   }
  }
  config IEEE1394 tristate {
   prompt "Legacy alternative FireWire driver stack" if [PCI || BROKEN]
   depends on [PCI || BROKEN]
   inherited [PCI || BROKEN]
   config IEEE1394_OHCI1394 tristate {
    prompt "OHCI-1394 controllers" if [(PCI || BROKEN) && PCI && IEEE1394]
    depends on [PCI && IEEE1394]
    inherited [(PCI || BROKEN) && PCI && IEEE1394]
   }
   config IEEE1394_PCILYNX tristate {
    prompt "PCILynx controller" if [(PCI || BROKEN) && PCI && IEEE1394 && I2C]
    depends on [PCI && IEEE1394 && I2C]
    select I2C_ALGOBIT if [(PCI || BROKEN) && PCI && IEEE1394 && I2C]
    inherited [(PCI || BROKEN) && PCI && IEEE1394 && I2C]
   }
   config IEEE1394_SBP2 tristate {
    prompt "Storage devices (SBP-2 protocol)" if [(PCI || BROKEN) && IEEE1394 && SCSI]
    depends on [IEEE1394 && SCSI]
    inherited [(PCI || BROKEN) && IEEE1394 && SCSI]
    config IEEE1394_SBP2_PHYS_DMA boolean {
     prompt "Enable replacement for physical DMA in SBP2" if [(PCI || BROKEN) && IEEE1394_SBP2 && VIRT_TO_BUS && EXPERIMENTAL]
     depends on [IEEE1394_SBP2 && VIRT_TO_BUS && EXPERIMENTAL]
     inherited [(PCI || BROKEN) && IEEE1394_SBP2 && VIRT_TO_BUS && EXPERIMENTAL]
    }
   }
   config IEEE1394_ETH1394_ROM_ENTRY boolean {
    depends on [IEEE1394]
    default [n] if [(PCI || BROKEN) && IEEE1394]
    inherited [(PCI || BROKEN) && IEEE1394]
   }
   config IEEE1394_ETH1394 tristate {
    prompt "IP networking over 1394 (experimental)" if [(PCI || BROKEN) && IEEE1394 && EXPERIMENTAL && INET]
    depends on [IEEE1394 && EXPERIMENTAL && INET]
    select IEEE1394_ETH1394_ROM_ENTRY if [(PCI || BROKEN) && IEEE1394 && EXPERIMENTAL && INET]
    inherited [(PCI || BROKEN) && IEEE1394 && EXPERIMENTAL && INET]
   }
   config IEEE1394_RAWIO tristate {
    prompt "raw1394 userspace interface" if [(PCI || BROKEN) && IEEE1394]
    depends on [IEEE1394]
    inherited [(PCI || BROKEN) && IEEE1394]
   }
   config IEEE1394_VIDEO1394 tristate {
    prompt "video1394 userspace interface" if [(PCI || BROKEN) && IEEE1394 && IEEE1394_OHCI1394]
    depends on [IEEE1394 && IEEE1394_OHCI1394]
    inherited [(PCI || BROKEN) && IEEE1394 && IEEE1394_OHCI1394]
   }
   config IEEE1394_DV1394 tristate {
    prompt "dv1394 userspace interface (deprecated)" if [(PCI || BROKEN) && IEEE1394 && IEEE1394_OHCI1394]
    depends on [IEEE1394 && IEEE1394_OHCI1394]
    inherited [(PCI || BROKEN) && IEEE1394 && IEEE1394_OHCI1394]
   }
   config IEEE1394_VERBOSEDEBUG boolean {
    prompt "Excessive debugging output" if [(PCI || BROKEN) && IEEE1394]
    depends on [IEEE1394]
    inherited [(PCI || BROKEN) && IEEE1394]
   }
  }
 }
 menuconfig I2O tristate {
  prompt "I2O device support" if [PCI]
  depends on [PCI]
  inherited [PCI]
  if [I2O] {
   config I2O_LCT_NOTIFY_ON_CHANGES boolean {
    prompt "Enable LCT notification" if [I2O]
    default [y] if [I2O]
    inherited [I2O]
   }
   config I2O_EXT_ADAPTEC boolean {
    prompt "Enable Adaptec extensions" if [I2O]
    default [y] if [I2O]
    inherited [I2O]
    config I2O_EXT_ADAPTEC_DMA64 boolean {
     prompt "Enable 64-bit DMA" if [I2O && I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
     depends on [I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
     default [y] if [I2O && I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
     inherited [I2O && I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
    }
   }
   config I2O_CONFIG tristate {
    prompt "I2O Configuration support" if [I2O && VIRT_TO_BUS]
    depends on [VIRT_TO_BUS]
    inherited [I2O && VIRT_TO_BUS]
    config I2O_CONFIG_OLD_IOCTL boolean {
     prompt "Enable ioctls (OBSOLETE)" if [I2O && I2O_CONFIG]
     depends on [I2O_CONFIG]
     default [y] if [I2O && I2O_CONFIG]
     inherited [I2O && I2O_CONFIG]
    }
   }
   config I2O_BUS tristate {
    prompt "I2O Bus Adapter OSM" if [I2O]
    inherited [I2O]
   }
   config I2O_BLOCK tristate {
    prompt "I2O Block OSM" if [I2O && BLOCK]
    depends on [BLOCK]
    inherited [I2O && BLOCK]
   }
   config I2O_SCSI tristate {
    prompt "I2O SCSI OSM" if [I2O && SCSI]
    depends on [SCSI]
    inherited [I2O && SCSI]
   }
   config I2O_PROC tristate {
    prompt "I2O /proc support" if [I2O]
    inherited [I2O]
   }
  }
 }
 menuconfig MACINTOSH_DRIVERS boolean {
  prompt "Macintosh device drivers" if [PPC || MAC || X86]
  depends on [PPC || MAC || X86]
  default [y] if [(PPC || MAC || X86) && (PPC_PMAC || MAC)]
  inherited [PPC || MAC || X86]
  if [MACINTOSH_DRIVERS] {
   config ADB boolean {
    prompt "Apple Desktop Bus (ADB) support" if [MACINTOSH_DRIVERS && (MAC || PPC_PMAC && PPC32)]
    depends on [MAC || PPC_PMAC && PPC32]
    inherited [MACINTOSH_DRIVERS && (MAC || PPC_PMAC && PPC32)]
    config ADB_MACII boolean {
     prompt "Include Mac II ADB driver" if [MACINTOSH_DRIVERS && ADB && MAC]
     depends on [ADB && MAC]
     inherited [MACINTOSH_DRIVERS && ADB && MAC]
    }
    config ADB_MACIISI boolean {
     prompt "Include Mac IIsi ADB driver" if [MACINTOSH_DRIVERS && ADB && MAC]
     depends on [ADB && MAC]
     inherited [MACINTOSH_DRIVERS && ADB && MAC]
    }
    config ADB_IOP boolean {
     prompt "Include IOP (IIfx/Quadra 9x0) ADB driver" if [MACINTOSH_DRIVERS && ADB && MAC]
     depends on [ADB && MAC]
     inherited [MACINTOSH_DRIVERS && ADB && MAC]
    }
    config ADB_PMU68K boolean {
     prompt "Include PMU (Powerbook) ADB driver" if [MACINTOSH_DRIVERS && ADB && MAC]
     depends on [ADB && MAC]
     inherited [MACINTOSH_DRIVERS && ADB && MAC]
    }
   }
   config ADB_CUDA boolean {
    prompt "Support for CUDA based Macs and PowerMacs" if [MACINTOSH_DRIVERS && (ADB || PPC_PMAC) && !PPC_PMAC64]
    depends on [(ADB || PPC_PMAC) && !PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && (ADB || PPC_PMAC) && !PPC_PMAC64]
   }
   config ADB_PMU boolean {
    prompt "Support for PMU  based PowerMacs" if [MACINTOSH_DRIVERS && PPC_PMAC]
    depends on [PPC_PMAC]
    inherited [MACINTOSH_DRIVERS && PPC_PMAC]
    config ADB_PMU_LED boolean {
     prompt "Support for the Power/iBook front LED" if [MACINTOSH_DRIVERS && ADB_PMU]
     depends on [ADB_PMU]
     select NEW_LEDS if [MACINTOSH_DRIVERS && ADB_PMU]
     select LEDS_CLASS if [MACINTOSH_DRIVERS && ADB_PMU]
     inherited [MACINTOSH_DRIVERS && ADB_PMU]
     config ADB_PMU_LED_IDE boolean {
      prompt "Use front LED as IDE LED by default" if [MACINTOSH_DRIVERS && ADB_PMU_LED]
      depends on [ADB_PMU_LED]
      select LEDS_TRIGGERS if [MACINTOSH_DRIVERS && ADB_PMU_LED]
      select LEDS_TRIGGER_IDE_DISK if [MACINTOSH_DRIVERS && ADB_PMU_LED]
      inherited [MACINTOSH_DRIVERS && ADB_PMU_LED]
     }
    }
   }
   config PMAC_SMU boolean {
    prompt "Support for SMU  based PowerMacs" if [MACINTOSH_DRIVERS && PPC_PMAC64]
    depends on [PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && PPC_PMAC64]
   }
   config PMAC_APM_EMU tristate {
    prompt "APM emulation" if [MACINTOSH_DRIVERS && ADB_PMU && PM && PPC32]
    select APM_EMULATION if [MACINTOSH_DRIVERS && ADB_PMU && PM && PPC32]
    depends on [ADB_PMU && PM && PPC32]
    inherited [MACINTOSH_DRIVERS && ADB_PMU && PM && PPC32]
   }
   config PMAC_MEDIABAY boolean {
    prompt "Support PowerBook hotswap media bay" if [MACINTOSH_DRIVERS && PPC_PMAC && PPC32 && BLOCK]
    depends on [PPC_PMAC && PPC32 && BLOCK]
    inherited [MACINTOSH_DRIVERS && PPC_PMAC && PPC32 && BLOCK]
   }
   config PMAC_BACKLIGHT boolean {
    prompt "Backlight control for LCD screens" if [MACINTOSH_DRIVERS && ADB_PMU && FB="y" && (BROKEN || !PPC64)]
    depends on [ADB_PMU && FB="y" && (BROKEN || !PPC64)]
    select FB_BACKLIGHT if [MACINTOSH_DRIVERS && ADB_PMU && FB="y" && (BROKEN || !PPC64)]
    inherited [MACINTOSH_DRIVERS && ADB_PMU && FB="y" && (BROKEN || !PPC64)]
    config PMAC_BACKLIGHT_LEGACY boolean {
     prompt "Provide legacy ioctl's on /dev/pmu for the backlight" if [MACINTOSH_DRIVERS && PMAC_BACKLIGHT && (BROKEN || !PPC64)]
     depends on [PMAC_BACKLIGHT && (BROKEN || !PPC64)]
     inherited [MACINTOSH_DRIVERS && PMAC_BACKLIGHT && (BROKEN || !PPC64)]
    }
   }
   config ADB_MACIO boolean {
    prompt "Include MacIO (CHRP) ADB driver" if [MACINTOSH_DRIVERS && ADB && PPC_CHRP && !PPC_PMAC64]
    depends on [ADB && PPC_CHRP && !PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && ADB && PPC_CHRP && !PPC_PMAC64]
   }
   config INPUT_ADBHID boolean {
    prompt "Support for ADB input devices (keyboard, mice, ...)" if [MACINTOSH_DRIVERS && ADB && INPUT="y"]
    depends on [ADB && INPUT="y"]
    inherited [MACINTOSH_DRIVERS && ADB && INPUT="y"]
   }
   config MAC_EMUMOUSEBTN boolean {
    prompt "Support for mouse button 2+3 emulation" if [MACINTOSH_DRIVERS]
    select INPUT if [MACINTOSH_DRIVERS]
    inherited [MACINTOSH_DRIVERS]
   }
   config THERM_WINDTUNNEL tristate {
    prompt "Support for thermal management on Windtunnel G4s" if [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
    depends on [I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
   }
   config THERM_ADT746X tristate {
    prompt "Support for thermal mgmnt on laptops with ADT 746x chipset" if [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
    depends on [I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
   }
   config THERM_PM72 tristate {
    prompt "Support for thermal management on PowerMac G5" if [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC64]
    depends on [I2C && I2C_POWERMAC && PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC64]
   }
   config WINDFARM tristate {
    prompt "New PowerMac thermal control infrastructure" if [MACINTOSH_DRIVERS && PPC]
    depends on [PPC]
    inherited [MACINTOSH_DRIVERS && PPC]
    config WINDFARM_PM81 tristate {
     prompt "Support for thermal management on iMac G5" if [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     depends on [WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     select I2C_POWERMAC if [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     inherited [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
    }
    config WINDFARM_PM91 tristate {
     prompt "Support for thermal management on PowerMac9,1" if [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     depends on [WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     select I2C_POWERMAC if [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     inherited [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
    }
    config WINDFARM_PM112 tristate {
     prompt "Support for thermal management on PowerMac11,2" if [MACINTOSH_DRIVERS && WINDFARM && I2C && PMAC_SMU]
     depends on [WINDFARM && I2C && PMAC_SMU]
     select I2C_POWERMAC if [MACINTOSH_DRIVERS && WINDFARM && I2C && PMAC_SMU]
     inherited [MACINTOSH_DRIVERS && WINDFARM && I2C && PMAC_SMU]
    }
    config WINDFARM_PM121 tristate {
     prompt "Support for thermal management on PowerMac12,1" if [MACINTOSH_DRIVERS && WINDFARM && I2C && PMAC_SMU]
     depends on [WINDFARM && I2C && PMAC_SMU]
     select I2C_POWERMAC if [MACINTOSH_DRIVERS && WINDFARM && I2C && PMAC_SMU]
     inherited [MACINTOSH_DRIVERS && WINDFARM && I2C && PMAC_SMU]
    }
   }
   config ANSLCD tristate {
    prompt "Support for ANS LCD display" if [MACINTOSH_DRIVERS && ADB_CUDA && PPC_PMAC]
    depends on [ADB_CUDA && PPC_PMAC]
    inherited [MACINTOSH_DRIVERS && ADB_CUDA && PPC_PMAC]
   }
   config PMAC_RACKMETER tristate {
    prompt "Support for Apple XServe front panel LEDs" if [MACINTOSH_DRIVERS && PPC_PMAC]
    depends on [PPC_PMAC]
    inherited [MACINTOSH_DRIVERS && PPC_PMAC]
   }
  }
 }
 menuconfig NETDEVICES boolean {
  default [y] if [NET && UML]
  depends on [NET]
  prompt "Network device support" if [NET]
  inherited [NET]
  if [NETDEVICES] {
   config IFB tristate {
    prompt "Intermediate Functional Block support" if [NETDEVICES && NET_CLS_ACT]
    depends on [NET_CLS_ACT]
    inherited [NETDEVICES && NET_CLS_ACT]
   }
   config DUMMY tristate {
    prompt "Dummy net driver support" if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config BONDING tristate {
    prompt "Bonding driver support" if [NETDEVICES && INET && (IPV6 || IPV6="n")]
    depends on [INET]
    depends on [IPV6 || IPV6="n"]
    inherited [NETDEVICES && INET && (IPV6 || IPV6="n")]
   }
   config MACVLAN tristate {
    prompt "MAC-VLAN support (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NETDEVICES && EXPERIMENTAL]
   }
   config EQUALIZER tristate {
    prompt "EQL (serial line load balancing) support" if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config TUN tristate {
    prompt "Universal TUN/TAP device driver support" if [NETDEVICES]
    select CRC32 if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config VETH tristate {
    prompt "Virtual ethernet pair device" if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config NET_SB1000 tristate {
    prompt "General Instruments Surfboard 1000" if [NETDEVICES && PNP]
    depends on [PNP]
    inherited [NETDEVICES && PNP]
   }
   menuconfig ARCNET tristate {
    depends on [NETDEVICES && (ISA || PCI)]
    prompt "ARCnet support" if [NETDEVICES && (ISA || PCI)]
    inherited [NETDEVICES && (ISA || PCI)]
    if [NETDEVICES && ARCNET] {
     config ARCNET_1201 tristate {
      prompt "Enable standard ARCNet packet format (RFC 1201)" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_1051 tristate {
      prompt "Enable old ARCNet packet format (RFC 1051)" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_RAW tristate {
      prompt "Enable raw mode packet interface" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_CAP tristate {
      prompt "Enable CAP mode packet interface" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_COM90xx tristate {
      prompt "ARCnet COM90xx (normal) chipset driver" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_COM90xxIO tristate {
      prompt "ARCnet COM90xx (IO mapped) chipset driver" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_RIM_I tristate {
      prompt "ARCnet COM90xx (RIM I) chipset driver" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_COM20020 tristate {
      prompt "ARCnet COM20020 chipset driver" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
      config ARCNET_COM20020_ISA tristate {
       prompt "Support for COM20020 on ISA" if [NETDEVICES && ARCNET && ARCNET_COM20020 && ISA]
       depends on [ARCNET_COM20020 && ISA]
       inherited [NETDEVICES && ARCNET && ARCNET_COM20020 && ISA]
      }
      config ARCNET_COM20020_PCI tristate {
       prompt "Support for COM20020 on PCI" if [NETDEVICES && ARCNET && ARCNET_COM20020 && PCI]
       depends on [ARCNET_COM20020 && PCI]
       inherited [NETDEVICES && ARCNET && ARCNET_COM20020 && PCI]
      }
     }
    }
   }
   menuconfig PHYLIB tristate {
    prompt "PHY Device support and infrastructure" if [NETDEVICES && !S390 && NET_ETHERNET]
    depends on [!S390]
    depends on [NET_ETHERNET]
    inherited [NETDEVICES && !S390 && NET_ETHERNET]
    if [NETDEVICES && PHYLIB] {
     config MARVELL_PHY tristate {
      prompt "Drivers for Marvell PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config DAVICOM_PHY tristate {
      prompt "Drivers for Davicom PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config QSEMI_PHY tristate {
      prompt "Drivers for Quality Semiconductor PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config LXT_PHY tristate {
      prompt "Drivers for the Intel LXT PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config CICADA_PHY tristate {
      prompt "Drivers for the Cicada PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config VITESSE_PHY tristate {
      prompt "Drivers for the Vitesse PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config SMSC_PHY tristate {
      prompt "Drivers for SMSC PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config BROADCOM_PHY tristate {
      prompt "Drivers for Broadcom PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config BCM63XX_PHY tristate {
      prompt "Drivers for Broadcom 63xx SOCs internal PHY" if [NETDEVICES && PHYLIB && BCM63XX]
      depends on [BCM63XX]
      inherited [NETDEVICES && PHYLIB && BCM63XX]
     }
     config ICPLUS_PHY tristate {
      prompt "Drivers for ICPlus PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config REALTEK_PHY tristate {
      prompt "Drivers for Realtek PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config NATIONAL_PHY tristate {
      prompt "Drivers for National Semiconductor PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config STE10XP tristate {
      depends on [PHYLIB]
      prompt "Driver for STMicroelectronics STe10Xp PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config LSI_ET1011C_PHY tristate {
      prompt "Driver for LSI ET1011C PHY" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config FIXED_PHY boolean {
      prompt "Driver for MDIO Bus/PHY emulation with fixed speed/link PHYs" if [NETDEVICES && PHYLIB="y"]
      depends on [PHYLIB="y"]
      inherited [NETDEVICES && PHYLIB="y"]
     }
     config MDIO_BITBANG tristate {
      prompt "Support for bitbanged MDIO buses" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
      config MDIO_GPIO tristate {
       prompt "Support for GPIO lib-based bitbanged MDIO buses" if [NETDEVICES && PHYLIB && MDIO_BITBANG && GENERIC_GPIO]
       depends on [MDIO_BITBANG && GENERIC_GPIO]
       inherited [NETDEVICES && PHYLIB && MDIO_BITBANG && GENERIC_GPIO]
      }
     }
    }
   }
   menuconfig NET_ETHERNET boolean {
    prompt "Ethernet (10 or 100Mbit)" if [NETDEVICES && !UML]
    depends on [!UML]
    inherited [NETDEVICES && !UML]
    if [NETDEVICES && NET_ETHERNET] {
     config MII tristate {
      prompt "Generic Media Independent Interface device support" if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config MACB tristate {
      prompt "Atmel MACB support" if [NETDEVICES && NET_ETHERNET && (AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263 || ARCH_AT91SAM9G20 || ARCH_AT91SAM9G45 || ARCH_AT91CAP9)]
      depends on [AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263 || ARCH_AT91SAM9G20 || ARCH_AT91SAM9G45 || ARCH_AT91CAP9]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && (AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263 || ARCH_AT91SAM9G20 || ARCH_AT91SAM9G45 || ARCH_AT91CAP9)]
      inherited [NETDEVICES && NET_ETHERNET && (AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263 || ARCH_AT91SAM9G20 || ARCH_AT91SAM9G45 || ARCH_AT91CAP9)]
     }
     config ARM_AM79C961A boolean {
      prompt "ARM EBSA110 AM79C961A support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EBSA110]
      depends on [ARM && ARCH_EBSA110]
      select CRC32 if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EBSA110]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_EBSA110]
     }
     config ARM_ETHER1 tristate {
      prompt "Acorn Ether1 support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
      depends on [ARM && ARCH_ACORN]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
     }
     config ARM_ETHER3 tristate {
      prompt "Acorn/ANT Ether3 support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
      depends on [ARM && ARCH_ACORN]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
     }
     config ARM_ETHERH tristate {
      prompt "I-cubed EtherH/ANT EtherM support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
      depends on [ARM && ARCH_ACORN]
      select CRC32 if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
     }
     config ARM_AT91_ETHER tristate {
      prompt "AT91RM9200 Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_AT91RM9200]
      depends on [ARM && ARCH_AT91RM9200]
      select MII if [NETDEVICES && NET_ETHERNET && ARM && ARCH_AT91RM9200]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_AT91RM9200]
     }
     config ARM_KS8695_ETHER tristate {
      prompt "KS8695 Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_KS8695]
      depends on [ARM && ARCH_KS8695]
      select MII if [NETDEVICES && NET_ETHERNET && ARM && ARCH_KS8695]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_KS8695]
     }
     config EP93XX_ETH tristate {
      prompt "EP93xx Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EP93XX]
      depends on [ARM && ARCH_EP93XX]
      select MII if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EP93XX]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_EP93XX]
     }
     config IXP4XX_ETH tristate {
      prompt "Intel IXP4xx Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
      depends on [ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
     }
     config W90P910_ETH tristate {
      prompt "Nuvoton w90p910 Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_W90X900]
      depends on [ARM && ARCH_W90X900]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && ARM && ARCH_W90X900]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_W90X900]
     }
     config AX88796 tristate {
      prompt "ASIX AX88796 NE2000 clone support" if [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
      depends on [ARM || MIPS || SUPERH]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
      select MII if [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
      inherited [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
      config AX88796_93CX6 boolean {
       prompt "ASIX AX88796 external 93CX6 eeprom support" if [NETDEVICES && NET_ETHERNET && AX88796]
       depends on [AX88796]
       select EEPROM_93CX6 if [NETDEVICES && NET_ETHERNET && AX88796]
       inherited [NETDEVICES && NET_ETHERNET && AX88796]
      }
     }
     config MACE tristate {
      prompt "MACE (Power Mac ethernet) support" if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
      depends on [PPC_PMAC && PPC32]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
      inherited [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
      config MACE_AAUI_PORT boolean {
       prompt "Use AAUI port instead of TP by default" if [NETDEVICES && NET_ETHERNET && MACE]
       depends on [MACE]
       inherited [NETDEVICES && NET_ETHERNET && MACE]
      }
     }
     config BMAC tristate {
      prompt "BMAC (G3 ethernet) support" if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
      depends on [PPC_PMAC && PPC32]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
      inherited [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
     }
     config ARIADNE tristate {
      prompt "Ariadne support" if [NETDEVICES && NET_ETHERNET && ZORRO]
      depends on [ZORRO]
      inherited [NETDEVICES && NET_ETHERNET && ZORRO]
     }
     config A2065 tristate {
      prompt "A2065 support" if [NETDEVICES && NET_ETHERNET && ZORRO]
      depends on [ZORRO]
      select CRC32 if [NETDEVICES && NET_ETHERNET && ZORRO]
      inherited [NETDEVICES && NET_ETHERNET && ZORRO]
     }
     config HYDRA tristate {
      prompt "Hydra support" if [NETDEVICES && NET_ETHERNET && ZORRO]
      depends on [ZORRO]
      select CRC32 if [NETDEVICES && NET_ETHERNET && ZORRO]
      inherited [NETDEVICES && NET_ETHERNET && ZORRO]
     }
     config ZORRO8390 tristate {
      prompt "Zorro NS8390-based Ethernet support" if [NETDEVICES && NET_ETHERNET && ZORRO]
      depends on [ZORRO]
      select CRC32 if [NETDEVICES && NET_ETHERNET && ZORRO]
      inherited [NETDEVICES && NET_ETHERNET && ZORRO]
     }
     config APNE tristate {
      prompt "PCMCIA NE2000 support" if [NETDEVICES && NET_ETHERNET && AMIGA_PCMCIA]
      depends on [AMIGA_PCMCIA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && AMIGA_PCMCIA]
      inherited [NETDEVICES && NET_ETHERNET && AMIGA_PCMCIA]
     }
     config MAC8390 boolean {
      prompt "Macintosh NS 8390 based ethernet cards" if [NETDEVICES && NET_ETHERNET && MAC]
      depends on [MAC]
      select CRC32 if [NETDEVICES && NET_ETHERNET && MAC]
      inherited [NETDEVICES && NET_ETHERNET && MAC]
     }
     config MAC89x0 tristate {
      prompt "Macintosh CS89x0 based ethernet cards" if [NETDEVICES && NET_ETHERNET && MAC]
      depends on [MAC]
      inherited [NETDEVICES && NET_ETHERNET && MAC]
     }
     config MACSONIC tristate {
      prompt "Macintosh SONIC based ethernet (onboard, NuBus, LC, CS)" if [NETDEVICES && NET_ETHERNET && MAC]
      depends on [MAC]
      inherited [NETDEVICES && NET_ETHERNET && MAC]
     }
     config MACMACE boolean {
      prompt "Macintosh (AV) onboard MACE ethernet" if [NETDEVICES && NET_ETHERNET && MAC]
      depends on [MAC]
      select CRC32 if [NETDEVICES && NET_ETHERNET && MAC]
      inherited [NETDEVICES && NET_ETHERNET && MAC]
     }
     config MVME147_NET tristate {
      prompt "MVME147 (Lance) Ethernet support" if [NETDEVICES && NET_ETHERNET && MVME147]
      depends on [MVME147]
      select CRC32 if [NETDEVICES && NET_ETHERNET && MVME147]
      inherited [NETDEVICES && NET_ETHERNET && MVME147]
     }
     config MVME16x_NET tristate {
      prompt "MVME16x Ethernet support" if [NETDEVICES && NET_ETHERNET && MVME16x]
      depends on [MVME16x]
      inherited [NETDEVICES && NET_ETHERNET && MVME16x]
     }
     config BVME6000_NET tristate {
      prompt "BVME6000 Ethernet support" if [NETDEVICES && NET_ETHERNET && BVME6000]
      depends on [BVME6000]
      inherited [NETDEVICES && NET_ETHERNET && BVME6000]
     }
     config ATARILANCE tristate {
      prompt "Atari Lance support" if [NETDEVICES && NET_ETHERNET && ATARI]
      depends on [ATARI]
      inherited [NETDEVICES && NET_ETHERNET && ATARI]
     }
     config SUN3LANCE tristate {
      prompt "Sun3/Sun3x on-board LANCE support" if [NETDEVICES && NET_ETHERNET && (SUN3 || SUN3X)]
      depends on [SUN3 || SUN3X]
      inherited [NETDEVICES && NET_ETHERNET && (SUN3 || SUN3X)]
     }
     config SUN3_82586 boolean {
      prompt "Sun3 on-board Intel 82586 support" if [NETDEVICES && NET_ETHERNET && SUN3]
      depends on [SUN3]
      inherited [NETDEVICES && NET_ETHERNET && SUN3]
     }
     config HPLANCE boolean {
      prompt "HP on-board LANCE support" if [NETDEVICES && NET_ETHERNET && DIO]
      depends on [DIO]
      select CRC32 if [NETDEVICES && NET_ETHERNET && DIO]
      inherited [NETDEVICES && NET_ETHERNET && DIO]
     }
     config LASI_82596 tristate {
      prompt "Lasi ethernet" if [NETDEVICES && NET_ETHERNET && GSC]
      depends on [GSC]
      inherited [NETDEVICES && NET_ETHERNET && GSC]
     }
     config SNI_82596 tristate {
      prompt "SNI RM ethernet" if [NETDEVICES && NET_ETHERNET && SNI_RM]
      depends on [NET_ETHERNET && SNI_RM]
      inherited [NETDEVICES && NET_ETHERNET && SNI_RM]
     }
     config KORINA tristate {
      prompt "Korina (IDT RC32434) Ethernet support" if [NETDEVICES && NET_ETHERNET && MIKROTIK_RB532]
      depends on [NET_ETHERNET && MIKROTIK_RB532]
      inherited [NETDEVICES && NET_ETHERNET && MIKROTIK_RB532]
     }
     config MIPS_JAZZ_SONIC tristate {
      prompt "MIPS JAZZ onboard SONIC Ethernet support" if [NETDEVICES && NET_ETHERNET && MACH_JAZZ]
      depends on [MACH_JAZZ]
      inherited [NETDEVICES && NET_ETHERNET && MACH_JAZZ]
     }
     config XTENSA_XT2000_SONIC tristate {
      prompt "Xtensa XT2000 onboard SONIC Ethernet support" if [NETDEVICES && NET_ETHERNET && XTENSA_PLATFORM_XT2000]
      depends on [XTENSA_PLATFORM_XT2000]
      inherited [NETDEVICES && NET_ETHERNET && XTENSA_PLATFORM_XT2000]
     }
     config MIPS_AU1X00_ENET boolean {
      prompt "MIPS AU1000 Ethernet support" if [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
      depends on [SOC_AU1X00]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
      inherited [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
     }
     config SGI_IOC3_ETH boolean {
      prompt "SGI IOC3 Ethernet" if [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
      depends on [PCI && SGI_IP27]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
      select MII if [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
      inherited [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
     }
     config MIPS_SIM_NET tristate {
      prompt "MIPS simulator Network device" if [NETDEVICES && NET_ETHERNET && MIPS_SIM]
      depends on [MIPS_SIM]
      inherited [NETDEVICES && NET_ETHERNET && MIPS_SIM]
     }
     config SGI_O2MACE_ETH tristate {
      prompt "SGI O2 MACE Fast Ethernet support" if [NETDEVICES && NET_ETHERNET && SGI_IP32="y"]
      depends on [SGI_IP32="y"]
      inherited [NETDEVICES && NET_ETHERNET && SGI_IP32="y"]
     }
     config STNIC tristate {
      prompt "National DP83902AV  support" if [NETDEVICES && NET_ETHERNET && SUPERH]
      depends on [SUPERH]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SUPERH]
      inherited [NETDEVICES && NET_ETHERNET && SUPERH]
     }
     config SH_ETH tristate {
      prompt "Renesas SuperH Ethernet support" if [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
      depends on [SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
      select MII if [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
      select MDIO_BITBANG if [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
      inherited [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
     }
     config SUNLANCE tristate {
      prompt "Sun LANCE support" if [NETDEVICES && NET_ETHERNET && SBUS]
      depends on [SBUS]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SBUS]
      inherited [NETDEVICES && NET_ETHERNET && SBUS]
     }
     config HAPPYMEAL tristate {
      prompt "Sun Happy Meal 10/100baseT support" if [NETDEVICES && NET_ETHERNET && (SBUS || PCI)]
      depends on [SBUS || PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (SBUS || PCI)]
      inherited [NETDEVICES && NET_ETHERNET && (SBUS || PCI)]
     }
     config SUNBMAC tristate {
      prompt "Sun BigMAC 10/100baseT support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && SBUS && EXPERIMENTAL]
      depends on [SBUS && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SBUS && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && SBUS && EXPERIMENTAL]
     }
     config SUNQE tristate {
      prompt "Sun QuadEthernet support" if [NETDEVICES && NET_ETHERNET && SBUS]
      depends on [SBUS]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SBUS]
      inherited [NETDEVICES && NET_ETHERNET && SBUS]
     }
     config SUNGEM tristate {
      prompt "Sun GEM support" if [NETDEVICES && NET_ETHERNET && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PCI]
      inherited [NETDEVICES && NET_ETHERNET && PCI]
     }
     config CASSINI tristate {
      prompt "Sun Cassini support" if [NETDEVICES && NET_ETHERNET && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PCI]
      inherited [NETDEVICES && NET_ETHERNET && PCI]
     }
     config SUNVNET tristate {
      prompt "Sun Virtual Network support" if [NETDEVICES && NET_ETHERNET && SUN_LDOMS]
      depends on [SUN_LDOMS]
      inherited [NETDEVICES && NET_ETHERNET && SUN_LDOMS]
     }
     config NET_VENDOR_3COM boolean {
      prompt "3COM cards" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA || PCI)]
      depends on [ISA || EISA || MCA || PCI]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA || PCI)]
      config EL1 tristate {
       prompt "3c501 \"EtherLink\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
       depends on [NET_VENDOR_3COM && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
      }
      config EL2 tristate {
       prompt "3c503 \"EtherLink II\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
       depends on [NET_VENDOR_3COM && ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
      }
      config ELPLUS tristate {
       prompt "3c505 \"EtherLink Plus\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && ISA_DMA_API]
       depends on [NET_VENDOR_3COM && ISA && ISA_DMA_API]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && ISA_DMA_API]
      }
      config EL16 tristate {
       prompt "3c507 \"EtherLink 16\" support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && EXPERIMENTAL]
       depends on [NET_VENDOR_3COM && ISA && EXPERIMENTAL]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && EXPERIMENTAL]
      }
      config EL3 tristate {
       prompt "3c509/3c529 (MCA)/3c579 \"EtherLink III\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA || MCA)]
       depends on [NET_VENDOR_3COM && (ISA || EISA || MCA)]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA || MCA)]
      }
      config 3C515 tristate {
       prompt "3c515 ISA \"Fast EtherLink\"" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
       depends on [NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
      }
      config ELMC tristate {
       prompt "3c523 \"EtherLink/MC\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA_LEGACY]
       depends on [NET_VENDOR_3COM && MCA_LEGACY]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA_LEGACY]
      }
      config ELMC_II tristate {
       prompt "3c527 \"EtherLink/MC 32\" support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA && MCA_LEGACY]
       depends on [NET_VENDOR_3COM && MCA && MCA_LEGACY]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA && MCA_LEGACY]
      }
      config VORTEX tristate {
       prompt "3c590/3c900 series (592/595/597) \"Vortex/Boomerang\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (PCI || EISA)]
       depends on [NET_VENDOR_3COM && (PCI || EISA)]
       select MII if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (PCI || EISA)]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (PCI || EISA)]
      }
      config TYPHOON tristate {
       prompt "3cr990 series \"Typhoon\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && PCI]
       depends on [NET_VENDOR_3COM && PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && PCI]
      }
     }
     config LANCE tristate {
      prompt "AMD LANCE and PCnet (AT1500 and NE2100) support" if [NETDEVICES && NET_ETHERNET && ISA && ISA_DMA_API]
      depends on [ISA && ISA_DMA_API]
      inherited [NETDEVICES && NET_ETHERNET && ISA && ISA_DMA_API]
     }
     config NET_VENDOR_SMC boolean {
      prompt "Western Digital/SMC cards" if [NETDEVICES && NET_ETHERNET && (ISA || MCA || EISA || MAC)]
      depends on [ISA || MCA || EISA || MAC]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || MCA || EISA || MAC)]
      config WD80x3 tristate {
       prompt "WD80*3 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
       depends on [NET_VENDOR_SMC && ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
      }
      config ULTRAMCA tristate {
       prompt "SMC Ultra MCA support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && MCA]
       depends on [NET_VENDOR_SMC && MCA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && MCA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && MCA]
      }
      config ULTRA tristate {
       prompt "SMC Ultra support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
       depends on [NET_VENDOR_SMC && ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
      }
      config ULTRA32 tristate {
       prompt "SMC Ultra32 EISA support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && EISA]
       depends on [NET_VENDOR_SMC && EISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && EISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && EISA]
      }
     }
     config BFIN_MAC tristate {
      prompt "Blackfin on-chip MAC support" if [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
      depends on [NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
      select MII if [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
      select BFIN_MAC_USE_L1 if [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537) && DMA_UNCACHED_NONE]
      inherited [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
      config BFIN_MAC_USE_L1 boolean {
       prompt "Use L1 memory for rx/tx packets" if [NETDEVICES && NET_ETHERNET && BFIN_MAC && (BF527 || BF537)]
       depends on [BFIN_MAC && (BF527 || BF537)]
       default [y] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && (BF527 || BF537)]
       inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC && (BF527 || BF537)]
      }
      config BFIN_TX_DESC_NUM integer {
       prompt "Number of transmit buffer packets" if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       depends on [BFIN_MAC]
       range [6 10] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && BFIN_MAC_USE_L1]
       range [10 100] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       default [10] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC]
      }
      config BFIN_RX_DESC_NUM integer {
       prompt "Number of receive buffer packets" if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       depends on [BFIN_MAC]
       range [20 100] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && BFIN_MAC_USE_L1]
       range [20 800] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       default [20] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC]
      }
      config BFIN_MAC_RMII boolean {
       prompt "RMII PHY Interface (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL]
       depends on [BFIN_MAC && EXPERIMENTAL]
       default [y] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL && BFIN527_EZKIT]
       default [n] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL && BFIN537_STAMP]
       inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL]
      }
     }
     config SMC9194 tristate {
      prompt "SMC 9194 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
      depends on [NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
     }
     config SMC91X tristate {
      prompt "SMC 91C9x/91C1xxx support" if [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || MIPS || BLACKFIN || MN10300)]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || MIPS || BLACKFIN || MN10300)]
      select MII if [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || MIPS || BLACKFIN || MN10300)]
      depends on [ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || MIPS || BLACKFIN || MN10300]
      inherited [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || MIPS || BLACKFIN || MN10300)]
     }
     config NET_NETX tristate {
      prompt "NetX Ethernet support" if [NETDEVICES && NET_ETHERNET && ARCH_NETX]
      select MII if [NETDEVICES && NET_ETHERNET && ARCH_NETX]
      depends on [ARCH_NETX]
      inherited [NETDEVICES && NET_ETHERNET && ARCH_NETX]
     }
     config TI_DAVINCI_EMAC tristate {
      prompt "TI DaVinci EMAC Support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_DAVINCI]
      depends on [ARM && ARCH_DAVINCI]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && ARM && ARCH_DAVINCI]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_DAVINCI]
     }
     config DM9000 tristate {
      prompt "DM9000 support" if [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
      depends on [ARM || BLACKFIN || MIPS]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
      select MII if [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
      inherited [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
      config DM9000_DEBUGLEVEL integer {
       prompt "DM9000 maximum debug level" if [NETDEVICES && NET_ETHERNET && DM9000]
       depends on [DM9000]
       default [4] if [NETDEVICES && NET_ETHERNET && DM9000]
       inherited [NETDEVICES && NET_ETHERNET && DM9000]
      }
      config DM9000_FORCE_SIMPLE_PHY_POLL boolean {
       prompt "Force simple NSR based PHY polling" if [NETDEVICES && NET_ETHERNET && DM9000]
       depends on [DM9000]
       inherited [NETDEVICES && NET_ETHERNET && DM9000]
      }
     }
     config ENC28J60 tristate {
      prompt "ENC28J60 support" if [NETDEVICES && EXPERIMENTAL && SPI && NET_ETHERNET]
      depends on [EXPERIMENTAL && SPI && NET_ETHERNET]
      select CRC32 if [NETDEVICES && EXPERIMENTAL && SPI && NET_ETHERNET]
      inherited [NETDEVICES && EXPERIMENTAL && SPI && NET_ETHERNET]
      config ENC28J60_WRITEVERIFY boolean {
       prompt "Enable write verify" if [NETDEVICES && NET_ETHERNET && ENC28J60]
       depends on [ENC28J60]
       inherited [NETDEVICES && NET_ETHERNET && ENC28J60]
      }
     }
     config ETHOC tristate {
      prompt "OpenCores 10/100 Mbps Ethernet MAC support" if [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
      depends on [NET_ETHERNET && HAS_IOMEM && HAS_DMA]
      select MII if [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
      select BITREVERSE if [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
      inherited [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
     }
     config SMC911X tristate {
      prompt "SMSC LAN911[5678] support" if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH)]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH)]
      select MII if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH)]
      depends on [ARM || SUPERH]
      inherited [NETDEVICES && NET_ETHERNET && (ARM || SUPERH)]
     }
     config SMSC911X tristate {
      prompt "SMSC LAN911x/LAN921x families embedded ethernet support" if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH || BLACKFIN)]
      depends on [ARM || SUPERH || BLACKFIN]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH || BLACKFIN)]
      select MII if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH || BLACKFIN)]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH || BLACKFIN)]
      inherited [NETDEVICES && NET_ETHERNET && (ARM || SUPERH || BLACKFIN)]
     }
     config NET_VENDOR_RACAL boolean {
      prompt "Racal-Interlan (Micom) NI cards" if [NETDEVICES && NET_ETHERNET && ISA]
      depends on [ISA]
      inherited [NETDEVICES && NET_ETHERNET && ISA]
      config NI5010 tristate {
       prompt "NI5010 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
       depends on [NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
      }
      config NI52 tristate {
       prompt "NI5210 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA]
       depends on [NET_VENDOR_RACAL && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA]
      }
      config NI65 tristate {
       prompt "NI6510 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && ISA_DMA_API]
       depends on [NET_VENDOR_RACAL && ISA && ISA_DMA_API]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && ISA_DMA_API]
      }
     }
     config DNET tristate {
      prompt "Dave ethernet support (DNET)" if [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
      depends on [NET_ETHERNET && HAS_IOMEM]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
      inherited [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
     }
     menuconfig NET_TULIP boolean {
      prompt "\"Tulip\" family network device support" if [NETDEVICES && NET_ETHERNET && (PCI || EISA || CARDBUS)]
      depends on [PCI || EISA || CARDBUS]
      inherited [NETDEVICES && NET_ETHERNET && (PCI || EISA || CARDBUS)]
      if [NETDEVICES && NET_ETHERNET && NET_TULIP] {
       config DE2104X tristate {
        prompt "Early DECchip Tulip (dc2104x) PCI support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI && EXPERIMENTAL]
        depends on [PCI && EXPERIMENTAL]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI && EXPERIMENTAL]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI && EXPERIMENTAL]
        config DE2104X_DSL integer {
         prompt "Descriptor Skip Length in 32 bit longwords" if [NETDEVICES && NET_ETHERNET && NET_TULIP && DE2104X]
         depends on [DE2104X]
         range [0 31] if [NETDEVICES && NET_ETHERNET && NET_TULIP && DE2104X]
         default [0] if [NETDEVICES && NET_ETHERNET && NET_TULIP && DE2104X]
         inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && DE2104X]
        }
       }
       config TULIP tristate {
        prompt "DECchip Tulip (dc2114x) PCI support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        depends on [PCI]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        config TULIP_MWI boolean {
         prompt "New bus configuration (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP && EXPERIMENTAL]
         depends on [TULIP && EXPERIMENTAL]
         inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP && EXPERIMENTAL]
        }
        config TULIP_MMIO boolean {
         prompt "Use PCI shared mem for NIC registers" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
         depends on [TULIP]
         inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
        }
        config TULIP_NAPI boolean {
         prompt "Use RX polling (NAPI)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
         depends on [TULIP]
         inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
         config TULIP_NAPI_HW_MITIGATION boolean {
          prompt "Use Interrupt Mitigation" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP_NAPI]
          depends on [TULIP_NAPI]
          inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP_NAPI]
         }
        }
       }
       config DE4X5 tristate {
        prompt "Generic DECchip & DIGITAL EtherWORKS PCI/EISA" if [NETDEVICES && NET_ETHERNET && NET_TULIP && (PCI || EISA)]
        depends on [PCI || EISA]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && (PCI || EISA)]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && (PCI || EISA)]
       }
       config WINBOND_840 tristate {
        prompt "Winbond W89c840 Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        depends on [PCI]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        select MII if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       }
       config DM9102 tristate {
        prompt "Davicom DM910x/DM980x support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        depends on [PCI]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       }
       config ULI526X tristate {
        prompt "ULi M526x controller support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        depends on [PCI]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       }
       config PCMCIA_XIRCOM tristate {
        prompt "Xircom CardBus support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && CARDBUS]
        depends on [CARDBUS]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && CARDBUS]
       }
      }
     }
     config AT1700 tristate {
      prompt "AT1700/1720 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
      depends on [(ISA || MCA_LEGACY) && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
     }
     config DEPCA tristate {
      prompt "DEPCA, DE10x, DE200, DE201, DE202, DE422 support" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA)]
      depends on [ISA || EISA || MCA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA)]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA)]
     }
     config HP100 tristate {
      prompt "HP 10/100VG PCLAN (ISA, EISA, PCI) support" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
      depends on [ISA || EISA || PCI]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
     }
     config NET_ISA boolean {
      prompt "Other ISA cards" if [NETDEVICES && NET_ETHERNET && ISA]
      depends on [ISA]
      inherited [NETDEVICES && NET_ETHERNET && ISA]
      config E2100 tristate {
       prompt "Cabletron E21xx support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config EWRK3 tristate {
       prompt "EtherWORKS 3 (DE203, DE204, DE205) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config EEXPRESS tristate {
       prompt "EtherExpress 16 support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config EEXPRESS_PRO tristate {
       prompt "EtherExpressPro support/EtherExpress 10 (i82595) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config HPLAN_PLUS tristate {
       prompt "HP PCLAN+ (27247B and 27252A) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config HPLAN tristate {
       prompt "HP PCLAN (27245 and other 27xxx series) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config LP486E tristate {
       prompt "LP486E on board Ethernet" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config ETH16I tristate {
       prompt "ICL EtherTeam 16i/32 support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
     }
     config NE2000 tristate {
      prompt "NE2000/NE1000 support" if [NETDEVICES && NET_ETHERNET && (NET_ISA || Q40 && m && <choice> || M32R || MACH_TX49XX)]
      depends on [NET_ISA || Q40 && m || M32R || MACH_TX49XX]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (NET_ISA || Q40 && m && <choice> || M32R || MACH_TX49XX)]
      inherited [NETDEVICES && NET_ETHERNET && (NET_ISA || Q40 && m && <choice> || M32R || MACH_TX49XX)]
     }
     config ZNET tristate {
      prompt "Zenith Z-Note support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL && ISA_DMA_API]
      depends on [NET_ISA && EXPERIMENTAL && ISA_DMA_API]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL && ISA_DMA_API]
     }
     config SEEQ8005 tristate {
      prompt "SEEQ8005 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL]
      depends on [NET_ISA && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL]
     }
     config NE2_MCA tristate {
      prompt "NE/2 (ne2000 MCA version) support" if [NETDEVICES && NET_ETHERNET && MCA_LEGACY]
      depends on [MCA_LEGACY]
      select CRC32 if [NETDEVICES && NET_ETHERNET && MCA_LEGACY]
      inherited [NETDEVICES && NET_ETHERNET && MCA_LEGACY]
     }
     config IBMLANA tristate {
      prompt "IBM LAN Adapter/A support" if [NETDEVICES && NET_ETHERNET && MCA]
      depends on [MCA]
      inherited [NETDEVICES && NET_ETHERNET && MCA]
     }
     config IBMVETH tristate {
      prompt "IBM LAN Virtual Ethernet support" if [NETDEVICES && NET_ETHERNET && PPC_PSERIES]
      depends on [PPC_PSERIES]
      inherited [NETDEVICES && NET_ETHERNET && PPC_PSERIES]
     }
     config IBM_NEW_EMAC tristate {
      prompt "IBM EMAC Ethernet support" if [NETDEVICES && NET_ETHERNET && PPC_DCR]
      depends on [PPC_DCR]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_DCR]
      inherited [NETDEVICES && NET_ETHERNET && PPC_DCR]
      config IBM_NEW_EMAC_RXB integer {
       prompt "Number of receive buffers" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [128] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
      config IBM_NEW_EMAC_TXB integer {
       prompt "Number of transmit buffers" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [64] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
      config IBM_NEW_EMAC_POLL_WEIGHT integer {
       prompt "MAL NAPI polling weight" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [32] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
      config IBM_NEW_EMAC_RX_COPY_THRESHOLD integer {
       prompt "RX skb copy threshold (bytes)" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [256] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
      config IBM_NEW_EMAC_RX_SKB_HEADROOM integer {
       prompt "Additional RX skb headroom (bytes)" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [0] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
      config IBM_NEW_EMAC_DEBUG boolean {
       prompt "Debugging" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [n] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
     }
     config IBM_NEW_EMAC_ZMII boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config IBM_NEW_EMAC_RGMII boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config IBM_NEW_EMAC_TAH boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config IBM_NEW_EMAC_EMAC4 boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config IBM_NEW_EMAC_NO_FLOW_CTRL boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config IBM_NEW_EMAC_MAL_CLR_ICINTSTAT boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config IBM_NEW_EMAC_MAL_COMMON_ERR boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config NET_PCI boolean {
      prompt "EISA, VLB, PCI and on board controllers" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
      depends on [ISA || EISA || PCI]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
      config PCNET32 tristate {
       prompt "AMD PCnet32 PCI support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      }
      config AMD8111_ETH tristate {
       prompt "AMD 8111 (new PCI lance) support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      }
      config ADAPTEC_STARFIRE tristate {
       prompt "Adaptec Starfire/DuraLAN support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      }
      config AC3200 tristate {
       prompt "Ansel Communications EISA 3200 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
       depends on [NET_PCI && (ISA || EISA) && EXPERIMENTAL]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
       inherited [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
      }
      config APRICOT tristate {
       prompt "Apricot Xen-II on board Ethernet" if [NETDEVICES && NET_ETHERNET && NET_PCI && ISA]
       depends on [NET_PCI && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_PCI && ISA]
      }
     }
     config B44 tristate {
      prompt "Broadcom 440x/47xx ethernet support" if [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE && HAS_DMA]
      depends on [SSB_POSSIBLE && HAS_DMA]
      select SSB if [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE && HAS_DMA]
      select MII if [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE && HAS_DMA]
      inherited [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE && HAS_DMA]
      config B44_PCI_AUTOSELECT boolean {
       depends on [B44 && SSB_PCIHOST_POSSIBLE]
       select SSB_PCIHOST if [NETDEVICES && NET_ETHERNET && B44 && SSB_PCIHOST_POSSIBLE]
       default [y] if [NETDEVICES && NET_ETHERNET && B44 && SSB_PCIHOST_POSSIBLE]
       inherited [NETDEVICES && NET_ETHERNET && B44 && SSB_PCIHOST_POSSIBLE]
      }
      config B44_PCICORE_AUTOSELECT boolean {
       depends on [B44 && SSB_DRIVER_PCICORE_POSSIBLE]
       select SSB_DRIVER_PCICORE if [NETDEVICES && NET_ETHERNET && B44 && SSB_DRIVER_PCICORE_POSSIBLE]
       default [y] if [NETDEVICES && NET_ETHERNET && B44 && SSB_DRIVER_PCICORE_POSSIBLE]
       inherited [NETDEVICES && NET_ETHERNET && B44 && SSB_DRIVER_PCICORE_POSSIBLE]
      }
      config B44_PCI boolean {
       depends on [B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT]
       default [y] if [NETDEVICES && NET_ETHERNET && B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT]
       inherited [NETDEVICES && NET_ETHERNET && B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT]
      }
     }
     config FORCEDETH tristate {
      prompt "nForce Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      config FORCEDETH_NAPI boolean {
       prompt "Use Rx Polling (NAPI) (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && FORCEDETH && EXPERIMENTAL]
       depends on [FORCEDETH && EXPERIMENTAL]
       inherited [NETDEVICES && NET_ETHERNET && FORCEDETH && EXPERIMENTAL]
      }
     }
     config CS89x0 tristate {
      prompt "CS89x0 support" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS)]
      depends on [NET_ETHERNET && (ISA || EISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS)]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS)]
      config CS89x0_NONISA_IRQ boolean {
       default [y] if [NETDEVICES && NET_ETHERNET && CS89x0 && (MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS)]
       depends on [CS89x0]
       depends on [MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS]
       inherited [NETDEVICES && NET_ETHERNET && CS89x0 && (MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS)]
      }
     }
     config TC35815 tristate {
      prompt "TOSHIBA TC35815 Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS]
      depends on [NET_PCI && PCI && MIPS]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS]
     }
     config E100 tristate {
      prompt "Intel(R) PRO/100+ support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config LNE390 tristate {
      prompt "Mylex EISA LNE390A/B support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      depends on [NET_PCI && EISA && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     }
     config FEALNX tristate {
      prompt "Myson MTD-8xx PCI Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config NATSEMI tristate {
      prompt "National Semiconductor DP8381x series PCI Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config NE2K_PCI tristate {
      prompt "PCI NE2000 and clones support (see help)" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config NE3210 tristate {
      prompt "Novell/Eagle/Microdyne NE3210 EISA support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      depends on [NET_PCI && EISA && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     }
     config ES3210 tristate {
      prompt "Racal-Interlan EISA ES3210 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      depends on [NET_PCI && EISA && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     }
     config 8139CP tristate {
      prompt "RealTek RTL-8139 C+ PCI Fast Ethernet Adapter support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
      depends on [NET_PCI && PCI && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
     }
     config 8139TOO tristate {
      prompt "RealTek RTL-8129/8130/8139 PCI Fast Ethernet Adapter support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      config 8139TOO_PIO boolean {
       prompt "Use PIO instead of MMIO" if [NETDEVICES && NET_ETHERNET && 8139TOO]
       default [y] if [NETDEVICES && NET_ETHERNET && 8139TOO]
       depends on [8139TOO]
       inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
      }
      config 8139TOO_TUNE_TWISTER boolean {
       prompt "Support for uncommon RTL-8139 rev. K (automatic channel equalization)" if [NETDEVICES && NET_ETHERNET && 8139TOO]
       depends on [8139TOO]
       inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
      }
      config 8139TOO_8129 boolean {
       prompt "Support for older RTL-8129/8130 boards" if [NETDEVICES && NET_ETHERNET && 8139TOO]
       depends on [8139TOO]
       inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
      }
      config 8139_OLD_RX_RESET boolean {
       prompt "Use older RX-reset method" if [NETDEVICES && NET_ETHERNET && 8139TOO]
       depends on [8139TOO]
       inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
      }
     }
     config R6040 tristate {
      prompt "RDC R6040 Fast Ethernet Adapter support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config SIS900 tristate {
      prompt "SiS 900/7016 PCI Fast Ethernet Adapter support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config EPIC100 tristate {
      prompt "SMC EtherPower II" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config SMSC9420 tristate {
      prompt "SMSC LAN9420 PCI ethernet adapter support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select SMSC_PHY if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config SUNDANCE tristate {
      prompt "Sundance Alta support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      config SUNDANCE_MMIO boolean {
       prompt "Use MMIO instead of PIO" if [NETDEVICES && NET_ETHERNET && SUNDANCE]
       depends on [SUNDANCE]
       inherited [NETDEVICES && NET_ETHERNET && SUNDANCE]
      }
     }
     config TLAN tristate {
      prompt "TI ThunderLAN support" if [NETDEVICES && NET_ETHERNET && NET_PCI && (PCI || EISA)]
      depends on [NET_PCI && (PCI || EISA)]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && (PCI || EISA)]
     }
     config KS8842 tristate {
      prompt "Micrel KSZ8842" if [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
      depends on [HAS_IOMEM]
      inherited [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
     }
     config KS8851 tristate {
      prompt "Micrel KS8851 SPI" if [NETDEVICES && NET_ETHERNET && SPI]
      depends on [SPI]
      select MII if [NETDEVICES && NET_ETHERNET && SPI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SPI]
      inherited [NETDEVICES && NET_ETHERNET && SPI]
     }
     config KS8851_MLL tristate {
      prompt "Micrel KS8851 MLL" if [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
      depends on [HAS_IOMEM]
      select MII if [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
      inherited [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
     }
     config VIA_RHINE tristate {
      prompt "VIA Rhine support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      config VIA_RHINE_MMIO boolean {
       prompt "Use MMIO instead of PIO" if [NETDEVICES && NET_ETHERNET && VIA_RHINE]
       depends on [VIA_RHINE]
       inherited [NETDEVICES && NET_ETHERNET && VIA_RHINE]
      }
     }
     config SC92031 tristate {
      prompt "Silan SC92031 PCI Fast Ethernet Adapter driver (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
      depends on [NET_PCI && PCI && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
     }
     config CPMAC tristate {
      prompt "TI AR7 CPMAC Ethernet support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
      depends on [NET_ETHERNET && EXPERIMENTAL && AR7]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
      inherited [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
     }
     config NET_POCKET boolean {
      prompt "Pocket and portable adapters" if [NETDEVICES && NET_ETHERNET && PARPORT]
      depends on [PARPORT]
      inherited [NETDEVICES && NET_ETHERNET && PARPORT]
      config ATP tristate {
       prompt "AT-LAN-TEC/RealTek pocket adapter support" if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT && X86]
       depends on [NET_POCKET && PARPORT && X86]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT && X86]
       inherited [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT && X86]
      }
      config DE600 tristate {
       prompt "D-Link DE600 pocket adapter support" if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
       depends on [NET_POCKET && PARPORT]
       inherited [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
      }
      config DE620 tristate {
       prompt "D-Link DE620 pocket adapter support" if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
       depends on [NET_POCKET && PARPORT]
       inherited [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
      }
     }
     config SGISEEQ tristate {
      prompt "SGI Seeq ethernet controller support" if [NETDEVICES && NET_ETHERNET && SGI_HAS_SEEQ]
      depends on [SGI_HAS_SEEQ]
      inherited [NETDEVICES && NET_ETHERNET && SGI_HAS_SEEQ]
     }
     config DECLANCE tristate {
      prompt "DEC LANCE ethernet controller support" if [NETDEVICES && NET_ETHERNET && MACH_DECSTATION]
      depends on [MACH_DECSTATION]
      select CRC32 if [NETDEVICES && NET_ETHERNET && MACH_DECSTATION]
      inherited [NETDEVICES && NET_ETHERNET && MACH_DECSTATION]
     }
     config 68360_ENET boolean {
      prompt "Motorola 68360 ethernet controller" if [NETDEVICES && NET_ETHERNET && M68360]
      depends on [M68360]
      inherited [NETDEVICES && NET_ETHERNET && M68360]
     }
     config FEC boolean {
      prompt "FEC ethernet controller (of ColdFire and some i.MX CPUs)" if [NETDEVICES && NET_ETHERNET && (M523x || M527x || M5272 || M528x || M520x || M532x || MACH_MX27 || ARCH_MX35 || ARCH_MX25)]
      depends on [M523x || M527x || M5272 || M528x || M520x || M532x || MACH_MX27 || ARCH_MX35 || ARCH_MX25]
      inherited [NETDEVICES && NET_ETHERNET && (M523x || M527x || M5272 || M528x || M520x || M532x || MACH_MX27 || ARCH_MX35 || ARCH_MX25)]
      config FEC2 boolean {
       prompt "Second FEC ethernet controller (on some ColdFire CPUs)" if [NETDEVICES && NET_ETHERNET && FEC]
       depends on [FEC]
       inherited [NETDEVICES && NET_ETHERNET && FEC]
      }
     }
     config FEC_MPC52xx tristate {
      prompt "MPC52xx FEC driver" if [NETDEVICES && NET_ETHERNET && PPC_MPC52xx && PPC_BESTCOMM]
      depends on [PPC_MPC52xx && PPC_BESTCOMM]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_MPC52xx && PPC_BESTCOMM]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && PPC_MPC52xx && PPC_BESTCOMM]
      select PPC_BESTCOMM_FEC if [NETDEVICES && NET_ETHERNET && PPC_MPC52xx && PPC_BESTCOMM]
      inherited [NETDEVICES && NET_ETHERNET && PPC_MPC52xx && PPC_BESTCOMM]
      config FEC_MPC52xx_MDIO boolean {
       prompt "MPC52xx FEC MDIO bus driver" if [NETDEVICES && NET_ETHERNET && FEC_MPC52xx]
       depends on [FEC_MPC52xx]
       default [y] if [NETDEVICES && NET_ETHERNET && FEC_MPC52xx]
       inherited [NETDEVICES && NET_ETHERNET && FEC_MPC52xx]
      }
     }
     config NE_H8300 tristate {
      prompt "NE2000 compatible support for H8/300" if [NETDEVICES && NET_ETHERNET && H8300]
      depends on [H8300]
      inherited [NETDEVICES && NET_ETHERNET && H8300]
     }
     config ATL2 tristate {
      prompt "Atheros L2 Fast Ethernet support" if [NETDEVICES && NET_ETHERNET && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && PCI]
      inherited [NETDEVICES && NET_ETHERNET && PCI]
     }
     config XILINX_EMACLITE tristate {
      prompt "Xilinx 10/100 Ethernet Lite support" if [NETDEVICES && NET_ETHERNET && (PPC32 || MICROBLAZE)]
      depends on [PPC32 || MICROBLAZE]
      inherited [NETDEVICES && NET_ETHERNET && (PPC32 || MICROBLAZE)]
     }
     config BCM63XX_ENET tristate {
      prompt "Broadcom 63xx internal mac support" if [NETDEVICES && NET_ETHERNET && BCM63XX]
      depends on [BCM63XX]
      select MII if [NETDEVICES && NET_ETHERNET && BCM63XX]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && BCM63XX]
      inherited [NETDEVICES && NET_ETHERNET && BCM63XX]
     }
     config FS_ENET tristate {
      prompt "Freescale Ethernet Driver" if [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
      depends on [CPM1 || CPM2]
      select MII if [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
      inherited [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
      config FS_ENET_HAS_SCC boolean {
       prompt "Chip has an SCC usable for ethernet" if [NETDEVICES && NET_ETHERNET && FS_ENET && (CPM1 || CPM2)]
       depends on [FS_ENET && (CPM1 || CPM2)]
       default [y] if [NETDEVICES && NET_ETHERNET && FS_ENET && (CPM1 || CPM2)]
       inherited [NETDEVICES && NET_ETHERNET && FS_ENET && (CPM1 || CPM2)]
      }
      config FS_ENET_HAS_FCC boolean {
       prompt "Chip has an FCC usable for ethernet" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
       depends on [FS_ENET && CPM2]
       default [y] if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
       inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
      }
      config FS_ENET_HAS_FEC boolean {
       prompt "Chip has an FEC usable for ethernet" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
       depends on [FS_ENET && CPM1]
       select FS_ENET_MDIO_FEC if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
       default [y] if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
       inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
      }
      config FS_ENET_MDIO_FEC tristate {
       prompt "MDIO driver for FEC" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
       depends on [FS_ENET && CPM1]
       inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
      }
      config FS_ENET_MDIO_FCC tristate {
       prompt "MDIO driver for FCC" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
       depends on [FS_ENET && CPM2]
       select MDIO_BITBANG if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
       inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
      }
     }
    }
   }
   menuconfig NETDEV_1000 boolean {
    prompt "Ethernet (1000 Mbit)" if [NETDEVICES && !UML]
    depends on [!UML]
    default [y] if [NETDEVICES && !UML]
    inherited [NETDEVICES && !UML]
    if [NETDEVICES && NETDEV_1000] {
     config ACENIC tristate {
      prompt "Alteon AceNIC/3Com 3C985/NetGear GA620 Gigabit support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
      config ACENIC_OMIT_TIGON_I boolean {
       prompt "Omit support for old Tigon I based AceNICs" if [NETDEVICES && NETDEV_1000 && ACENIC]
       depends on [ACENIC]
       inherited [NETDEVICES && NETDEV_1000 && ACENIC]
      }
     }
     config DL2K tristate {
      prompt "DL2000/TC902x-based Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config E1000 tristate {
      prompt "Intel(R) PRO/1000 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config E1000E tristate {
      prompt "Intel(R) PRO/1000 PCI-Express Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI && (!SPARC32 || BROKEN)]
      depends on [PCI && (!SPARC32 || BROKEN)]
      inherited [NETDEVICES && NETDEV_1000 && PCI && (!SPARC32 || BROKEN)]
     }
     config IP1000 tristate {
      prompt "IP1000 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      select MII if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     }
     config IGB tristate {
      prompt "Intel(R) 82575/82576 PCI-Express Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
      config IGB_DCA boolean {
       prompt "Direct Cache Access (DCA) Support" if [NETDEVICES && NETDEV_1000 && IGB && DCA && (IGB!="y" || DCA!="m")]
       default [y] if [NETDEVICES && NETDEV_1000 && IGB && DCA && (IGB!="y" || DCA!="m")]
       depends on [IGB && DCA && !(IGB="y" && DCA="m")]
       inherited [NETDEVICES && NETDEV_1000 && IGB && DCA && (IGB!="y" || DCA!="m")]
      }
     }
     config IGBVF tristate {
      prompt "Intel(R) 82576 Virtual Function Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config ENP2611_MSF_NET tristate {
      prompt "Radisys ENP2611 MSF network interface support" if [NETDEVICES && NETDEV_1000 && ARCH_ENP2611]
      depends on [ARCH_ENP2611]
      inherited [NETDEVICES && NETDEV_1000 && ARCH_ENP2611]
     }
     config MYRI_SBUS tristate {
      prompt "MyriCOM Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && SBUS]
      depends on [SBUS]
      inherited [NETDEVICES && NETDEV_1000 && SBUS]
     }
     config NS83820 tristate {
      prompt "National Semiconductor DP83820 support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config HAMACHI tristate {
      prompt "Packet Engines Hamachi GNIC-II support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select MII if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config YELLOWFIN tristate {
      prompt "Packet Engines Yellowfin Gigabit-NIC support (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     }
     config R8169 tristate {
      prompt "Realtek 8169 gigabit ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      select MII if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
      config R8169_VLAN boolean {
       prompt "VLAN support" if [NETDEVICES && NETDEV_1000 && R8169 && VLAN_8021Q]
       depends on [R8169 && VLAN_8021Q]
       inherited [NETDEVICES && NETDEV_1000 && R8169 && VLAN_8021Q]
      }
     }
     config SB1250_MAC tristate {
      prompt "SB1250 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && SIBYTE_SB1xxx_SOC]
      depends on [SIBYTE_SB1xxx_SOC]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && SIBYTE_SB1xxx_SOC]
      inherited [NETDEVICES && NETDEV_1000 && SIBYTE_SB1xxx_SOC]
     }
     config SIS190 tristate {
      prompt "SiS190/SiS191 gigabit ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      select MII if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config SKGE tristate {
      prompt "New SysKonnect GigaEthernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
      config SKGE_DEBUG boolean {
       prompt "Debugging interface" if [NETDEVICES && NETDEV_1000 && SKGE && DEBUG_FS]
       depends on [SKGE && DEBUG_FS]
       inherited [NETDEVICES && NETDEV_1000 && SKGE && DEBUG_FS]
      }
     }
     config SKY2 tristate {
      prompt "SysKonnect Yukon2 support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
      config SKY2_DEBUG boolean {
       prompt "Debugging interface" if [NETDEVICES && NETDEV_1000 && SKY2 && DEBUG_FS]
       depends on [SKY2 && DEBUG_FS]
       inherited [NETDEVICES && NETDEV_1000 && SKY2 && DEBUG_FS]
      }
     }
     config VIA_VELOCITY tristate {
      prompt "VIA Velocity support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      select CRC_CCITT if [NETDEVICES && NETDEV_1000 && PCI]
      select MII if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config TIGON3 tristate {
      prompt "Broadcom Tigon3 support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config BNX2 tristate {
      prompt "Broadcom NetXtremeII support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      select FW_LOADER if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config CNIC tristate {
      prompt "Broadcom CNIC support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select BNX2 if [NETDEVICES && NETDEV_1000 && PCI]
      select UIO if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config SPIDER_NET tristate {
      prompt "Spider Gigabit Ethernet driver" if [NETDEVICES && NETDEV_1000 && PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
      depends on [PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
      select FW_LOADER if [NETDEVICES && NETDEV_1000 && PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
      inherited [NETDEVICES && NETDEV_1000 && PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
     }
     config TSI108_ETH tristate {
      prompt "Tundra TSI108 gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && TSI108_BRIDGE]
      depends on [TSI108_BRIDGE]
      inherited [NETDEVICES && NETDEV_1000 && TSI108_BRIDGE]
     }
     config GELIC_NET tristate {
      prompt "PS3 Gigabit Ethernet driver" if [NETDEVICES && NETDEV_1000 && PPC_PS3]
      depends on [PPC_PS3]
      select PS3_SYS_MANAGER if [NETDEVICES && NETDEV_1000 && PPC_PS3]
      inherited [NETDEVICES && NETDEV_1000 && PPC_PS3]
      config GELIC_WIRELESS boolean {
       prompt "PS3 Wireless support" if [NETDEVICES && NETDEV_1000 && GELIC_NET]
       depends on [GELIC_NET]
       select WIRELESS_EXT if [NETDEVICES && NETDEV_1000 && GELIC_NET]
       inherited [NETDEVICES && NETDEV_1000 && GELIC_NET]
       config GELIC_WIRELESS_OLD_PSK_INTERFACE boolean {
        prompt "PS3 Wireless private PSK interface (OBSOLETE)" if [NETDEVICES && NETDEV_1000 && GELIC_WIRELESS]
        depends on [GELIC_WIRELESS]
        inherited [NETDEVICES && NETDEV_1000 && GELIC_WIRELESS]
       }
      }
     }
     config FSL_PQ_MDIO tristate {
      prompt "Freescale PQ MDIO" if [NETDEVICES && NETDEV_1000 && FSL_SOC]
      depends on [FSL_SOC]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && FSL_SOC]
      inherited [NETDEVICES && NETDEV_1000 && FSL_SOC]
     }
     config GIANFAR tristate {
      prompt "Gianfar Ethernet" if [NETDEVICES && NETDEV_1000 && FSL_SOC]
      depends on [FSL_SOC]
      select FSL_PQ_MDIO if [NETDEVICES && NETDEV_1000 && FSL_SOC]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && FSL_SOC]
      select CRC32 if [NETDEVICES && NETDEV_1000 && FSL_SOC]
      inherited [NETDEVICES && NETDEV_1000 && FSL_SOC]
     }
     config UCC_GETH tristate {
      prompt "Freescale QE Gigabit Ethernet" if [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
      depends on [QUICC_ENGINE]
      select FSL_PQ_MDIO if [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
      inherited [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
      config UGETH_TX_ON_DEMAND boolean {
       prompt "Transmit on Demand support" if [NETDEVICES && NETDEV_1000 && UCC_GETH]
       depends on [UCC_GETH]
       inherited [NETDEVICES && NETDEV_1000 && UCC_GETH]
      }
     }
     config MV643XX_ETH tristate {
      prompt "Marvell Discovery (643XX) and Orion ethernet support" if [NETDEVICES && NETDEV_1000 && (MV64X60 || PPC32 || PLAT_ORION)]
      depends on [MV64X60 || PPC32 || PLAT_ORION]
      select INET_LRO if [NETDEVICES && NETDEV_1000 && (MV64X60 || PPC32 || PLAT_ORION)]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && (MV64X60 || PPC32 || PLAT_ORION)]
      inherited [NETDEVICES && NETDEV_1000 && (MV64X60 || PPC32 || PLAT_ORION)]
     }
     config XILINX_LL_TEMAC tristate {
      prompt "Xilinx LL TEMAC (LocalLink Tri-mode Ethernet MAC) driver" if [NETDEVICES && NETDEV_1000 && PPC_DCR_NATIVE]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && PPC_DCR_NATIVE]
      depends on [PPC_DCR_NATIVE]
      inherited [NETDEVICES && NETDEV_1000 && PPC_DCR_NATIVE]
     }
     config QLA3XXX tristate {
      prompt "QLogic QLA3XXX Network Driver Support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config ATL1 tristate {
      prompt "Atheros/Attansic L1 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      select MII if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config ATL1E tristate {
      prompt "Atheros L1E Gigabit Ethernet support (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      select MII if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     }
     config ATL1C tristate {
      prompt "Atheros L1C Gigabit Ethernet support (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      select MII if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     }
     config JME tristate {
      prompt "JMicron(R) PCI-Express Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      select MII if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config S6GMAC tristate {
      prompt "S6105 GMAC ethernet support" if [NETDEVICES && NETDEV_1000 && XTENSA_VARIANT_S6000]
      depends on [XTENSA_VARIANT_S6000]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && XTENSA_VARIANT_S6000]
      inherited [NETDEVICES && NETDEV_1000 && XTENSA_VARIANT_S6000]
     }
     config STMMAC_ETH tristate {
      prompt "STMicroelectronics 10/100/1000 Ethernet driver" if [NETDEV_1000 && NETDEVICES && CPU_SUBTYPE_ST40]
      select MII if [NETDEV_1000 && NETDEVICES && CPU_SUBTYPE_ST40]
      select PHYLIB if [NETDEV_1000 && NETDEVICES && CPU_SUBTYPE_ST40]
      depends on [NETDEVICES && CPU_SUBTYPE_ST40]
      inherited [NETDEV_1000 && NETDEVICES && CPU_SUBTYPE_ST40]
      if [NETDEVICES && NETDEV_1000 && STMMAC_ETH] {
       config STMMAC_DA boolean {
        prompt "STMMAC DMA arbitration scheme" if [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
        default [n] if [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
        inherited [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
       }
       config STMMAC_DUAL_MAC boolean {
        prompt "STMMAC: dual mac support (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && EXPERIMENTAL && STMMAC_ETH && !STMMAC_TIMER]
        default [n] if [NETDEVICES && NETDEV_1000 && EXPERIMENTAL && STMMAC_ETH && !STMMAC_TIMER]
        depends on [EXPERIMENTAL && STMMAC_ETH && !STMMAC_TIMER]
        inherited [NETDEVICES && NETDEV_1000 && EXPERIMENTAL && STMMAC_ETH && !STMMAC_TIMER]
       }
       config STMMAC_TIMER boolean {
        prompt "STMMAC Timer optimisation" if [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
        default [n] if [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
        inherited [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
        choice boolean {
         prompt "Select Timer device" if [NETDEVICES && NETDEV_1000 && STMMAC_ETH && STMMAC_TIMER]
         depends on [STMMAC_TIMER]
         config STMMAC_TMU_TIMER boolean {
          prompt "TMU channel 2" if [<choice> && CPU_SH4]
          depends on [CPU_SH4]
          inherited [<choice> && CPU_SH4]
         }
         config STMMAC_RTC_TIMER boolean {
          prompt "Real time clock" if [<choice> && RTC_CLASS]
          depends on [RTC_CLASS]
          inherited [<choice> && RTC_CLASS]
         }
        }
       }
      }
     }
    }
   }
   menuconfig NETDEV_10000 boolean {
    prompt "Ethernet (10000 Mbit)" if [NETDEVICES && !UML]
    depends on [!UML]
    default [y] if [NETDEVICES && !UML]
    inherited [NETDEVICES && !UML]
    if [NETDEVICES && NETDEV_10000] {
     config MDIO tristate {
      inherited [NETDEVICES && NETDEV_10000]
     }
     config CHELSIO_T1 tristate {
      prompt "Chelsio 10Gb Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_10000 && PCI]
      select MDIO if [NETDEVICES && NETDEV_10000 && PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
      config CHELSIO_T1_1G boolean {
       prompt "Chelsio gigabit Ethernet support" if [NETDEVICES && NETDEV_10000 && CHELSIO_T1]
       depends on [CHELSIO_T1]
       inherited [NETDEVICES && NETDEV_10000 && CHELSIO_T1]
      }
     }
     config CHELSIO_T3_DEPENDS tristate {
      depends on [PCI && INET]
      default [y] if [NETDEVICES && NETDEV_10000 && PCI && INET]
      inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
     }
     config CHELSIO_T3 tristate {
      prompt "Chelsio Communications T3 10Gb Ethernet support" if [NETDEVICES && NETDEV_10000 && CHELSIO_T3_DEPENDS]
      depends on [CHELSIO_T3_DEPENDS]
      select FW_LOADER if [NETDEVICES && NETDEV_10000 && CHELSIO_T3_DEPENDS]
      select MDIO if [NETDEVICES && NETDEV_10000 && CHELSIO_T3_DEPENDS]
      inherited [NETDEVICES && NETDEV_10000 && CHELSIO_T3_DEPENDS]
     }
     config EHEA tristate {
      prompt "eHEA Ethernet support" if [NETDEVICES && NETDEV_10000 && IBMEBUS && INET && SPARSEMEM]
      depends on [IBMEBUS && INET && SPARSEMEM]
      select INET_LRO if [NETDEVICES && NETDEV_10000 && IBMEBUS && INET && SPARSEMEM]
      inherited [NETDEVICES && NETDEV_10000 && IBMEBUS && INET && SPARSEMEM]
     }
     config ENIC tristate {
      prompt "Cisco 10G Ethernet NIC support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
      depends on [PCI && INET]
      select INET_LRO if [NETDEVICES && NETDEV_10000 && PCI && INET]
      inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
     }
     config IXGBE tristate {
      prompt "Intel(R) 10GbE PCI Express adapters support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
      depends on [PCI && INET]
      select MDIO if [NETDEVICES && NETDEV_10000 && PCI && INET]
      inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
      config IXGBE_DCA boolean {
       prompt "Direct Cache Access (DCA) Support" if [NETDEVICES && NETDEV_10000 && IXGBE && DCA && (IXGBE!="y" || DCA!="m")]
       default [y] if [NETDEVICES && NETDEV_10000 && IXGBE && DCA && (IXGBE!="y" || DCA!="m")]
       depends on [IXGBE && DCA && !(IXGBE="y" && DCA="m")]
       inherited [NETDEVICES && NETDEV_10000 && IXGBE && DCA && (IXGBE!="y" || DCA!="m")]
      }
      config IXGBE_DCB boolean {
       prompt "Data Center Bridging (DCB) Support" if [NETDEVICES && NETDEV_10000 && IXGBE && DCB]
       default [n] if [NETDEVICES && NETDEV_10000 && IXGBE && DCB]
       depends on [IXGBE && DCB]
       inherited [NETDEVICES && NETDEV_10000 && IXGBE && DCB]
      }
     }
     config IXGB tristate {
      prompt "Intel(R) PRO/10GbE support" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config S2IO tristate {
      prompt "S2IO 10Gbe XFrame NIC" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config VXGE tristate {
      prompt "Neterion X3100 Series 10GbE PCIe Server Adapter" if [NETDEVICES && NETDEV_10000 && PCI && INET]
      depends on [PCI && INET]
      inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
      config VXGE_DEBUG_TRACE_ALL boolean {
       prompt "Enabling All Debug trace statments in driver" if [NETDEVICES && NETDEV_10000 && VXGE]
       default [n] if [NETDEVICES && NETDEV_10000 && VXGE]
       depends on [VXGE]
       inherited [NETDEVICES && NETDEV_10000 && VXGE]
      }
     }
     config MYRI10GE tristate {
      prompt "Myricom Myri-10G Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
      depends on [PCI && INET]
      select FW_LOADER if [NETDEVICES && NETDEV_10000 && PCI && INET]
      select CRC32 if [NETDEVICES && NETDEV_10000 && PCI && INET]
      select INET_LRO if [NETDEVICES && NETDEV_10000 && PCI && INET]
      inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
      config MYRI10GE_DCA boolean {
       prompt "Direct Cache Access (DCA) Support" if [NETDEVICES && NETDEV_10000 && MYRI10GE && DCA && (MYRI10GE!="y" || DCA!="m")]
       default [y] if [NETDEVICES && NETDEV_10000 && MYRI10GE && DCA && (MYRI10GE!="y" || DCA!="m")]
       depends on [MYRI10GE && DCA && !(MYRI10GE="y" && DCA="m")]
       inherited [NETDEVICES && NETDEV_10000 && MYRI10GE && DCA && (MYRI10GE!="y" || DCA!="m")]
      }
     }
     config NETXEN_NIC tristate {
      prompt "NetXen Multi port (1/10) Gigabit Ethernet NIC" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config NIU tristate {
      prompt "Sun Neptune 10Gbit Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config PASEMI_MAC tristate {
      prompt "PA Semi 1/10Gbit MAC" if [NETDEVICES && NETDEV_10000 && PPC_PASEMI && PCI]
      depends on [PPC_PASEMI && PCI]
      select PHYLIB if [NETDEVICES && NETDEV_10000 && PPC_PASEMI && PCI]
      select INET_LRO if [NETDEVICES && NETDEV_10000 && PPC_PASEMI && PCI]
      inherited [NETDEVICES && NETDEV_10000 && PPC_PASEMI && PCI]
     }
     config MLX4_EN tristate {
      prompt "Mellanox Technologies 10Gbit Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
      depends on [PCI && INET]
      select MLX4_CORE if [NETDEVICES && NETDEV_10000 && PCI && INET]
      select INET_LRO if [NETDEVICES && NETDEV_10000 && PCI && INET]
      inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
     }
     config MLX4_CORE tristate {
      depends on [PCI]
      default [n] if [NETDEVICES && NETDEV_10000 && PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config MLX4_DEBUG boolean {
      prompt "Verbose debugging output" if [NETDEVICES && NETDEV_10000 && MLX4_CORE && EMBEDDED]
      depends on [MLX4_CORE]
      default [y] if [NETDEVICES && NETDEV_10000 && MLX4_CORE]
      inherited [NETDEVICES && NETDEV_10000 && MLX4_CORE]
     }
     config TEHUTI tristate {
      prompt "Tehuti Networks 10G Ethernet" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config BNX2X tristate {
      prompt "Broadcom NetXtremeII 10Gb support" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      select FW_LOADER if [NETDEVICES && NETDEV_10000 && PCI]
      select ZLIB_INFLATE if [NETDEVICES && NETDEV_10000 && PCI]
      select LIBCRC32C if [NETDEVICES && NETDEV_10000 && PCI]
      select MDIO if [NETDEVICES && NETDEV_10000 && PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config QLGE tristate {
      prompt "QLogic QLGE 10Gb Ethernet Driver Support" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config SFC tristate {
      prompt "Solarflare Solarstorm SFC4000 support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
      depends on [PCI && INET]
      select MDIO if [NETDEVICES && NETDEV_10000 && PCI && INET]
      select CRC32 if [NETDEVICES && NETDEV_10000 && PCI && INET]
      select I2C if [NETDEVICES && NETDEV_10000 && PCI && INET]
      select I2C_ALGOBIT if [NETDEVICES && NETDEV_10000 && PCI && INET]
      inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
      config SFC_MTD boolean {
       prompt "Solarflare Solarstorm SFC4000 flash MTD support" if [NETDEVICES && NETDEV_10000 && SFC && MTD && (SFC!="y" || MTD!="m")]
       depends on [SFC && MTD && !(SFC="y" && MTD="m")]
       default [y] if [NETDEVICES && NETDEV_10000 && SFC && MTD && (SFC!="y" || MTD!="m")]
       inherited [NETDEVICES && NETDEV_10000 && SFC && MTD && (SFC!="y" || MTD!="m")]
      }
     }
     config BE2NET tristate {
      prompt "ServerEngines' 10Gbps NIC - BladeEngine 2" if [NETDEVICES && NETDEV_10000 && PCI && INET]
      depends on [PCI && INET]
      inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
     }
    }
   }
   menuconfig TR tristate {
    prompt "Token Ring driver support" if [NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
    depends on [NETDEVICES && !UML]
    depends on [PCI || ISA || MCA || CCW]
    select LLC if [NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
    inherited [NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
    if [NETDEVICES && TR] {
     config IBMTR tristate {
      prompt "IBM Tropic chipset based adapter support" if [NETDEVICES && TR && (ISA || MCA)]
      depends on [ISA || MCA]
      inherited [NETDEVICES && TR && (ISA || MCA)]
     }
     config IBMOL tristate {
      prompt "IBM Olympic chipset PCI adapter support" if [NETDEVICES && TR && PCI]
      depends on [PCI]
      inherited [NETDEVICES && TR && PCI]
     }
     config IBMLS tristate {
      prompt "IBM Lanstreamer chipset PCI adapter support" if [NETDEVICES && TR && PCI && !64BIT]
      depends on [PCI && !64BIT]
      inherited [NETDEVICES && TR && PCI && !64BIT]
     }
     config 3C359 tristate {
      prompt "3Com 3C359 Token Link Velocity XL adapter support" if [NETDEVICES && TR && PCI]
      depends on [PCI]
      inherited [NETDEVICES && TR && PCI]
     }
     config TMS380TR tristate {
      prompt "Generic TMS380 Token Ring ISA/PCI adapter support" if [NETDEVICES && TR && (PCI || ISA && ISA_DMA_API || MCA)]
      depends on [PCI || ISA && ISA_DMA_API || MCA]
      select FW_LOADER if [NETDEVICES && TR && (PCI || ISA && ISA_DMA_API || MCA)]
      inherited [NETDEVICES && TR && (PCI || ISA && ISA_DMA_API || MCA)]
      config TMSPCI tristate {
       prompt "Generic TMS380 PCI support" if [NETDEVICES && TR && TMS380TR && PCI]
       depends on [TMS380TR && PCI]
       inherited [NETDEVICES && TR && TMS380TR && PCI]
      }
      config SKISA tristate {
       prompt "SysKonnect TR4/16 ISA support" if [NETDEVICES && TR && TMS380TR && ISA]
       depends on [TMS380TR && ISA]
       inherited [NETDEVICES && TR && TMS380TR && ISA]
      }
      config PROTEON tristate {
       prompt "Proteon ISA support" if [NETDEVICES && TR && TMS380TR && ISA]
       depends on [TMS380TR && ISA]
       inherited [NETDEVICES && TR && TMS380TR && ISA]
      }
      config ABYSS tristate {
       prompt "Madge Smart 16/4 PCI Mk2 support" if [NETDEVICES && TR && TMS380TR && PCI]
       depends on [TMS380TR && PCI]
       inherited [NETDEVICES && TR && TMS380TR && PCI]
      }
      config MADGEMC tristate {
       prompt "Madge Smart 16/4 Ringnode MicroChannel" if [NETDEVICES && TR && TMS380TR && MCA]
       depends on [TMS380TR && MCA]
       inherited [NETDEVICES && TR && TMS380TR && MCA]
      }
     }
     config SMCTR tristate {
      prompt "SMC ISA/MCA adapter support" if [NETDEVICES && TR && (ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
      depends on [(ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
      inherited [NETDEVICES && TR && (ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
     }
    }
   }
   menuconfig WLAN boolean {
    prompt "Wireless LAN" if [NETDEVICES && !S390]
    depends on [!S390]
    default [y] if [NETDEVICES && !S390]
    inherited [NETDEVICES && !S390]
    if [NETDEVICES && WLAN] {
     menuconfig WLAN_PRE80211 boolean {
      prompt "Wireless LAN (pre-802.11)" if [WLAN && NETDEVICES]
      depends on [NETDEVICES]
      inherited [WLAN && NETDEVICES]
      config STRIP tristate {
       prompt "STRIP (Metricom starmode radio IP)" if [NETDEVICES && WLAN && INET && WLAN_PRE80211]
       depends on [INET && WLAN_PRE80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && INET && WLAN_PRE80211]
       inherited [NETDEVICES && WLAN && INET && WLAN_PRE80211]
      }
      config ARLAN tristate {
       prompt "Aironet Arlan 655 & IC2200 DS support" if [NETDEVICES && WLAN && ISA && !64BIT && WLAN_PRE80211]
       depends on [ISA && !64BIT && WLAN_PRE80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && ISA && !64BIT && WLAN_PRE80211]
       inherited [NETDEVICES && WLAN && ISA && !64BIT && WLAN_PRE80211]
      }
      config WAVELAN tristate {
       prompt "AT&T/Lucent old WaveLAN & DEC RoamAbout DS ISA support" if [NETDEVICES && WLAN && ISA && WLAN_PRE80211]
       depends on [ISA && WLAN_PRE80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && ISA && WLAN_PRE80211]
       inherited [NETDEVICES && WLAN && ISA && WLAN_PRE80211]
      }
      config PCMCIA_WAVELAN tristate {
       prompt "AT&T/Lucent old WaveLAN Pcmcia wireless support" if [NETDEVICES && WLAN && PCMCIA && WLAN_PRE80211]
       depends on [PCMCIA && WLAN_PRE80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && PCMCIA && WLAN_PRE80211]
       inherited [NETDEVICES && WLAN && PCMCIA && WLAN_PRE80211]
      }
      config PCMCIA_NETWAVE tristate {
       prompt "Xircom Netwave AirSurfer Pcmcia wireless support" if [NETDEVICES && WLAN && PCMCIA && WLAN_PRE80211]
       depends on [PCMCIA && WLAN_PRE80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && PCMCIA && WLAN_PRE80211]
       inherited [NETDEVICES && WLAN && PCMCIA && WLAN_PRE80211]
      }
     }
     menuconfig WLAN_80211 boolean {
      prompt "Wireless LAN (IEEE 802.11)" if [WLAN && NETDEVICES]
      depends on [NETDEVICES]
      inherited [WLAN && NETDEVICES]
      config PCMCIA_RAYCS tristate {
       prompt "Aviator/Raytheon 2.4GHz wireless support" if [NETDEVICES && WLAN && PCMCIA && WLAN_80211]
       depends on [PCMCIA && WLAN_80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && PCMCIA && WLAN_80211]
       inherited [NETDEVICES && WLAN && PCMCIA && WLAN_80211]
      }
      config LIBERTAS tristate {
       prompt "Marvell 8xxx Libertas WLAN driver support" if [NETDEVICES && WLAN && WLAN_80211]
       depends on [WLAN_80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && WLAN_80211]
       select LIB80211 if [NETDEVICES && WLAN && WLAN_80211]
       select FW_LOADER if [NETDEVICES && WLAN && WLAN_80211]
       inherited [NETDEVICES && WLAN && WLAN_80211]
       config LIBERTAS_USB tristate {
        prompt "Marvell Libertas 8388 USB 802.11b/g cards" if [NETDEVICES && WLAN && LIBERTAS && USB]
        depends on [LIBERTAS && USB]
        inherited [NETDEVICES && WLAN && LIBERTAS && USB]
       }
       config LIBERTAS_CS tristate {
        prompt "Marvell Libertas 8385 CompactFlash 802.11b/g cards" if [NETDEVICES && WLAN && LIBERTAS && PCMCIA]
        depends on [LIBERTAS && PCMCIA]
        select FW_LOADER if [NETDEVICES && WLAN && LIBERTAS && PCMCIA]
        inherited [NETDEVICES && WLAN && LIBERTAS && PCMCIA]
       }
       config LIBERTAS_SDIO tristate {
        prompt "Marvell Libertas 8385/8686/8688 SDIO 802.11b/g cards" if [NETDEVICES && WLAN && LIBERTAS && MMC]
        depends on [LIBERTAS && MMC]
        inherited [NETDEVICES && WLAN && LIBERTAS && MMC]
       }
       config LIBERTAS_SPI tristate {
        prompt "Marvell Libertas 8686 SPI 802.11b/g cards" if [NETDEVICES && WLAN && LIBERTAS && SPI]
        depends on [LIBERTAS && SPI]
        inherited [NETDEVICES && WLAN && LIBERTAS && SPI]
       }
       config LIBERTAS_DEBUG boolean {
        prompt "Enable full debugging output in the Libertas module." if [NETDEVICES && WLAN && LIBERTAS]
        depends on [LIBERTAS]
        inherited [NETDEVICES && WLAN && LIBERTAS]
       }
      }
      config LIBERTAS_THINFIRM tristate {
       prompt "Marvell 8xxx Libertas WLAN driver support with thin firmware" if [NETDEVICES && WLAN && WLAN_80211 && MAC80211]
       depends on [WLAN_80211 && MAC80211]
       select FW_LOADER if [NETDEVICES && WLAN && WLAN_80211 && MAC80211]
       inherited [NETDEVICES && WLAN && WLAN_80211 && MAC80211]
       config LIBERTAS_THINFIRM_USB tristate {
        prompt "Marvell Libertas 8388 USB 802.11b/g cards with thin firmware" if [NETDEVICES && WLAN && LIBERTAS_THINFIRM && USB]
        depends on [LIBERTAS_THINFIRM && USB]
        inherited [NETDEVICES && WLAN && LIBERTAS_THINFIRM && USB]
       }
      }
      config AIRO tristate {
       prompt "Cisco/Aironet 34X/35X/4500/4800 ISA and PCI cards" if [NETDEVICES && WLAN && ISA_DMA_API && WLAN_80211 && (PCI || BROKEN)]
       depends on [ISA_DMA_API && WLAN_80211 && (PCI || BROKEN)]
       select WIRELESS_EXT if [NETDEVICES && WLAN && ISA_DMA_API && WLAN_80211 && (PCI || BROKEN)]
       select CRYPTO if [NETDEVICES && WLAN && ISA_DMA_API && WLAN_80211 && (PCI || BROKEN)]
       inherited [NETDEVICES && WLAN && ISA_DMA_API && WLAN_80211 && (PCI || BROKEN)]
      }
      config ATMEL tristate {
       prompt "Atmel at76c50x chipset  802.11b support" if [NETDEVICES && WLAN && (PCI || PCMCIA) && WLAN_80211]
       depends on [(PCI || PCMCIA) && WLAN_80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && (PCI || PCMCIA) && WLAN_80211]
       select FW_LOADER if [NETDEVICES && WLAN && (PCI || PCMCIA) && WLAN_80211]
       select CRC32 if [NETDEVICES && WLAN && (PCI || PCMCIA) && WLAN_80211]
       inherited [NETDEVICES && WLAN && (PCI || PCMCIA) && WLAN_80211]
       config PCI_ATMEL tristate {
        prompt "Atmel at76c506 PCI cards" if [NETDEVICES && WLAN && ATMEL && PCI]
        depends on [ATMEL && PCI]
        inherited [NETDEVICES && WLAN && ATMEL && PCI]
       }
       config PCMCIA_ATMEL tristate {
        prompt "Atmel at76c502/at76c504 PCMCIA cards" if [NETDEVICES && WLAN && ATMEL && PCMCIA]
        depends on [ATMEL && PCMCIA]
        select WIRELESS_EXT if [NETDEVICES && WLAN && ATMEL && PCMCIA]
        select FW_LOADER if [NETDEVICES && WLAN && ATMEL && PCMCIA]
        select CRC32 if [NETDEVICES && WLAN && ATMEL && PCMCIA]
        inherited [NETDEVICES && WLAN && ATMEL && PCMCIA]
       }
      }
      config AT76C50X_USB tristate {
       prompt "Atmel at76c503/at76c505/at76c505a USB cards" if [NETDEVICES && WLAN && MAC80211 && WLAN_80211 && USB]
       depends on [MAC80211 && WLAN_80211 && USB]
       select FW_LOADER if [NETDEVICES && WLAN && MAC80211 && WLAN_80211 && USB]
       inherited [NETDEVICES && WLAN && MAC80211 && WLAN_80211 && USB]
      }
      config AIRO_CS tristate {
       prompt "Cisco/Aironet 34X/35X/4500/4800 PCMCIA cards" if [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R) && WLAN_80211]
       depends on [PCMCIA && (BROKEN || !M32R) && WLAN_80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R) && WLAN_80211]
       select CRYPTO if [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R) && WLAN_80211]
       select CRYPTO_AES if [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R) && WLAN_80211]
       inherited [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R) && WLAN_80211]
      }
      config PCMCIA_WL3501 tristate {
       prompt "Planet WL3501 PCMCIA cards" if [NETDEVICES && WLAN && EXPERIMENTAL && PCMCIA && WLAN_80211]
       depends on [EXPERIMENTAL && PCMCIA && WLAN_80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && EXPERIMENTAL && PCMCIA && WLAN_80211]
       inherited [NETDEVICES && WLAN && EXPERIMENTAL && PCMCIA && WLAN_80211]
      }
      config PRISM54 tristate {
       prompt "Intersil Prism GT/Duette/Indigo PCI/Cardbus (DEPRECATED)" if [NETDEVICES && WLAN && PCI && EXPERIMENTAL && WLAN_80211]
       depends on [PCI && EXPERIMENTAL && WLAN_80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && PCI && EXPERIMENTAL && WLAN_80211]
       select FW_LOADER if [NETDEVICES && WLAN && PCI && EXPERIMENTAL && WLAN_80211]
       inherited [NETDEVICES && WLAN && PCI && EXPERIMENTAL && WLAN_80211]
      }
      config USB_ZD1201 tristate {
       prompt "USB ZD1201 based Wireless device support" if [NETDEVICES && WLAN && USB && WLAN_80211]
       depends on [USB && WLAN_80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && USB && WLAN_80211]
       select FW_LOADER if [NETDEVICES && WLAN && USB && WLAN_80211]
       inherited [NETDEVICES && WLAN && USB && WLAN_80211]
      }
      config USB_NET_RNDIS_WLAN tristate {
       prompt "Wireless RNDIS USB support" if [NETDEVICES && WLAN && USB && WLAN_80211 && EXPERIMENTAL && CFG80211]
       depends on [USB && WLAN_80211 && EXPERIMENTAL]
       depends on [CFG80211]
       select USB_USBNET if [NETDEVICES && WLAN && USB && WLAN_80211 && EXPERIMENTAL && CFG80211]
       select USB_NET_CDCETHER if [NETDEVICES && WLAN && USB && WLAN_80211 && EXPERIMENTAL && CFG80211]
       select USB_NET_RNDIS_HOST if [NETDEVICES && WLAN && USB && WLAN_80211 && EXPERIMENTAL && CFG80211]
       inherited [NETDEVICES && WLAN && USB && WLAN_80211 && EXPERIMENTAL && CFG80211]
      }
      config RTL8180 tristate {
       prompt "Realtek 8180/8185 PCI support" if [NETDEVICES && WLAN && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
       depends on [MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
       select EEPROM_93CX6 if [NETDEVICES && WLAN && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
       inherited [NETDEVICES && WLAN && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
      }
      config RTL8187 tristate {
       prompt "Realtek 8187 and 8187B USB support" if [NETDEVICES && WLAN && MAC80211 && USB && WLAN_80211]
       depends on [MAC80211 && USB && WLAN_80211]
       select EEPROM_93CX6 if [NETDEVICES && WLAN && MAC80211 && USB && WLAN_80211]
       inherited [NETDEVICES && WLAN && MAC80211 && USB && WLAN_80211]
       config RTL8187_LEDS boolean {
        depends on [RTL8187 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="RTL8187")]
        default [y] if [NETDEVICES && WLAN && RTL8187 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="RTL8187")]
        inherited [NETDEVICES && WLAN && RTL8187 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="RTL8187")]
       }
      }
      config ADM8211 tristate {
       prompt "ADMtek ADM8211 support" if [NETDEVICES && WLAN && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
       depends on [MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
       select CRC32 if [NETDEVICES && WLAN && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
       select EEPROM_93CX6 if [NETDEVICES && WLAN && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
       inherited [NETDEVICES && WLAN && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
      }
      config MAC80211_HWSIM tristate {
       prompt "Simulated radio testing tool for mac80211" if [NETDEVICES && WLAN && MAC80211 && WLAN_80211]
       depends on [MAC80211 && WLAN_80211]
       inherited [NETDEVICES && WLAN && MAC80211 && WLAN_80211]
      }
      config MWL8K tristate {
       prompt "Marvell 88W8xxx PCI/PCIe Wireless support" if [NETDEVICES && WLAN && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
       depends on [MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
       inherited [NETDEVICES && WLAN && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
      }
      config P54_COMMON tristate {
       prompt "Softmac Prism54 support" if [NETDEVICES && WLAN && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       depends on [MAC80211 && WLAN_80211 && EXPERIMENTAL]
       select FW_LOADER if [NETDEVICES && WLAN && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       inherited [NETDEVICES && WLAN && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       config P54_USB tristate {
        prompt "Prism54 USB support" if [NETDEVICES && WLAN && P54_COMMON && USB]
        depends on [P54_COMMON && USB]
        select CRC32 if [NETDEVICES && WLAN && P54_COMMON && USB]
        inherited [NETDEVICES && WLAN && P54_COMMON && USB]
       }
       config P54_PCI tristate {
        prompt "Prism54 PCI support" if [NETDEVICES && WLAN && P54_COMMON && PCI]
        depends on [P54_COMMON && PCI]
        inherited [NETDEVICES && WLAN && P54_COMMON && PCI]
       }
       config P54_SPI tristate {
        prompt "Prism54 SPI (stlc45xx) support" if [NETDEVICES && WLAN && P54_COMMON && SPI_MASTER && GENERIC_HARDIRQS]
        depends on [P54_COMMON && SPI_MASTER && GENERIC_HARDIRQS]
        inherited [NETDEVICES && WLAN && P54_COMMON && SPI_MASTER && GENERIC_HARDIRQS]
       }
       config P54_LEDS boolean {
        depends on [P54_COMMON && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="P54_COMMON")]
        default [y] if [NETDEVICES && WLAN && P54_COMMON && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="P54_COMMON")]
        inherited [NETDEVICES && WLAN && P54_COMMON && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="P54_COMMON")]
       }
      }
      menuconfig ATH_COMMON tristate {
       prompt "Atheros Wireless Cards" if [NETDEVICES && WLAN && WLAN_80211 && CFG80211]
       depends on [WLAN_80211]
       depends on [CFG80211]
       inherited [NETDEVICES && WLAN && WLAN_80211 && CFG80211]
       if [NETDEVICES && WLAN && ATH_COMMON] {
        config ATH5K tristate {
         prompt "Atheros 5xxx wireless cards support" if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211 && WLAN_80211]
         depends on [PCI && MAC80211 && WLAN_80211]
         select MAC80211_LEDS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211 && WLAN_80211]
         select LEDS_CLASS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211 && WLAN_80211]
         select NEW_LEDS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211 && WLAN_80211]
         inherited [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211 && WLAN_80211]
         config ATH5K_DEBUG boolean {
          prompt "Atheros 5xxx debugging" if [NETDEVICES && WLAN && ATH_COMMON && ATH5K]
          depends on [ATH5K]
          inherited [NETDEVICES && WLAN && ATH_COMMON && ATH5K]
         }
        }
        config ATH9K tristate {
         prompt "Atheros 802.11n wireless cards support" if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211 && WLAN_80211]
         depends on [PCI && MAC80211 && WLAN_80211]
         select MAC80211_LEDS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211 && WLAN_80211]
         select LEDS_CLASS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211 && WLAN_80211]
         select NEW_LEDS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211 && WLAN_80211]
         inherited [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211 && WLAN_80211]
         config ATH9K_DEBUG boolean {
          prompt "Atheros ath9k debugging" if [NETDEVICES && WLAN && ATH_COMMON && ATH9K]
          depends on [ATH9K]
          inherited [NETDEVICES && WLAN && ATH_COMMON && ATH9K]
         }
        }
        config AR9170_USB tristate {
         prompt "Atheros AR9170 802.11n USB support" if [NETDEVICES && WLAN && ATH_COMMON && USB && MAC80211 && WLAN_80211]
         depends on [USB && MAC80211 && WLAN_80211]
         select FW_LOADER if [NETDEVICES && WLAN && ATH_COMMON && USB && MAC80211 && WLAN_80211]
         inherited [NETDEVICES && WLAN && ATH_COMMON && USB && MAC80211 && WLAN_80211]
         config AR9170_LEDS boolean {
          depends on [AR9170_USB && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="AR9170_USB")]
          default [y] if [NETDEVICES && WLAN && ATH_COMMON && AR9170_USB && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="AR9170_USB")]
          inherited [NETDEVICES && WLAN && ATH_COMMON && AR9170_USB && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="AR9170_USB")]
         }
        }
       }
      }
      config IPW2100 tristate {
       prompt "Intel PRO/Wireless 2100 Network Connection" if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       depends on [PCI && WLAN_80211 && CFG80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select FW_LOADER if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select LIB80211 if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select LIBIPW if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       inherited [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       config IPW2100_MONITOR boolean {
        prompt "Enable promiscuous mode" if [NETDEVICES && WLAN && IPW2100]
        depends on [IPW2100]
        inherited [NETDEVICES && WLAN && IPW2100]
       }
       config IPW2100_DEBUG boolean {
        prompt "Enable full debugging output in IPW2100 module." if [NETDEVICES && WLAN && IPW2100]
        depends on [IPW2100]
        inherited [NETDEVICES && WLAN && IPW2100]
       }
      }
      config IPW2200 tristate {
       prompt "Intel PRO/Wireless 2200BG and 2915ABG Network Connection" if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       depends on [PCI && WLAN_80211 && CFG80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select FW_LOADER if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select LIB80211 if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select LIBIPW if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       inherited [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       config IPW2200_MONITOR boolean {
        prompt "Enable promiscuous mode" if [NETDEVICES && WLAN && IPW2200]
        depends on [IPW2200]
        inherited [NETDEVICES && WLAN && IPW2200]
        config IPW2200_RADIOTAP boolean {
         prompt "Enable radiotap format 802.11 raw packet support" if [NETDEVICES && WLAN && IPW2200_MONITOR]
         depends on [IPW2200_MONITOR]
         inherited [NETDEVICES && WLAN && IPW2200_MONITOR]
        }
        config IPW2200_PROMISCUOUS boolean {
         prompt "Enable creation of a RF radiotap promiscuous interface" if [NETDEVICES && WLAN && IPW2200_MONITOR]
         depends on [IPW2200_MONITOR]
         select IPW2200_RADIOTAP if [NETDEVICES && WLAN && IPW2200_MONITOR]
         inherited [NETDEVICES && WLAN && IPW2200_MONITOR]
        }
       }
       config IPW2200_QOS boolean {
        prompt "Enable QoS support" if [NETDEVICES && WLAN && IPW2200 && EXPERIMENTAL]
        depends on [IPW2200 && EXPERIMENTAL]
        inherited [NETDEVICES && WLAN && IPW2200 && EXPERIMENTAL]
       }
       config IPW2200_DEBUG boolean {
        prompt "Enable full debugging output in IPW2200 module." if [NETDEVICES && WLAN && IPW2200]
        depends on [IPW2200]
        inherited [NETDEVICES && WLAN && IPW2200]
       }
      }
      config LIBIPW tristate {
       depends on [PCI && WLAN_80211 && CFG80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select CRYPTO if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select CRYPTO_ARC4 if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select CRYPTO_ECB if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select CRYPTO_AES if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select CRYPTO_MICHAEL_MIC if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select CRYPTO_ECB if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select CRC32 if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select LIB80211 if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select LIB80211_CRYPT_WEP if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select LIB80211_CRYPT_TKIP if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       select LIB80211_CRYPT_CCMP if [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
       inherited [NETDEVICES && WLAN && PCI && WLAN_80211 && CFG80211]
      }
      config LIBIPW_DEBUG boolean {
       prompt "Full debugging output for the LIBIPW component" if [NETDEVICES && WLAN && LIBIPW]
       depends on [LIBIPW]
       inherited [NETDEVICES && WLAN && LIBIPW]
      }
      config IWLWIFI tristate {
       prompt "Intel Wireless Wifi" if [NETDEVICES && WLAN && PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       depends on [PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       select LIB80211 if [NETDEVICES && WLAN && PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       select FW_LOADER if [NETDEVICES && WLAN && PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       select MAC80211_LEDS if [NETDEVICES && WLAN && PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL && IWLWIFI_LEDS]
       select LEDS_CLASS if [NETDEVICES && WLAN && PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL && IWLWIFI_LEDS]
       inherited [NETDEVICES && WLAN && PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       config IWLWIFI_LEDS boolean {
        prompt "Enable LED support in iwlagn and iwl3945 drivers" if [NETDEVICES && WLAN && IWLWIFI]
        depends on [IWLWIFI]
        default [y] if [NETDEVICES && WLAN && IWLWIFI]
        inherited [NETDEVICES && WLAN && IWLWIFI]
       }
       config IWLWIFI_SPECTRUM_MEASUREMENT boolean {
        prompt "Enable Spectrum Measurement in iwlagn driver" if [NETDEVICES && WLAN && IWLWIFI]
        depends on [IWLWIFI]
        inherited [NETDEVICES && WLAN && IWLWIFI]
       }
       config IWLWIFI_DEBUG boolean {
        prompt "Enable full debugging output in iwlagn and iwl3945 drivers" if [NETDEVICES && WLAN && IWLWIFI]
        depends on [IWLWIFI]
        inherited [NETDEVICES && WLAN && IWLWIFI]
        config IWLWIFI_DEBUGFS boolean {
         prompt "iwlagn debugfs support" if [NETDEVICES && WLAN && IWLWIFI && IWLWIFI_DEBUG && MAC80211_DEBUGFS]
         depends on [IWLWIFI && IWLWIFI_DEBUG && MAC80211_DEBUGFS]
         inherited [NETDEVICES && WLAN && IWLWIFI && IWLWIFI_DEBUG && MAC80211_DEBUGFS]
        }
       }
       config IWLAGN tristate {
        prompt "Intel Wireless WiFi Next Gen AGN (iwlagn)" if [NETDEVICES && WLAN && IWLWIFI]
        depends on [IWLWIFI]
        inherited [NETDEVICES && WLAN && IWLWIFI]
        config IWL4965 boolean {
         prompt "Intel Wireless WiFi 4965AGN" if [NETDEVICES && WLAN && IWLAGN]
         depends on [IWLAGN]
         inherited [NETDEVICES && WLAN && IWLAGN]
        }
        config IWL5000 boolean {
         prompt "Intel Wireless WiFi 5000AGN; Intel WiFi Link 1000, 6000, and 6050 Series" if [NETDEVICES && WLAN && IWLAGN]
         depends on [IWLAGN]
         inherited [NETDEVICES && WLAN && IWLAGN]
        }
       }
       config IWL3945 tristate {
        prompt "Intel PRO/Wireless 3945ABG/BG Network Connection (iwl3945)" if [NETDEVICES && WLAN && IWLWIFI]
        depends on [IWLWIFI]
        inherited [NETDEVICES && WLAN && IWLWIFI]
        config IWL3945_SPECTRUM_MEASUREMENT boolean {
         prompt "Enable Spectrum Measurement in iwl3945 driver" if [NETDEVICES && WLAN && IWL3945]
         depends on [IWL3945]
         inherited [NETDEVICES && WLAN && IWL3945]
        }
       }
      }
      config HOSTAP tristate {
       prompt "IEEE 802.11 for Host AP (Prism2/2.5/3 and WEP/TKIP/CCMP)" if [NETDEVICES && WLAN && WLAN_80211]
       depends on [WLAN_80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && WLAN_80211]
       select CRYPTO if [NETDEVICES && WLAN && WLAN_80211]
       select CRYPTO_ARC4 if [NETDEVICES && WLAN && WLAN_80211]
       select CRYPTO_ECB if [NETDEVICES && WLAN && WLAN_80211]
       select CRYPTO_AES if [NETDEVICES && WLAN && WLAN_80211]
       select CRYPTO_MICHAEL_MIC if [NETDEVICES && WLAN && WLAN_80211]
       select CRYPTO_ECB if [NETDEVICES && WLAN && WLAN_80211]
       select CRC32 if [NETDEVICES && WLAN && WLAN_80211]
       select LIB80211 if [NETDEVICES && WLAN && WLAN_80211]
       select LIB80211_CRYPT_WEP if [NETDEVICES && WLAN && WLAN_80211]
       select LIB80211_CRYPT_TKIP if [NETDEVICES && WLAN && WLAN_80211]
       select LIB80211_CRYPT_CCMP if [NETDEVICES && WLAN && WLAN_80211]
       inherited [NETDEVICES && WLAN && WLAN_80211]
       config HOSTAP_FIRMWARE boolean {
        prompt "Support downloading firmware images with Host AP driver" if [NETDEVICES && WLAN && HOSTAP]
        depends on [HOSTAP]
        inherited [NETDEVICES && WLAN && HOSTAP]
        config HOSTAP_FIRMWARE_NVRAM boolean {
         prompt "Support for non-volatile firmware download" if [NETDEVICES && WLAN && HOSTAP_FIRMWARE]
         depends on [HOSTAP_FIRMWARE]
         inherited [NETDEVICES && WLAN && HOSTAP_FIRMWARE]
        }
       }
       config HOSTAP_PLX tristate {
        prompt "Host AP driver for Prism2/2.5/3 in PLX9052 PCI adaptors" if [NETDEVICES && WLAN && PCI && HOSTAP]
        depends on [PCI && HOSTAP]
        inherited [NETDEVICES && WLAN && PCI && HOSTAP]
       }
       config HOSTAP_PCI tristate {
        prompt "Host AP driver for Prism2.5 PCI adaptors" if [NETDEVICES && WLAN && PCI && HOSTAP]
        depends on [PCI && HOSTAP]
        inherited [NETDEVICES && WLAN && PCI && HOSTAP]
       }
       config HOSTAP_CS tristate {
        prompt "Host AP driver for Prism2/2.5/3 PC Cards" if [NETDEVICES && WLAN && PCMCIA && HOSTAP]
        depends on [PCMCIA && HOSTAP]
        inherited [NETDEVICES && WLAN && PCMCIA && HOSTAP]
       }
      }
      config B43 tristate {
       prompt "Broadcom 43xx wireless support (mac80211 stack)" if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA]
       depends on [SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA]
       select SSB if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA]
       select FW_LOADER if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA]
       inherited [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA]
       config B43_PCI_AUTOSELECT boolean {
        depends on [B43 && SSB_PCIHOST_POSSIBLE]
        select SSB_PCIHOST if [NETDEVICES && WLAN && B43 && SSB_PCIHOST_POSSIBLE]
        select SSB_B43_PCI_BRIDGE if [NETDEVICES && WLAN && B43 && SSB_PCIHOST_POSSIBLE]
        default [y] if [NETDEVICES && WLAN && B43 && SSB_PCIHOST_POSSIBLE]
        inherited [NETDEVICES && WLAN && B43 && SSB_PCIHOST_POSSIBLE]
       }
       config B43_PCICORE_AUTOSELECT boolean {
        depends on [B43 && SSB_DRIVER_PCICORE_POSSIBLE]
        select SSB_DRIVER_PCICORE if [NETDEVICES && WLAN && B43 && SSB_DRIVER_PCICORE_POSSIBLE]
        default [y] if [NETDEVICES && WLAN && B43 && SSB_DRIVER_PCICORE_POSSIBLE]
        inherited [NETDEVICES && WLAN && B43 && SSB_DRIVER_PCICORE_POSSIBLE]
       }
       config B43_PCMCIA boolean {
        prompt "Broadcom 43xx PCMCIA device support" if [NETDEVICES && WLAN && B43 && SSB_PCMCIAHOST_POSSIBLE]
        depends on [B43 && SSB_PCMCIAHOST_POSSIBLE]
        select SSB_PCMCIAHOST if [NETDEVICES && WLAN && B43 && SSB_PCMCIAHOST_POSSIBLE]
        inherited [NETDEVICES && WLAN && B43 && SSB_PCMCIAHOST_POSSIBLE]
       }
       config B43_SDIO boolean {
        prompt "Broadcom 43xx SDIO device support (EXPERIMENTAL)" if [NETDEVICES && WLAN && B43 && SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL]
        depends on [B43 && SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL]
        select SSB_SDIOHOST if [NETDEVICES && WLAN && B43 && SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL]
        inherited [NETDEVICES && WLAN && B43 && SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL]
       }
       config B43_PIO boolean {
        depends on [B43 && (B43_SDIO || B43_PCMCIA || B43_FORCE_PIO)]
        select SSB_BLOCKIO if [NETDEVICES && WLAN && B43 && (B43_SDIO || B43_PCMCIA || B43_FORCE_PIO)]
        default [y] if [NETDEVICES && WLAN && B43 && (B43_SDIO || B43_PCMCIA || B43_FORCE_PIO)]
        inherited [NETDEVICES && WLAN && B43 && (B43_SDIO || B43_PCMCIA || B43_FORCE_PIO)]
       }
       config B43_NPHY boolean {
        prompt "Pre IEEE 802.11n support (BROKEN)" if [NETDEVICES && WLAN && B43 && EXPERIMENTAL && BROKEN]
        depends on [B43 && EXPERIMENTAL && BROKEN]
        inherited [NETDEVICES && WLAN && B43 && EXPERIMENTAL && BROKEN]
       }
       config B43_PHY_LP boolean {
        prompt "Support for low-power (LP-PHY) devices (EXPERIMENTAL)" if [NETDEVICES && WLAN && B43 && EXPERIMENTAL]
        depends on [B43 && EXPERIMENTAL]
        default [y] if [NETDEVICES && WLAN && B43 && EXPERIMENTAL]
        inherited [NETDEVICES && WLAN && B43 && EXPERIMENTAL]
       }
       config B43_LEDS boolean {
        depends on [B43 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43")]
        default [y] if [NETDEVICES && WLAN && B43 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43")]
        inherited [NETDEVICES && WLAN && B43 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43")]
       }
       config B43_HWRNG boolean {
        depends on [B43 && (HW_RANDOM="y" || HW_RANDOM="B43")]
        default [y] if [NETDEVICES && WLAN && B43 && (HW_RANDOM="y" || HW_RANDOM="B43")]
        inherited [NETDEVICES && WLAN && B43 && (HW_RANDOM="y" || HW_RANDOM="B43")]
       }
       config B43_DEBUG boolean {
        prompt "Broadcom 43xx debugging" if [NETDEVICES && WLAN && B43]
        depends on [B43]
        inherited [NETDEVICES && WLAN && B43]
        config B43_FORCE_PIO boolean {
         prompt "Force usage of PIO instead of DMA" if [NETDEVICES && WLAN && B43 && B43_DEBUG]
         depends on [B43 && B43_DEBUG]
         inherited [NETDEVICES && WLAN && B43 && B43_DEBUG]
        }
       }
      }
      config B43LEGACY tristate {
       prompt "Broadcom 43xx-legacy wireless support (mac80211 stack)" if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA]
       depends on [SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA]
       select SSB if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA]
       select FW_LOADER if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA]
       inherited [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA]
       config B43LEGACY_PCI_AUTOSELECT boolean {
        depends on [B43LEGACY && SSB_PCIHOST_POSSIBLE]
        select SSB_PCIHOST if [NETDEVICES && WLAN && B43LEGACY && SSB_PCIHOST_POSSIBLE]
        select SSB_B43_PCI_BRIDGE if [NETDEVICES && WLAN && B43LEGACY && SSB_PCIHOST_POSSIBLE]
        default [y] if [NETDEVICES && WLAN && B43LEGACY && SSB_PCIHOST_POSSIBLE]
        inherited [NETDEVICES && WLAN && B43LEGACY && SSB_PCIHOST_POSSIBLE]
       }
       config B43LEGACY_PCICORE_AUTOSELECT boolean {
        depends on [B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
        select SSB_DRIVER_PCICORE if [NETDEVICES && WLAN && B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
        default [y] if [NETDEVICES && WLAN && B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
        inherited [NETDEVICES && WLAN && B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
       }
       config B43LEGACY_LEDS boolean {
        depends on [B43LEGACY && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43LEGACY")]
        default [y] if [NETDEVICES && WLAN && B43LEGACY && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43LEGACY")]
        inherited [NETDEVICES && WLAN && B43LEGACY && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43LEGACY")]
       }
       config B43LEGACY_HWRNG boolean {
        depends on [B43LEGACY && (HW_RANDOM="y" || HW_RANDOM="B43LEGACY")]
        default [y] if [NETDEVICES && WLAN && B43LEGACY && (HW_RANDOM="y" || HW_RANDOM="B43LEGACY")]
        inherited [NETDEVICES && WLAN && B43LEGACY && (HW_RANDOM="y" || HW_RANDOM="B43LEGACY")]
       }
       config B43LEGACY_DEBUG boolean {
        prompt "Broadcom 43xx-legacy debugging" if [NETDEVICES && WLAN && B43LEGACY]
        depends on [B43LEGACY]
        default [y] if [NETDEVICES && WLAN && B43LEGACY]
        inherited [NETDEVICES && WLAN && B43LEGACY]
       }
       config B43LEGACY_DMA boolean {
        depends on [B43LEGACY]
        inherited [NETDEVICES && WLAN && B43LEGACY]
       }
       config B43LEGACY_PIO boolean {
        depends on [B43LEGACY]
        inherited [NETDEVICES && WLAN && B43LEGACY]
       }
       choice boolean {
        prompt "Broadcom 43xx-legacy data transfer mode" if [NETDEVICES && WLAN && B43LEGACY]
        depends on [B43LEGACY]
        default [B43LEGACY_DMA_AND_PIO_MODE] if [NETDEVICES && WLAN && B43LEGACY]
        config B43LEGACY_DMA_AND_PIO_MODE boolean {
         prompt "DMA + PIO" if [<choice>]
         select B43LEGACY_DMA if [<choice>]
         select B43LEGACY_PIO if [<choice>]
         inherited [<choice>]
        }
        config B43LEGACY_DMA_MODE boolean {
         prompt "DMA (Direct Memory Access) only" if [<choice>]
         select B43LEGACY_DMA if [<choice>]
         inherited [<choice>]
        }
        config B43LEGACY_PIO_MODE boolean {
         prompt "PIO (Programmed I/O) only" if [<choice>]
         select B43LEGACY_PIO if [<choice>]
         inherited [<choice>]
        }
       }
      }
      config ZD1211RW tristate {
       prompt "ZyDAS ZD1211/ZD1211B USB-wireless support" if [NETDEVICES && WLAN && USB && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       depends on [USB && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       select FW_LOADER if [NETDEVICES && WLAN && USB && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       inherited [NETDEVICES && WLAN && USB && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       config ZD1211RW_DEBUG boolean {
        prompt "ZyDAS ZD1211 debugging" if [NETDEVICES && WLAN && ZD1211RW]
        depends on [ZD1211RW]
        inherited [NETDEVICES && WLAN && ZD1211RW]
       }
      }
      menuconfig RT2X00 tristate {
       prompt "Ralink driver support" if [NETDEVICES && WLAN && MAC80211 && WLAN_80211]
       depends on [MAC80211 && WLAN_80211]
       inherited [NETDEVICES && WLAN && MAC80211 && WLAN_80211]
       if [NETDEVICES && WLAN && RT2X00] {
        config RT2400PCI tristate {
         prompt "Ralink rt2400 (PCI/PCMCIA) support" if [NETDEVICES && WLAN && RT2X00 && PCI]
         depends on [PCI]
         select RT2X00_LIB_PCI if [NETDEVICES && WLAN && RT2X00 && PCI]
         select EEPROM_93CX6 if [NETDEVICES && WLAN && RT2X00 && PCI]
         inherited [NETDEVICES && WLAN && RT2X00 && PCI]
        }
        config RT2500PCI tristate {
         prompt "Ralink rt2500 (PCI/PCMCIA) support" if [NETDEVICES && WLAN && RT2X00 && PCI]
         depends on [PCI]
         select RT2X00_LIB_PCI if [NETDEVICES && WLAN && RT2X00 && PCI]
         select EEPROM_93CX6 if [NETDEVICES && WLAN && RT2X00 && PCI]
         inherited [NETDEVICES && WLAN && RT2X00 && PCI]
        }
        config RT61PCI tristate {
         prompt "Ralink rt2501/rt61 (PCI/PCMCIA) support" if [NETDEVICES && WLAN && RT2X00 && PCI]
         depends on [PCI]
         select RT2X00_LIB_PCI if [NETDEVICES && WLAN && RT2X00 && PCI]
         select RT2X00_LIB_FIRMWARE if [NETDEVICES && WLAN && RT2X00 && PCI]
         select RT2X00_LIB_CRYPTO if [NETDEVICES && WLAN && RT2X00 && PCI]
         select CRC_ITU_T if [NETDEVICES && WLAN && RT2X00 && PCI]
         select EEPROM_93CX6 if [NETDEVICES && WLAN && RT2X00 && PCI]
         inherited [NETDEVICES && WLAN && RT2X00 && PCI]
        }
        config RT2500USB tristate {
         prompt "Ralink rt2500 (USB) support" if [NETDEVICES && WLAN && RT2X00 && USB]
         depends on [USB]
         select RT2X00_LIB_USB if [NETDEVICES && WLAN && RT2X00 && USB]
         select RT2X00_LIB_CRYPTO if [NETDEVICES && WLAN && RT2X00 && USB]
         inherited [NETDEVICES && WLAN && RT2X00 && USB]
        }
        config RT73USB tristate {
         prompt "Ralink rt2501/rt73 (USB) support" if [NETDEVICES && WLAN && RT2X00 && USB]
         depends on [USB]
         select RT2X00_LIB_USB if [NETDEVICES && WLAN && RT2X00 && USB]
         select RT2X00_LIB_FIRMWARE if [NETDEVICES && WLAN && RT2X00 && USB]
         select RT2X00_LIB_CRYPTO if [NETDEVICES && WLAN && RT2X00 && USB]
         select CRC_ITU_T if [NETDEVICES && WLAN && RT2X00 && USB]
         inherited [NETDEVICES && WLAN && RT2X00 && USB]
        }
        config RT2800USB tristate {
         prompt "Ralink rt2800 (USB) support" if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
         depends on [USB && EXPERIMENTAL]
         select RT2X00_LIB_USB if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
         select RT2X00_LIB_HT if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
         select RT2X00_LIB_FIRMWARE if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
         select RT2X00_LIB_CRYPTO if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
         select CRC_CCITT if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
         inherited [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
        }
        config RT2X00_LIB_PCI tristate {
         select RT2X00_LIB if [NETDEVICES && WLAN && RT2X00]
         inherited [NETDEVICES && WLAN && RT2X00]
        }
        config RT2X00_LIB_USB tristate {
         select RT2X00_LIB if [NETDEVICES && WLAN && RT2X00]
         inherited [NETDEVICES && WLAN && RT2X00]
        }
        config RT2X00_LIB tristate {
         inherited [NETDEVICES && WLAN && RT2X00]
        }
        config RT2X00_LIB_HT boolean {
         inherited [NETDEVICES && WLAN && RT2X00]
        }
        config RT2X00_LIB_FIRMWARE boolean {
         select FW_LOADER if [NETDEVICES && WLAN && RT2X00]
         inherited [NETDEVICES && WLAN && RT2X00]
        }
        config RT2X00_LIB_CRYPTO boolean {
         inherited [NETDEVICES && WLAN && RT2X00]
        }
        config RT2X00_LIB_LEDS boolean {
         default [y] if [NETDEVICES && WLAN && RT2X00 && (RT2X00_LIB="y" && LEDS_CLASS="y" || RT2X00_LIB="m" && LEDS_CLASS)]
         inherited [NETDEVICES && WLAN && RT2X00]
        }
        config RT2X00_LIB_DEBUGFS boolean {
         prompt "Ralink debugfs support" if [NETDEVICES && WLAN && RT2X00 && RT2X00_LIB && MAC80211_DEBUGFS]
         depends on [RT2X00_LIB && MAC80211_DEBUGFS]
         inherited [NETDEVICES && WLAN && RT2X00 && RT2X00_LIB && MAC80211_DEBUGFS]
        }
        config RT2X00_DEBUG boolean {
         prompt "Ralink debug output" if [NETDEVICES && WLAN && RT2X00 && RT2X00_LIB]
         depends on [RT2X00_LIB]
         inherited [NETDEVICES && WLAN && RT2X00 && RT2X00_LIB]
        }
       }
      }
      config HERMES tristate {
       prompt "Hermes chipset 802.11b support (Orinoco/Prism2/Symbol)" if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && WLAN_80211 && CFG80211]
       depends on [(PPC_PMAC || PCI || PCMCIA) && WLAN_80211]
       depends on [CFG80211]
       select WIRELESS_EXT if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && WLAN_80211 && CFG80211]
       select FW_LOADER if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && WLAN_80211 && CFG80211]
       select CRYPTO if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && WLAN_80211 && CFG80211]
       select CRYPTO_MICHAEL_MIC if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && WLAN_80211 && CFG80211]
       inherited [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && WLAN_80211 && CFG80211]
       config HERMES_CACHE_FW_ON_INIT boolean {
        prompt "Cache Hermes firmware on driver initialisation" if [NETDEVICES && WLAN && HERMES]
        depends on [HERMES]
        default [y] if [NETDEVICES && WLAN && HERMES]
        inherited [NETDEVICES && WLAN && HERMES]
       }
       config APPLE_AIRPORT tristate {
        prompt "Apple Airport support (built-in)" if [NETDEVICES && WLAN && PPC_PMAC && HERMES]
        depends on [PPC_PMAC && HERMES]
        inherited [NETDEVICES && WLAN && PPC_PMAC && HERMES]
       }
       config PLX_HERMES tristate {
        prompt "Hermes in PLX9052 based PCI adaptor support (Netgear MA301 etc.)" if [NETDEVICES && WLAN && PCI && HERMES]
        depends on [PCI && HERMES]
        inherited [NETDEVICES && WLAN && PCI && HERMES]
       }
       config TMD_HERMES tristate {
        prompt "Hermes in TMD7160 based PCI adaptor support" if [NETDEVICES && WLAN && PCI && HERMES]
        depends on [PCI && HERMES]
        inherited [NETDEVICES && WLAN && PCI && HERMES]
       }
       config NORTEL_HERMES tristate {
        prompt "Nortel emobility PCI adaptor support" if [NETDEVICES && WLAN && PCI && HERMES]
        depends on [PCI && HERMES]
        inherited [NETDEVICES && WLAN && PCI && HERMES]
       }
       config PCI_HERMES tristate {
        prompt "Prism 2.5 PCI 802.11b adaptor support" if [NETDEVICES && WLAN && PCI && HERMES]
        depends on [PCI && HERMES]
        inherited [NETDEVICES && WLAN && PCI && HERMES]
       }
       config PCMCIA_HERMES tristate {
        prompt "Hermes PCMCIA card support" if [NETDEVICES && WLAN && PCMCIA && HERMES]
        depends on [PCMCIA && HERMES]
        inherited [NETDEVICES && WLAN && PCMCIA && HERMES]
       }
       config PCMCIA_SPECTRUM tristate {
        prompt "Symbol Spectrum24 Trilogy PCMCIA card support" if [NETDEVICES && WLAN && PCMCIA && HERMES]
        depends on [PCMCIA && HERMES]
        inherited [NETDEVICES && WLAN && PCMCIA && HERMES]
       }
      }
      menuconfig WL12XX tristate {
       prompt "TI wl12xx driver support" if [NETDEVICES && WLAN && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       depends on [MAC80211 && WLAN_80211 && EXPERIMENTAL]
       inherited [NETDEVICES && WLAN && MAC80211 && WLAN_80211 && EXPERIMENTAL]
       config WL1251 tristate {
        prompt "TI wl1251 support" if [NETDEVICES && WLAN && WL12XX && GENERIC_HARDIRQS]
        depends on [WL12XX && GENERIC_HARDIRQS]
        select FW_LOADER if [NETDEVICES && WLAN && WL12XX && GENERIC_HARDIRQS]
        select CRC7 if [NETDEVICES && WLAN && WL12XX && GENERIC_HARDIRQS]
        inherited [NETDEVICES && WLAN && WL12XX && GENERIC_HARDIRQS]
        config WL1251_SPI tristate {
         prompt "TI wl1251 SPI support" if [NETDEVICES && WLAN && WL1251 && SPI_MASTER]
         depends on [WL1251 && SPI_MASTER]
         inherited [NETDEVICES && WLAN && WL1251 && SPI_MASTER]
        }
        config WL1251_SDIO tristate {
         prompt "TI wl1251 SDIO support" if [NETDEVICES && WLAN && WL1251 && MMC]
         depends on [WL1251 && MMC]
         inherited [NETDEVICES && WLAN && WL1251 && MMC]
        }
       }
       config WL1271 tristate {
        prompt "TI wl1271 support" if [NETDEVICES && WLAN && WL12XX && SPI_MASTER && GENERIC_HARDIRQS]
        depends on [WL12XX && SPI_MASTER && GENERIC_HARDIRQS]
        select FW_LOADER if [NETDEVICES && WLAN && WL12XX && SPI_MASTER && GENERIC_HARDIRQS]
        select CRC7 if [NETDEVICES && WLAN && WL12XX && SPI_MASTER && GENERIC_HARDIRQS]
        inherited [NETDEVICES && WLAN && WL12XX && SPI_MASTER && GENERIC_HARDIRQS]
       }
      }
      config IWM tristate {
       prompt "Intel Wireless Multicomm 3200 WiFi driver" if [NETDEVICES && WLAN && MMC && WLAN_80211 && EXPERIMENTAL && CFG80211]
       depends on [MMC && WLAN_80211 && EXPERIMENTAL]
       depends on [CFG80211]
       select FW_LOADER if [NETDEVICES && WLAN && MMC && WLAN_80211 && EXPERIMENTAL && CFG80211]
       inherited [NETDEVICES && WLAN && MMC && WLAN_80211 && EXPERIMENTAL && CFG80211]
       config IWM_DEBUG boolean {
        prompt "Enable full debugging output in iwmc3200wifi" if [NETDEVICES && WLAN && IWM && DEBUG_FS]
        depends on [IWM && DEBUG_FS]
        inherited [NETDEVICES && WLAN && IWM && DEBUG_FS]
       }
      }
     }
    }
   }
   if [NETDEVICES && WIMAX] {
    menu "WiMAX Wireless Broadband devices" {
     depends on [NETDEVICES && WIMAX]
     config WIMAX_I2400M tristate {
      depends on [WIMAX]
      select FW_LOADER if [NETDEVICES && WIMAX]
      inherited [NETDEVICES && WIMAX]
     }
     config WIMAX_I2400M_USB tristate {
      prompt "Intel Wireless WiMAX Connection 2400 over USB (including 5x50)" if [NETDEVICES && WIMAX && USB]
      depends on [WIMAX && USB]
      select WIMAX_I2400M if [NETDEVICES && WIMAX && USB]
      inherited [NETDEVICES && WIMAX && USB]
     }
     config WIMAX_I2400M_SDIO tristate {
      prompt "Intel Wireless WiMAX Connection 2400 over SDIO" if [NETDEVICES && WIMAX && MMC]
      depends on [WIMAX && MMC]
      select WIMAX_I2400M if [NETDEVICES && WIMAX && MMC]
      inherited [NETDEVICES && WIMAX && MMC]
     }
     config WIMAX_I2400M_DEBUG_LEVEL integer {
      prompt "WiMAX i2400m debug level" if [NETDEVICES && WIMAX && WIMAX_I2400M]
      depends on [WIMAX_I2400M]
      default [8] if [NETDEVICES && WIMAX && WIMAX_I2400M]
      inherited [NETDEVICES && WIMAX && WIMAX_I2400M]
     }
    }
   }
   menu "USB Network Adapters" {
    depends on [NETDEVICES && USB && NET]
    config USB_CATC tristate {
     prompt "USB CATC NetMate-based Ethernet device support (EXPERIMENTAL)" if [NETDEVICES && USB && NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     select CRC32 if [NETDEVICES && USB && NET && EXPERIMENTAL]
     inherited [NETDEVICES && USB && NET && EXPERIMENTAL]
    }
    config USB_KAWETH tristate {
     prompt "USB KLSI KL5USB101-based ethernet device support" if [NETDEVICES && USB && NET]
     inherited [NETDEVICES && USB && NET]
    }
    config USB_PEGASUS tristate {
     prompt "USB Pegasus/Pegasus-II based ethernet device support" if [NETDEVICES && USB && NET]
     select MII if [NETDEVICES && USB && NET]
     inherited [NETDEVICES && USB && NET]
    }
    config USB_RTL8150 tristate {
     prompt "USB RTL8150 based ethernet device support (EXPERIMENTAL)" if [NETDEVICES && USB && NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     select MII if [NETDEVICES && USB && NET && EXPERIMENTAL]
     inherited [NETDEVICES && USB && NET && EXPERIMENTAL]
    }
    config USB_USBNET tristate {
     prompt "Multi-purpose USB Networking Framework" if [NETDEVICES && USB && NET]
     select MII if [NETDEVICES && USB && NET]
     inherited [NETDEVICES && USB && NET]
     config USB_NET_AX8817X tristate {
      prompt "ASIX AX88xxx Based USB 2.0 Ethernet Adapters" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      select CRC32 if [NETDEVICES && USB && NET && USB_USBNET]
      default [y] if [NETDEVICES && USB && NET && USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_CDCETHER tristate {
      prompt "CDC Ethernet support (smart devices such as cable modems)" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      default [y] if [NETDEVICES && USB && NET && USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_CDC_EEM tristate {
      prompt "CDC EEM support" if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
      depends on [USB_USBNET && EXPERIMENTAL]
      inherited [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
     }
     config USB_NET_DM9601 tristate {
      prompt "Davicom DM9601 based USB 1.1 10/100 ethernet devices" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      select CRC32 if [NETDEVICES && USB && NET && USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_SMSC95XX tristate {
      prompt "SMSC LAN95XX based USB 2.0 10/100 ethernet devices" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      select CRC32 if [NETDEVICES && USB && NET && USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_GL620A tristate {
      prompt "GeneSys GL620USB-A based cables" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_NET1080 tristate {
      prompt "NetChip 1080 based cables (Laplink, ...)" if [NETDEVICES && USB && NET && USB_USBNET]
      default [y] if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_PLUSB tristate {
      prompt "Prolific PL-2301/2302 based cables" if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
      depends on [USB_USBNET && EXPERIMENTAL]
      inherited [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
     }
     config USB_NET_MCS7830 tristate {
      prompt "MosChip MCS7830 based Ethernet adapters" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_RNDIS_HOST tristate {
      prompt "Host for RNDIS and ActiveSync devices (EXPERIMENTAL)" if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
      depends on [USB_USBNET && EXPERIMENTAL]
      select USB_NET_CDCETHER if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
      inherited [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
     }
     config USB_NET_CDC_SUBSET tristate {
      prompt "Simple USB Network Links (CDC Ethernet subset)" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      default [y] if [NETDEVICES && USB && NET && USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
      config USB_ALI_M5632 boolean {
       prompt "ALi M5632 based 'USB 2.0 Data Link' cables" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       depends on [USB_NET_CDC_SUBSET]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      }
      config USB_AN2720 boolean {
       prompt "AnchorChips 2720 based cables (Xircom PGUNET, ...)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       depends on [USB_NET_CDC_SUBSET]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      }
      config USB_BELKIN boolean {
       prompt "eTEK based host-to-host cables (Advance, Belkin, ...)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       depends on [USB_NET_CDC_SUBSET]
       default [y] if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      }
      config USB_ARMLINUX boolean {
       prompt "Embedded ARM Linux links (iPaq, ...)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       depends on [USB_NET_CDC_SUBSET]
       default [y] if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      }
      config USB_EPSON2888 boolean {
       prompt "Epson 2888 based firmware (DEVELOPMENT)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       depends on [USB_NET_CDC_SUBSET]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      }
      config USB_KC2190 boolean {
       prompt "KT Technology KC2190 based cables (InstaNet)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET && EXPERIMENTAL]
       depends on [USB_NET_CDC_SUBSET && EXPERIMENTAL]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET && EXPERIMENTAL]
      }
     }
     config USB_NET_ZAURUS tristate {
      prompt "Sharp Zaurus (stock ROMs) and compatible" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      select USB_NET_CDCETHER if [NETDEVICES && USB && NET && USB_USBNET]
      select CRC32 if [NETDEVICES && USB && NET && USB_USBNET]
      default [y] if [NETDEVICES && USB && NET && USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
    }
    config USB_HSO tristate {
     prompt "Option USB High Speed Mobile Devices" if [NETDEVICES && NET && USB && RFKILL]
     depends on [USB && RFKILL]
     default [n] if [NETDEVICES && NET && USB && RFKILL]
     inherited [NETDEVICES && NET && USB && RFKILL]
    }
    config USB_NET_INT51X1 tristate {
     prompt "Intellon PLC based usb adapter" if [NETDEVICES && USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     inherited [NETDEVICES && USB && NET && USB_USBNET]
    }
    config USB_CDC_PHONET tristate {
     prompt "CDC Phonet support" if [NETDEVICES && USB && NET && PHONET]
     depends on [PHONET]
     inherited [NETDEVICES && USB && NET && PHONET]
    }
   }
   menuconfig NET_PCMCIA boolean {
    prompt "PCMCIA network device support" if [NETDEVICES && PCMCIA]
    depends on [PCMCIA]
    inherited [NETDEVICES && PCMCIA]
    if [NETDEVICES && NET_PCMCIA && PCMCIA] {
     config PCMCIA_3C589 tristate {
      prompt "3Com 3c589 PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_3C574 tristate {
      prompt "3Com 3c574 PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_FMVJ18X tristate {
      prompt "Fujitsu FMV-J18x PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      select CRC32 if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_PCNET tristate {
      prompt "NE2000 compatible PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      select CRC32 if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_NMCLAN tristate {
      prompt "New Media PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_SMC91C92 tristate {
      prompt "SMC 91Cxx PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      select CRC32 if [NETDEVICES && NET_PCMCIA && PCMCIA]
      select MII if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_XIRC2PS tristate {
      prompt "Xircom 16-bit PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_AXNET tristate {
      prompt "Asix AX88190 PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config ARCNET_COM20020_CS tristate {
      prompt "COM20020 ARCnet PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA && ARCNET_COM20020]
      depends on [ARCNET_COM20020]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA && ARCNET_COM20020]
     }
     config PCMCIA_IBMTR tristate {
      prompt "IBM PCMCIA tokenring adapter support" if [NETDEVICES && NET_PCMCIA && PCMCIA && IBMTR!="y" && TR]
      depends on [IBMTR!="y" && TR]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA && IBMTR!="y" && TR]
     }
    }
   }
   menuconfig WAN boolean {
    prompt "Wan interfaces support" if [NETDEVICES]
    inherited [NETDEVICES]
    if [NETDEVICES && WAN] {
     config HOSTESS_SV11 tristate {
      prompt "Comtrol Hostess SV-11 support" if [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET && HDLC]
      depends on [ISA && m && ISA_DMA_API && INET && HDLC]
      inherited [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET && HDLC]
     }
     config COSA tristate {
      prompt "COSA/SRP sync serial boards support" if [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && HDLC]
      depends on [ISA && m && ISA_DMA_API && HDLC]
      inherited [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && HDLC]
     }
     config LANMEDIA tristate {
      prompt "LanMedia Corp. SSI/V.35, T1/E1, HSSI, T3 boards" if [NETDEVICES && WAN && PCI && VIRT_TO_BUS && HDLC]
      depends on [PCI && VIRT_TO_BUS && HDLC]
      inherited [NETDEVICES && WAN && PCI && VIRT_TO_BUS && HDLC]
     }
     config SEALEVEL_4021 tristate {
      prompt "Sealevel Systems 4021 support" if [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET && HDLC]
      depends on [ISA && m && ISA_DMA_API && INET && HDLC]
      inherited [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET && HDLC]
     }
     config HDLC tristate {
      prompt "Generic HDLC layer" if [NETDEVICES && WAN]
      inherited [NETDEVICES && WAN]
      config HDLC_RAW tristate {
       prompt "Raw HDLC support" if [NETDEVICES && WAN && HDLC]
       depends on [HDLC]
       inherited [NETDEVICES && WAN && HDLC]
      }
      config HDLC_RAW_ETH tristate {
       prompt "Raw HDLC Ethernet device support" if [NETDEVICES && WAN && HDLC]
       depends on [HDLC]
       inherited [NETDEVICES && WAN && HDLC]
      }
      config HDLC_CISCO tristate {
       prompt "Cisco HDLC support" if [NETDEVICES && WAN && HDLC]
       depends on [HDLC]
       inherited [NETDEVICES && WAN && HDLC]
      }
      config HDLC_FR tristate {
       prompt "Frame Relay support" if [NETDEVICES && WAN && HDLC]
       depends on [HDLC]
       inherited [NETDEVICES && WAN && HDLC]
      }
      config HDLC_PPP tristate {
       prompt "Synchronous Point-to-Point Protocol (PPP) support" if [NETDEVICES && WAN && HDLC]
       depends on [HDLC]
       inherited [NETDEVICES && WAN && HDLC]
      }
      config HDLC_X25 tristate {
       prompt "X.25 protocol support" if [NETDEVICES && WAN && HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
       depends on [HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
       inherited [NETDEVICES && WAN && HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
      }
      config PCI200SYN tristate {
       prompt "Goramo PCI200SYN support" if [NETDEVICES && WAN && HDLC && PCI]
       depends on [HDLC && PCI]
       inherited [NETDEVICES && WAN && HDLC && PCI]
      }
      config WANXL tristate {
       prompt "SBE Inc. wanXL support" if [NETDEVICES && WAN && HDLC && PCI]
       depends on [HDLC && PCI]
       inherited [NETDEVICES && WAN && HDLC && PCI]
       config WANXL_BUILD_FIRMWARE boolean {
        prompt "rebuild wanXL firmware" if [NETDEVICES && WAN && WANXL && !PREVENT_FIRMWARE_BUILD]
        depends on [WANXL && !PREVENT_FIRMWARE_BUILD]
        inherited [NETDEVICES && WAN && WANXL && !PREVENT_FIRMWARE_BUILD]
       }
      }
      config PC300 tristate {
       prompt "Cyclades-PC300 support (RS-232/V.35, X.21, T1/E1 boards)" if [NETDEVICES && WAN && HDLC && PCI && BROKEN]
       depends on [HDLC && PCI && BROKEN]
       inherited [NETDEVICES && WAN && HDLC && PCI && BROKEN]
       config PC300_MLPPP boolean {
        prompt "Cyclades-PC300 MLPPP support" if [NETDEVICES && WAN && PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
        depends on [PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
        inherited [NETDEVICES && WAN && PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
       }
      }
      config PC300TOO tristate {
       prompt "Cyclades PC300 RSV/X21 alternative support" if [NETDEVICES && WAN && HDLC && PCI]
       depends on [HDLC && PCI]
       inherited [NETDEVICES && WAN && HDLC && PCI]
      }
      config N2 tristate {
       prompt "SDL RISCom/N2 support" if [NETDEVICES && WAN && HDLC && ISA]
       depends on [HDLC && ISA]
       inherited [NETDEVICES && WAN && HDLC && ISA]
      }
      config C101 tristate {
       prompt "Moxa C101 support" if [NETDEVICES && WAN && HDLC && ISA]
       depends on [HDLC && ISA]
       inherited [NETDEVICES && WAN && HDLC && ISA]
      }
      config FARSYNC tristate {
       prompt "FarSync T-Series support" if [NETDEVICES && WAN && HDLC && PCI]
       depends on [HDLC && PCI]
       inherited [NETDEVICES && WAN && HDLC && PCI]
      }
      config DSCC4 tristate {
       prompt "Etinc PCISYNC serial board support" if [NETDEVICES && WAN && HDLC && PCI && m && <choice>]
       depends on [HDLC && PCI && m]
       inherited [NETDEVICES && WAN && HDLC && PCI && m && <choice>]
       config DSCC4_PCISYNC boolean {
        prompt "Etinc PCISYNC features" if [NETDEVICES && WAN && DSCC4]
        depends on [DSCC4]
        inherited [NETDEVICES && WAN && DSCC4]
       }
       config DSCC4_PCI_RST boolean {
        prompt "Hard reset support" if [NETDEVICES && WAN && DSCC4]
        depends on [DSCC4]
        inherited [NETDEVICES && WAN && DSCC4]
       }
      }
      config IXP4XX_HSS tristate {
       prompt "Intel IXP4xx HSS (synchronous serial port) support" if [NETDEVICES && WAN && HDLC && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
       depends on [HDLC && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
       inherited [NETDEVICES && WAN && HDLC && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
      }
     }
     config DLCI tristate {
      prompt "Frame Relay DLCI support" if [NETDEVICES && WAN]
      inherited [NETDEVICES && WAN]
      config DLCI_MAX integer {
       prompt "Max DLCI per device" if [NETDEVICES && WAN && DLCI]
       depends on [DLCI]
       default [8] if [NETDEVICES && WAN && DLCI]
       inherited [NETDEVICES && WAN && DLCI]
      }
      config SDLA tristate {
       prompt "SDLA (Sangoma S502/S508) support" if [NETDEVICES && WAN && DLCI && ISA]
       depends on [DLCI && ISA]
       inherited [NETDEVICES && WAN && DLCI && ISA]
      }
     }
     config WAN_ROUTER_DRIVERS tristate {
      prompt "WAN router drivers" if [NETDEVICES && WAN && WAN_ROUTER]
      depends on [WAN_ROUTER]
      inherited [NETDEVICES && WAN && WAN_ROUTER]
      config CYCLADES_SYNC tristate {
       prompt "Cyclom 2X(tm) cards (EXPERIMENTAL)" if [NETDEVICES && WAN && WAN_ROUTER_DRIVERS && (PCI || ISA)]
       depends on [WAN_ROUTER_DRIVERS && (PCI || ISA)]
       inherited [NETDEVICES && WAN && WAN_ROUTER_DRIVERS && (PCI || ISA)]
       config CYCLOMX_X25 boolean {
        prompt "Cyclom 2X X.25 support (EXPERIMENTAL)" if [NETDEVICES && WAN && CYCLADES_SYNC]
        depends on [CYCLADES_SYNC]
        inherited [NETDEVICES && WAN && CYCLADES_SYNC]
       }
      }
     }
     config LAPBETHER tristate {
      prompt "LAPB over Ethernet driver (EXPERIMENTAL)" if [NETDEVICES && WAN && LAPB && X25]
      depends on [LAPB && X25]
      inherited [NETDEVICES && WAN && LAPB && X25]
     }
     config X25_ASY tristate {
      prompt "X.25 async driver (EXPERIMENTAL)" if [NETDEVICES && WAN && LAPB && X25]
      depends on [LAPB && X25]
      inherited [NETDEVICES && WAN && LAPB && X25]
     }
     config SBNI tristate {
      prompt "Granch SBNI12 Leased Line adapter support" if [NETDEVICES && WAN && X86]
      depends on [X86]
      inherited [NETDEVICES && WAN && X86]
      config SBNI_MULTILINE boolean {
       prompt "Multiple line feature support" if [NETDEVICES && WAN && SBNI]
       depends on [SBNI]
       inherited [NETDEVICES && WAN && SBNI]
      }
     }
    }
   }
   menuconfig ATM_DRIVERS boolean {
    prompt "ATM drivers" if [NETDEVICES && ATM]
    depends on [NETDEVICES && ATM]
    default [y] if [NETDEVICES && ATM]
    inherited [NETDEVICES && ATM]
    if [ATM_DRIVERS && NETDEVICES && ATM] {
     config ATM_DUMMY tristate {
      prompt "Dummy ATM driver" if [ATM_DRIVERS && NETDEVICES && ATM]
      inherited [ATM_DRIVERS && NETDEVICES && ATM]
     }
     config ATM_TCP tristate {
      prompt "ATM over TCP" if [ATM_DRIVERS && NETDEVICES && ATM && INET]
      depends on [INET]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && INET]
     }
     config ATM_LANAI tristate {
      prompt "Efficient Networks Speedstream 3010" if [ATM_DRIVERS && NETDEVICES && PCI && ATM]
      depends on [PCI && ATM]
      inherited [ATM_DRIVERS && NETDEVICES && PCI && ATM]
     }
     config ATM_ENI tristate {
      prompt "Efficient Networks ENI155P" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      depends on [PCI]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      config ATM_ENI_DEBUG boolean {
       prompt "Enable extended debugging" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
       depends on [ATM_ENI]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
      }
      config ATM_ENI_TUNE_BURST boolean {
       prompt "Fine-tune burst settings" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
       depends on [ATM_ENI]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
       config ATM_ENI_BURST_TX_16W boolean {
        prompt "Enable 16W TX bursts (discouraged)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_TX_8W boolean {
        prompt "Enable 8W TX bursts (recommended)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_TX_4W boolean {
        prompt "Enable 4W TX bursts (optional)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_TX_2W boolean {
        prompt "Enable 2W TX bursts (optional)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_16W boolean {
        prompt "Enable 16W RX bursts (discouraged)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_8W boolean {
        prompt "Enable 8W RX bursts (discouraged)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_4W boolean {
        prompt "Enable 4W RX bursts (recommended)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_2W boolean {
        prompt "Enable 2W RX bursts (optional)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
      }
     }
     config ATM_FIRESTREAM tristate {
      prompt "Fujitsu FireStream (FS50/FS155) " if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      depends on [PCI && VIRT_TO_BUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
     }
     config ATM_ZATM tristate {
      prompt "ZeitNet ZN1221/ZN1225" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      depends on [PCI && VIRT_TO_BUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      config ATM_ZATM_DEBUG boolean {
       prompt "Enable extended debugging" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ZATM]
       depends on [ATM_ZATM]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ZATM]
      }
     }
     config ATM_NICSTAR tristate {
      prompt "IDT 77201 (NICStAR) (ForeRunnerLE)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && !64BIT && VIRT_TO_BUS]
      depends on [PCI && !64BIT && VIRT_TO_BUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && !64BIT && VIRT_TO_BUS]
      config ATM_NICSTAR_USE_SUNI boolean {
       prompt "Use suni PHY driver (155Mbps)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
       depends on [ATM_NICSTAR]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
      }
      config ATM_NICSTAR_USE_IDT77105 boolean {
       prompt "Use IDT77015 PHY driver (25Mbps)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
       depends on [ATM_NICSTAR]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
      }
     }
     config ATM_IDT77252 tristate {
      prompt "IDT 77252 (NICStAR II)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      depends on [PCI]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      config ATM_IDT77252_DEBUG boolean {
       prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
       depends on [ATM_IDT77252]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
      }
      config ATM_IDT77252_RCV_ALL boolean {
       prompt "Receive ALL cells in raw queue" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
       depends on [ATM_IDT77252]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
      }
      config ATM_IDT77252_USE_SUNI boolean {
       depends on [ATM_IDT77252]
       default [y] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
      }
     }
     config ATM_AMBASSADOR tristate {
      prompt "Madge Ambassador (Collage PCI 155 Server)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      depends on [PCI && VIRT_TO_BUS]
      select BITREVERSE if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      config ATM_AMBASSADOR_DEBUG boolean {
       prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_AMBASSADOR]
       depends on [ATM_AMBASSADOR]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_AMBASSADOR]
      }
     }
     config ATM_HORIZON tristate {
      prompt "Madge Horizon [Ultra] (Collage PCI 25 and Collage PCI 155 Client)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      depends on [PCI && VIRT_TO_BUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      config ATM_HORIZON_DEBUG boolean {
       prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_HORIZON]
       depends on [ATM_HORIZON]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_HORIZON]
      }
     }
     config ATM_IA tristate {
      prompt "Interphase ATM PCI x575/x525/x531" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      depends on [PCI]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      config ATM_IA_DEBUG boolean {
       prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IA]
       depends on [ATM_IA]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IA]
      }
     }
     config ATM_FORE200E tristate {
      prompt "FORE Systems 200E-series" if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS)]
      depends on [PCI || SBUS]
      select FW_LOADER if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS)]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS)]
      config ATM_FORE200E_USE_TASKLET boolean {
       prompt "Defer interrupt work to a tasklet" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
       depends on [ATM_FORE200E]
       default [n] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
      }
      config ATM_FORE200E_TX_RETRY integer {
       prompt "Maximum number of tx retries" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
       depends on [ATM_FORE200E]
       default [16] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
      }
      config ATM_FORE200E_DEBUG integer {
       prompt "Debugging level (0-3)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
       depends on [ATM_FORE200E]
       default [0] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
      }
     }
     config ATM_HE tristate {
      prompt "ForeRunner HE Series" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      depends on [PCI]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      config ATM_HE_USE_SUNI boolean {
       prompt "Use S/UNI PHY driver" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_HE]
       depends on [ATM_HE]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_HE]
      }
     }
     config ATM_SOLOS tristate {
      prompt "Solos ADSL2+ PCI Multiport card driver" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      depends on [PCI]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
     }
    }
   }
   menuconfig IEEE802154_DRIVERS tristate {
    prompt "IEEE 802.15.4 drivers" if [NETDEVICES && IEEE802154]
    depends on [NETDEVICES && IEEE802154]
    default [y] if [NETDEVICES && IEEE802154]
    inherited [NETDEVICES && IEEE802154]
    config IEEE802154_FAKEHARD tristate {
     prompt "Fake LR-WPAN driver with several interconnected devices" if [NETDEVICES && IEEE802154_DRIVERS]
     depends on [IEEE802154_DRIVERS]
     inherited [NETDEVICES && IEEE802154_DRIVERS]
    }
   }
   menu "S/390 network device drivers" {
    depends on [NETDEVICES && S390]
    config LCS tristate {
     prompt "Lan Channel Station Interface" if [S390 && CCW && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
     depends on [CCW && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
     inherited [S390 && CCW && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
    }
    config CTCM tristate {
     prompt "CTC and MPC SNA device support" if [S390 && CCW && NETDEVICES]
     depends on [CCW && NETDEVICES]
     inherited [S390 && CCW && NETDEVICES]
    }
    config NETIUCV tristate {
     prompt "IUCV network device support (VM only)" if [S390 && IUCV && NETDEVICES]
     depends on [IUCV && NETDEVICES]
     inherited [S390 && IUCV && NETDEVICES]
    }
    config SMSGIUCV tristate {
     prompt "IUCV special message support (VM only)" if [NETDEVICES && S390 && IUCV]
     depends on [IUCV]
     inherited [NETDEVICES && S390 && IUCV]
    }
    config CLAW tristate {
     prompt "CLAW device support" if [S390 && CCW && NETDEVICES]
     depends on [CCW && NETDEVICES]
     inherited [S390 && CCW && NETDEVICES]
    }
    config QETH tristate {
     prompt "Gigabit Ethernet device support" if [S390 && CCW && NETDEVICES && IP_MULTICAST && QDIO]
     depends on [CCW && NETDEVICES && IP_MULTICAST && QDIO]
     inherited [S390 && CCW && NETDEVICES && IP_MULTICAST && QDIO]
     config QETH_L2 tristate {
      prompt "qeth layer 2 device support" if [NETDEVICES && S390 && QETH]
      depends on [QETH]
      inherited [NETDEVICES && S390 && QETH]
     }
     config QETH_L3 tristate {
      prompt "qeth layer 3 device support" if [NETDEVICES && S390 && QETH]
      depends on [QETH]
      inherited [NETDEVICES && S390 && QETH]
     }
    }
    config QETH_IPV6 boolean {
     depends on [QETH_L3="IPV6" || QETH_L3 && IPV6="y"]
     default [y] if [NETDEVICES && S390 && (QETH_L3="IPV6" || QETH_L3 && IPV6="y")]
     inherited [NETDEVICES && S390 && (QETH_L3="IPV6" || QETH_L3 && IPV6="y")]
    }
    config CCWGROUP tristate {
     default [LCS || CTCM || QETH] if [NETDEVICES && S390]
     inherited [NETDEVICES && S390]
    }
   }
   config XEN_NETDEV_FRONTEND tristate {
    prompt "Xen network device frontend driver" if [NETDEVICES && XEN]
    depends on [XEN]
    default [y] if [NETDEVICES && XEN]
    inherited [NETDEVICES && XEN]
   }
   config ISERIES_VETH tristate {
    prompt "iSeries Virtual Ethernet driver support" if [NETDEVICES && PPC_ISERIES]
    depends on [PPC_ISERIES]
    inherited [NETDEVICES && PPC_ISERIES]
   }
   config RIONET tristate {
    prompt "RapidIO Ethernet over messaging driver support" if [NETDEVICES && RAPIDIO]
    depends on [RAPIDIO]
    inherited [NETDEVICES && RAPIDIO]
    config RIONET_TX_SIZE integer {
     prompt "Number of outbound queue entries" if [NETDEVICES && RIONET]
     depends on [RIONET]
     default [128] if [NETDEVICES && RIONET]
     inherited [NETDEVICES && RIONET]
    }
    config RIONET_RX_SIZE integer {
     prompt "Number of inbound queue entries" if [NETDEVICES && RIONET]
     depends on [RIONET]
     default [128] if [NETDEVICES && RIONET]
     inherited [NETDEVICES && RIONET]
    }
   }
   config FDDI tristate {
    prompt "FDDI driver support" if [NETDEVICES && (PCI || EISA || TC)]
    depends on [PCI || EISA || TC]
    inherited [NETDEVICES && (PCI || EISA || TC)]
    config DEFXX tristate {
     prompt "Digital DEFTA/DEFEA/DEFPA adapter support" if [NETDEVICES && FDDI && (PCI || EISA || TC)]
     depends on [FDDI && (PCI || EISA || TC)]
     inherited [NETDEVICES && FDDI && (PCI || EISA || TC)]
     config DEFXX_MMIO boolean {
      prompt "Use MMIO instead of PIO" if [NETDEVICES && DEFXX && (PCI || EISA)]
      depends on [DEFXX]
      default [n] if [NETDEVICES && DEFXX && (PCI || EISA)]
      default [y] if [NETDEVICES && DEFXX]
      inherited [NETDEVICES && DEFXX]
     }
    }
    config SKFP tristate {
     prompt "SysKonnect FDDI PCI support" if [NETDEVICES && FDDI && PCI]
     depends on [FDDI && PCI]
     select BITREVERSE if [NETDEVICES && FDDI && PCI]
     inherited [NETDEVICES && FDDI && PCI]
    }
   }
   config HIPPI boolean {
    prompt "HIPPI driver support (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && INET && PCI]
    depends on [EXPERIMENTAL && INET && PCI]
    inherited [NETDEVICES && EXPERIMENTAL && INET && PCI]
    config ROADRUNNER tristate {
     prompt "Essential RoadRunner HIPPI PCI adapter support (EXPERIMENTAL)" if [NETDEVICES && HIPPI && PCI]
     depends on [HIPPI && PCI]
     inherited [NETDEVICES && HIPPI && PCI]
     config ROADRUNNER_LARGE_RINGS boolean {
      prompt "Use large TX/RX rings (EXPERIMENTAL)" if [NETDEVICES && ROADRUNNER]
      depends on [ROADRUNNER]
      inherited [NETDEVICES && ROADRUNNER]
     }
    }
   }
   config PLIP tristate {
    prompt "PLIP (parallel port) support" if [NETDEVICES && PARPORT]
    depends on [PARPORT]
    inherited [NETDEVICES && PARPORT]
   }
   config PPP tristate {
    prompt "PPP (point-to-point protocol) support" if [NETDEVICES]
    select SLHC if [NETDEVICES]
    inherited [NETDEVICES]
    config PPP_MULTILINK boolean {
     prompt "PPP multilink support (EXPERIMENTAL)" if [NETDEVICES && PPP && EXPERIMENTAL]
     depends on [PPP && EXPERIMENTAL]
     inherited [NETDEVICES && PPP && EXPERIMENTAL]
    }
    config PPP_FILTER boolean {
     prompt "PPP filtering" if [NETDEVICES && PPP]
     depends on [PPP]
     inherited [NETDEVICES && PPP]
    }
    config PPP_ASYNC tristate {
     prompt "PPP support for async serial ports" if [NETDEVICES && PPP]
     depends on [PPP]
     select CRC_CCITT if [NETDEVICES && PPP]
     inherited [NETDEVICES && PPP]
    }
    config PPP_SYNC_TTY tristate {
     prompt "PPP support for sync tty ports" if [NETDEVICES && PPP]
     depends on [PPP]
     inherited [NETDEVICES && PPP]
    }
    config PPP_DEFLATE tristate {
     prompt "PPP Deflate compression" if [NETDEVICES && PPP]
     depends on [PPP]
     select ZLIB_INFLATE if [NETDEVICES && PPP]
     select ZLIB_DEFLATE if [NETDEVICES && PPP]
     inherited [NETDEVICES && PPP]
    }
    config PPP_BSDCOMP tristate {
     prompt "PPP BSD-Compress compression" if [NETDEVICES && PPP]
     depends on [PPP]
     inherited [NETDEVICES && PPP]
    }
    config PPP_MPPE tristate {
     prompt "PPP MPPE compression (encryption) (EXPERIMENTAL)" if [NETDEVICES && PPP && EXPERIMENTAL]
     depends on [PPP && EXPERIMENTAL]
     select CRYPTO if [NETDEVICES && PPP && EXPERIMENTAL]
     select CRYPTO_SHA1 if [NETDEVICES && PPP && EXPERIMENTAL]
     select CRYPTO_ARC4 if [NETDEVICES && PPP && EXPERIMENTAL]
     select CRYPTO_ECB if [NETDEVICES && PPP && EXPERIMENTAL]
     inherited [NETDEVICES && PPP && EXPERIMENTAL]
    }
    config PPPOE tristate {
     prompt "PPP over Ethernet (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && PPP]
     depends on [EXPERIMENTAL && PPP]
     inherited [NETDEVICES && EXPERIMENTAL && PPP]
    }
    config PPPOATM tristate {
     prompt "PPP over ATM" if [NETDEVICES && ATM && PPP]
     depends on [ATM && PPP]
     inherited [NETDEVICES && ATM && PPP]
    }
    config PPPOL2TP tristate {
     prompt "PPP over L2TP (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && PPP && INET]
     depends on [EXPERIMENTAL && PPP && INET]
     inherited [NETDEVICES && EXPERIMENTAL && PPP && INET]
    }
   }
   config SLIP tristate {
    prompt "SLIP (serial line) support" if [NETDEVICES]
    inherited [NETDEVICES]
    config SLIP_COMPRESSED boolean {
     prompt "CSLIP compressed headers" if [NETDEVICES && SLIP]
     depends on [SLIP]
     select SLHC if [NETDEVICES && SLIP]
     inherited [NETDEVICES && SLIP]
    }
   }
   config SLHC tristate {
    inherited [NETDEVICES]
   }
   config SLIP_SMART boolean {
    prompt "Keepalive and linefill" if [NETDEVICES && SLIP]
    depends on [SLIP]
    inherited [NETDEVICES && SLIP]
   }
   config SLIP_MODE_SLIP6 boolean {
    prompt "Six bit SLIP encapsulation" if [NETDEVICES && SLIP]
    depends on [SLIP]
    inherited [NETDEVICES && SLIP]
   }
   config NET_FC boolean {
    prompt "Fibre Channel driver support" if [NETDEVICES && SCSI && PCI]
    depends on [SCSI && PCI]
    inherited [NETDEVICES && SCSI && PCI]
   }
   config NETCONSOLE tristate {
    prompt "Network console logging support (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NETDEVICES && EXPERIMENTAL]
    config NETCONSOLE_DYNAMIC boolean {
     prompt "Dynamic reconfiguration of logging targets (EXPERIMENTAL)" if [NETDEVICES && NETCONSOLE && SYSFS && EXPERIMENTAL]
     depends on [NETCONSOLE && SYSFS && EXPERIMENTAL]
     select CONFIGFS_FS if [NETDEVICES && NETCONSOLE && SYSFS && EXPERIMENTAL]
     inherited [NETDEVICES && NETCONSOLE && SYSFS && EXPERIMENTAL]
    }
   }
   config NETPOLL boolean {
    default [NETCONSOLE] if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config NETPOLL_TRAP boolean {
    prompt "Netpoll traffic trapping" if [NETDEVICES && NETPOLL]
    default [n] if [NETDEVICES && NETPOLL]
    depends on [NETPOLL]
    inherited [NETDEVICES && NETPOLL]
   }
   config NET_POLL_CONTROLLER boolean {
    default [NETPOLL] if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config VIRTIO_NET tristate {
    prompt "Virtio network driver (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && VIRTIO]
    depends on [EXPERIMENTAL && VIRTIO]
    inherited [NETDEVICES && EXPERIMENTAL && VIRTIO]
   }
   config VMXNET3 tristate {
    prompt "VMware VMXNET3 ethernet driver" if [NETDEVICES && PCI && X86 && INET]
    depends on [PCI && X86 && INET]
    inherited [NETDEVICES && PCI && X86 && INET]
   }
  }
 }
 menuconfig ISDN boolean {
  prompt "ISDN support" if [NET && !S390]
  depends on [NET]
  depends on [!S390]
  inherited [NET && !S390]
  if [ISDN] {
   menuconfig ISDN_I4L tristate {
    prompt "Old ISDN4Linux (deprecated)" if [ISDN]
    inherited [ISDN]
   }
   menuconfig MISDN tristate {
    prompt "Modular ISDN driver" if [ISDN]
    inherited [ISDN]
    if [ISDN && MISDN!="n"] {
     config MISDN_DSP tristate {
      prompt "Digital Audio Processing of transparent data" if [ISDN && MISDN]
      depends on [MISDN]
      inherited [ISDN && MISDN]
     }
     config MISDN_L1OIP tristate {
      prompt "ISDN over IP tunnel" if [ISDN && MISDN]
      depends on [MISDN]
      inherited [ISDN && MISDN]
     }
     config MISDN_HFCPCI tristate {
      prompt "Support for HFC PCI cards" if [ISDN && MISDN && PCI]
      depends on [MISDN]
      depends on [PCI]
      inherited [ISDN && MISDN && PCI]
     }
     config MISDN_HFCMULTI tristate {
      prompt "Support for HFC multiport cards (HFC-4S/8S/E1)" if [ISDN && (PCI || 8xx) && MISDN]
      depends on [PCI || 8xx]
      depends on [MISDN]
      inherited [ISDN && (PCI || 8xx) && MISDN]
      config MISDN_HFCMULTI_8xx boolean {
       prompt "Support for XHFC embedded board in HFC multiport driver" if [ISDN && MISDN && MISDN_HFCMULTI && 8xx]
       depends on [MISDN]
       depends on [MISDN_HFCMULTI]
       depends on [8xx]
       default [8xx] if [ISDN && MISDN && MISDN_HFCMULTI && 8xx]
       inherited [ISDN && MISDN && MISDN_HFCMULTI && 8xx]
      }
     }
     config MISDN_HFCUSB tristate {
      prompt "Support for HFC-S USB based TAs" if [ISDN && MISDN!="n" && USB]
      depends on [USB]
      inherited [ISDN && MISDN!="n" && USB]
     }
     config MISDN_AVMFRITZ tristate {
      prompt "Support for AVM FRITZ!CARD PCI" if [ISDN && MISDN && PCI]
      depends on [MISDN]
      depends on [PCI]
      select MISDN_IPAC if [ISDN && MISDN && PCI]
      inherited [ISDN && MISDN && PCI]
     }
     config MISDN_SPEEDFAX tristate {
      prompt "Support for Sedlbauer Speedfax+" if [ISDN && MISDN && PCI]
      depends on [MISDN]
      depends on [PCI]
      select MISDN_IPAC if [ISDN && MISDN && PCI]
      select MISDN_ISAR if [ISDN && MISDN && PCI]
      inherited [ISDN && MISDN && PCI]
     }
     config MISDN_INFINEON tristate {
      prompt "Support for cards with Infineon chipset" if [ISDN && MISDN && PCI]
      depends on [MISDN]
      depends on [PCI]
      select MISDN_IPAC if [ISDN && MISDN && PCI]
      inherited [ISDN && MISDN && PCI]
     }
     config MISDN_W6692 tristate {
      prompt "Support for cards with Winbond 6692" if [ISDN && MISDN && PCI]
      depends on [MISDN]
      depends on [PCI]
      inherited [ISDN && MISDN && PCI]
     }
     config MISDN_NETJET tristate {
      prompt "Support for NETJet cards" if [ISDN && MISDN && PCI]
      depends on [MISDN]
      depends on [PCI]
      select MISDN_IPAC if [ISDN && MISDN && PCI]
      select ISDN_HDLC if [ISDN && MISDN && PCI]
      select ISDN_I4L if [ISDN && MISDN && PCI]
      inherited [ISDN && MISDN && PCI]
     }
     config MISDN_IPAC tristate {
      depends on [MISDN]
      inherited [ISDN && MISDN]
     }
     config MISDN_ISAR tristate {
      depends on [MISDN]
      inherited [ISDN && MISDN]
     }
    }
   }
   if [ISDN && ISDN_I4L] {
    config ISDN_PPP boolean {
     prompt "Support synchronous PPP" if [ISDN && ISDN_I4L && INET]
     depends on [INET]
     select SLHC if [ISDN && ISDN_I4L && INET]
     inherited [ISDN && ISDN_I4L && INET]
     config ISDN_PPP_VJ boolean {
      prompt "Use VJ-compression with synchronous PPP" if [ISDN && ISDN_I4L && ISDN_PPP]
      depends on [ISDN_PPP]
      inherited [ISDN && ISDN_I4L && ISDN_PPP]
     }
     config ISDN_MPP boolean {
      prompt "Support generic MP (RFC 1717)" if [ISDN && ISDN_I4L && ISDN_PPP]
      depends on [ISDN_PPP]
      inherited [ISDN && ISDN_I4L && ISDN_PPP]
     }
     config IPPP_FILTER boolean {
      prompt "Filtering for synchronous PPP" if [ISDN && ISDN_I4L && ISDN_PPP]
      depends on [ISDN_PPP]
      inherited [ISDN && ISDN_I4L && ISDN_PPP]
     }
     config ISDN_PPP_BSDCOMP tristate {
      prompt "Support BSD compression" if [ISDN && ISDN_I4L && ISDN_PPP]
      depends on [ISDN_PPP]
      inherited [ISDN && ISDN_I4L && ISDN_PPP]
     }
    }
    config ISDN_AUDIO boolean {
     prompt "Support audio via ISDN" if [ISDN && ISDN_I4L]
     inherited [ISDN && ISDN_I4L]
     config ISDN_TTY_FAX boolean {
      prompt "Support AT-Fax Class 1 and 2 commands" if [ISDN && ISDN_I4L && ISDN_AUDIO]
      depends on [ISDN_AUDIO]
      inherited [ISDN && ISDN_I4L && ISDN_AUDIO]
     }
    }
    config ISDN_X25 boolean {
     prompt "X.25 PLP on top of ISDN" if [ISDN && ISDN_I4L && X25]
     depends on [X25]
     inherited [ISDN && ISDN_I4L && X25]
    }
    menu "ISDN feature submodules" {
     depends on [ISDN && ISDN_I4L]
     config ISDN_DRV_LOOP tristate {
      prompt "isdnloop support" if [ISDN && ISDN_I4L && BROKEN_ON_SMP]
      depends on [BROKEN_ON_SMP]
      inherited [ISDN && ISDN_I4L && BROKEN_ON_SMP]
     }
     config ISDN_DIVERSION tristate {
      prompt "Support isdn diversion services" if [ISDN && ISDN_I4L]
      inherited [ISDN && ISDN_I4L]
     }
    }
    menu "Passive cards" {
     depends on [ISDN && ISDN_I4L]
     config ISDN_DRV_HISAX tristate {
      prompt "HiSax SiemensChipSet driver support" if [ISDN && ISDN_I4L]
      select CRC_CCITT if [ISDN && ISDN_I4L]
      inherited [ISDN && ISDN_I4L]
      if [ISDN && ISDN_I4L && ISDN_DRV_HISAX!="n"] {
       config HISAX_EURO boolean {
        prompt "HiSax Support for EURO/DSS1" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        config DE_AOC boolean {
         prompt "Support for german chargeinfo" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
         depends on [HISAX_EURO]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
        }
        config HISAX_NO_SENDCOMPLETE boolean {
         prompt "Disable sending complete" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
         depends on [HISAX_EURO]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
        }
        config HISAX_NO_LLC boolean {
         prompt "Disable sending low layer compatibility" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
         depends on [HISAX_EURO]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
        }
        config HISAX_NO_KEYPAD boolean {
         prompt "Disable keypad protocol option" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
         depends on [HISAX_EURO]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
        }
       }
       config HISAX_1TR6 boolean {
        prompt "HiSax Support for german 1TR6" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_NI1 boolean {
        prompt "HiSax Support for US NI1" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_MAX_CARDS integer {
        prompt "Maximum number of cards supported by HiSax" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        default [8] if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_16_0 boolean {
        prompt "Teles 16.0/8.0" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
       }
       config HISAX_16_3 boolean {
        prompt "Teles 16.3 or PNP or PCMCIA" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_TELESPCI boolean {
        prompt "Teles PCI" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
        depends on [PCI && PCI_LEGACY && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
       }
       config HISAX_S0BOX boolean {
        prompt "Teles S0Box" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_AVM_A1 boolean {
        prompt "AVM A1 (Fritz)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
       }
       config HISAX_FRITZPCI boolean {
        prompt "AVM PnP/PCI (Fritz!PnP/PCI)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && (BROKEN || !PPC64)]
        depends on [BROKEN || !PPC64]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && (BROKEN || !PPC64)]
       }
       config HISAX_AVM_A1_PCMCIA boolean {
        prompt "AVM A1 PCMCIA (Fritz)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        depends on [HISAX_AVM_A1_CS]
        default [y] if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_AVM_A1_CS]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_ELSA boolean {
        prompt "Elsa cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_IX1MICROR2 boolean {
        prompt "ITK ix1-micro Revision 2" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
       }
       config HISAX_DIEHLDIVA boolean {
        prompt "Eicon.Diehl Diva cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_ASUSCOM boolean {
        prompt "ASUSCOM ISA cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
       }
       config HISAX_TELEINT boolean {
        prompt "TELEINT cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
       }
       config HISAX_HFCS boolean {
        prompt "HFC-S based cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
       }
       config HISAX_SEDLBAUER boolean {
        prompt "Sedlbauer cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_SPORTSTER boolean {
        prompt "USR Sportster internal TA" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
       }
       config HISAX_MIC boolean {
        prompt "MIC card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
       }
       config HISAX_NETJET boolean {
        prompt "NETjet card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
        depends on [PCI && PCI_LEGACY && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
       }
       config HISAX_NETJET_U boolean {
        prompt "NETspider U card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
        depends on [PCI && PCI_LEGACY && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
       }
       config HISAX_NICCY boolean {
        prompt "Niccy PnP/PCI card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_ISURF boolean {
        prompt "Siemens I-Surf card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
       }
       config HISAX_HSTSAPHIR boolean {
        prompt "HST Saphir card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
       }
       config HISAX_BKM_A4T boolean {
        prompt "Telekom A4T card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
        depends on [PCI && PCI_LEGACY]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
       }
       config HISAX_SCT_QUADRO boolean {
        prompt "Scitel Quadro card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
        depends on [PCI && PCI_LEGACY]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
       }
       config HISAX_GAZEL boolean {
        prompt "Gazel cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_HFC_PCI boolean {
        prompt "HFC PCI-Bus cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
        depends on [PCI && PCI_LEGACY && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
       }
       config HISAX_W6692 boolean {
        prompt "Winbond W6692 based cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
        depends on [PCI && PCI_LEGACY]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
       }
       config HISAX_HFC_SX boolean {
        prompt "HFC-S+, HFC-SP, HFC-PCMCIA cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_ENTERNOW_PCI boolean {
        prompt "Formula-n enter:now PCI card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_NETJET && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
        depends on [HISAX_NETJET && PCI && PCI_LEGACY && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_NETJET && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
       }
      }
      if [ISDN && ISDN_I4L && ISDN_DRV_HISAX] {
       config HISAX_DEBUG boolean {
        prompt "HiSax debugging" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
       }
       config HISAX_SEDLBAUER_CS tristate {
        prompt "Sedlbauer PCMCIA cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_SEDLBAUER]
        depends on [PCMCIA && HISAX_SEDLBAUER]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_SEDLBAUER]
       }
       config HISAX_ELSA_CS tristate {
        prompt "ELSA PCMCIA MicroLink cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_ELSA]
        depends on [PCMCIA && HISAX_ELSA]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_ELSA]
       }
       config HISAX_AVM_A1_CS tristate {
        prompt "AVM A1 PCMCIA cards" if [ISDN && ISDN_I4L && PCMCIA && ISDN_DRV_HISAX]
        depends on [PCMCIA && ISDN_DRV_HISAX]
        inherited [ISDN && ISDN_I4L && PCMCIA && ISDN_DRV_HISAX]
       }
       config HISAX_TELES_CS tristate {
        prompt "TELES PCMCIA cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_16_3]
        depends on [PCMCIA && HISAX_16_3]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_16_3]
       }
       config HISAX_ST5481 tristate {
        prompt "ST5481 USB ISDN modem (EXPERIMENTAL)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
        depends on [USB && EXPERIMENTAL]
        select ISDN_HDLC if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
        select CRC_CCITT if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
        select BITREVERSE if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
       }
       config HISAX_HFCUSB tristate {
        prompt "HFC USB based ISDN modems (EXPERIMENTAL)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
        depends on [USB && EXPERIMENTAL]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
       }
       config HISAX_HFC4S8S tristate {
        prompt "HFC-4S/8S based ISDN cards (EXPERIMENTAL)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && EXPERIMENTAL]
       }
       config HISAX_FRITZ_PCIPNP tristate {
        prompt "AVM Fritz!Card PCI/PCIv2/PnP support (EXPERIMENTAL)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && EXPERIMENTAL]
        depends on [PCI && PCI_LEGACY && EXPERIMENTAL]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && EXPERIMENTAL]
       }
       config HISAX_AVM_A1_PCMCIA boolean {
        prompt "AVM A1 PCMCIA (Fritz)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        depends on [HISAX_AVM_A1_CS]
        default [y] if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_AVM_A1_CS]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_AVM_A1_CS]
       }
      }
     }
    }
    menu "Active cards" {
     depends on [ISDN && ISDN_I4L]
     config ISDN_DRV_ICN tristate {
      prompt "ICN 2B and 4B support" if [ISDN && ISDN_I4L && ISA]
      depends on [ISA]
      inherited [ISDN && ISDN_I4L && ISA]
     }
     config ISDN_DRV_PCBIT tristate {
      prompt "PCBIT-D support" if [ISDN && ISDN_I4L && ISA && (BROKEN || X86)]
      depends on [ISA && (BROKEN || X86)]
      inherited [ISDN && ISDN_I4L && ISA && (BROKEN || X86)]
     }
     config ISDN_DRV_SC tristate {
      prompt "Spellcaster support" if [ISDN && ISDN_I4L && ISA]
      depends on [ISA]
      inherited [ISDN && ISDN_I4L && ISA]
     }
     config ISDN_DRV_ACT2000 tristate {
      prompt "IBM Active 2000 support" if [ISDN && ISDN_I4L && ISA]
      depends on [ISA]
      inherited [ISDN && ISDN_I4L && ISA]
     }
     config HYSDN tristate {
      prompt "Hypercope HYSDN cards (Champ, Ergo, Metro) support (module only)" if [ISDN && ISDN_I4L && m && <choice> && PROC_FS && PCI]
      depends on [m && PROC_FS && PCI]
      inherited [ISDN && ISDN_I4L && m && <choice> && PROC_FS && PCI]
      config HYSDN_CAPI boolean {
       prompt "HYSDN CAPI 2.0 support" if [ISDN && ISDN_I4L && HYSDN && ISDN_CAPI]
       depends on [HYSDN && ISDN_CAPI]
       inherited [ISDN && ISDN_I4L && HYSDN && ISDN_CAPI]
      }
     }
    }
   }
   config ISDN_HDLC tristate {
    select CRC_CCITT if [ISDN]
    select BITREVERSE if [ISDN]
    inherited [ISDN]
   }
   menuconfig ISDN_CAPI tristate {
    prompt "CAPI 2.0 subsystem" if [ISDN]
    inherited [ISDN]
    if [ISDN && ISDN_CAPI] {
     config ISDN_DRV_AVMB1_VERBOSE_REASON boolean {
      prompt "Verbose reason code reporting" if [ISDN && ISDN_CAPI]
      default [y] if [ISDN && ISDN_CAPI]
      inherited [ISDN && ISDN_CAPI]
     }
     config CAPI_TRACE boolean {
      prompt "CAPI trace support" if [ISDN && ISDN_CAPI]
      default [y] if [ISDN && ISDN_CAPI]
      inherited [ISDN && ISDN_CAPI]
     }
     config ISDN_CAPI_MIDDLEWARE boolean {
      prompt "CAPI2.0 Middleware support (EXPERIMENTAL)" if [ISDN && ISDN_CAPI && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      inherited [ISDN && ISDN_CAPI && EXPERIMENTAL]
     }
     config ISDN_CAPI_CAPI20 tristate {
      prompt "CAPI2.0 /dev/capi support" if [ISDN && ISDN_CAPI]
      inherited [ISDN && ISDN_CAPI]
      config ISDN_CAPI_CAPIFS_BOOL boolean {
       prompt "CAPI2.0 filesystem support" if [ISDN && ISDN_CAPI && ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20]
       depends on [ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20]
       inherited [ISDN && ISDN_CAPI && ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20]
       config ISDN_CAPI_CAPIFS tristate {
        depends on [ISDN_CAPI_CAPIFS_BOOL]
        default [ISDN_CAPI_CAPI20] if [ISDN && ISDN_CAPI && ISDN_CAPI_CAPIFS_BOOL]
        inherited [ISDN && ISDN_CAPI && ISDN_CAPI_CAPIFS_BOOL]
       }
      }
     }
     config ISDN_CAPI_CAPIDRV tristate {
      prompt "CAPI2.0 capidrv interface support" if [ISDN && ISDN_CAPI && ISDN_I4L]
      depends on [ISDN_I4L]
      inherited [ISDN && ISDN_CAPI && ISDN_I4L]
     }
     menuconfig CAPI_AVM boolean {
      prompt "Active AVM cards" if [ISDN && ISDN_CAPI]
      inherited [ISDN && ISDN_CAPI]
      if [ISDN && ISDN_CAPI && CAPI_AVM] {
       config ISDN_DRV_AVMB1_B1ISA tristate {
        prompt "AVM B1 ISA support" if [ISDN && ISDN_CAPI && CAPI_AVM && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM && ISA]
       }
       config ISDN_DRV_AVMB1_B1PCI tristate {
        prompt "AVM B1 PCI support" if [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
        depends on [PCI]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
        config ISDN_DRV_AVMB1_B1PCIV4 boolean {
         prompt "AVM B1 PCI V4 support" if [ISDN && ISDN_CAPI && CAPI_AVM && ISDN_DRV_AVMB1_B1PCI]
         depends on [ISDN_DRV_AVMB1_B1PCI]
         inherited [ISDN && ISDN_CAPI && CAPI_AVM && ISDN_DRV_AVMB1_B1PCI]
        }
       }
       config ISDN_DRV_AVMB1_T1ISA tristate {
        prompt "AVM T1/T1-B ISA support" if [ISDN && ISDN_CAPI && CAPI_AVM && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM && ISA]
       }
       config ISDN_DRV_AVMB1_B1PCMCIA tristate {
        prompt "AVM B1/M1/M2 PCMCIA support" if [ISDN && ISDN_CAPI && CAPI_AVM]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM]
        config ISDN_DRV_AVMB1_AVM_CS tristate {
         prompt "AVM B1/M1/M2 PCMCIA cs module" if [ISDN && ISDN_CAPI && CAPI_AVM && ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA]
         depends on [ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA]
         inherited [ISDN && ISDN_CAPI && CAPI_AVM && ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA]
        }
       }
       config ISDN_DRV_AVMB1_T1PCI tristate {
        prompt "AVM T1/T1-B PCI support" if [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
        depends on [PCI]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
       }
       config ISDN_DRV_AVMB1_C4 tristate {
        prompt "AVM C4/C2 support" if [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
        depends on [PCI]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
       }
      }
     }
     menuconfig CAPI_EICON boolean {
      prompt "Active Eicon DIVA Server cards" if [ISDN && ISDN_CAPI]
      inherited [ISDN && ISDN_CAPI]
      if [ISDN && ISDN_CAPI && CAPI_EICON] {
       config ISDN_DIVAS tristate {
        prompt "Support Eicon DIVA Server cards" if [ISDN && ISDN_CAPI && CAPI_EICON && PROC_FS && PCI]
        depends on [PROC_FS && PCI]
        inherited [ISDN && ISDN_CAPI && CAPI_EICON && PROC_FS && PCI]
        if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS] {
         config ISDN_DIVAS_BRIPCI boolean {
          prompt "DIVA Server BRI/PCI support" if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
          inherited [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
         }
         config ISDN_DIVAS_PRIPCI boolean {
          prompt "DIVA Server PRI/PCI support" if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
          inherited [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
         }
         config ISDN_DIVAS_DIVACAPI tristate {
          prompt "DIVA CAPI2.0 interface support" if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
          inherited [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
         }
         config ISDN_DIVAS_USERIDI tristate {
          prompt "DIVA User-IDI interface support" if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
          inherited [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
         }
         config ISDN_DIVAS_MAINT tristate {
          prompt "DIVA Maint driver support" if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS && m && <choice>]
          depends on [m]
          inherited [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS && m && <choice>]
         }
        }
       }
      }
     }
    }
   }
   menuconfig ISDN_DRV_GIGASET tristate {
    prompt "Siemens Gigaset support" if [ISDN && ISDN_I4L]
    depends on [ISDN_I4L]
    select CRC_CCITT if [ISDN && ISDN_I4L]
    select BITREVERSE if [ISDN && ISDN_I4L]
    inherited [ISDN && ISDN_I4L]
    if [ISDN && ISDN_DRV_GIGASET] {
     config GIGASET_BASE tristate {
      prompt "Gigaset base station support" if [ISDN && ISDN_DRV_GIGASET && USB]
      depends on [USB]
      inherited [ISDN && ISDN_DRV_GIGASET && USB]
     }
     config GIGASET_M105 tristate {
      prompt "Gigaset M105 support" if [ISDN && ISDN_DRV_GIGASET && USB]
      depends on [USB]
      inherited [ISDN && ISDN_DRV_GIGASET && USB]
     }
     config GIGASET_M101 tristate {
      prompt "Gigaset M101 support" if [ISDN && ISDN_DRV_GIGASET]
      inherited [ISDN && ISDN_DRV_GIGASET]
     }
     config GIGASET_DEBUG boolean {
      prompt "Gigaset debugging" if [ISDN && ISDN_DRV_GIGASET]
      inherited [ISDN && ISDN_DRV_GIGASET]
     }
    }
   }
  }
 }
 menuconfig PHONE tristate {
  prompt "Telephony support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [PHONE] {
   config PHONE_IXJ tristate {
    prompt "QuickNet Internet LineJack/PhoneJack support" if [PHONE && (ISA || PCI)]
    depends on [ISA || PCI]
    inherited [PHONE && (ISA || PCI)]
    config PHONE_IXJ_PCMCIA tristate {
     prompt "QuickNet Internet LineJack/PhoneJack PCMCIA support" if [PHONE && PHONE_IXJ && PCMCIA]
     depends on [PHONE_IXJ && PCMCIA]
     inherited [PHONE && PHONE_IXJ && PCMCIA]
    }
   }
  }
 }
 menu "Input device support" {
  depends on [!S390]
  config INPUT tristate {
   prompt "Generic input layer (needed for keyboard, mouse, ...)" if [!S390 && EMBEDDED]
   default [y] if [!S390]
   inherited [!S390]
   if [!S390 && INPUT] {
    config INPUT_FF_MEMLESS tristate {
     prompt "Support for memoryless force-feedback devices" if [!S390 && INPUT]
     default [n] if [!S390 && INPUT]
     inherited [!S390 && INPUT]
    }
    config INPUT_POLLDEV tristate {
     prompt "Polled input device skeleton" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
    }
    config INPUT_MOUSEDEV tristate {
     prompt "Mouse interface" if [!S390 && INPUT && EMBEDDED]
     default [y] if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     config INPUT_MOUSEDEV_PSAUX boolean {
      prompt "Provide legacy /dev/psaux device" if [!S390 && INPUT && INPUT_MOUSEDEV]
      default [y] if [!S390 && INPUT && INPUT_MOUSEDEV]
      depends on [INPUT_MOUSEDEV]
      inherited [!S390 && INPUT && INPUT_MOUSEDEV]
     }
     config INPUT_MOUSEDEV_SCREEN_X integer {
      prompt "Horizontal screen resolution" if [!S390 && INPUT && INPUT_MOUSEDEV]
      depends on [INPUT_MOUSEDEV]
      default [1024] if [!S390 && INPUT && INPUT_MOUSEDEV]
      inherited [!S390 && INPUT && INPUT_MOUSEDEV]
     }
     config INPUT_MOUSEDEV_SCREEN_Y integer {
      prompt "Vertical screen resolution" if [!S390 && INPUT && INPUT_MOUSEDEV]
      depends on [INPUT_MOUSEDEV]
      default [768] if [!S390 && INPUT && INPUT_MOUSEDEV]
      inherited [!S390 && INPUT && INPUT_MOUSEDEV]
     }
    }
    config INPUT_JOYDEV tristate {
     prompt "Joystick interface" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
    }
    config INPUT_EVDEV tristate {
     prompt "Event interface" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
    }
    config INPUT_EVBUG tristate {
     prompt "Event debugging" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
    }
    config INPUT_APMPOWER tristate {
     prompt "Input Power Event -> APM Bridge" if [!S390 && INPUT && APM_EMULATION && EMBEDDED]
     depends on [INPUT && APM_EMULATION]
     inherited [!S390 && INPUT && APM_EMULATION]
    }
    config XEN_KBDDEV_FRONTEND tristate {
     prompt "Xen virtual keyboard and mouse support" if [!S390 && INPUT && XEN_FBDEV_FRONTEND]
     depends on [XEN_FBDEV_FRONTEND]
     default [y] if [!S390 && INPUT && XEN_FBDEV_FRONTEND]
     inherited [!S390 && INPUT && XEN_FBDEV_FRONTEND]
    }
    menuconfig INPUT_KEYBOARD boolean {
     prompt "Keyboards" if [!S390 && INPUT && (EMBEDDED || !X86)]
     default [y] if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_KEYBOARD] {
      config KEYBOARD_AAED2000 tristate {
       prompt "AAED-2000 keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
       depends on [MACH_AAED2000]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
      }
      config KEYBOARD_ADP5588 tristate {
       prompt "ADP5588 I2C QWERTY Keypad and IO Expander" if [!S390 && INPUT && INPUT_KEYBOARD && I2C]
       depends on [I2C]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && I2C]
      }
      config KEYBOARD_AMIGA tristate {
       prompt "Amiga keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && AMIGA]
       depends on [AMIGA]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && AMIGA]
      }
      config ATARI_KBD_CORE boolean {
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_ATARI tristate {
       prompt "Atari keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && ATARI]
       depends on [ATARI]
       select ATARI_KBD_CORE if [!S390 && INPUT && INPUT_KEYBOARD && ATARI]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && ATARI]
      }
      config KEYBOARD_ATKBD tristate {
       prompt "AT keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && (EMBEDDED || !X86)]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO_LIBPS2 if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO_I8042 if [!S390 && INPUT && INPUT_KEYBOARD && X86]
       select SERIO_GSCPS2 if [!S390 && INPUT && INPUT_KEYBOARD && GSC]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
       config KEYBOARD_ATKBD_HP_KEYCODES boolean {
        prompt "Use HP keyboard scancodes" if [!S390 && INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
        depends on [PARISC && KEYBOARD_ATKBD]
        default [y] if [!S390 && INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
        inherited [!S390 && INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
        config KEYBOARD_ATKBD_RDI_KEYCODES boolean {
         prompt "Use PrecisionBook keyboard scancodes" if [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
         depends on [KEYBOARD_ATKBD_HP_KEYCODES]
         default [n] if [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
         inherited [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
        }
       }
      }
      config QT2160 tristate {
       prompt "Atmel AT42QT2160 Touch Sensor Chip" if [!S390 && INPUT && INPUT_KEYBOARD && I2C && EXPERIMENTAL]
       depends on [I2C && EXPERIMENTAL]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && I2C && EXPERIMENTAL]
      }
      config KEYBOARD_BFIN tristate {
       prompt "Blackfin BF54x keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && BF54x && !BF544]
       depends on [BF54x && !BF544]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && BF54x && !BF544]
      }
      config KEYBOARD_CORGI tristate {
       prompt "Corgi keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       depends on [PXA_SHARPSL]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
      }
      config KEYBOARD_LKKBD tristate {
       prompt "DECstation/VAXstation LK201/LK401 keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_EP93XX tristate {
       prompt "EP93xx Matrix Keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && ARCH_EP93XX]
       depends on [ARCH_EP93XX]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && ARCH_EP93XX]
      }
      config KEYBOARD_GPIO tristate {
       prompt "GPIO Buttons" if [!S390 && INPUT && INPUT_KEYBOARD && GENERIC_GPIO]
       depends on [GENERIC_GPIO]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && GENERIC_GPIO]
      }
      config KEYBOARD_MATRIX tristate {
       prompt "GPIO driven matrix keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && GENERIC_GPIO]
       depends on [GENERIC_GPIO]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && GENERIC_GPIO]
      }
      config KEYBOARD_HIL_OLD tristate {
       prompt "HP HIL keyboard support (simple driver)" if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       depends on [GSC || HP300]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      }
      config KEYBOARD_HIL tristate {
       prompt "HP HIL keyboard/pointer support" if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       depends on [GSC || HP300]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       select HP_SDC if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       select HIL_MLC if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      }
      config KEYBOARD_HP6XX tristate {
       prompt "HP Jornada 6xx keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && SH_HP6XX]
       depends on [SH_HP6XX]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_KEYBOARD && SH_HP6XX]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && SH_HP6XX]
      }
      config KEYBOARD_HP7XX tristate {
       prompt "HP Jornada 7xx keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && SA1100_JORNADA720_SSP && SA1100_SSP]
       depends on [SA1100_JORNADA720_SSP && SA1100_SSP]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && SA1100_JORNADA720_SSP && SA1100_SSP]
      }
      config KEYBOARD_LM8323 tristate {
       prompt "LM8323 keypad chip" if [!S390 && INPUT && INPUT_KEYBOARD && I2C && LEDS_CLASS]
       depends on [I2C]
       depends on [LEDS_CLASS]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && I2C && LEDS_CLASS]
      }
      config KEYBOARD_LOCOMO tristate {
       prompt "LoCoMo Keyboard Support" if [!S390 && INPUT && INPUT_KEYBOARD && SHARP_LOCOMO]
       depends on [SHARP_LOCOMO]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && SHARP_LOCOMO]
      }
      config KEYBOARD_MAPLE tristate {
       prompt "Maple bus keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && SH_DREAMCAST && MAPLE]
       depends on [SH_DREAMCAST && MAPLE]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && SH_DREAMCAST && MAPLE]
      }
      config KEYBOARD_MAX7359 tristate {
       prompt "Maxim MAX7359 Key Switch Controller" if [!S390 && INPUT && INPUT_KEYBOARD && I2C]
       depends on [I2C]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && I2C]
      }
      config KEYBOARD_NEWTON tristate {
       prompt "Newton keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_OPENCORES tristate {
       prompt "OpenCores Keyboard Controller" if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_PXA27x tristate {
       prompt "PXA27x/PXA3xx keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && (PXA27x || PXA3xx)]
       depends on [PXA27x || PXA3xx]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && (PXA27x || PXA3xx)]
      }
      config KEYBOARD_PXA930_ROTARY tristate {
       prompt "PXA930/PXA935 Enhanced Rotary Controller Support" if [!S390 && INPUT && INPUT_KEYBOARD && (CPU_PXA930 || CPU_PXA935)]
       depends on [CPU_PXA930 || CPU_PXA935]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && (CPU_PXA930 || CPU_PXA935)]
      }
      config KEYBOARD_SPITZ tristate {
       prompt "Spitz keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       depends on [PXA_SHARPSL]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
      }
      config KEYBOARD_STOWAWAY tristate {
       prompt "Stowaway keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_SUNKBD tristate {
       prompt "Sun Type 4 and Type 5 keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_SH_KEYSC tristate {
       prompt "SuperH KEYSC keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && SUPERH]
       depends on [SUPERH]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && SUPERH]
      }
      config KEYBOARD_OMAP tristate {
       prompt "TI OMAP keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && (ARCH_OMAP1 || ARCH_OMAP2)]
       depends on [ARCH_OMAP1 || ARCH_OMAP2]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && (ARCH_OMAP1 || ARCH_OMAP2)]
      }
      config KEYBOARD_TWL4030 tristate {
       prompt "TI TWL4030/TWL5030/TPS659x0 keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && TWL4030_CORE]
       depends on [TWL4030_CORE]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && TWL4030_CORE]
      }
      config KEYBOARD_TOSA tristate {
       prompt "Tosa keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && MACH_TOSA]
       depends on [MACH_TOSA]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && MACH_TOSA]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && MACH_TOSA]
       config KEYBOARD_TOSA_USE_EXT_KEYCODES boolean {
        prompt "Tosa keyboard: use extended keycodes" if [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_TOSA]
        depends on [KEYBOARD_TOSA]
        inherited [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_TOSA]
       }
      }
      config KEYBOARD_XTKBD tristate {
       prompt "XT keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_W90P910 tristate {
       prompt "W90P910 Matrix Keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && ARCH_W90X900]
       depends on [ARCH_W90X900]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && ARCH_W90X900]
      }
     }
    }
    menuconfig INPUT_MOUSE boolean {
     prompt "Mice" if [!S390 && INPUT]
     default [y] if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_MOUSE] {
      config MOUSE_PS2 tristate {
       prompt "PS/2 mouse" if [!S390 && INPUT && INPUT_MOUSE]
       default [y] if [!S390 && INPUT && INPUT_MOUSE]
       select SERIO if [!S390 && INPUT && INPUT_MOUSE]
       select SERIO_LIBPS2 if [!S390 && INPUT && INPUT_MOUSE]
       select SERIO_I8042 if [!S390 && INPUT && INPUT_MOUSE && X86]
       select SERIO_GSCPS2 if [!S390 && INPUT && INPUT_MOUSE && GSC]
       inherited [!S390 && INPUT && INPUT_MOUSE]
       config MOUSE_PS2_ALPS boolean {
        prompt "ALPS PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
        default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_LOGIPS2PP boolean {
        prompt "Logitech PS/2++ mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
        default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_SYNAPTICS boolean {
        prompt "Synaptics PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
        default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_LIFEBOOK boolean {
        prompt "Fujitsu Lifebook PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && X86 && EMBEDDED]
        default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && X86]
        depends on [MOUSE_PS2 && X86]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && X86]
       }
       config MOUSE_PS2_TRACKPOINT boolean {
        prompt "IBM Trackpoint PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
        default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_ELANTECH boolean {
        prompt "Elantech PS/2 protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_SENTELIC boolean {
        prompt "Sentelic Finger Sensing Pad PS/2 protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_TOUCHKIT boolean {
        prompt "eGalax TouchKit PS/2 protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_OLPC boolean {
        prompt "OLPC PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && OLPC]
        depends on [MOUSE_PS2 && OLPC]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && OLPC]
       }
      }
      config MOUSE_SERIAL tristate {
       prompt "Serial mouse" if [!S390 && INPUT && INPUT_MOUSE]
       select SERIO if [!S390 && INPUT && INPUT_MOUSE]
       inherited [!S390 && INPUT && INPUT_MOUSE]
      }
      config MOUSE_APPLETOUCH tristate {
       prompt "Apple USB Touchpad support" if [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
      }
      config MOUSE_BCM5974 tristate {
       prompt "Apple USB BCM5974 Multitouch trackpad support" if [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
      }
      config MOUSE_INPORT tristate {
       prompt "InPort/MS/ATIXL busmouse" if [!S390 && INPUT && INPUT_MOUSE && ISA]
       depends on [ISA]
       inherited [!S390 && INPUT && INPUT_MOUSE && ISA]
       config MOUSE_ATIXL boolean {
        prompt "ATI XL variant" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_INPORT]
        depends on [MOUSE_INPORT]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_INPORT]
       }
      }
      config MOUSE_LOGIBM tristate {
       prompt "Logitech busmouse" if [!S390 && INPUT && INPUT_MOUSE && ISA]
       depends on [ISA]
       inherited [!S390 && INPUT && INPUT_MOUSE && ISA]
      }
      config MOUSE_PC110PAD tristate {
       prompt "IBM PC110 touchpad" if [!S390 && INPUT && INPUT_MOUSE && ISA]
       depends on [ISA]
       inherited [!S390 && INPUT && INPUT_MOUSE && ISA]
      }
      config MOUSE_AMIGA tristate {
       prompt "Amiga mouse" if [!S390 && INPUT && INPUT_MOUSE && AMIGA]
       depends on [AMIGA]
       inherited [!S390 && INPUT && INPUT_MOUSE && AMIGA]
      }
      config MOUSE_ATARI tristate {
       prompt "Atari mouse" if [!S390 && INPUT && INPUT_MOUSE && ATARI]
       depends on [ATARI]
       select ATARI_KBD_CORE if [!S390 && INPUT && INPUT_MOUSE && ATARI]
       inherited [!S390 && INPUT && INPUT_MOUSE && ATARI]
      }
      config MOUSE_RISCPC tristate {
       prompt "Acorn RiscPC mouse" if [!S390 && INPUT && INPUT_MOUSE && ARCH_ACORN]
       depends on [ARCH_ACORN]
       inherited [!S390 && INPUT && INPUT_MOUSE && ARCH_ACORN]
      }
      config MOUSE_VSXXXAA tristate {
       prompt "DEC VSXXX-AA/GA mouse and VSXXX-AB tablet" if [!S390 && INPUT && INPUT_MOUSE]
       select SERIO if [!S390 && INPUT && INPUT_MOUSE]
       inherited [!S390 && INPUT && INPUT_MOUSE]
      }
      config MOUSE_GPIO tristate {
       prompt "GPIO mouse" if [!S390 && INPUT && INPUT_MOUSE && GENERIC_GPIO]
       depends on [GENERIC_GPIO]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MOUSE && GENERIC_GPIO]
       inherited [!S390 && INPUT && INPUT_MOUSE && GENERIC_GPIO]
      }
      config MOUSE_PXA930_TRKBALL tristate {
       prompt "PXA930 Trackball mouse" if [!S390 && INPUT && INPUT_MOUSE && (CPU_PXA930 || CPU_PXA935)]
       depends on [CPU_PXA930 || CPU_PXA935]
       inherited [!S390 && INPUT && INPUT_MOUSE && (CPU_PXA930 || CPU_PXA935)]
      }
      config MOUSE_MAPLE tristate {
       prompt "Maple mouse (for the Dreamcast)" if [!S390 && INPUT && INPUT_MOUSE && MAPLE]
       depends on [MAPLE]
       inherited [!S390 && INPUT && INPUT_MOUSE && MAPLE]
      }
      config MOUSE_SYNAPTICS_I2C tristate {
       prompt "Synaptics I2C Touchpad support" if [!S390 && INPUT && INPUT_MOUSE && I2C]
       depends on [I2C]
       inherited [!S390 && INPUT && INPUT_MOUSE && I2C]
      }
     }
    }
    menuconfig INPUT_JOYSTICK boolean {
     prompt "Joysticks/Gamepads" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_JOYSTICK] {
      config JOYSTICK_ANALOG tristate {
       prompt "Classic PC analog joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_A3D tristate {
       prompt "Assassin 3D and MadCatz Panther devices" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_ADI tristate {
       prompt "Logitech ADI digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_COBRA tristate {
       prompt "Creative Labs Blaster Cobra gamepad" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GF2K tristate {
       prompt "Genius Flight2000 Digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GRIP tristate {
       prompt "Gravis GrIP joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GRIP_MP tristate {
       prompt "Gravis GrIP MultiPort" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GUILLEMOT tristate {
       prompt "Guillemot joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_INTERACT tristate {
       prompt "InterAct digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_SIDEWINDER tristate {
       prompt "Microsoft SideWinder digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_TMDC tristate {
       prompt "ThrustMaster DirectConnect joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_IFORCE tristate {
       prompt "I-Force devices" if [!S390 && INPUT && INPUT_JOYSTICK]
       depends on [INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
       config JOYSTICK_IFORCE_USB boolean {
        prompt "I-Force USB joysticks and wheels" if [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
        depends on [JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
        inherited [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
       }
       config JOYSTICK_IFORCE_232 boolean {
        prompt "I-Force Serial joysticks and wheels" if [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
        depends on [JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
        inherited [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
       }
      }
      config JOYSTICK_WARRIOR tristate {
       prompt "Logitech WingMan Warrior joystick" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_MAGELLAN tristate {
       prompt "LogiCad3d Magellan/SpaceMouse 6dof controllers" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_SPACEORB tristate {
       prompt "SpaceTec SpaceOrb/Avenger 6dof controllers" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_SPACEBALL tristate {
       prompt "SpaceTec SpaceBall 6dof controllers" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_STINGER tristate {
       prompt "Gravis Stinger gamepad" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_TWIDJOY tristate {
       prompt "Twiddler as a joystick" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_ZHENHUA tristate {
       prompt "5-byte Zhenhua RC transmitter" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_DB9 tristate {
       prompt "Multisystem, Sega Genesis, Saturn joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
       depends on [PARPORT]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
      }
      config JOYSTICK_GAMECON tristate {
       prompt "Multisystem, NES, SNES, N64, PSX joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
       depends on [PARPORT]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
      }
      config JOYSTICK_TURBOGRAFX tristate {
       prompt "Multisystem joysticks via TurboGraFX device" if [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
       depends on [PARPORT]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
      }
      config JOYSTICK_AMIGA tristate {
       prompt "Amiga joysticks" if [!S390 && INPUT && INPUT_JOYSTICK && AMIGA]
       depends on [AMIGA]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && AMIGA]
      }
      config JOYSTICK_JOYDUMP tristate {
       prompt "Gameport data dumper" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_XPAD tristate {
       prompt "X-Box gamepad support" if [!S390 && INPUT && INPUT_JOYSTICK && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_JOYSTICK && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && USB_ARCH_HAS_HCD]
       config JOYSTICK_XPAD_FF boolean {
        prompt "X-Box gamepad rumble support" if [!S390 && INPUT_JOYSTICK && JOYSTICK_XPAD && INPUT]
        depends on [JOYSTICK_XPAD && INPUT]
        select INPUT_FF_MEMLESS if [!S390 && INPUT_JOYSTICK && JOYSTICK_XPAD && INPUT]
        inherited [!S390 && INPUT_JOYSTICK && JOYSTICK_XPAD && INPUT]
       }
       config JOYSTICK_XPAD_LEDS boolean {
        prompt "LED Support for Xbox360 controller 'BigX' LED" if [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_XPAD && (LEDS_CLASS="y" || LEDS_CLASS="JOYSTICK_XPAD")]
        depends on [JOYSTICK_XPAD && (LEDS_CLASS="y" || LEDS_CLASS="JOYSTICK_XPAD")]
        inherited [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_XPAD && (LEDS_CLASS="y" || LEDS_CLASS="JOYSTICK_XPAD")]
       }
      }
      config JOYSTICK_WALKERA0701 tristate {
       prompt "Walkera WK-0701 RC transmitter" if [!S390 && INPUT && INPUT_JOYSTICK && HIGH_RES_TIMERS && PARPORT]
       depends on [HIGH_RES_TIMERS && PARPORT]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && HIGH_RES_TIMERS && PARPORT]
      }
      config JOYSTICK_MAPLE tristate {
       prompt "Dreamcast control pad" if [!S390 && INPUT && INPUT_JOYSTICK && MAPLE]
       depends on [MAPLE]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && MAPLE]
      }
     }
    }
    menuconfig INPUT_TABLET boolean {
     prompt "Tablets" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_TABLET] {
      config TABLET_USB_ACECAD tristate {
       prompt "Acecad Flair tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      }
      config TABLET_USB_AIPTEK tristate {
       prompt "Aiptek 6000U/8000U and Genius G_PEN tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      }
      config TABLET_USB_GTCO tristate {
       prompt "GTCO CalComp/InterWrite USB Support" if [!S390 && INPUT_TABLET && USB && INPUT]
       depends on [USB && INPUT]
       inherited [!S390 && INPUT_TABLET && USB && INPUT]
      }
      config TABLET_USB_KBTAB tristate {
       prompt "KB Gear JamStudio tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      }
      config TABLET_USB_WACOM tristate {
       prompt "Wacom Intuos/Graphire tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      }
     }
    }
    menuconfig INPUT_TOUCHSCREEN boolean {
     prompt "Touchscreens" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_TOUCHSCREEN] {
      config TOUCHSCREEN_ADS7846 tristate {
       prompt "ADS7846/TSC2046 and ADS7843 based touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && (HWMON="n" || HWMON)]
       depends on [SPI_MASTER]
       depends on [HWMON="n" || HWMON]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && (HWMON="n" || HWMON)]
      }
      config TOUCHSCREEN_AD7877 tristate {
       prompt "AD7877 based touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER]
       depends on [SPI_MASTER]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER]
      }
      config TOUCHSCREEN_AD7879_I2C tristate {
       prompt "AD7879 based touchscreens: AD7879-1 I2C Interface" if [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
       depends on [I2C]
       select TOUCHSCREEN_AD7879 if [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
      }
      config TOUCHSCREEN_AD7879_SPI tristate {
       prompt "AD7879 based touchscreens: AD7879 SPI Interface" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && TOUCHSCREEN_AD7879_I2C="n"]
       depends on [SPI_MASTER && TOUCHSCREEN_AD7879_I2C="n"]
       select TOUCHSCREEN_AD7879 if [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && TOUCHSCREEN_AD7879_I2C="n"]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && TOUCHSCREEN_AD7879_I2C="n"]
      }
      config TOUCHSCREEN_AD7879 tristate {
       default [n] if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_BITSY tristate {
       prompt "Compaq iPAQ H3600 (Bitsy) touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
       depends on [SA1100_BITSY]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
      }
      config TOUCHSCREEN_CORGI tristate {
       prompt "SharpSL (Corgi and Spitz series) touchscreen driver (DEPRECATED)" if [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
       depends on [PXA_SHARPSL]
       select CORGI_SSP_DEPRECATED if [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
       default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
      }
      config TOUCHSCREEN_DA9034 tristate {
       prompt "Touchscreen support for Dialog Semiconductor DA9034" if [!S390 && INPUT && INPUT_TOUCHSCREEN && PMIC_DA903X]
       depends on [PMIC_DA903X]
       default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && PMIC_DA903X]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && PMIC_DA903X]
      }
      config TOUCHSCREEN_EETI tristate {
       prompt "EETI touchscreen panel support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
       depends on [I2C]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
      }
      config TOUCHSCREEN_FUJITSU tristate {
       prompt "Fujitsu serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_GUNZE tristate {
       prompt "Gunze AHL-51S touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_ELO tristate {
       prompt "Elo serial touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_WACOM_W8001 tristate {
       prompt "Wacom W8001 penabled serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_MCS5000 tristate {
       prompt "MELFAS MCS-5000 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
       depends on [I2C]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
      }
      config TOUCHSCREEN_MTOUCH tristate {
       prompt "MicroTouch serial touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_INEXIO tristate {
       prompt "iNexio serial touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_MK712 tristate {
       prompt "ICS MicroClock MK712 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_HP600 tristate {
       prompt "HP Jornada 6xx touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SH_HP6XX && SH_ADC]
       depends on [SH_HP6XX && SH_ADC]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SH_HP6XX && SH_ADC]
      }
      config TOUCHSCREEN_HP7XX tristate {
       prompt "HP Jornada 7xx touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_JORNADA720_SSP]
       depends on [SA1100_JORNADA720_SSP]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_JORNADA720_SSP]
      }
      config TOUCHSCREEN_HTCPEN tristate {
       prompt "HTC Shift X9500 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && ISA]
       depends on [ISA]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && ISA]
      }
      config TOUCHSCREEN_PENMOUNT tristate {
       prompt "Penmount serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_MIGOR tristate {
       prompt "Renesas MIGO-R touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SH_MIGOR && I2C]
       depends on [SH_MIGOR && I2C]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SH_MIGOR && I2C]
      }
      config TOUCHSCREEN_TOUCHRIGHT tristate {
       prompt "Touchright serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_TOUCHWIN tristate {
       prompt "Touchwin serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_ATMEL_TSADCC tristate {
       prompt "Atmel Touchscreen Interface" if [!S390 && INPUT && INPUT_TOUCHSCREEN && ARCH_AT91SAM9RL]
       depends on [ARCH_AT91SAM9RL]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && ARCH_AT91SAM9RL]
      }
      config TOUCHSCREEN_UCB1400 tristate {
       prompt "Philips UCB1400 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && AC97_BUS && UCB1400_CORE]
       depends on [AC97_BUS]
       depends on [UCB1400_CORE]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && AC97_BUS && UCB1400_CORE]
      }
      config TOUCHSCREEN_WM97XX tristate {
       prompt "Support for WM97xx AC97 touchscreen controllers" if [!S390 && INPUT && INPUT_TOUCHSCREEN && AC97_BUS]
       depends on [AC97_BUS]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && AC97_BUS]
       config TOUCHSCREEN_WM9705 boolean {
        prompt "WM9705 Touchscreen interface support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
        depends on [TOUCHSCREEN_WM97XX]
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
       }
       config TOUCHSCREEN_WM9712 boolean {
        prompt "WM9712 Touchscreen interface support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
        depends on [TOUCHSCREEN_WM97XX]
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
       }
       config TOUCHSCREEN_WM9713 boolean {
        prompt "WM9713 Touchscreen interface support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
        depends on [TOUCHSCREEN_WM97XX]
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
       }
       config TOUCHSCREEN_WM97XX_ATMEL tristate {
        prompt "WM97xx Atmel accelerated touch" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && (AVR32 || ARCH_AT91)]
        depends on [TOUCHSCREEN_WM97XX && (AVR32 || ARCH_AT91)]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && (AVR32 || ARCH_AT91)]
       }
       config TOUCHSCREEN_WM97XX_MAINSTONE tristate {
        prompt "WM97xx Mainstone/Palm accelerated touch" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && ARCH_PXA]
        depends on [TOUCHSCREEN_WM97XX && ARCH_PXA]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && ARCH_PXA]
       }
       config TOUCHSCREEN_WM97XX_ZYLONITE tristate {
        prompt "Zylonite accelerated touch" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && MACH_ZYLONITE]
        depends on [TOUCHSCREEN_WM97XX && MACH_ZYLONITE]
        select TOUCHSCREEN_WM9713 if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && MACH_ZYLONITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && MACH_ZYLONITE]
       }
      }
      config TOUCHSCREEN_USB_COMPOSITE tristate {
       prompt "USB Touchscreen Driver" if [!S390 && INPUT && INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD]
       config TOUCHSCREEN_USB_EGALAX boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "eGalax, eTurboTouch CT-410/510/700 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_PANJIT boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "PanJit device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_3M boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "3M/Microtouch EX II series device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_ITM boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "ITM device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_ETURBO boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "eTurboTouch (non-eGalax compatible) device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_GUNZE boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "Gunze AHL61 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_DMC_TSC10 boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "DMC TSC-10/25 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_IRTOUCH boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "IRTOUCHSYSTEMS/UNITOP device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_IDEALTEK boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "IdealTEK URTC1000 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_GENERAL_TOUCH boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "GeneralTouch Touchscreen device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_GOTOP boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "GoTop Super_Q2/GogoPen/PenPower tablet device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_JASTEC boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "JASTEC/DigiTech DTR-02U USB touch controller device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_E2I boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "e2i Touchscreen controller (e.g. from Mimo 740)" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
      }
      config TOUCHSCREEN_TOUCHIT213 tristate {
       prompt "Sahara TouchIT-213 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_TSC2007 tristate {
       prompt "TSC2007 based touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
       depends on [I2C]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
      }
      config TOUCHSCREEN_W90X900 tristate {
       prompt "W90P910 touchscreen driver" if [!S390 && INPUT && INPUT_TOUCHSCREEN && HAVE_CLK]
       depends on [HAVE_CLK]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && HAVE_CLK]
      }
      config TOUCHSCREEN_PCAP tristate {
       prompt "Motorola PCAP touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && EZX_PCAP]
       depends on [EZX_PCAP]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && EZX_PCAP]
      }
     }
    }
    menuconfig INPUT_MISC boolean {
     prompt "Miscellaneous devices" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_MISC] {
      config INPUT_PCSPKR tristate {
       prompt "PC Speaker support" if [!S390 && INPUT && INPUT_MISC && PCSPKR_PLATFORM]
       depends on [PCSPKR_PLATFORM]
       inherited [!S390 && INPUT && INPUT_MISC && PCSPKR_PLATFORM]
      }
      config INPUT_SPARCSPKR tristate {
       prompt "SPARC Speaker support" if [!S390 && INPUT && INPUT_MISC && PCI && SPARC64]
       depends on [PCI && SPARC64]
       inherited [!S390 && INPUT && INPUT_MISC && PCI && SPARC64]
      }
      config INPUT_M68K_BEEP tristate {
       prompt "M68k Beeper support" if [!S390 && INPUT && INPUT_MISC && M68K]
       depends on [M68K]
       inherited [!S390 && INPUT && INPUT_MISC && M68K]
      }
      config INPUT_APANEL tristate {
       prompt "Fujitsu Lifebook Application Panel buttons" if [!S390 && INPUT && INPUT_MISC && X86 && I2C && LEDS_CLASS]
       depends on [X86 && I2C && LEDS_CLASS]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && X86 && I2C && LEDS_CLASS]
       select CHECK_SIGNATURE if [!S390 && INPUT && INPUT_MISC && X86 && I2C && LEDS_CLASS]
       inherited [!S390 && INPUT && INPUT_MISC && X86 && I2C && LEDS_CLASS]
      }
      config INPUT_IXP4XX_BEEPER tristate {
       prompt "IXP4XX Beeper support" if [!S390 && INPUT && INPUT_MISC && ARCH_IXP4XX]
       depends on [ARCH_IXP4XX]
       inherited [!S390 && INPUT && INPUT_MISC && ARCH_IXP4XX]
      }
      config INPUT_COBALT_BTNS tristate {
       prompt "Cobalt button interface" if [!S390 && INPUT && INPUT_MISC && MIPS_COBALT]
       depends on [MIPS_COBALT]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && MIPS_COBALT]
       inherited [!S390 && INPUT && INPUT_MISC && MIPS_COBALT]
      }
      config INPUT_WISTRON_BTNS tristate {
       prompt "x86 Wistron laptop button interface" if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
       depends on [X86 && !X86_64]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
       select NEW_LEDS if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
       select LEDS_CLASS if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
       select CHECK_SIGNATURE if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
       inherited [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
      }
      config INPUT_ATLAS_BTNS tristate {
       prompt "x86 Atlas button interface" if [!S390 && INPUT && INPUT_MISC && X86 && ACPI]
       depends on [X86 && ACPI]
       inherited [!S390 && INPUT && INPUT_MISC && X86 && ACPI]
      }
      config INPUT_ATI_REMOTE tristate {
       prompt "ATI / X10 USB RF remote control" if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      }
      config INPUT_ATI_REMOTE2 tristate {
       prompt "ATI / Philips USB RF remote control" if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      }
      config INPUT_KEYSPAN_REMOTE tristate {
       prompt "Keyspan DMR USB remote control (EXPERIMENTAL)" if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
       depends on [EXPERIMENTAL]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      }
      config INPUT_POWERMATE tristate {
       prompt "Griffin PowerMate and Contour Jog support" if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      }
      config INPUT_YEALINK tristate {
       prompt "Yealink usb-p1k voip phone" if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
       depends on [EXPERIMENTAL]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      }
      config INPUT_CM109 tristate {
       prompt "C-Media CM109 USB I/O Controller" if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
       depends on [EXPERIMENTAL]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      }
      config INPUT_TWL4030_PWRBUTTON tristate {
       prompt "TWL4030 Power button Driver" if [!S390 && INPUT && INPUT_MISC && TWL4030_CORE]
       depends on [TWL4030_CORE]
       inherited [!S390 && INPUT && INPUT_MISC && TWL4030_CORE]
      }
      config INPUT_UINPUT tristate {
       prompt "User level driver support" if [!S390 && INPUT && INPUT_MISC]
       inherited [!S390 && INPUT && INPUT_MISC]
      }
      config INPUT_SGI_BTNS tristate {
       prompt "SGI Indy/O2 volume button interface" if [!S390 && INPUT && INPUT_MISC && (SGI_IP22 || SGI_IP32)]
       depends on [SGI_IP22 || SGI_IP32]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && (SGI_IP22 || SGI_IP32)]
       inherited [!S390 && INPUT && INPUT_MISC && (SGI_IP22 || SGI_IP32)]
      }
      config INPUT_WINBOND_CIR tristate {
       prompt "Winbond IR remote control" if [!S390 && INPUT && INPUT_MISC && X86 && PNP]
       depends on [X86 && PNP]
       select NEW_LEDS if [!S390 && INPUT && INPUT_MISC && X86 && PNP]
       select LEDS_CLASS if [!S390 && INPUT && INPUT_MISC && X86 && PNP]
       select LEDS_TRIGGERS if [!S390 && INPUT && INPUT_MISC && X86 && PNP]
       select BITREVERSE if [!S390 && INPUT && INPUT_MISC && X86 && PNP]
       inherited [!S390 && INPUT && INPUT_MISC && X86 && PNP]
      }
      config HP_SDC_RTC tristate {
       prompt "HP SDC Real Time Clock" if [!S390 && INPUT && INPUT_MISC && (GSC || HP300) && SERIO]
       depends on [(GSC || HP300) && SERIO]
       select HP_SDC if [!S390 && INPUT && INPUT_MISC && (GSC || HP300) && SERIO]
       inherited [!S390 && INPUT && INPUT_MISC && (GSC || HP300) && SERIO]
      }
      config INPUT_PCF50633_PMU tristate {
       prompt "PCF50633 PMU events" if [!S390 && INPUT && INPUT_MISC && MFD_PCF50633]
       depends on [MFD_PCF50633]
       inherited [!S390 && INPUT && INPUT_MISC && MFD_PCF50633]
      }
      config INPUT_GPIO_ROTARY_ENCODER tristate {
       prompt "Rotary encoders connected to GPIO pins" if [!S390 && INPUT && INPUT_MISC && GPIOLIB && GENERIC_GPIO]
       depends on [GPIOLIB && GENERIC_GPIO]
       inherited [!S390 && INPUT && INPUT_MISC && GPIOLIB && GENERIC_GPIO]
      }
      config INPUT_RB532_BUTTON tristate {
       prompt "Mikrotik Routerboard 532 button interface" if [!S390 && INPUT && INPUT_MISC && MIKROTIK_RB532 && GPIOLIB && GENERIC_GPIO]
       depends on [MIKROTIK_RB532]
       depends on [GPIOLIB && GENERIC_GPIO]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && MIKROTIK_RB532 && GPIOLIB && GENERIC_GPIO]
       inherited [!S390 && INPUT && INPUT_MISC && MIKROTIK_RB532 && GPIOLIB && GENERIC_GPIO]
      }
      config INPUT_DM355EVM tristate {
       prompt "TI DaVinci DM355 EVM Keypad and IR Remote" if [!S390 && INPUT && INPUT_MISC && MFD_DM355EVM_MSP]
       depends on [MFD_DM355EVM_MSP]
       inherited [!S390 && INPUT && INPUT_MISC && MFD_DM355EVM_MSP]
      }
      config INPUT_BFIN_ROTARY tristate {
       prompt "Blackfin Rotary support" if [!S390 && INPUT && INPUT_MISC && (BF54x || BF52x)]
       depends on [BF54x || BF52x]
       inherited [!S390 && INPUT && INPUT_MISC && (BF54x || BF52x)]
      }
      config INPUT_WM831X_ON tristate {
       prompt "WM831X ON pin" if [!S390 && INPUT && INPUT_MISC && MFD_WM831X]
       depends on [MFD_WM831X]
       inherited [!S390 && INPUT && INPUT_MISC && MFD_WM831X]
      }
      config INPUT_PCAP tristate {
       prompt "Motorola EZX PCAP misc input events" if [!S390 && INPUT && INPUT_MISC && EZX_PCAP]
       depends on [EZX_PCAP]
       inherited [!S390 && INPUT && INPUT_MISC && EZX_PCAP]
      }
     }
    }
   }
  }
  menu "Hardware I/O ports" {
   depends on [!S390]
   config SERIO tristate {
    prompt "Serial I/O support" if [!S390 && (EMBEDDED || !X86)]
    default [y] if [!S390]
    inherited [!S390]
    if [!S390 && SERIO] {
     config SERIO_I8042 tristate {
      prompt "i8042 PC Keyboard controller" if [!S390 && SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN && (EMBEDDED || !X86)]
      default [y] if [!S390 && SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN]
      depends on [!PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN]
      inherited [!S390 && SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN]
     }
     config SERIO_SERPORT tristate {
      prompt "Serial port line discipline" if [!S390 && SERIO]
      default [y] if [!S390 && SERIO]
      inherited [!S390 && SERIO]
     }
     config SERIO_CT82C710 tristate {
      prompt "ct82c710 Aux port controller" if [!S390 && SERIO && X86]
      depends on [X86]
      inherited [!S390 && SERIO && X86]
     }
     config SERIO_Q40KBD tristate {
      prompt "Q40 keyboard controller" if [!S390 && SERIO && Q40]
      depends on [Q40]
      inherited [!S390 && SERIO && Q40]
     }
     config SERIO_PARKBD tristate {
      prompt "Parallel port keyboard adapter" if [!S390 && SERIO && PARPORT]
      depends on [PARPORT]
      inherited [!S390 && SERIO && PARPORT]
     }
     config SERIO_RPCKBD tristate {
      prompt "Acorn RiscPC keyboard controller" if [!S390 && SERIO && ARCH_ACORN]
      depends on [ARCH_ACORN]
      default [y] if [!S390 && SERIO && ARCH_ACORN]
      inherited [!S390 && SERIO && ARCH_ACORN]
     }
     config SERIO_AT32PSIF tristate {
      prompt "AVR32 PSIF PS/2 keyboard and mouse controller" if [!S390 && SERIO && AVR32]
      depends on [AVR32]
      inherited [!S390 && SERIO && AVR32]
     }
     config SERIO_AMBAKMI tristate {
      prompt "AMBA KMI keyboard controller" if [!S390 && SERIO && ARM_AMBA]
      depends on [ARM_AMBA]
      inherited [!S390 && SERIO && ARM_AMBA]
     }
     config SERIO_SA1111 tristate {
      prompt "Intel SA1111 keyboard controller" if [!S390 && SERIO && SA1111]
      depends on [SA1111]
      inherited [!S390 && SERIO && SA1111]
     }
     config SERIO_GSCPS2 tristate {
      prompt "HP GSC PS/2 keyboard and PS/2 mouse controller" if [!S390 && SERIO && GSC]
      depends on [GSC]
      default [y] if [!S390 && SERIO && GSC]
      inherited [!S390 && SERIO && GSC]
     }
     config HP_SDC tristate {
      prompt "HP System Device Controller i8042 Support" if [!S390 && (GSC || HP300) && SERIO]
      depends on [(GSC || HP300) && SERIO]
      default [y] if [!S390 && (GSC || HP300) && SERIO]
      inherited [!S390 && (GSC || HP300) && SERIO]
      config HIL_MLC tristate {
       prompt "HIL MLC Support (needed for HIL input devices)" if [!S390 && SERIO && HP_SDC]
       depends on [HP_SDC]
       inherited [!S390 && SERIO && HP_SDC]
      }
     }
     config SERIO_PCIPS2 tristate {
      prompt "PCI PS/2 keyboard and PS/2 mouse controller" if [!S390 && SERIO && PCI]
      depends on [PCI]
      inherited [!S390 && SERIO && PCI]
     }
     config SERIO_MACEPS2 tristate {
      prompt "SGI O2 MACE PS/2 controller" if [!S390 && SERIO && SGI_IP32]
      depends on [SGI_IP32]
      inherited [!S390 && SERIO && SGI_IP32]
     }
     config SERIO_LIBPS2 tristate {
      prompt "PS/2 driver library" if [!S390 && SERIO && (SERIO_I8042 || SERIO_I8042="n") && EMBEDDED]
      depends on [SERIO_I8042 || SERIO_I8042="n"]
      inherited [!S390 && SERIO && (SERIO_I8042 || SERIO_I8042="n")]
     }
     config SERIO_RAW tristate {
      prompt "Raw access to serio ports" if [!S390 && SERIO]
      inherited [!S390 && SERIO]
     }
     config SERIO_XILINX_XPS_PS2 tristate {
      prompt "Xilinx XPS PS/2 Controller Support" if [!S390 && SERIO && (PPC || MICROBLAZE)]
      depends on [PPC || MICROBLAZE]
      inherited [!S390 && SERIO && (PPC || MICROBLAZE)]
     }
    }
   }
   config GAMEPORT tristate {
    prompt "Gameport support" if [!S390]
    inherited [!S390]
    if [!S390 && GAMEPORT] {
     config GAMEPORT_NS558 tristate {
      prompt "Classic ISA and PnP gameport support" if [!S390 && GAMEPORT]
      inherited [!S390 && GAMEPORT]
     }
     config GAMEPORT_L4 tristate {
      prompt "PDPI Lightning 4 gamecard support" if [!S390 && GAMEPORT]
      inherited [!S390 && GAMEPORT]
     }
     config GAMEPORT_EMU10K1 tristate {
      prompt "SB Live and Audigy gameport support" if [!S390 && GAMEPORT && PCI]
      depends on [PCI]
      inherited [!S390 && GAMEPORT && PCI]
     }
     config GAMEPORT_FM801 tristate {
      prompt "ForteMedia FM801 gameport support" if [!S390 && GAMEPORT && PCI]
      depends on [PCI]
      inherited [!S390 && GAMEPORT && PCI]
     }
    }
   }
  }
 }
 menu "Character devices" {
  config VT boolean {
   prompt "Virtual terminal" if [!S390 && EMBEDDED]
   depends on [!S390]
   select INPUT if [!S390]
   default [y] if [!S390]
   inherited [!S390]
   config CONSOLE_TRANSLATIONS boolean {
    depends on [VT]
    default [y] if [VT]
    prompt "Enable character translations in console" if [VT && EMBEDDED]
    inherited [VT]
   }
   config VT_CONSOLE boolean {
    prompt "Support for console on virtual terminal" if [VT && EMBEDDED]
    depends on [VT]
    default [y] if [VT]
    inherited [VT]
   }
   config HW_CONSOLE boolean {
    depends on [VT && !S390 && !UML]
    default [y] if [VT && !S390 && !UML]
    inherited [VT && !S390 && !UML]
   }
   config VT_HW_CONSOLE_BINDING boolean {
    prompt "Support for binding and unbinding console drivers" if [HW_CONSOLE]
    depends on [HW_CONSOLE]
    default [n] if [HW_CONSOLE]
    inherited [HW_CONSOLE]
   }
  }
  config DEVKMEM boolean {
   prompt "/dev/kmem virtual device support" if []
   default [y] if []
  }
  config BFIN_JTAG_COMM tristate {
   prompt "Blackfin JTAG Communication" if [BLACKFIN]
   depends on [BLACKFIN]
   inherited [BLACKFIN]
   config BFIN_JTAG_COMM_CONSOLE boolean {
    prompt "Console on Blackfin JTAG" if [BFIN_JTAG_COMM="y"]
    depends on [BFIN_JTAG_COMM="y"]
    inherited [BFIN_JTAG_COMM="y"]
   }
  }
  config SERIAL_NONSTANDARD boolean {
   prompt "Non-standard serial port support" if [HAS_IOMEM]
   depends on [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config COMPUTONE tristate {
    prompt "Computone IntelliPort Plus serial support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   }
   config ROCKETPORT tristate {
    prompt "Comtrol RocketPort support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   }
   config CYCLADES tristate {
    prompt "Cyclades async mux support" if [SERIAL_NONSTANDARD && (PCI || ISA)]
    depends on [SERIAL_NONSTANDARD && (PCI || ISA)]
    select FW_LOADER if [SERIAL_NONSTANDARD && (PCI || ISA)]
    inherited [SERIAL_NONSTANDARD && (PCI || ISA)]
    config CYZ_INTR boolean {
     prompt "Cyclades-Z interrupt mode operation (EXPERIMENTAL)" if [EXPERIMENTAL && CYCLADES]
     depends on [EXPERIMENTAL && CYCLADES]
     inherited [EXPERIMENTAL && CYCLADES]
    }
   }
   config DIGIEPCA tristate {
    prompt "Digiboard Intelligent Async Support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   }
   config ESPSERIAL tristate {
    prompt "Hayes ESP serial port support" if [SERIAL_NONSTANDARD && ISA && ISA_DMA_API && BROKEN]
    depends on [SERIAL_NONSTANDARD && ISA && ISA_DMA_API && BROKEN]
    inherited [SERIAL_NONSTANDARD && ISA && ISA_DMA_API && BROKEN]
   }
   config MOXA_INTELLIO tristate {
    prompt "Moxa Intellio support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    select FW_LOADER if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   }
   config MOXA_SMARTIO tristate {
    prompt "Moxa SmartIO support v. 2.0" if [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
    depends on [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
    inherited [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
   }
   config ISI tristate {
    prompt "Multi-Tech multiport card support (EXPERIMENTAL)" if [SERIAL_NONSTANDARD && PCI]
    depends on [SERIAL_NONSTANDARD && PCI]
    select FW_LOADER if [SERIAL_NONSTANDARD && PCI]
    inherited [SERIAL_NONSTANDARD && PCI]
   }
   config SYNCLINK tristate {
    prompt "Microgate SyncLink card support" if [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
    depends on [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
    inherited [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
   }
   config SYNCLINKMP tristate {
    prompt "SyncLink Multiport support" if [SERIAL_NONSTANDARD && PCI]
    depends on [SERIAL_NONSTANDARD && PCI]
    inherited [SERIAL_NONSTANDARD && PCI]
   }
   config SYNCLINK_GT tristate {
    prompt "SyncLink GT/AC support" if [SERIAL_NONSTANDARD && PCI]
    depends on [SERIAL_NONSTANDARD && PCI]
    inherited [SERIAL_NONSTANDARD && PCI]
   }
   config N_HDLC tristate {
    prompt "HDLC line discipline support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config RISCOM8 tristate {
    prompt "SDL RISCom/8 card support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config SPECIALIX tristate {
    prompt "Specialix IO8+ card support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config SX tristate {
    prompt "Specialix SX (and SI) card support" if [SERIAL_NONSTANDARD && (PCI || EISA || ISA) && BROKEN]
    depends on [SERIAL_NONSTANDARD && (PCI || EISA || ISA) && BROKEN]
    inherited [SERIAL_NONSTANDARD && (PCI || EISA || ISA) && BROKEN]
   }
   config RIO tristate {
    prompt "Specialix RIO system support" if [SERIAL_NONSTANDARD && BROKEN]
    depends on [SERIAL_NONSTANDARD && BROKEN]
    inherited [SERIAL_NONSTANDARD && BROKEN]
    config RIO_OLDPCI boolean {
     prompt "Support really old RIO/PCI cards" if [RIO]
     depends on [RIO]
     inherited [RIO]
    }
   }
   config STALDRV boolean {
    prompt "Stallion multiport serial support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
    config STALLION tristate {
     prompt "Stallion EasyIO or EC8/32 support" if [STALDRV && (ISA || EISA || PCI)]
     depends on [STALDRV && (ISA || EISA || PCI)]
     inherited [STALDRV && (ISA || EISA || PCI)]
    }
    config ISTALLION tristate {
     prompt "Stallion EC8/64, ONboard, Brumby support" if [STALDRV && (ISA || EISA || PCI)]
     depends on [STALDRV && (ISA || EISA || PCI)]
     inherited [STALDRV && (ISA || EISA || PCI)]
    }
   }
  }
  config NOZOMI tristate {
   prompt "HSDPA Broadband Wireless Data Card - Globe Trotter" if [PCI && EXPERIMENTAL]
   depends on [PCI && EXPERIMENTAL]
   inherited [PCI && EXPERIMENTAL]
  }
  config A2232 tristate {
   prompt "Commodore A2232 serial support (EXPERIMENTAL)" if [EXPERIMENTAL && ZORRO && BROKEN]
   depends on [EXPERIMENTAL && ZORRO && BROKEN]
   inherited [EXPERIMENTAL && ZORRO && BROKEN]
  }
  config SGI_SNSC boolean {
   prompt "SGI Altix system controller communication support" if [IA64_SGI_SN2 || IA64_GENERIC]
   depends on [IA64_SGI_SN2 || IA64_GENERIC]
   inherited [IA64_SGI_SN2 || IA64_GENERIC]
  }
  config SGI_TIOCX boolean {
   prompt "SGI TIO CX driver support" if [IA64_SGI_SN2 || IA64_GENERIC]
   depends on [IA64_SGI_SN2 || IA64_GENERIC]
   inherited [IA64_SGI_SN2 || IA64_GENERIC]
   config SGI_MBCS tristate {
    prompt "SGI FPGA Core Services driver support" if [SGI_TIOCX]
    depends on [SGI_TIOCX]
    inherited [SGI_TIOCX]
   }
  }
  menu "Serial drivers" {
   depends on [HAS_IOMEM]
   config SERIAL_8250 tristate {
    prompt "8250/16550 and compatible serial support" if [HAS_IOMEM]
    select SERIAL_CORE if [HAS_IOMEM]
    inherited [HAS_IOMEM]
    config SERIAL_8250_CONSOLE boolean {
     prompt "Console on 8250/16550 and compatible serial port" if [HAS_IOMEM && SERIAL_8250="y"]
     depends on [SERIAL_8250="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_8250="y"]
     inherited [HAS_IOMEM && SERIAL_8250="y"]
    }
   }
   config FIX_EARLYCON_MEM boolean {
    depends on [X86]
    default [y] if [HAS_IOMEM && X86]
    inherited [HAS_IOMEM && X86]
   }
   config SERIAL_8250_GSC tristate {
    depends on [SERIAL_8250 && GSC]
    default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && GSC]
    inherited [HAS_IOMEM && SERIAL_8250 && GSC]
   }
   config SERIAL_8250_PCI tristate {
    prompt "8250/16550 PCI device support" if [HAS_IOMEM && SERIAL_8250 && PCI && EMBEDDED]
    depends on [SERIAL_8250 && PCI]
    default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && PCI]
    inherited [HAS_IOMEM && SERIAL_8250 && PCI]
   }
   config SERIAL_8250_PNP tristate {
    prompt "8250/16550 PNP device support" if [HAS_IOMEM && SERIAL_8250 && PNP && EMBEDDED]
    depends on [SERIAL_8250 && PNP]
    default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && PNP]
    inherited [HAS_IOMEM && SERIAL_8250 && PNP]
   }
   config SERIAL_8250_HP300 tristate {
    depends on [SERIAL_8250 && HP300]
    default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && HP300]
    inherited [HAS_IOMEM && SERIAL_8250 && HP300]
   }
   config SERIAL_8250_CS tristate {
    prompt "8250/16550 PCMCIA device support" if [HAS_IOMEM && PCMCIA && SERIAL_8250]
    depends on [PCMCIA && SERIAL_8250]
    inherited [HAS_IOMEM && PCMCIA && SERIAL_8250]
   }
   config SERIAL_8250_NR_UARTS integer {
    prompt "Maximum number of 8250/16550 serial ports" if [HAS_IOMEM && SERIAL_8250]
    depends on [SERIAL_8250]
    default [4] if [HAS_IOMEM && SERIAL_8250]
    inherited [HAS_IOMEM && SERIAL_8250]
   }
   config SERIAL_8250_RUNTIME_UARTS integer {
    prompt "Number of 8250/16550 serial ports to register at runtime" if [HAS_IOMEM && SERIAL_8250]
    depends on [SERIAL_8250]
    range [0 SERIAL_8250_NR_UARTS] if [HAS_IOMEM && SERIAL_8250]
    default [4] if [HAS_IOMEM && SERIAL_8250]
    inherited [HAS_IOMEM && SERIAL_8250]
   }
   config SERIAL_8250_EXTENDED boolean {
    prompt "Extended 8250/16550 serial driver options" if [HAS_IOMEM && SERIAL_8250]
    depends on [SERIAL_8250]
    inherited [HAS_IOMEM && SERIAL_8250]
    config SERIAL_8250_MANY_PORTS boolean {
     prompt "Support more than 4 legacy serial ports" if [HAS_IOMEM && SERIAL_8250_EXTENDED && !IA64]
     depends on [SERIAL_8250_EXTENDED && !IA64]
     inherited [HAS_IOMEM && SERIAL_8250_EXTENDED && !IA64]
     config SERIAL_8250_FOURPORT tristate {
      prompt "Support Fourport cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     }
     config SERIAL_8250_ACCENT tristate {
      prompt "Support Accent cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     }
     config SERIAL_8250_BOCA tristate {
      prompt "Support Boca cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     }
     config SERIAL_8250_EXAR_ST16C554 tristate {
      prompt "Support Exar ST16C554/554D Quad UART" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     }
     config SERIAL_8250_HUB6 tristate {
      prompt "Support Hub6 cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     }
    }
    config SERIAL_8250_SHARE_IRQ boolean {
     prompt "Support for sharing serial interrupts" if [HAS_IOMEM && SERIAL_8250_EXTENDED]
     depends on [SERIAL_8250_EXTENDED]
     inherited [HAS_IOMEM && SERIAL_8250_EXTENDED]
    }
    config SERIAL_8250_DETECT_IRQ boolean {
     prompt "Autodetect IRQ on standard ports (unsafe)" if [HAS_IOMEM && SERIAL_8250_EXTENDED]
     depends on [SERIAL_8250_EXTENDED]
     inherited [HAS_IOMEM && SERIAL_8250_EXTENDED]
    }
    config SERIAL_8250_RSA boolean {
     prompt "Support RSA serial ports" if [HAS_IOMEM && SERIAL_8250_EXTENDED]
     depends on [SERIAL_8250_EXTENDED]
     inherited [HAS_IOMEM && SERIAL_8250_EXTENDED]
    }
   }
   config SERIAL_8250_MCA tristate {
    prompt "Support 8250-type ports on MCA buses" if [HAS_IOMEM && SERIAL_8250!="n" && MCA]
    depends on [SERIAL_8250!="n" && MCA]
    inherited [HAS_IOMEM && SERIAL_8250!="n" && MCA]
   }
   config SERIAL_8250_ACORN tristate {
    prompt "Acorn expansion card serial port support" if [HAS_IOMEM && ARCH_ACORN && SERIAL_8250]
    depends on [ARCH_ACORN && SERIAL_8250]
    inherited [HAS_IOMEM && ARCH_ACORN && SERIAL_8250]
   }
   config SERIAL_8250_AU1X00 boolean {
    prompt "Au1x00 serial port support" if [HAS_IOMEM && SERIAL_8250 && SOC_AU1X00]
    depends on [SERIAL_8250 && SOC_AU1X00]
    inherited [HAS_IOMEM && SERIAL_8250 && SOC_AU1X00]
   }
   config SERIAL_8250_RM9K boolean {
    prompt "Support for MIPS RM9xxx integrated serial port" if [HAS_IOMEM && SERIAL_8250 && SERIAL_RM9000]
    depends on [SERIAL_8250 && SERIAL_RM9000]
    select SERIAL_8250_SHARE_IRQ if [HAS_IOMEM && SERIAL_8250 && SERIAL_RM9000]
    inherited [HAS_IOMEM && SERIAL_8250 && SERIAL_RM9000]
   }
   config SERIAL_AMBA_PL010 tristate {
    prompt "ARM AMBA PL010 serial port support" if [HAS_IOMEM && ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    depends on [ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    select SERIAL_CORE if [HAS_IOMEM && ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    inherited [HAS_IOMEM && ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    config SERIAL_AMBA_PL010_CONSOLE boolean {
     prompt "Support for console on AMBA serial port" if [HAS_IOMEM && SERIAL_AMBA_PL010="y"]
     depends on [SERIAL_AMBA_PL010="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_AMBA_PL010="y"]
     inherited [HAS_IOMEM && SERIAL_AMBA_PL010="y"]
    }
   }
   config SERIAL_AMBA_PL011 tristate {
    prompt "ARM AMBA PL011 serial port support" if [HAS_IOMEM && ARM_AMBA]
    depends on [ARM_AMBA]
    select SERIAL_CORE if [HAS_IOMEM && ARM_AMBA]
    inherited [HAS_IOMEM && ARM_AMBA]
    config SERIAL_AMBA_PL011_CONSOLE boolean {
     prompt "Support for console on AMBA serial port" if [HAS_IOMEM && SERIAL_AMBA_PL011="y"]
     depends on [SERIAL_AMBA_PL011="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_AMBA_PL011="y"]
     inherited [HAS_IOMEM && SERIAL_AMBA_PL011="y"]
    }
   }
   config SERIAL_SB1250_DUART tristate {
    prompt "BCM1xxx on-chip DUART serial support" if [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
    depends on [SIBYTE_SB1xxx_SOC="y"]
    select SERIAL_CORE if [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
    default [y] if [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
    inherited [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
    config SERIAL_SB1250_DUART_CONSOLE boolean {
     prompt "Support for console on a BCM1xxx DUART serial port" if [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
     depends on [SERIAL_SB1250_DUART="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
     default [y] if [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
     inherited [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
    }
   }
   config SERIAL_ATMEL boolean {
    prompt "AT91 / AT32 on-chip serial port support" if [HAS_IOMEM && (ARM && ARCH_AT91 || AVR32)]
    depends on [ARM && ARCH_AT91 || AVR32]
    select SERIAL_CORE if [HAS_IOMEM && (ARM && ARCH_AT91 || AVR32)]
    inherited [HAS_IOMEM && (ARM && ARCH_AT91 || AVR32)]
    config SERIAL_ATMEL_CONSOLE boolean {
     prompt "Support for console on AT91 / AT32 serial port" if [HAS_IOMEM && SERIAL_ATMEL]
     depends on [SERIAL_ATMEL="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_ATMEL]
     inherited [HAS_IOMEM && SERIAL_ATMEL]
    }
    config SERIAL_ATMEL_PDC boolean {
     prompt "Support DMA transfers on AT91 / AT32 serial port" if [HAS_IOMEM && SERIAL_ATMEL]
     depends on [SERIAL_ATMEL]
     default [y] if [HAS_IOMEM && SERIAL_ATMEL]
     inherited [HAS_IOMEM && SERIAL_ATMEL]
    }
    config SERIAL_ATMEL_TTYAT boolean {
     prompt "Install as device ttyATn instead of ttySn" if [HAS_IOMEM && SERIAL_ATMEL]
     depends on [SERIAL_ATMEL="y"]
     inherited [HAS_IOMEM && SERIAL_ATMEL]
    }
   }
   config SERIAL_KS8695 boolean {
    prompt "Micrel KS8695 (Centaur) serial port support" if [HAS_IOMEM && ARCH_KS8695]
    depends on [ARCH_KS8695]
    select SERIAL_CORE if [HAS_IOMEM && ARCH_KS8695]
    inherited [HAS_IOMEM && ARCH_KS8695]
    config SERIAL_KS8695_CONSOLE boolean {
     prompt "Support for console on KS8695 (Centaur) serial port" if [HAS_IOMEM && SERIAL_KS8695]
     depends on [SERIAL_KS8695="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_KS8695]
     inherited [HAS_IOMEM && SERIAL_KS8695]
    }
   }
   config SERIAL_CLPS711X tristate {
    prompt "CLPS711X serial port support" if [HAS_IOMEM && ARM && ARCH_CLPS711X]
    depends on [ARM && ARCH_CLPS711X]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_CLPS711X]
    inherited [HAS_IOMEM && ARM && ARCH_CLPS711X]
    config SERIAL_CLPS711X_CONSOLE boolean {
     prompt "Support for console on CLPS711X serial port" if [HAS_IOMEM && SERIAL_CLPS711X="y"]
     depends on [SERIAL_CLPS711X="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_CLPS711X="y"]
     inherited [HAS_IOMEM && SERIAL_CLPS711X="y"]
    }
   }
   config SERIAL_SAMSUNG tristate {
    prompt "Samsung SoC serial support" if [HAS_IOMEM && ARM && PLAT_S3C]
    depends on [ARM && PLAT_S3C]
    select SERIAL_CORE if [HAS_IOMEM && ARM && PLAT_S3C]
    inherited [HAS_IOMEM && ARM && PLAT_S3C]
   }
   config SERIAL_SAMSUNG_UARTS integer {
    depends on [ARM && PLAT_S3C]
    default [2] if [HAS_IOMEM && ARM && PLAT_S3C && ARCH_S3C2400]
    default [4] if [HAS_IOMEM && ARM && PLAT_S3C && (ARCH_S5PC1XX || ARCH_S3C64XX || CPU_S3C2443)]
    default [3] if [HAS_IOMEM && ARM && PLAT_S3C]
    inherited [HAS_IOMEM && ARM && PLAT_S3C]
   }
   config SERIAL_SAMSUNG_DEBUG boolean {
    prompt "Samsung SoC serial debug" if [HAS_IOMEM && SERIAL_SAMSUNG && DEBUG_LL]
    depends on [SERIAL_SAMSUNG && DEBUG_LL]
    inherited [HAS_IOMEM && SERIAL_SAMSUNG && DEBUG_LL]
   }
   config SERIAL_SAMSUNG_CONSOLE boolean {
    prompt "Support for console on Samsung SoC serial port" if [HAS_IOMEM && SERIAL_SAMSUNG="y"]
    depends on [SERIAL_SAMSUNG="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SAMSUNG="y"]
    inherited [HAS_IOMEM && SERIAL_SAMSUNG="y"]
   }
   config SERIAL_S3C2400 tristate {
    prompt "Samsung S3C2410 Serial port support" if [HAS_IOMEM && ARM && SERIAL_SAMSUNG && CPU_S3C2400]
    depends on [ARM && SERIAL_SAMSUNG && CPU_S3C2400]
    default [y] if [HAS_IOMEM && ARM && SERIAL_SAMSUNG && CPU_S3C2400]
    inherited [HAS_IOMEM && ARM && SERIAL_SAMSUNG && CPU_S3C2400]
   }
   config SERIAL_S3C2410 tristate {
    prompt "Samsung S3C2410 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2410]
    depends on [SERIAL_SAMSUNG && CPU_S3C2410]
    default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2410]
    inherited [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2410]
   }
   config SERIAL_S3C2412 tristate {
    prompt "Samsung S3C2412/S3C2413 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2412]
    depends on [SERIAL_SAMSUNG && CPU_S3C2412]
    default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2412]
    inherited [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2412]
   }
   config SERIAL_S3C2440 tristate {
    prompt "Samsung S3C2440/S3C2442 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442)]
    depends on [SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442)]
    default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442) && CPU_S3C2440]
    default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442) && CPU_S3C2442]
    inherited [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442)]
   }
   config SERIAL_S3C24A0 tristate {
    prompt "Samsung S3C24A0 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C24A0]
    depends on [SERIAL_SAMSUNG && CPU_S3C24A0]
    default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C24A0]
    inherited [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C24A0]
   }
   config SERIAL_S3C6400 tristate {
    prompt "Samsung S3C6400/S3C6410 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410)]
    depends on [SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410)]
    default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410)]
    inherited [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410)]
   }
   config SERIAL_S5PC100 tristate {
    prompt "Samsung S5PC100 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S5PC100]
    depends on [SERIAL_SAMSUNG && CPU_S5PC100]
    default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S5PC100]
    inherited [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S5PC100]
   }
   config SERIAL_MAX3100 tristate {
    prompt "MAX3100 support" if [HAS_IOMEM && SPI]
    depends on [SPI]
    select SERIAL_CORE if [HAS_IOMEM && SPI]
    inherited [HAS_IOMEM && SPI]
   }
   config SERIAL_DZ boolean {
    prompt "DECstation DZ serial driver" if [HAS_IOMEM && MACH_DECSTATION && 32BIT]
    depends on [MACH_DECSTATION && 32BIT]
    select SERIAL_CORE if [HAS_IOMEM && MACH_DECSTATION && 32BIT]
    default [y] if [HAS_IOMEM && MACH_DECSTATION && 32BIT]
    inherited [HAS_IOMEM && MACH_DECSTATION && 32BIT]
    config SERIAL_DZ_CONSOLE boolean {
     prompt "Support console on DECstation DZ serial driver" if [HAS_IOMEM && SERIAL_DZ]
     depends on [SERIAL_DZ="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_DZ]
     default [y] if [HAS_IOMEM && SERIAL_DZ]
     inherited [HAS_IOMEM && SERIAL_DZ]
    }
   }
   config SERIAL_ZS tristate {
    prompt "DECstation Z85C30 serial support" if [HAS_IOMEM && MACH_DECSTATION]
    depends on [MACH_DECSTATION]
    select SERIAL_CORE if [HAS_IOMEM && MACH_DECSTATION]
    default [y] if [HAS_IOMEM && MACH_DECSTATION]
    inherited [HAS_IOMEM && MACH_DECSTATION]
    config SERIAL_ZS_CONSOLE boolean {
     prompt "Support for console on a DECstation Z85C30 serial port" if [HAS_IOMEM && SERIAL_ZS="y"]
     depends on [SERIAL_ZS="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_ZS="y"]
     default [y] if [HAS_IOMEM && SERIAL_ZS="y"]
     inherited [HAS_IOMEM && SERIAL_ZS="y"]
    }
   }
   config SERIAL_21285 tristate {
    prompt "DC21285 serial port support" if [HAS_IOMEM && ARM && FOOTBRIDGE]
    depends on [ARM && FOOTBRIDGE]
    select SERIAL_CORE if [HAS_IOMEM && ARM && FOOTBRIDGE]
    inherited [HAS_IOMEM && ARM && FOOTBRIDGE]
    config SERIAL_21285_CONSOLE boolean {
     prompt "Console on DC21285 serial port" if [HAS_IOMEM && SERIAL_21285="y"]
     depends on [SERIAL_21285="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_21285="y"]
     inherited [HAS_IOMEM && SERIAL_21285="y"]
    }
   }
   config SERIAL_MPSC boolean {
    prompt "Marvell MPSC serial port support" if [HAS_IOMEM && PPC32 && MV64X60]
    depends on [PPC32 && MV64X60]
    select SERIAL_CORE if [HAS_IOMEM && PPC32 && MV64X60]
    inherited [HAS_IOMEM && PPC32 && MV64X60]
    config SERIAL_MPSC_CONSOLE boolean {
     prompt "Support for console on Marvell MPSC serial port" if [HAS_IOMEM && SERIAL_MPSC]
     depends on [SERIAL_MPSC]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MPSC]
     inherited [HAS_IOMEM && SERIAL_MPSC]
    }
   }
   config SERIAL_PXA boolean {
    prompt "PXA serial port support" if [HAS_IOMEM && (ARCH_PXA || ARCH_MMP)]
    depends on [ARCH_PXA || ARCH_MMP]
    select SERIAL_CORE if [HAS_IOMEM && (ARCH_PXA || ARCH_MMP)]
    inherited [HAS_IOMEM && (ARCH_PXA || ARCH_MMP)]
    config SERIAL_PXA_CONSOLE boolean {
     prompt "Console on PXA serial port" if [HAS_IOMEM && SERIAL_PXA]
     depends on [SERIAL_PXA]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_PXA]
     inherited [HAS_IOMEM && SERIAL_PXA]
    }
   }
   config SERIAL_SA1100 boolean {
    prompt "SA1100 serial port support" if [HAS_IOMEM && ARM && ARCH_SA1100]
    depends on [ARM && ARCH_SA1100]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_SA1100]
    inherited [HAS_IOMEM && ARM && ARCH_SA1100]
    config SERIAL_SA1100_CONSOLE boolean {
     prompt "Console on SA1100 serial port" if [HAS_IOMEM && SERIAL_SA1100]
     depends on [SERIAL_SA1100]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SA1100]
     inherited [HAS_IOMEM && SERIAL_SA1100]
    }
   }
   config SERIAL_BFIN tristate {
    prompt "Blackfin serial port support" if [HAS_IOMEM && BLACKFIN]
    depends on [BLACKFIN]
    select SERIAL_CORE if [HAS_IOMEM && BLACKFIN]
    select SERIAL_BFIN_UART0 if [HAS_IOMEM && BLACKFIN && (BF531 || BF532 || BF533 || BF561)]
    inherited [HAS_IOMEM && BLACKFIN]
    config SERIAL_BFIN_CONSOLE boolean {
     prompt "Console on Blackfin serial port" if [HAS_IOMEM && SERIAL_BFIN="y"]
     depends on [SERIAL_BFIN="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_BFIN="y"]
     inherited [HAS_IOMEM && SERIAL_BFIN="y"]
    }
    choice boolean {
     prompt "UART Mode" if [HAS_IOMEM && SERIAL_BFIN]
     depends on [SERIAL_BFIN]
     default [SERIAL_BFIN_DMA] if [HAS_IOMEM && SERIAL_BFIN]
     config SERIAL_BFIN_DMA boolean {
      prompt "DMA mode" if [<choice> && !DMA_UNCACHED_NONE && KGDB_SERIAL_CONSOLE="n"]
      depends on [!DMA_UNCACHED_NONE && KGDB_SERIAL_CONSOLE="n"]
      inherited [<choice> && !DMA_UNCACHED_NONE && KGDB_SERIAL_CONSOLE="n"]
     }
     config SERIAL_BFIN_PIO boolean {
      prompt "PIO mode" if [<choice>]
      inherited [<choice>]
     }
    }
    config SERIAL_BFIN_UART0 boolean {
     prompt "Enable UART0" if [HAS_IOMEM && SERIAL_BFIN]
     depends on [SERIAL_BFIN]
     inherited [HAS_IOMEM && SERIAL_BFIN]
     config BFIN_UART0_CTSRTS boolean {
      prompt "Enable UART0 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART0]
      depends on [SERIAL_BFIN_UART0]
      inherited [HAS_IOMEM && SERIAL_BFIN_UART0]
      config UART0_CTS_PIN integer {
       prompt "UART0 CTS pin" if [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
       depends on [BFIN_UART0_CTSRTS && !BF548]
       default [23] if [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
       inherited [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
      }
      config UART0_RTS_PIN integer {
       prompt "UART0 RTS pin" if [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
       depends on [BFIN_UART0_CTSRTS && !BF548]
       default [22] if [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
       inherited [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
      }
     }
    }
    config SERIAL_BFIN_UART1 boolean {
     prompt "Enable UART1" if [HAS_IOMEM && SERIAL_BFIN && !BF531 && !BF532 && !BF533 && !BF561]
     depends on [SERIAL_BFIN && !BF531 && !BF532 && !BF533 && !BF561]
     inherited [HAS_IOMEM && SERIAL_BFIN && !BF531 && !BF532 && !BF533 && !BF561]
     config BFIN_UART1_CTSRTS boolean {
      prompt "Enable UART1 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART1]
      depends on [SERIAL_BFIN_UART1]
      inherited [HAS_IOMEM && SERIAL_BFIN_UART1]
      config UART1_CTS_PIN integer {
       prompt "UART1 CTS pin" if [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
       depends on [BFIN_UART1_CTSRTS && !BF548]
       default [-1] if [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
       inherited [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
      }
      config UART1_RTS_PIN integer {
       prompt "UART1 RTS pin" if [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
       depends on [BFIN_UART1_CTSRTS && !BF548]
       default [-1] if [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
       inherited [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
      }
     }
    }
    config SERIAL_BFIN_UART2 boolean {
     prompt "Enable UART2" if [HAS_IOMEM && SERIAL_BFIN && (BF54x || BF538 || BF539)]
     depends on [SERIAL_BFIN && (BF54x || BF538 || BF539)]
     inherited [HAS_IOMEM && SERIAL_BFIN && (BF54x || BF538 || BF539)]
     config BFIN_UART2_CTSRTS boolean {
      prompt "Enable UART2 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART2]
      depends on [SERIAL_BFIN_UART2]
      inherited [HAS_IOMEM && SERIAL_BFIN_UART2]
      config UART2_CTS_PIN integer {
       prompt "UART2 CTS pin" if [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
       depends on [BFIN_UART2_CTSRTS && !BF548]
       default [-1] if [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
       inherited [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
      }
      config UART2_RTS_PIN integer {
       prompt "UART2 RTS pin" if [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
       depends on [BFIN_UART2_CTSRTS && !BF548]
       default [-1] if [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
       inherited [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
      }
     }
    }
    config SERIAL_BFIN_UART3 boolean {
     prompt "Enable UART3" if [HAS_IOMEM && SERIAL_BFIN && BF54x]
     depends on [SERIAL_BFIN && BF54x]
     inherited [HAS_IOMEM && SERIAL_BFIN && BF54x]
     config BFIN_UART3_CTSRTS boolean {
      prompt "Enable UART3 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART3]
      depends on [SERIAL_BFIN_UART3]
      inherited [HAS_IOMEM && SERIAL_BFIN_UART3]
      config UART3_CTS_PIN integer {
       prompt "UART3 CTS pin" if [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
       depends on [BFIN_UART3_CTSRTS && !BF548]
       default [-1] if [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
       inherited [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
      }
      config UART3_RTS_PIN integer {
       prompt "UART3 RTS pin" if [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
       depends on [BFIN_UART3_CTSRTS && !BF548]
       default [-1] if [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
       inherited [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
      }
     }
    }
   }
   config SERIAL_IMX boolean {
    prompt "IMX serial port support" if [HAS_IOMEM && ARM && (ARCH_IMX || ARCH_MXC)]
    depends on [ARM && (ARCH_IMX || ARCH_MXC)]
    select SERIAL_CORE if [HAS_IOMEM && ARM && (ARCH_IMX || ARCH_MXC)]
    select RATIONAL if [HAS_IOMEM && ARM && (ARCH_IMX || ARCH_MXC)]
    inherited [HAS_IOMEM && ARM && (ARCH_IMX || ARCH_MXC)]
    config SERIAL_IMX_CONSOLE boolean {
     prompt "Console on IMX serial port" if [HAS_IOMEM && SERIAL_IMX]
     depends on [SERIAL_IMX]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_IMX]
     inherited [HAS_IOMEM && SERIAL_IMX]
    }
   }
   config SERIAL_UARTLITE tristate {
    prompt "Xilinx uartlite serial port support" if [HAS_IOMEM && (PPC32 || MICROBLAZE || MFD_TIMBERDALE)]
    depends on [PPC32 || MICROBLAZE || MFD_TIMBERDALE]
    select SERIAL_CORE if [HAS_IOMEM && (PPC32 || MICROBLAZE || MFD_TIMBERDALE)]
    inherited [HAS_IOMEM && (PPC32 || MICROBLAZE || MFD_TIMBERDALE)]
    config SERIAL_UARTLITE_CONSOLE boolean {
     prompt "Support for console on Xilinx uartlite serial port" if [HAS_IOMEM && SERIAL_UARTLITE="y"]
     depends on [SERIAL_UARTLITE="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_UARTLITE="y"]
     inherited [HAS_IOMEM && SERIAL_UARTLITE="y"]
    }
   }
   config SERIAL_SUNCORE boolean {
    depends on [SPARC]
    select SERIAL_CORE if [HAS_IOMEM && SPARC]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SPARC]
    default [y] if [HAS_IOMEM && SPARC]
    inherited [HAS_IOMEM && SPARC]
   }
   config SERIAL_SUNZILOG tristate {
    prompt "Sun Zilog8530 serial support" if [HAS_IOMEM && SPARC]
    depends on [SPARC]
    inherited [HAS_IOMEM && SPARC]
    config SERIAL_SUNZILOG_CONSOLE boolean {
     prompt "Console on Sun Zilog8530 serial port" if [HAS_IOMEM && SERIAL_SUNZILOG="y"]
     depends on [SERIAL_SUNZILOG="y"]
     inherited [HAS_IOMEM && SERIAL_SUNZILOG="y"]
    }
   }
   config SERIAL_SUNSU tristate {
    prompt "Sun SU serial support" if [HAS_IOMEM && SPARC && PCI]
    depends on [SPARC && PCI]
    inherited [HAS_IOMEM && SPARC && PCI]
    config SERIAL_SUNSU_CONSOLE boolean {
     prompt "Console on Sun SU serial port" if [HAS_IOMEM && SERIAL_SUNSU="y"]
     depends on [SERIAL_SUNSU="y"]
     inherited [HAS_IOMEM && SERIAL_SUNSU="y"]
    }
   }
   config SERIAL_MUX tristate {
    prompt "Serial MUX support" if [HAS_IOMEM && GSC]
    depends on [GSC]
    select SERIAL_CORE if [HAS_IOMEM && GSC]
    default [y] if [HAS_IOMEM && GSC]
    inherited [HAS_IOMEM && GSC]
    config SERIAL_MUX_CONSOLE boolean {
     prompt "Support for console on serial MUX" if [HAS_IOMEM && SERIAL_MUX="y"]
     depends on [SERIAL_MUX="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MUX="y"]
     default [y] if [HAS_IOMEM && SERIAL_MUX="y"]
     inherited [HAS_IOMEM && SERIAL_MUX="y"]
    }
   }
   config PDC_CONSOLE boolean {
    prompt "PDC software console support" if [HAS_IOMEM && PARISC && !SERIAL_MUX && VT]
    depends on [PARISC && !SERIAL_MUX && VT]
    default [n] if [HAS_IOMEM && PARISC && !SERIAL_MUX && VT]
    inherited [HAS_IOMEM && PARISC && !SERIAL_MUX && VT]
   }
   config SERIAL_SUNSAB tristate {
    prompt "Sun Siemens SAB82532 serial support" if [HAS_IOMEM && SPARC && PCI]
    depends on [SPARC && PCI]
    inherited [HAS_IOMEM && SPARC && PCI]
    config SERIAL_SUNSAB_CONSOLE boolean {
     prompt "Console on Sun Siemens SAB82532 serial port" if [HAS_IOMEM && SERIAL_SUNSAB="y"]
     depends on [SERIAL_SUNSAB="y"]
     inherited [HAS_IOMEM && SERIAL_SUNSAB="y"]
    }
   }
   config SERIAL_SUNHV boolean {
    prompt "Sun4v Hypervisor Console support" if [HAS_IOMEM && SPARC64]
    depends on [SPARC64]
    inherited [HAS_IOMEM && SPARC64]
   }
   config SERIAL_IP22_ZILOG tristate {
    prompt "SGI Zilog8530 serial support" if [HAS_IOMEM && SGI_HAS_ZILOG]
    depends on [SGI_HAS_ZILOG]
    select SERIAL_CORE if [HAS_IOMEM && SGI_HAS_ZILOG]
    inherited [HAS_IOMEM && SGI_HAS_ZILOG]
    config SERIAL_IP22_ZILOG_CONSOLE boolean {
     prompt "Console on SGI Zilog8530 serial port" if [HAS_IOMEM && SERIAL_IP22_ZILOG="y"]
     depends on [SERIAL_IP22_ZILOG="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_IP22_ZILOG="y"]
     inherited [HAS_IOMEM && SERIAL_IP22_ZILOG="y"]
    }
   }
   config SERIAL_SH_SCI tristate {
    prompt "SuperH SCI(F) serial port support" if [HAS_IOMEM && (SUPERH || H8300)]
    depends on [SUPERH || H8300]
    select SERIAL_CORE if [HAS_IOMEM && (SUPERH || H8300)]
    inherited [HAS_IOMEM && (SUPERH || H8300)]
    config SERIAL_SH_SCI_NR_UARTS integer {
     prompt "Maximum number of SCI(F) serial ports" if [HAS_IOMEM && SERIAL_SH_SCI]
     depends on [SERIAL_SH_SCI]
     default [2] if [HAS_IOMEM && SERIAL_SH_SCI]
     inherited [HAS_IOMEM && SERIAL_SH_SCI]
    }
    config SERIAL_SH_SCI_CONSOLE boolean {
     prompt "Support for console on SuperH SCI(F)" if [HAS_IOMEM && SERIAL_SH_SCI="y"]
     depends on [SERIAL_SH_SCI="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SH_SCI="y"]
     inherited [HAS_IOMEM && SERIAL_SH_SCI="y"]
    }
   }
   config SERIAL_PNX8XXX boolean {
    prompt "Enable PNX8XXX SoCs' UART Support" if [HAS_IOMEM && MIPS && (SOC_PNX8550 || SOC_PNX833X)]
    depends on [MIPS && (SOC_PNX8550 || SOC_PNX833X)]
    select SERIAL_CORE if [HAS_IOMEM && MIPS && (SOC_PNX8550 || SOC_PNX833X)]
    inherited [HAS_IOMEM && MIPS && (SOC_PNX8550 || SOC_PNX833X)]
    config SERIAL_PNX8XXX_CONSOLE boolean {
     prompt "Enable PNX8XX0 serial console" if [HAS_IOMEM && SERIAL_PNX8XXX]
     depends on [SERIAL_PNX8XXX]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_PNX8XXX]
     inherited [HAS_IOMEM && SERIAL_PNX8XXX]
    }
   }
   config SERIAL_CORE tristate {
    inherited [HAS_IOMEM]
   }
   config SERIAL_CORE_CONSOLE boolean {
    inherited [HAS_IOMEM]
   }
   config CONSOLE_POLL boolean {
    inherited [HAS_IOMEM]
   }
   config SERIAL_68328 boolean {
    prompt "68328 serial support" if [HAS_IOMEM && (M68328 || M68EZ328 || M68VZ328)]
    depends on [M68328 || M68EZ328 || M68VZ328]
    inherited [HAS_IOMEM && (M68328 || M68EZ328 || M68VZ328)]
    config SERIAL_68328_RTS_CTS boolean {
     prompt "Support RTS/CTS on 68328 serial port" if [HAS_IOMEM && SERIAL_68328]
     depends on [SERIAL_68328]
     inherited [HAS_IOMEM && SERIAL_68328]
    }
   }
   config SERIAL_MCF boolean {
    prompt "Coldfire serial support" if [HAS_IOMEM && COLDFIRE]
    depends on [COLDFIRE]
    select SERIAL_CORE if [HAS_IOMEM && COLDFIRE]
    inherited [HAS_IOMEM && COLDFIRE]
    config SERIAL_MCF_BAUDRATE integer {
     prompt "Default baudrate for Coldfire serial ports" if [HAS_IOMEM && SERIAL_MCF]
     depends on [SERIAL_MCF]
     default [19200] if [HAS_IOMEM && SERIAL_MCF]
     inherited [HAS_IOMEM && SERIAL_MCF]
    }
    config SERIAL_MCF_CONSOLE boolean {
     prompt "Coldfire serial console support" if [HAS_IOMEM && SERIAL_MCF]
     depends on [SERIAL_MCF]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MCF]
     inherited [HAS_IOMEM && SERIAL_MCF]
    }
   }
   config SERIAL_68360_SMC boolean {
    prompt "68360 SMC uart support" if [HAS_IOMEM && M68360]
    depends on [M68360]
    inherited [HAS_IOMEM && M68360]
   }
   config SERIAL_68360_SCC boolean {
    prompt "68360 SCC uart support" if [HAS_IOMEM && M68360]
    depends on [M68360]
    inherited [HAS_IOMEM && M68360]
   }
   config SERIAL_68360 boolean {
    depends on [SERIAL_68360_SMC || SERIAL_68360_SCC]
    default [y] if [HAS_IOMEM && (SERIAL_68360_SMC || SERIAL_68360_SCC)]
    inherited [HAS_IOMEM && (SERIAL_68360_SMC || SERIAL_68360_SCC)]
   }
   config SERIAL_PMACZILOG tristate {
    prompt "PowerMac z85c30 ESCC support" if [HAS_IOMEM && PPC_OF && PPC_PMAC]
    depends on [PPC_OF && PPC_PMAC]
    select SERIAL_CORE if [HAS_IOMEM && PPC_OF && PPC_PMAC]
    inherited [HAS_IOMEM && PPC_OF && PPC_PMAC]
    config SERIAL_PMACZILOG_TTYS boolean {
     prompt "Use ttySn device nodes for Zilog z85c30" if [HAS_IOMEM && SERIAL_PMACZILOG]
     depends on [SERIAL_PMACZILOG]
     inherited [HAS_IOMEM && SERIAL_PMACZILOG]
    }
    config SERIAL_PMACZILOG_CONSOLE boolean {
     prompt "Console on PowerMac z85c30 serial port" if [HAS_IOMEM && SERIAL_PMACZILOG="y"]
     depends on [SERIAL_PMACZILOG="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_PMACZILOG="y"]
     inherited [HAS_IOMEM && SERIAL_PMACZILOG="y"]
    }
   }
   config SERIAL_LH7A40X tristate {
    prompt "Sharp LH7A40X embedded UART support" if [HAS_IOMEM && ARM && ARCH_LH7A40X]
    depends on [ARM && ARCH_LH7A40X]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_LH7A40X]
    inherited [HAS_IOMEM && ARM && ARCH_LH7A40X]
    config SERIAL_LH7A40X_CONSOLE boolean {
     prompt "Support for console on Sharp LH7A40X serial port" if [HAS_IOMEM && SERIAL_LH7A40X="y"]
     depends on [SERIAL_LH7A40X="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_LH7A40X="y"]
     inherited [HAS_IOMEM && SERIAL_LH7A40X="y"]
    }
   }
   config SERIAL_CPM tristate {
    prompt "CPM SCC/SMC serial port support" if [HAS_IOMEM && (CPM2 || 8xx)]
    depends on [CPM2 || 8xx]
    select SERIAL_CORE if [HAS_IOMEM && (CPM2 || 8xx)]
    inherited [HAS_IOMEM && (CPM2 || 8xx)]
    config SERIAL_CPM_CONSOLE boolean {
     prompt "Support for console on CPM SCC/SMC serial port" if [HAS_IOMEM && SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_CPM="y"]
     inherited [HAS_IOMEM && SERIAL_CPM="y"]
    }
   }
   config SERIAL_SGI_L1_CONSOLE boolean {
    prompt "SGI Altix L1 serial console support" if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
    depends on [IA64_GENERIC || IA64_SGI_SN2]
    select SERIAL_CORE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
    inherited [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
   }
   config SERIAL_MPC52xx tristate {
    prompt "Freescale MPC52xx/MPC512x family PSC serial support" if [HAS_IOMEM && (PPC_MPC52xx || PPC_MPC512x)]
    depends on [PPC_MPC52xx || PPC_MPC512x]
    select SERIAL_CORE if [HAS_IOMEM && (PPC_MPC52xx || PPC_MPC512x)]
    inherited [HAS_IOMEM && (PPC_MPC52xx || PPC_MPC512x)]
    config SERIAL_MPC52xx_CONSOLE boolean {
     prompt "Console on a Freescale MPC52xx/MPC512x family PSC serial port" if [HAS_IOMEM && SERIAL_MPC52xx="y"]
     depends on [SERIAL_MPC52xx="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MPC52xx="y"]
     inherited [HAS_IOMEM && SERIAL_MPC52xx="y"]
     config SERIAL_MPC52xx_CONSOLE_BAUD integer {
      prompt "Freescale MPC52xx/MPC512x family PSC serial port baud" if [HAS_IOMEM && SERIAL_MPC52xx_CONSOLE]
      depends on [SERIAL_MPC52xx_CONSOLE="y"]
      default [9600] if [HAS_IOMEM && SERIAL_MPC52xx_CONSOLE]
      inherited [HAS_IOMEM && SERIAL_MPC52xx_CONSOLE]
     }
    }
   }
   config SERIAL_ICOM tristate {
    prompt "IBM Multiport Serial Adapter" if [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
    depends on [PCI && (PPC_ISERIES || PPC_PSERIES)]
    select SERIAL_CORE if [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
    select FW_LOADER if [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
    inherited [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
   }
   config SERIAL_M32R_SIO boolean {
    prompt "M32R SIO I/F" if [HAS_IOMEM && M32R]
    depends on [M32R]
    default [y] if [HAS_IOMEM && M32R]
    select SERIAL_CORE if [HAS_IOMEM && M32R]
    inherited [HAS_IOMEM && M32R]
    config SERIAL_M32R_SIO_CONSOLE boolean {
     prompt "use SIO console" if [HAS_IOMEM && SERIAL_M32R_SIO]
     depends on [SERIAL_M32R_SIO="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_M32R_SIO]
     inherited [HAS_IOMEM && SERIAL_M32R_SIO]
    }
    config SERIAL_M32R_PLDSIO boolean {
     prompt "M32R SIO I/F on a PLD" if [HAS_IOMEM && SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
     depends on [SERIAL_M32R_SIO="y" && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
     default [n] if [HAS_IOMEM && SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
     inherited [HAS_IOMEM && SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
    }
   }
   config SERIAL_TXX9 boolean {
    prompt "TMPTX39XX/49XX SIO support" if [HAS_IOMEM && HAS_TXX9_SERIAL]
    depends on [HAS_TXX9_SERIAL]
    select SERIAL_CORE if [HAS_IOMEM && HAS_TXX9_SERIAL]
    default [y] if [HAS_IOMEM && HAS_TXX9_SERIAL]
    inherited [HAS_IOMEM && HAS_TXX9_SERIAL]
   }
   config HAS_TXX9_SERIAL boolean {
    inherited [HAS_IOMEM]
   }
   config SERIAL_TXX9_NR_UARTS integer {
    prompt "Maximum number of TMPTX39XX/49XX SIO ports" if [HAS_IOMEM && SERIAL_TXX9]
    depends on [SERIAL_TXX9]
    default [6] if [HAS_IOMEM && SERIAL_TXX9]
    inherited [HAS_IOMEM && SERIAL_TXX9]
   }
   config SERIAL_TXX9_CONSOLE boolean {
    prompt "TMPTX39XX/49XX SIO Console support" if [HAS_IOMEM && SERIAL_TXX9]
    depends on [SERIAL_TXX9="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_TXX9]
    inherited [HAS_IOMEM && SERIAL_TXX9]
   }
   config SERIAL_TXX9_STDSERIAL boolean {
    prompt "TX39XX/49XX SIO act as standard serial" if [HAS_IOMEM && !SERIAL_8250 && SERIAL_TXX9]
    depends on [!SERIAL_8250 && SERIAL_TXX9]
    inherited [HAS_IOMEM && !SERIAL_8250 && SERIAL_TXX9]
   }
   config SERIAL_VR41XX tristate {
    prompt "NEC VR4100 series Serial Interface Unit support" if [HAS_IOMEM && CPU_VR41XX]
    depends on [CPU_VR41XX]
    select SERIAL_CORE if [HAS_IOMEM && CPU_VR41XX]
    inherited [HAS_IOMEM && CPU_VR41XX]
    config SERIAL_VR41XX_CONSOLE boolean {
     prompt "Enable NEC VR4100 series Serial Interface Unit console" if [HAS_IOMEM && SERIAL_VR41XX="y"]
     depends on [SERIAL_VR41XX="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_VR41XX="y"]
     inherited [HAS_IOMEM && SERIAL_VR41XX="y"]
    }
   }
   config SERIAL_JSM tristate {
    prompt "Digi International NEO PCI Support" if [HAS_IOMEM && PCI]
    depends on [PCI]
    select SERIAL_CORE if [HAS_IOMEM && PCI]
    inherited [HAS_IOMEM && PCI]
   }
   config SERIAL_SGI_IOC4 tristate {
    prompt "SGI IOC4 controller serial support" if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
    depends on [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
    select SERIAL_CORE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
    inherited [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
   }
   config SERIAL_SGI_IOC3 tristate {
    prompt "SGI Altix IOC3 serial support" if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
    depends on [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
    select SERIAL_CORE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
    inherited [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
   }
   config SERIAL_MSM boolean {
    prompt "MSM on-chip serial port support" if [HAS_IOMEM && ARM && ARCH_MSM]
    depends on [ARM && ARCH_MSM]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_MSM]
    inherited [HAS_IOMEM && ARM && ARCH_MSM]
    config SERIAL_MSM_CONSOLE boolean {
     prompt "MSM serial console support" if [HAS_IOMEM && SERIAL_MSM]
     depends on [SERIAL_MSM="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MSM]
     inherited [HAS_IOMEM && SERIAL_MSM]
    }
   }
   config SERIAL_NETX tristate {
    prompt "NetX serial port support" if [HAS_IOMEM && ARM && ARCH_NETX]
    depends on [ARM && ARCH_NETX]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_NETX]
    inherited [HAS_IOMEM && ARM && ARCH_NETX]
    config SERIAL_NETX_CONSOLE boolean {
     prompt "Console on NetX serial port" if [HAS_IOMEM && SERIAL_NETX="y"]
     depends on [SERIAL_NETX="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_NETX="y"]
     inherited [HAS_IOMEM && SERIAL_NETX="y"]
    }
   }
   config SERIAL_OF_PLATFORM tristate {
    prompt "Serial port on Open Firmware platform bus" if [HAS_IOMEM && (PPC_OF || MICROBLAZE) && (SERIAL_8250 || SERIAL_OF_PLATFORM_NWPSERIAL)]
    depends on [PPC_OF || MICROBLAZE]
    depends on [SERIAL_8250 || SERIAL_OF_PLATFORM_NWPSERIAL]
    inherited [HAS_IOMEM && (PPC_OF || MICROBLAZE) && (SERIAL_8250 || SERIAL_OF_PLATFORM_NWPSERIAL)]
   }
   config SERIAL_OF_PLATFORM_NWPSERIAL tristate {
    prompt "NWP serial port driver" if [HAS_IOMEM && PPC_OF && PPC_DCR]
    depends on [PPC_OF && PPC_DCR]
    select SERIAL_OF_PLATFORM if [HAS_IOMEM && PPC_OF && PPC_DCR]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && PPC_OF && PPC_DCR]
    select SERIAL_CORE if [HAS_IOMEM && PPC_OF && PPC_DCR]
    inherited [HAS_IOMEM && PPC_OF && PPC_DCR]
    config SERIAL_OF_PLATFORM_NWPSERIAL_CONSOLE boolean {
     prompt "Console on NWP serial port" if [HAS_IOMEM && SERIAL_OF_PLATFORM_NWPSERIAL="y"]
     depends on [SERIAL_OF_PLATFORM_NWPSERIAL="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_OF_PLATFORM_NWPSERIAL="y"]
     inherited [HAS_IOMEM && SERIAL_OF_PLATFORM_NWPSERIAL="y"]
    }
   }
   config SERIAL_QE tristate {
    prompt "Freescale QUICC Engine serial port support" if [HAS_IOMEM && QUICC_ENGINE]
    depends on [QUICC_ENGINE]
    select SERIAL_CORE if [HAS_IOMEM && QUICC_ENGINE]
    select FW_LOADER if [HAS_IOMEM && QUICC_ENGINE]
    default [n] if [HAS_IOMEM && QUICC_ENGINE]
    inherited [HAS_IOMEM && QUICC_ENGINE]
   }
   config SERIAL_SC26XX tristate {
    prompt "SC2681/SC2692 serial port support" if [HAS_IOMEM && SNI_RM]
    depends on [SNI_RM]
    select SERIAL_CORE if [HAS_IOMEM && SNI_RM]
    inherited [HAS_IOMEM && SNI_RM]
    config SERIAL_SC26XX_CONSOLE boolean {
     prompt "Console on SC2681/SC2692 serial port" if [HAS_IOMEM && SERIAL_SC26XX]
     depends on [SERIAL_SC26XX]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SC26XX]
     inherited [HAS_IOMEM && SERIAL_SC26XX]
    }
   }
   config SERIAL_BFIN_SPORT tristate {
    prompt "Blackfin SPORT emulate UART (EXPERIMENTAL)" if [HAS_IOMEM && BLACKFIN && EXPERIMENTAL]
    depends on [BLACKFIN && EXPERIMENTAL]
    select SERIAL_CORE if [HAS_IOMEM && BLACKFIN && EXPERIMENTAL]
    inherited [HAS_IOMEM && BLACKFIN && EXPERIMENTAL]
    choice boolean {
     prompt "Baud rate for Blackfin SPORT UART" if [HAS_IOMEM && SERIAL_BFIN_SPORT]
     depends on [SERIAL_BFIN_SPORT]
     default [SERIAL_SPORT_BAUD_RATE_57600] if [HAS_IOMEM && SERIAL_BFIN_SPORT]
     config SERIAL_SPORT_BAUD_RATE_115200 boolean {
      prompt "115200" if [<choice>]
      inherited [<choice>]
     }
     config SERIAL_SPORT_BAUD_RATE_57600 boolean {
      prompt "57600" if [<choice>]
      inherited [<choice>]
     }
     config SERIAL_SPORT_BAUD_RATE_38400 boolean {
      prompt "38400" if [<choice>]
      inherited [<choice>]
     }
     config SERIAL_SPORT_BAUD_RATE_19200 boolean {
      prompt "19200" if [<choice>]
      inherited [<choice>]
     }
     config SERIAL_SPORT_BAUD_RATE_9600 boolean {
      prompt "9600" if [<choice>]
      inherited [<choice>]
     }
    }
    config SPORT_BAUD_RATE integer {
     depends on [SERIAL_BFIN_SPORT]
     default [115200] if [HAS_IOMEM && SERIAL_BFIN_SPORT && SERIAL_SPORT_BAUD_RATE_115200]
     default [57600] if [HAS_IOMEM && SERIAL_BFIN_SPORT && SERIAL_SPORT_BAUD_RATE_57600]
     default [38400] if [HAS_IOMEM && SERIAL_BFIN_SPORT && SERIAL_SPORT_BAUD_RATE_38400]
     default [19200] if [HAS_IOMEM && SERIAL_BFIN_SPORT && SERIAL_SPORT_BAUD_RATE_19200]
     default [9600] if [HAS_IOMEM && SERIAL_BFIN_SPORT && SERIAL_SPORT_BAUD_RATE_9600]
     inherited [HAS_IOMEM && SERIAL_BFIN_SPORT]
    }
   }
   config SERIAL_TIMBERDALE tristate {
    prompt "Support for timberdale UART" if [HAS_IOMEM && MFD_TIMBERDALE]
    depends on [MFD_TIMBERDALE]
    select SERIAL_CORE if [HAS_IOMEM && MFD_TIMBERDALE]
    inherited [HAS_IOMEM && MFD_TIMBERDALE]
   }
   config SERIAL_BCM63XX tristate {
    prompt "bcm63xx serial port support" if [HAS_IOMEM && BCM63XX]
    select SERIAL_CORE if [HAS_IOMEM && BCM63XX]
    depends on [BCM63XX]
    inherited [HAS_IOMEM && BCM63XX]
    config SERIAL_BCM63XX_CONSOLE boolean {
     prompt "Console on bcm63xx serial port" if [HAS_IOMEM && SERIAL_BCM63XX="y"]
     depends on [SERIAL_BCM63XX="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_BCM63XX="y"]
     inherited [HAS_IOMEM && SERIAL_BCM63XX="y"]
    }
   }
  }
  config UNIX98_PTYS boolean {
   prompt "Unix98 PTY support" if [EMBEDDED]
   default [y] if []
   config DEVPTS_MULTIPLE_INSTANCES boolean {
    prompt "Support multiple instances of devpts" if [UNIX98_PTYS]
    depends on [UNIX98_PTYS]
    default [n] if [UNIX98_PTYS]
    inherited [UNIX98_PTYS]
   }
  }
  config LEGACY_PTYS boolean {
   prompt "Legacy (BSD) PTY support" if []
   default [y] if []
   config LEGACY_PTY_COUNT integer {
    prompt "Maximum number of legacy PTY in use" if [LEGACY_PTYS]
    depends on [LEGACY_PTYS]
    range [0 256] if [LEGACY_PTYS]
    default [256] if [LEGACY_PTYS]
    inherited [LEGACY_PTYS]
   }
  }
  config BRIQ_PANEL tristate {
   prompt "Total Impact briQ front panel driver" if [PPC_CHRP]
   depends on [PPC_CHRP]
   inherited [PPC_CHRP]
  }
  config BFIN_OTP tristate {
   prompt "Blackfin On-Chip OTP Memory Support" if [BLACKFIN && (BF52x || BF54x)]
   depends on [BLACKFIN && (BF52x || BF54x)]
   default [y] if [BLACKFIN && (BF52x || BF54x)]
   inherited [BLACKFIN && (BF52x || BF54x)]
   config BFIN_OTP_WRITE_ENABLE boolean {
    prompt "Enable writing support of OTP pages" if [BFIN_OTP]
    depends on [BFIN_OTP]
    default [n] if [BFIN_OTP]
    inherited [BFIN_OTP]
   }
  }
  config PRINTER tristate {
   prompt "Parallel printer support" if [PARPORT]
   depends on [PARPORT]
   inherited [PARPORT]
   config LP_CONSOLE boolean {
    prompt "Support for console on line printer" if [PRINTER]
    depends on [PRINTER]
    inherited [PRINTER]
   }
  }
  config PPDEV tristate {
   prompt "Support for user-space parallel port device drivers" if [PARPORT]
   depends on [PARPORT]
   inherited [PARPORT]
  }
  config HVC_DRIVER boolean {
  }
  config HVC_IRQ boolean {
  }
  config HVC_CONSOLE boolean {
   prompt "pSeries Hypervisor Virtual Console support" if [PPC_PSERIES]
   depends on [PPC_PSERIES]
   select HVC_DRIVER if [PPC_PSERIES]
   select HVC_IRQ if [PPC_PSERIES]
   inherited [PPC_PSERIES]
  }
  config HVC_ISERIES boolean {
   prompt "iSeries Hypervisor Virtual Console support" if [PPC_ISERIES]
   depends on [PPC_ISERIES]
   default [y] if [PPC_ISERIES]
   select HVC_DRIVER if [PPC_ISERIES]
   select HVC_IRQ if [PPC_ISERIES]
   select VIOPATH if [PPC_ISERIES]
   inherited [PPC_ISERIES]
  }
  config HVC_RTAS boolean {
   prompt "IBM RTAS Console support" if [PPC_RTAS]
   depends on [PPC_RTAS]
   select HVC_DRIVER if [PPC_RTAS]
   inherited [PPC_RTAS]
  }
  config HVC_BEAT boolean {
   prompt "Toshiba's Beat Hypervisor Console support" if [PPC_CELLEB]
   depends on [PPC_CELLEB]
   select HVC_DRIVER if [PPC_CELLEB]
   inherited [PPC_CELLEB]
  }
  config HVC_IUCV boolean {
   prompt "z/VM IUCV Hypervisor console support (VM only)" if [S390]
   depends on [S390]
   select HVC_DRIVER if [S390]
   select IUCV if [S390]
   default [y] if [S390]
   inherited [S390]
  }
  config HVC_XEN boolean {
   prompt "Xen Hypervisor Console support" if [XEN]
   depends on [XEN]
   select HVC_DRIVER if [XEN]
   select HVC_IRQ if [XEN]
   default [y] if [XEN]
   inherited [XEN]
  }
  config HVC_UDBG boolean {
   prompt "udbg based fake hypervisor console" if [PPC && EXPERIMENTAL]
   depends on [PPC && EXPERIMENTAL]
   select HVC_DRIVER if [PPC && EXPERIMENTAL]
   default [n] if [PPC && EXPERIMENTAL]
   inherited [PPC && EXPERIMENTAL]
  }
  config VIRTIO_CONSOLE tristate {
   prompt "Virtio console" if [VIRTIO]
   depends on [VIRTIO]
   select HVC_DRIVER if [VIRTIO]
   inherited [VIRTIO]
  }
  config HVCS tristate {
   prompt "IBM Hypervisor Virtual Console Server support" if [PPC_PSERIES]
   depends on [PPC_PSERIES]
   inherited [PPC_PSERIES]
  }
  config IBM_BSR tristate {
   prompt "IBM POWER Barrier Synchronization Register support" if [PPC_PSERIES]
   depends on [PPC_PSERIES]
   inherited [PPC_PSERIES]
  }
  menuconfig IPMI_HANDLER tristate {
   prompt "IPMI top-level message handler" if [HAS_IOMEM]
   depends on [HAS_IOMEM]
   inherited [HAS_IOMEM]
   if [IPMI_HANDLER] {
    config IPMI_PANIC_EVENT boolean {
     prompt "Generate a panic event to all BMCs on a panic" if [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
     config IPMI_PANIC_STRING boolean {
      prompt "Generate OEM events containing the panic string" if [IPMI_HANDLER && IPMI_PANIC_EVENT]
      depends on [IPMI_PANIC_EVENT]
      inherited [IPMI_HANDLER && IPMI_PANIC_EVENT]
     }
    }
    config IPMI_DEVICE_INTERFACE tristate {
     prompt "Device interface for IPMI" if [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
    config IPMI_SI tristate {
     prompt "IPMI System Interface handler" if [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
    config IPMI_WATCHDOG tristate {
     prompt "IPMI Watchdog Timer" if [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
    config IPMI_POWEROFF tristate {
     prompt "IPMI Poweroff" if [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
   }
  }
  config DS1620 tristate {
   prompt "NetWinder thermometer support" if [ARCH_NETWINDER]
   depends on [ARCH_NETWINDER]
   inherited [ARCH_NETWINDER]
  }
  config NWBUTTON tristate {
   prompt "NetWinder Button" if [ARCH_NETWINDER]
   depends on [ARCH_NETWINDER]
   inherited [ARCH_NETWINDER]
   config NWBUTTON_REBOOT boolean {
    prompt "Reboot Using Button" if [NWBUTTON]
    depends on [NWBUTTON]
    inherited [NWBUTTON]
   }
  }
  config NWFLASH tristate {
   prompt "NetWinder flash support" if [ARCH_NETWINDER]
   depends on [ARCH_NETWINDER]
   inherited [ARCH_NETWINDER]
  }
  config HW_RANDOM tristate {
   prompt "Hardware Random Number Generator Core support" if []
   default [m] if []
   config HW_RANDOM_TIMERIOMEM tristate {
    prompt "Timer IOMEM HW Random Number Generator support" if [HW_RANDOM && HAS_IOMEM]
    depends on [HW_RANDOM && HAS_IOMEM]
    inherited [HW_RANDOM && HAS_IOMEM]
   }
   config HW_RANDOM_INTEL tristate {
    prompt "Intel HW Random Number Generator support" if [HW_RANDOM && (X86 || IA64) && PCI]
    depends on [HW_RANDOM && (X86 || IA64) && PCI]
    default [HW_RANDOM] if [HW_RANDOM && (X86 || IA64) && PCI]
    inherited [HW_RANDOM && (X86 || IA64) && PCI]
   }
   config HW_RANDOM_AMD tristate {
    prompt "AMD HW Random Number Generator support" if [HW_RANDOM && X86 && PCI]
    depends on [HW_RANDOM && X86 && PCI]
    default [HW_RANDOM] if [HW_RANDOM && X86 && PCI]
    inherited [HW_RANDOM && X86 && PCI]
   }
   config HW_RANDOM_GEODE tristate {
    prompt "AMD Geode HW Random Number Generator support" if [HW_RANDOM && X86_32 && PCI]
    depends on [HW_RANDOM && X86_32 && PCI]
    default [HW_RANDOM] if [HW_RANDOM && X86_32 && PCI]
    inherited [HW_RANDOM && X86_32 && PCI]
   }
   config HW_RANDOM_N2RNG tristate {
    prompt "Niagara2 Random Number Generator support" if [HW_RANDOM && SPARC64]
    depends on [HW_RANDOM && SPARC64]
    default [HW_RANDOM] if [HW_RANDOM && SPARC64]
    inherited [HW_RANDOM && SPARC64]
   }
   config HW_RANDOM_VIA tristate {
    prompt "VIA HW Random Number Generator support" if [HW_RANDOM && X86]
    depends on [HW_RANDOM && X86]
    default [HW_RANDOM] if [HW_RANDOM && X86]
    inherited [HW_RANDOM && X86]
   }
   config HW_RANDOM_IXP4XX tristate {
    prompt "Intel IXP4xx NPU HW Random Number Generator support" if [HW_RANDOM && ARCH_IXP4XX]
    depends on [HW_RANDOM && ARCH_IXP4XX]
    default [HW_RANDOM] if [HW_RANDOM && ARCH_IXP4XX]
    inherited [HW_RANDOM && ARCH_IXP4XX]
   }
   config HW_RANDOM_OMAP tristate {
    prompt "OMAP Random Number Generator support" if [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    depends on [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    default [HW_RANDOM] if [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    inherited [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
   }
   config HW_RANDOM_OCTEON tristate {
    prompt "Octeon Random Number Generator support" if [HW_RANDOM && CPU_CAVIUM_OCTEON]
    depends on [HW_RANDOM && CPU_CAVIUM_OCTEON]
    default [HW_RANDOM] if [HW_RANDOM && CPU_CAVIUM_OCTEON]
    inherited [HW_RANDOM && CPU_CAVIUM_OCTEON]
   }
   config HW_RANDOM_PASEMI tristate {
    prompt "PA Semi HW Random Number Generator support" if [HW_RANDOM && PPC_PASEMI]
    depends on [HW_RANDOM && PPC_PASEMI]
    default [HW_RANDOM] if [HW_RANDOM && PPC_PASEMI]
    inherited [HW_RANDOM && PPC_PASEMI]
   }
   config HW_RANDOM_VIRTIO tristate {
    prompt "VirtIO Random Number Generator support" if [HW_RANDOM && VIRTIO]
    depends on [HW_RANDOM && VIRTIO]
    inherited [HW_RANDOM && VIRTIO]
   }
   config HW_RANDOM_TX4939 tristate {
    prompt "TX4939 Random Number Generator support" if [HW_RANDOM && SOC_TX4939]
    depends on [HW_RANDOM && SOC_TX4939]
    default [HW_RANDOM] if [HW_RANDOM && SOC_TX4939]
    inherited [HW_RANDOM && SOC_TX4939]
   }
   config HW_RANDOM_MXC_RNGA tristate {
    prompt "Freescale i.MX RNGA Random Number Generator" if [HW_RANDOM && ARCH_HAS_RNGA]
    depends on [HW_RANDOM && ARCH_HAS_RNGA]
    inherited [HW_RANDOM && ARCH_HAS_RNGA]
   }
  }
  config NVRAM tristate {
   prompt "/dev/nvram support" if [ATARI || X86 || ARM && RTC_DRV_CMOS || GENERIC_NVRAM]
   depends on [ATARI || X86 || ARM && RTC_DRV_CMOS || GENERIC_NVRAM]
   inherited [ATARI || X86 || ARM && RTC_DRV_CMOS || GENERIC_NVRAM]
  }
  if [RTC_LIB="n"] {
   config RTC tristate {
    prompt "Enhanced Real Time Clock Support (legacy PC RTC driver)" if [RTC_LIB="n" && !PPC && !PARISC && !IA64 && !M68K && !SPARC && !FRV && !ARM && !SUPERH && !S390 && !AVR32 && !BLACKFIN]
    depends on [!PPC && !PARISC && !IA64 && !M68K && !SPARC && !FRV && !ARM && !SUPERH && !S390 && !AVR32 && !BLACKFIN]
    inherited [RTC_LIB="n" && !PPC && !PARISC && !IA64 && !M68K && !SPARC && !FRV && !ARM && !SUPERH && !S390 && !AVR32 && !BLACKFIN]
   }
   config JS_RTC tristate {
    prompt "Enhanced Real Time Clock Support" if [RTC_LIB="n" && SPARC32 && PCI]
    depends on [SPARC32 && PCI]
    inherited [RTC_LIB="n" && SPARC32 && PCI]
   }
   config GEN_RTC tristate {
    prompt "Generic /dev/rtc emulation" if [RTC_LIB="n" && RTC!="y" && !IA64 && !ARM && !M32R && !MIPS && !SPARC && !FRV && !S390 && !SUPERH && !AVR32 && !BLACKFIN]
    depends on [RTC!="y" && !IA64 && !ARM && !M32R && !MIPS && !SPARC && !FRV && !S390 && !SUPERH && !AVR32 && !BLACKFIN]
    inherited [RTC_LIB="n" && RTC!="y" && !IA64 && !ARM && !M32R && !MIPS && !SPARC && !FRV && !S390 && !SUPERH && !AVR32 && !BLACKFIN]
    config GEN_RTC_X boolean {
     prompt "Extended RTC operation" if [RTC_LIB="n" && GEN_RTC]
     depends on [GEN_RTC]
     inherited [RTC_LIB="n" && GEN_RTC]
    }
   }
   config EFI_RTC boolean {
    prompt "EFI Real Time Clock Services" if [RTC_LIB="n" && IA64]
    depends on [IA64]
    inherited [RTC_LIB="n" && IA64]
   }
   config DS1302 tristate {
    prompt "DS1302 RTC support" if [RTC_LIB="n" && M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
    depends on [M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
    inherited [RTC_LIB="n" && M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
   }
  }
  config DTLK tristate {
   prompt "Double Talk PC internal speech card support" if [ISA]
   depends on [ISA]
   inherited [ISA]
  }
  config XILINX_HWICAP tristate {
   prompt "Xilinx HWICAP Support" if [XILINX_VIRTEX || MICROBLAZE]
   depends on [XILINX_VIRTEX || MICROBLAZE]
   inherited [XILINX_VIRTEX || MICROBLAZE]
  }
  config R3964 tristate {
   prompt "Siemens R3964 line discipline" if []
  }
  config APPLICOM tristate {
   prompt "Applicom intelligent fieldbus card support" if [PCI]
   depends on [PCI]
   inherited [PCI]
  }
  config SONYPI tristate {
   prompt "Sony Vaio Programmable I/O Control Device support (EXPERIMENTAL)" if [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
   depends on [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
   inherited [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
  }
  config GPIO_TB0219 tristate {
   prompt "TANBAC TB0219 GPIO support" if [TANBAC_TB022X]
   depends on [TANBAC_TB022X]
   select GPIO_VR41XX if [TANBAC_TB022X]
   inherited [TANBAC_TB022X]
  }
  menu "PCMCIA character devices" {
   depends on [HOTPLUG && PCMCIA!="n"]
   config SYNCLINK_CS tristate {
    prompt "SyncLink PC Card support" if [HOTPLUG && PCMCIA]
    depends on [PCMCIA]
    inherited [HOTPLUG && PCMCIA]
   }
   config CARDMAN_4000 tristate {
    prompt "Omnikey Cardman 4000 support" if [HOTPLUG && PCMCIA]
    depends on [PCMCIA]
    select BITREVERSE if [HOTPLUG && PCMCIA]
    inherited [HOTPLUG && PCMCIA]
   }
   config CARDMAN_4040 tristate {
    prompt "Omnikey CardMan 4040 support" if [HOTPLUG && PCMCIA]
    depends on [PCMCIA]
    inherited [HOTPLUG && PCMCIA]
   }
   config IPWIRELESS tristate {
    prompt "IPWireless 3G UMTS PCMCIA card support" if [HOTPLUG && PCMCIA && NETDEVICES]
    depends on [PCMCIA && NETDEVICES]
    select PPP if [HOTPLUG && PCMCIA && NETDEVICES]
    inherited [HOTPLUG && PCMCIA && NETDEVICES]
   }
  }
  config MWAVE tristate {
   prompt "ACP Modem (Mwave) support" if [X86]
   depends on [X86]
   select SERIAL_8250 if [X86]
   inherited [X86]
  }
  config SCx200_GPIO tristate {
   prompt "NatSemi SCx200 GPIO Support" if [SCx200]
   depends on [SCx200]
   select NSC_GPIO if [SCx200]
   inherited [SCx200]
  }
  config PC8736x_GPIO tristate {
   prompt "NatSemi PC8736x GPIO Support" if [X86]
   depends on [X86]
   default [SCx200_GPIO] if [X86]
   select NSC_GPIO if [X86]
   inherited [X86]
  }
  config NSC_GPIO tristate {
   prompt "NatSemi Base GPIO Support" if [X86_32]
   depends on [X86_32]
   inherited [X86_32]
  }
  config CS5535_GPIO tristate {
   prompt "AMD CS5535/CS5536 GPIO (Geode Companion Device)" if [X86_32]
   depends on [X86_32]
   inherited [X86_32]
  }
  config RAW_DRIVER tristate {
   prompt "RAW driver (/dev/raw/rawN)" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
   config MAX_RAW_DEVS integer {
    prompt "Maximum number of RAW devices to support (1-8192)" if [RAW_DRIVER]
    depends on [RAW_DRIVER]
    default [256] if [RAW_DRIVER]
    inherited [RAW_DRIVER]
   }
  }
  config HPET boolean {
   prompt "HPET - High Precision Event Timer" if [ACPI && (X86 || IA64)]
   default [n] if [ACPI]
   depends on [ACPI]
   inherited [ACPI]
   config HPET_MMAP boolean {
    prompt "Allow mmap of HPET" if [HPET]
    default [y] if [HPET]
    depends on [HPET]
    inherited [HPET]
   }
  }
  config HANGCHECK_TIMER tristate {
   prompt "Hangcheck timer" if [X86 || IA64 || PPC64 || S390]
   depends on [X86 || IA64 || PPC64 || S390]
   inherited [X86 || IA64 || PPC64 || S390]
  }
  config MMTIMER tristate {
   prompt "MMTIMER Memory mapped RTC for SGI Altix" if [IA64_GENERIC || IA64_SGI_SN2]
   depends on [IA64_GENERIC || IA64_SGI_SN2]
   default [y] if [IA64_GENERIC || IA64_SGI_SN2]
   inherited [IA64_GENERIC || IA64_SGI_SN2]
  }
  config UV_MMTIMER tristate {
   prompt "UV_MMTIMER Memory mapped RTC for SGI UV" if [X86_UV]
   depends on [X86_UV]
   default [m] if [X86_UV]
   inherited [X86_UV]
  }
  menuconfig TCG_TPM tristate {
   prompt "TPM Hardware Support" if [HAS_IOMEM && EXPERIMENTAL]
   depends on [HAS_IOMEM]
   depends on [EXPERIMENTAL]
   select SECURITYFS if [HAS_IOMEM && EXPERIMENTAL]
   inherited [HAS_IOMEM && EXPERIMENTAL]
   if [TCG_TPM] {
    config TCG_TIS tristate {
     prompt "TPM Interface Specification 1.2 Interface" if [TCG_TPM && PNP]
     depends on [PNP]
     inherited [TCG_TPM && PNP]
    }
    config TCG_NSC tristate {
     prompt "National Semiconductor TPM Interface" if [TCG_TPM]
     inherited [TCG_TPM]
    }
    config TCG_ATMEL tristate {
     prompt "Atmel TPM Interface" if [TCG_TPM]
     inherited [TCG_TPM]
    }
    config TCG_INFINEON tristate {
     prompt "Infineon Technologies TPM Interface" if [TCG_TPM && PNP]
     depends on [PNP]
     inherited [TCG_TPM && PNP]
    }
   }
  }
  config TELCLOCK tristate {
   prompt "Telecom clock driver for ATCA SBC" if [EXPERIMENTAL && X86]
   depends on [EXPERIMENTAL && X86]
   default [n] if [EXPERIMENTAL && X86]
   inherited [EXPERIMENTAL && X86]
  }
  config DEVPORT boolean {
   depends on [!M68K]
   depends on [ISA || PCI]
   default [y] if [!M68K && (ISA || PCI)]
   inherited [!M68K && (ISA || PCI)]
  }
  config TN3270 tristate {
   prompt "Support for locally attached 3270 terminals" if [CCW]
   depends on [CCW]
   inherited [CCW]
   config TN3270_TTY tristate {
    prompt "Support for tty input/output on 3270 terminals" if [TN3270]
    depends on [TN3270]
    inherited [TN3270]
   }
   config TN3270_FS tristate {
    prompt "Support for fullscreen applications on 3270 terminals" if [TN3270]
    depends on [TN3270]
    inherited [TN3270]
   }
   config TN3270_CONSOLE boolean {
    prompt "Support for console on 3270 terminal" if [TN3270="y" && TN3270_TTY="y"]
    depends on [TN3270="y" && TN3270_TTY="y"]
    inherited [TN3270="y" && TN3270_TTY="y"]
   }
  }
  config TN3215 boolean {
   prompt "Support for 3215 line mode terminal" if [CCW]
   depends on [CCW]
   inherited [CCW]
   config TN3215_CONSOLE boolean {
    prompt "Support for console on 3215 line mode terminal" if [TN3215]
    depends on [TN3215]
    inherited [TN3215]
   }
  }
  config CCW_CONSOLE boolean {
   depends on [TN3215_CONSOLE || TN3270_CONSOLE]
   default [y] if [TN3215_CONSOLE || TN3270_CONSOLE]
   inherited [TN3215_CONSOLE || TN3270_CONSOLE]
  }
  config SCLP_TTY boolean {
   prompt "Support for SCLP line mode terminal" if [S390]
   depends on [S390]
   inherited [S390]
   config SCLP_CONSOLE boolean {
    prompt "Support for console on SCLP line mode terminal" if [SCLP_TTY]
    depends on [SCLP_TTY]
    inherited [SCLP_TTY]
   }
  }
  config SCLP_VT220_TTY boolean {
   prompt "Support for SCLP VT220-compatible terminal" if [S390]
   depends on [S390]
   inherited [S390]
   config SCLP_VT220_CONSOLE boolean {
    prompt "Support for console on SCLP VT220-compatible terminal" if [SCLP_VT220_TTY]
    depends on [SCLP_VT220_TTY]
    inherited [SCLP_VT220_TTY]
   }
  }
  config SCLP_CPI tristate {
   prompt "Control-Program Identification" if [S390]
   depends on [S390]
   inherited [S390]
  }
  config SCLP_ASYNC tristate {
   prompt "Support for Call Home via Asynchronous SCLP Records" if [S390]
   depends on [S390]
   inherited [S390]
  }
  config S390_TAPE tristate {
   prompt "S/390 tape device support" if [CCW]
   depends on [CCW]
   inherited [CCW]
   config S390_TAPE_BLOCK boolean {
    prompt "Support for tape block devices" if [S390_TAPE && BLOCK]
    depends on [S390_TAPE && BLOCK]
    inherited [S390_TAPE && BLOCK]
   }
   config S390_TAPE_34XX tristate {
    prompt "Support for 3480/3490 tape hardware" if [S390_TAPE]
    depends on [S390_TAPE]
    inherited [S390_TAPE]
   }
   config S390_TAPE_3590 tristate {
    prompt "Support for 3590 tape hardware" if [S390_TAPE]
    depends on [S390_TAPE]
    inherited [S390_TAPE]
   }
  }
  config VMLOGRDR tristate {
   prompt "Support for the z/VM recording system services (VM only)" if [IUCV]
   depends on [IUCV]
   inherited [IUCV]
  }
  config VMCP tristate {
   prompt "Support for the z/VM CP interface (VM only)" if [S390]
   depends on [S390]
   inherited [S390]
  }
  config MONREADER tristate {
   prompt "API for reading z/VM monitor service records" if [IUCV]
   depends on [IUCV]
   inherited [IUCV]
  }
  config MONWRITER tristate {
   prompt "API for writing z/VM monitor service records" if [S390]
   depends on [S390]
   default [m] if [S390]
   inherited [S390]
  }
  config S390_VMUR tristate {
   prompt "z/VM unit record device driver" if [S390]
   depends on [S390]
   default [m] if [S390]
   inherited [S390]
  }
 }
 menuconfig I2C tristate {
  prompt "I2C support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [I2C] {
   config I2C_BOARDINFO boolean {
    default [y] if [I2C]
    inherited [I2C]
   }
   config I2C_COMPAT boolean {
    prompt "Enable compatibility bits for old user-space" if [I2C]
    default [y] if [I2C]
    inherited [I2C]
   }
   config I2C_CHARDEV tristate {
    prompt "I2C device interface" if [I2C]
    inherited [I2C]
   }
   config I2C_HELPER_AUTO boolean {
    prompt "Autoselect pertinent helper modules" if [I2C]
    default [y] if [I2C]
    inherited [I2C]
    menu "I2C Algorithms" {
     depends on [I2C && !I2C_HELPER_AUTO]
     config I2C_ALGOBIT tristate {
      prompt "I2C bit-banging interfaces" if [I2C && !I2C_HELPER_AUTO]
      inherited [I2C && !I2C_HELPER_AUTO]
     }
     config I2C_ALGOPCF tristate {
      prompt "I2C PCF 8584 interfaces" if [I2C && !I2C_HELPER_AUTO]
      inherited [I2C && !I2C_HELPER_AUTO]
     }
     config I2C_ALGOPCA tristate {
      prompt "I2C PCA 9564 interfaces" if [I2C && !I2C_HELPER_AUTO]
      inherited [I2C && !I2C_HELPER_AUTO]
     }
    }
   }
   menu "I2C Hardware Bus support" {
    depends on [I2C]
    config I2C_ALI1535 tristate {
     prompt "ALI 1535" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_ALI1563 tristate {
     prompt "ALI 1563" if [I2C && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [I2C && PCI && EXPERIMENTAL]
    }
    config I2C_ALI15X3 tristate {
     prompt "ALI 15x3" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_AMD756 tristate {
     prompt "AMD 756/766/768/8111 and nVidia nForce" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
     config I2C_AMD756_S4882 tristate {
      prompt "SMBus multiplexing on the Tyan S4882" if [I2C && I2C_AMD756 && X86 && EXPERIMENTAL]
      depends on [I2C_AMD756 && X86 && EXPERIMENTAL]
      inherited [I2C && I2C_AMD756 && X86 && EXPERIMENTAL]
     }
    }
    config I2C_AMD8111 tristate {
     prompt "AMD 8111" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_I801 tristate {
     prompt "Intel 82801 (ICH)" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_ISCH tristate {
     prompt "Intel SCH SMBus 1.0" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_PIIX4 tristate {
     prompt "Intel PIIX4 and compatible (ATI/AMD/Serverworks/Broadcom/SMSC)" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_NFORCE2 tristate {
     prompt "Nvidia nForce2, nForce3 and nForce4" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
     config I2C_NFORCE2_S4985 tristate {
      prompt "SMBus multiplexing on the Tyan S4985" if [I2C && I2C_NFORCE2 && X86 && EXPERIMENTAL]
      depends on [I2C_NFORCE2 && X86 && EXPERIMENTAL]
      inherited [I2C && I2C_NFORCE2 && X86 && EXPERIMENTAL]
     }
    }
    config I2C_SIS5595 tristate {
     prompt "SiS 5595" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_SIS630 tristate {
     prompt "SiS 630/730" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_SIS96X tristate {
     prompt "SiS 96x" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_VIA tristate {
     prompt "VIA VT82C586B" if [I2C && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     select I2C_ALGOBIT if [I2C && PCI && EXPERIMENTAL]
     inherited [I2C && PCI && EXPERIMENTAL]
    }
    config I2C_VIAPRO tristate {
     prompt "VIA VT82C596/82C686/82xx and CX700/VX8xx" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    if [I2C && ACPI] {
     config I2C_SCMI tristate {
      prompt "SMBus Control Method Interface" if [I2C && ACPI]
      inherited [I2C && ACPI]
     }
    }
    config I2C_HYDRA tristate {
     prompt "CHRP Apple Hydra Mac I/O I2C interface" if [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
     depends on [PCI && PPC_CHRP && EXPERIMENTAL]
     select I2C_ALGOBIT if [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
     inherited [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
    }
    config I2C_POWERMAC tristate {
     prompt "Powermac I2C interface" if [I2C && PPC_PMAC]
     depends on [PPC_PMAC]
     default [y] if [I2C && PPC_PMAC]
     inherited [I2C && PPC_PMAC]
    }
    config I2C_AT91 tristate {
     prompt "Atmel AT91 I2C Two-Wire interface (TWI)" if [I2C && ARCH_AT91 && EXPERIMENTAL && BROKEN]
     depends on [ARCH_AT91 && EXPERIMENTAL && BROKEN]
     inherited [I2C && ARCH_AT91 && EXPERIMENTAL && BROKEN]
    }
    config I2C_AU1550 tristate {
     prompt "Au1550/Au1200 SMBus interface" if [I2C && (SOC_AU1550 || SOC_AU1200)]
     depends on [SOC_AU1550 || SOC_AU1200]
     inherited [I2C && (SOC_AU1550 || SOC_AU1200)]
    }
    config I2C_BLACKFIN_TWI tristate {
     prompt "Blackfin TWI I2C support" if [I2C && BLACKFIN && !BF561 && !BF531 && !BF532 && !BF533]
     depends on [BLACKFIN]
     depends on [!BF561 && !BF531 && !BF532 && !BF533]
     inherited [I2C && BLACKFIN && !BF561 && !BF531 && !BF532 && !BF533]
     config I2C_BLACKFIN_TWI_CLK_KHZ integer {
      prompt "Blackfin TWI I2C clock (kHz)" if [I2C && I2C_BLACKFIN_TWI]
      depends on [I2C_BLACKFIN_TWI]
      range [21 400] if [I2C && I2C_BLACKFIN_TWI]
      default [50] if [I2C && I2C_BLACKFIN_TWI]
      inherited [I2C && I2C_BLACKFIN_TWI]
     }
    }
    config I2C_CPM tristate {
     prompt "Freescale CPM1 or CPM2 (MPC8xx/826x)" if [I2C && (CPM1 || CPM2) && OF_I2C]
     depends on [(CPM1 || CPM2) && OF_I2C]
     inherited [I2C && (CPM1 || CPM2) && OF_I2C]
    }
    config I2C_DAVINCI tristate {
     prompt "DaVinci I2C driver" if [I2C && ARCH_DAVINCI]
     depends on [ARCH_DAVINCI]
     inherited [I2C && ARCH_DAVINCI]
    }
    config I2C_DESIGNWARE tristate {
     prompt "Synopsys DesignWare" if [I2C && HAVE_CLK]
     depends on [HAVE_CLK]
     inherited [I2C && HAVE_CLK]
    }
    config I2C_GPIO tristate {
     prompt "GPIO-based bitbanging I2C" if [I2C && GENERIC_GPIO]
     depends on [GENERIC_GPIO]
     select I2C_ALGOBIT if [I2C && GENERIC_GPIO]
     inherited [I2C && GENERIC_GPIO]
    }
    config I2C_HIGHLANDER tristate {
     prompt "Highlander FPGA SMBus interface" if [I2C && SH_HIGHLANDER]
     depends on [SH_HIGHLANDER]
     inherited [I2C && SH_HIGHLANDER]
    }
    config I2C_IBM_IIC tristate {
     prompt "IBM PPC 4xx on-chip I2C interface" if [I2C && 4xx]
     depends on [4xx]
     inherited [I2C && 4xx]
    }
    config I2C_IMX tristate {
     prompt "IMX I2C interface" if [I2C && ARCH_MXC]
     depends on [ARCH_MXC]
     inherited [I2C && ARCH_MXC]
    }
    config I2C_IOP3XX tristate {
     prompt "Intel IOPx3xx and IXP4xx on-chip I2C interface" if [I2C && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX)]
     depends on [ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX]
     inherited [I2C && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX)]
    }
    config I2C_IXP2000 tristate {
     prompt "IXP2000 GPIO-Based I2C Interface (DEPRECATED)" if [I2C && ARCH_IXP2000]
     depends on [ARCH_IXP2000]
     select I2C_ALGOBIT if [I2C && ARCH_IXP2000]
     inherited [I2C && ARCH_IXP2000]
    }
    config I2C_MPC tristate {
     prompt "MPC107/824x/85xx/52xx/86xx" if [I2C && PPC32]
     depends on [PPC32]
     inherited [I2C && PPC32]
    }
    config I2C_MV64XXX tristate {
     prompt "Marvell mv64xxx I2C Controller" if [I2C && (MV64X60 || PLAT_ORION) && EXPERIMENTAL]
     depends on [(MV64X60 || PLAT_ORION) && EXPERIMENTAL]
     inherited [I2C && (MV64X60 || PLAT_ORION) && EXPERIMENTAL]
    }
    config I2C_OCORES tristate {
     prompt "OpenCores I2C Controller" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config I2C_OMAP tristate {
     prompt "OMAP I2C adapter" if [I2C && ARCH_OMAP]
     depends on [ARCH_OMAP]
     default [y] if [I2C && ARCH_OMAP && (MACH_OMAP_H3 || MACH_OMAP_OSK)]
     inherited [I2C && ARCH_OMAP]
    }
    config I2C_PASEMI tristate {
     prompt "PA Semi SMBus interface" if [I2C && PPC_PASEMI && PCI]
     depends on [PPC_PASEMI && PCI]
     inherited [I2C && PPC_PASEMI && PCI]
    }
    config I2C_PNX tristate {
     prompt "I2C bus support for Philips PNX targets" if [I2C && ARCH_PNX4008]
     depends on [ARCH_PNX4008]
     inherited [I2C && ARCH_PNX4008]
    }
    config I2C_PXA tristate {
     prompt "Intel PXA2XX I2C adapter" if [I2C && (ARCH_PXA || ARCH_MMP)]
     depends on [ARCH_PXA || ARCH_MMP]
     inherited [I2C && (ARCH_PXA || ARCH_MMP)]
     config I2C_PXA_SLAVE boolean {
      prompt "Intel PXA2XX I2C Slave comms support" if [I2C && I2C_PXA]
      depends on [I2C_PXA]
      inherited [I2C && I2C_PXA]
     }
    }
    config I2C_S3C2410 tristate {
     prompt "S3C2410 I2C Driver" if [I2C && (ARCH_S3C2410 || ARCH_S3C64XX)]
     depends on [ARCH_S3C2410 || ARCH_S3C64XX]
     inherited [I2C && (ARCH_S3C2410 || ARCH_S3C64XX)]
    }
    config I2C_S6000 tristate {
     prompt "S6000 I2C support" if [I2C && XTENSA_VARIANT_S6000]
     depends on [XTENSA_VARIANT_S6000]
     inherited [I2C && XTENSA_VARIANT_S6000]
    }
    config I2C_SH7760 tristate {
     prompt "Renesas SH7760 I2C Controller" if [I2C && CPU_SUBTYPE_SH7760]
     depends on [CPU_SUBTYPE_SH7760]
     inherited [I2C && CPU_SUBTYPE_SH7760]
    }
    config I2C_SH_MOBILE tristate {
     prompt "SuperH Mobile I2C Controller" if [I2C && SUPERH]
     depends on [SUPERH]
     inherited [I2C && SUPERH]
    }
    config I2C_SIMTEC tristate {
     prompt "Simtec Generic I2C interface" if [I2C]
     select I2C_ALGOBIT if [I2C]
     inherited [I2C]
    }
    config I2C_STU300 tristate {
     prompt "ST Microelectronics DDC I2C interface" if [I2C && MACH_U300]
     depends on [MACH_U300]
     default [y] if [I2C && MACH_U300]
     inherited [I2C && MACH_U300]
    }
    config I2C_VERSATILE tristate {
     prompt "ARM Versatile/Realview I2C bus support" if [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
     depends on [ARCH_VERSATILE || ARCH_REALVIEW]
     select I2C_ALGOBIT if [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
     inherited [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
    }
    config I2C_PARPORT tristate {
     prompt "Parallel port adapter" if [I2C && PARPORT]
     depends on [PARPORT]
     select I2C_ALGOBIT if [I2C && PARPORT]
     inherited [I2C && PARPORT]
    }
    config I2C_PARPORT_LIGHT tristate {
     prompt "Parallel port adapter (light)" if [I2C]
     select I2C_ALGOBIT if [I2C]
     inherited [I2C]
    }
    config I2C_TAOS_EVM tristate {
     prompt "TAOS evaluation module" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     select SERIO if [I2C && EXPERIMENTAL]
     select SERIO_SERPORT if [I2C && EXPERIMENTAL]
     default [n] if [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config I2C_TINY_USB tristate {
     prompt "Tiny-USB adapter" if [I2C && USB]
     depends on [USB]
     inherited [I2C && USB]
    }
    config I2C_VOODOO3 tristate {
     prompt "Voodoo 3 (DEPRECATED)" if [I2C && PCI]
     depends on [PCI]
     select I2C_ALGOBIT if [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_ACORN tristate {
     prompt "Acorn IOC/IOMD I2C bus support" if [I2C && ARCH_ACORN]
     depends on [ARCH_ACORN]
     default [y] if [I2C && ARCH_ACORN]
     select I2C_ALGOBIT if [I2C && ARCH_ACORN]
     inherited [I2C && ARCH_ACORN]
    }
    config I2C_ELEKTOR tristate {
     prompt "Elektor ISA card" if [I2C && ISA && BROKEN_ON_SMP]
     depends on [ISA && BROKEN_ON_SMP]
     select I2C_ALGOPCF if [I2C && ISA && BROKEN_ON_SMP]
     inherited [I2C && ISA && BROKEN_ON_SMP]
    }
    config I2C_PCA_ISA tristate {
     prompt "PCA9564/PCA9665 on an ISA bus" if [I2C && ISA]
     depends on [ISA]
     select I2C_ALGOPCA if [I2C && ISA]
     default [n] if [I2C && ISA]
     inherited [I2C && ISA]
    }
    config I2C_PCA_PLATFORM tristate {
     prompt "PCA9564/PCA9665 as platform device" if [I2C]
     select I2C_ALGOPCA if [I2C]
     default [n] if [I2C]
     inherited [I2C]
    }
    config I2C_PMCMSP tristate {
     prompt "PMC MSP I2C TWI Controller" if [I2C && PMC_MSP]
     depends on [PMC_MSP]
     inherited [I2C && PMC_MSP]
    }
    config I2C_SIBYTE tristate {
     prompt "SiByte SMBus interface" if [I2C && SIBYTE_SB1xxx_SOC]
     depends on [SIBYTE_SB1xxx_SOC]
     inherited [I2C && SIBYTE_SB1xxx_SOC]
    }
    config I2C_STUB tristate {
     prompt "I2C/SMBus Test Stub" if [I2C && EXPERIMENTAL && m && <choice>]
     depends on [EXPERIMENTAL && m]
     default [n] if [I2C && EXPERIMENTAL && m && <choice>]
     inherited [I2C && EXPERIMENTAL && m && <choice>]
    }
    config SCx200_I2C tristate {
     prompt "NatSemi SCx200 I2C using GPIO pins (DEPRECATED)" if [I2C && SCx200_GPIO]
     depends on [SCx200_GPIO]
     select I2C_ALGOBIT if [I2C && SCx200_GPIO]
     inherited [I2C && SCx200_GPIO]
     config SCx200_I2C_SCL integer {
      prompt "GPIO pin used for SCL" if [I2C && SCx200_I2C]
      depends on [SCx200_I2C]
      default [12] if [I2C && SCx200_I2C]
      inherited [I2C && SCx200_I2C]
     }
     config SCx200_I2C_SDA integer {
      prompt "GPIO pin used for SDA" if [I2C && SCx200_I2C]
      depends on [SCx200_I2C]
      default [13] if [I2C && SCx200_I2C]
      inherited [I2C && SCx200_I2C]
     }
    }
    config SCx200_ACB tristate {
     prompt "Geode ACCESS.bus support" if [I2C && X86_32 && PCI]
     depends on [X86_32 && PCI]
     inherited [I2C && X86_32 && PCI]
    }
   }
   menu "Miscellaneous I2C Chip support" {
    depends on [I2C]
    config DS1682 tristate {
     prompt "Dallas DS1682 Total Elapsed Time Recorder with Alarm" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_TSL2550 tristate {
     prompt "Taos TSL2550 ambient light sensor" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
   }
   config I2C_DEBUG_CORE boolean {
    prompt "I2C Core debugging messages" if [I2C]
    inherited [I2C]
   }
   config I2C_DEBUG_ALGO boolean {
    prompt "I2C Algorithm debugging messages" if [I2C]
    inherited [I2C]
   }
   config I2C_DEBUG_BUS boolean {
    prompt "I2C Bus debugging messages" if [I2C]
    inherited [I2C]
   }
   config I2C_DEBUG_CHIP boolean {
    prompt "I2C Chip debugging messages" if [I2C]
    inherited [I2C]
   }
  }
 }
 menuconfig SPI boolean {
  prompt "SPI support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [SPI] {
   config SPI_DEBUG boolean {
    prompt "Debug support for SPI drivers" if [SPI && DEBUG_KERNEL]
    depends on [DEBUG_KERNEL]
    inherited [SPI && DEBUG_KERNEL]
   }
   config SPI_MASTER boolean {
    default [SPI] if [SPI]
    inherited [SPI]
   }
   if [SPI && SPI_MASTER] {
    config SPI_ATMEL tristate {
     prompt "Atmel SPI Controller" if [SPI && SPI_MASTER && (ARCH_AT91 || AVR32)]
     depends on [ARCH_AT91 || AVR32]
     inherited [SPI && SPI_MASTER && (ARCH_AT91 || AVR32)]
    }
    config SPI_BFIN tristate {
     prompt "SPI controller driver for ADI Blackfin5xx" if [SPI && SPI_MASTER && BLACKFIN]
     depends on [BLACKFIN]
     inherited [SPI && SPI_MASTER && BLACKFIN]
    }
    config SPI_AU1550 tristate {
     prompt "Au1550/Au12x0 SPI Controller" if [SPI && SPI_MASTER && (SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
     depends on [(SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
     select SPI_BITBANG if [SPI && SPI_MASTER && (SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
     inherited [SPI && SPI_MASTER && (SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
    }
    config SPI_BITBANG tristate {
     prompt "Utilities for Bitbanging SPI masters" if [SPI && SPI_MASTER]
     inherited [SPI && SPI_MASTER]
    }
    config SPI_BUTTERFLY tristate {
     prompt "Parallel port adapter for AVR Butterfly (DEVELOPMENT)" if [SPI && SPI_MASTER && PARPORT]
     depends on [PARPORT]
     select SPI_BITBANG if [SPI && SPI_MASTER && PARPORT]
     inherited [SPI && SPI_MASTER && PARPORT]
    }
    config SPI_GPIO tristate {
     prompt "GPIO-based bitbanging SPI Master" if [SPI && SPI_MASTER && GENERIC_GPIO]
     depends on [GENERIC_GPIO]
     select SPI_BITBANG if [SPI && SPI_MASTER && GENERIC_GPIO]
     inherited [SPI && SPI_MASTER && GENERIC_GPIO]
    }
    config SPI_IMX tristate {
     prompt "Freescale i.MX SPI controllers" if [SPI && SPI_MASTER && ARCH_MXC]
     depends on [ARCH_MXC]
     select SPI_BITBANG if [SPI && SPI_MASTER && ARCH_MXC]
     inherited [SPI && SPI_MASTER && ARCH_MXC]
    }
    config SPI_LM70_LLP tristate {
     prompt "Parallel port adapter for LM70 eval board (DEVELOPMENT)" if [SPI && SPI_MASTER && PARPORT && EXPERIMENTAL]
     depends on [PARPORT && EXPERIMENTAL]
     select SPI_BITBANG if [SPI && SPI_MASTER && PARPORT && EXPERIMENTAL]
     inherited [SPI && SPI_MASTER && PARPORT && EXPERIMENTAL]
    }
    config SPI_MPC52xx_PSC tristate {
     prompt "Freescale MPC52xx PSC SPI controller" if [SPI && SPI_MASTER && PPC_MPC52xx && EXPERIMENTAL]
     depends on [PPC_MPC52xx && EXPERIMENTAL]
     inherited [SPI && SPI_MASTER && PPC_MPC52xx && EXPERIMENTAL]
    }
    config SPI_MPC8xxx tristate {
     prompt "Freescale MPC8xxx SPI controller" if [SPI && SPI_MASTER && FSL_SOC]
     depends on [FSL_SOC]
     inherited [SPI && SPI_MASTER && FSL_SOC]
    }
    config SPI_OMAP_UWIRE tristate {
     prompt "OMAP1 MicroWire" if [SPI && SPI_MASTER && ARCH_OMAP1]
     depends on [ARCH_OMAP1]
     select SPI_BITBANG if [SPI && SPI_MASTER && ARCH_OMAP1]
     inherited [SPI && SPI_MASTER && ARCH_OMAP1]
    }
    config SPI_OMAP24XX tristate {
     prompt "McSPI driver for OMAP24xx/OMAP34xx" if [SPI && SPI_MASTER && (ARCH_OMAP24XX || ARCH_OMAP34XX)]
     depends on [ARCH_OMAP24XX || ARCH_OMAP34XX]
     inherited [SPI && SPI_MASTER && (ARCH_OMAP24XX || ARCH_OMAP34XX)]
    }
    config SPI_ORION tristate {
     prompt "Orion SPI master (EXPERIMENTAL)" if [SPI && SPI_MASTER && PLAT_ORION && EXPERIMENTAL]
     depends on [PLAT_ORION && EXPERIMENTAL]
     inherited [SPI && SPI_MASTER && PLAT_ORION && EXPERIMENTAL]
    }
    config SPI_PL022 tristate {
     prompt "ARM AMBA PL022 SSP controller (EXPERIMENTAL)" if [SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL]
     depends on [ARM_AMBA && EXPERIMENTAL]
     default [y] if [SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL && MACH_U300]
     default [y] if [SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL && ARCH_REALVIEW]
     default [y] if [SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL && INTEGRATOR_IMPD1]
     default [y] if [SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL && ARCH_VERSATILE]
     inherited [SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL]
    }
    config SPI_PPC4xx tristate {
     prompt "PPC4xx SPI Controller" if [SPI && PPC32 && 4xx && SPI_MASTER]
     depends on [PPC32 && 4xx && SPI_MASTER]
     select SPI_BITBANG if [SPI && PPC32 && 4xx && SPI_MASTER]
     inherited [SPI && PPC32 && 4xx && SPI_MASTER]
    }
    config SPI_PXA2XX tristate {
     prompt "PXA2xx SSP SPI master" if [SPI && SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
     depends on [ARCH_PXA && EXPERIMENTAL]
     select PXA_SSP if [SPI && SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
     inherited [SPI && SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
    }
    config SPI_S3C24XX tristate {
     prompt "Samsung S3C24XX series SPI" if [SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
     depends on [ARCH_S3C2410 && EXPERIMENTAL]
     select SPI_BITBANG if [SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
     inherited [SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
    }
    config SPI_S3C24XX_GPIO tristate {
     prompt "Samsung S3C24XX series SPI by GPIO" if [SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
     depends on [ARCH_S3C2410 && EXPERIMENTAL]
     select SPI_BITBANG if [SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
     inherited [SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
    }
    config SPI_SH_SCI tristate {
     prompt "SuperH SCI SPI controller" if [SPI && SPI_MASTER && SUPERH]
     depends on [SUPERH]
     select SPI_BITBANG if [SPI && SPI_MASTER && SUPERH]
     inherited [SPI && SPI_MASTER && SUPERH]
    }
    config SPI_STMP3XXX tristate {
     prompt "Freescale STMP37xx/378x SPI/SSP controller" if [SPI && ARCH_STMP3XXX && SPI_MASTER]
     depends on [ARCH_STMP3XXX && SPI_MASTER]
     inherited [SPI && ARCH_STMP3XXX && SPI_MASTER]
    }
    config SPI_TXX9 tristate {
     prompt "Toshiba TXx9 SPI controller" if [SPI && SPI_MASTER && GENERIC_GPIO && CPU_TX49XX]
     depends on [GENERIC_GPIO && CPU_TX49XX]
     inherited [SPI && SPI_MASTER && GENERIC_GPIO && CPU_TX49XX]
    }
    config SPI_XILINX tristate {
     prompt "Xilinx SPI controller" if [SPI && SPI_MASTER && (XILINX_VIRTEX || MICROBLAZE) && EXPERIMENTAL]
     depends on [(XILINX_VIRTEX || MICROBLAZE) && EXPERIMENTAL]
     select SPI_BITBANG if [SPI && SPI_MASTER && (XILINX_VIRTEX || MICROBLAZE) && EXPERIMENTAL]
     inherited [SPI && SPI_MASTER && (XILINX_VIRTEX || MICROBLAZE) && EXPERIMENTAL]
    }
    config SPI_SPIDEV tristate {
     prompt "User mode SPI device driver support" if [SPI && SPI_MASTER && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [SPI && SPI_MASTER && EXPERIMENTAL]
    }
    config SPI_TLE62X0 tristate {
     prompt "Infineon TLE62X0 (for power switching)" if [SPI && SPI_MASTER && SYSFS]
     depends on [SYSFS]
     inherited [SPI && SPI_MASTER && SYSFS]
    }
   }
  }
 }
 menu "PPS support" {
  config PPS tristate {
   prompt "PPS support" if [EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   inherited [EXPERIMENTAL]
   config PPS_DEBUG boolean {
    prompt "PPS debugging messages" if [PPS]
    depends on [PPS]
    inherited [PPS]
   }
  }
 }
 config ARCH_WANT_OPTIONAL_GPIOLIB boolean {
 }
 config ARCH_REQUIRE_GPIOLIB boolean {
  select GPIOLIB if []
 }
 menuconfig GPIOLIB boolean {
  prompt "GPIO Support" if [ARCH_WANT_OPTIONAL_GPIOLIB || ARCH_REQUIRE_GPIOLIB]
  depends on [ARCH_WANT_OPTIONAL_GPIOLIB || ARCH_REQUIRE_GPIOLIB]
  select GENERIC_GPIO if [ARCH_WANT_OPTIONAL_GPIOLIB || ARCH_REQUIRE_GPIOLIB]
  inherited [ARCH_WANT_OPTIONAL_GPIOLIB || ARCH_REQUIRE_GPIOLIB]
  if [GPIOLIB] {
   config DEBUG_GPIO boolean {
    prompt "Debug GPIO calls" if [GPIOLIB && DEBUG_KERNEL]
    depends on [DEBUG_KERNEL]
    inherited [GPIOLIB && DEBUG_KERNEL]
   }
   config GPIO_SYSFS boolean {
    prompt "/sys/class/gpio/... (sysfs interface)" if [GPIOLIB && SYSFS && EXPERIMENTAL]
    depends on [SYSFS && EXPERIMENTAL]
    inherited [GPIOLIB && SYSFS && EXPERIMENTAL]
   }
   config GPIO_PL061 boolean {
    prompt "PrimeCell PL061 GPIO support" if [GPIOLIB && ARM_AMBA]
    depends on [ARM_AMBA]
    inherited [GPIOLIB && ARM_AMBA]
   }
   config GPIO_XILINX boolean {
    prompt "Xilinx GPIO support" if [GPIOLIB && (PPC_OF || MICROBLAZE)]
    depends on [PPC_OF || MICROBLAZE]
    inherited [GPIOLIB && (PPC_OF || MICROBLAZE)]
   }
   config GPIO_VR41XX tristate {
    prompt "NEC VR4100 series General-purpose I/O Uint support" if [GPIOLIB && CPU_VR41XX]
    depends on [CPU_VR41XX]
    inherited [GPIOLIB && CPU_VR41XX]
   }
   config GPIO_MAX732X tristate {
    prompt "MAX7319, MAX7320-7327 I2C Port Expanders" if [GPIOLIB && I2C]
    depends on [I2C]
    inherited [GPIOLIB && I2C]
   }
   config GPIO_PCA953X tristate {
    prompt "PCA953x, PCA955x, TCA64xx, and MAX7310 I/O ports" if [GPIOLIB && I2C]
    depends on [I2C]
    inherited [GPIOLIB && I2C]
   }
   config GPIO_PCF857X tristate {
    prompt "PCF857x, PCA{85,96}7x, and MAX732[89] I2C GPIO expanders" if [GPIOLIB && I2C]
    depends on [I2C]
    inherited [GPIOLIB && I2C]
   }
   config GPIO_TWL4030 tristate {
    prompt "TWL4030, TWL5030, and TPS659x0 GPIOs" if [GPIOLIB && TWL4030_CORE]
    depends on [TWL4030_CORE]
    inherited [GPIOLIB && TWL4030_CORE]
   }
   config GPIO_WM831X tristate {
    prompt "WM831x GPIOs" if [GPIOLIB && MFD_WM831X]
    depends on [MFD_WM831X]
    inherited [GPIOLIB && MFD_WM831X]
   }
   config GPIO_ADP5520 tristate {
    prompt "GPIO Support for ADP5520 PMIC" if [GPIOLIB && PMIC_ADP5520]
    depends on [PMIC_ADP5520]
    inherited [GPIOLIB && PMIC_ADP5520]
   }
   config GPIO_BT8XX tristate {
    prompt "BT8XX GPIO abuser" if [GPIOLIB && PCI && VIDEO_BT848="n"]
    depends on [PCI && VIDEO_BT848="n"]
    inherited [GPIOLIB && PCI && VIDEO_BT848="n"]
   }
   config GPIO_LANGWELL boolean {
    prompt "Intel Moorestown Platform Langwell GPIO support" if [GPIOLIB && PCI]
    depends on [PCI]
    inherited [GPIOLIB && PCI]
   }
   config GPIO_MAX7301 tristate {
    prompt "Maxim MAX7301 GPIO expander" if [GPIOLIB && SPI_MASTER]
    depends on [SPI_MASTER]
    inherited [GPIOLIB && SPI_MASTER]
   }
   config GPIO_MCP23S08 tristate {
    prompt "Microchip MCP23S08 I/O expander" if [GPIOLIB && SPI_MASTER]
    depends on [SPI_MASTER]
    inherited [GPIOLIB && SPI_MASTER]
   }
   config GPIO_MC33880 tristate {
    prompt "Freescale MC33880 high-side/low-side switch" if [GPIOLIB && SPI_MASTER]
    depends on [SPI_MASTER]
    inherited [GPIOLIB && SPI_MASTER]
   }
   config GPIO_UCB1400 boolean {
    prompt "Philips UCB1400 GPIO" if [GPIOLIB && UCB1400_CORE]
    depends on [UCB1400_CORE]
    inherited [GPIOLIB && UCB1400_CORE]
   }
  }
 }
 menuconfig W1 tristate {
  prompt "Dallas's 1-wire support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [W1] {
   config W1_CON boolean {
    depends on [CONNECTOR]
    prompt "Userspace communication over connector" if [W1 && CONNECTOR]
    default [y] if [W1 && CONNECTOR]
    inherited [W1 && CONNECTOR]
   }
   menu "1-wire Bus Masters" {
    depends on [W1]
    config W1_MASTER_MATROX tristate {
     prompt "Matrox G400 transport layer for 1-wire" if [W1 && PCI]
     depends on [PCI]
     inherited [W1 && PCI]
    }
    config W1_MASTER_DS2490 tristate {
     prompt "DS2490 USB <-> W1 transport layer for 1-wire" if [W1 && USB]
     depends on [USB]
     inherited [W1 && USB]
    }
    config W1_MASTER_DS2482 tristate {
     prompt "Maxim DS2482 I2C to 1-Wire bridge" if [W1 && I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     inherited [W1 && I2C && EXPERIMENTAL]
    }
    config W1_MASTER_MXC tristate {
     prompt "Freescale MXC 1-wire busmaster" if [W1 && ARCH_MXC]
     depends on [W1 && ARCH_MXC]
     inherited [W1 && ARCH_MXC]
    }
    config W1_MASTER_DS1WM tristate {
     prompt "Maxim DS1WM 1-wire busmaster" if [W1 && ARM && HAVE_CLK]
     depends on [W1 && ARM && HAVE_CLK]
     inherited [W1 && ARM && HAVE_CLK]
    }
    config W1_MASTER_GPIO tristate {
     prompt "GPIO 1-wire busmaster" if [W1 && GENERIC_GPIO]
     depends on [GENERIC_GPIO]
     inherited [W1 && GENERIC_GPIO]
    }
    config HDQ_MASTER_OMAP tristate {
     prompt "OMAP HDQ driver" if [W1 && (ARCH_OMAP2430 || ARCH_OMAP34XX)]
     depends on [ARCH_OMAP2430 || ARCH_OMAP34XX]
     inherited [W1 && (ARCH_OMAP2430 || ARCH_OMAP34XX)]
    }
   }
   menu "1-wire Slaves" {
    depends on [W1]
    config W1_SLAVE_THERM tristate {
     prompt "Thermal family implementation" if [W1]
     inherited [W1]
    }
    config W1_SLAVE_SMEM tristate {
     prompt "Simple 64bit memory family implementation" if [W1]
     inherited [W1]
    }
    config W1_SLAVE_DS2431 tristate {
     prompt "1kb EEPROM family support (DS2431)" if [W1]
     inherited [W1]
    }
    config W1_SLAVE_DS2433 tristate {
     prompt "4kb EEPROM family support (DS2433)" if [W1]
     inherited [W1]
     config W1_SLAVE_DS2433_CRC boolean {
      prompt "Protect DS2433 data with a CRC16" if [W1 && W1_SLAVE_DS2433]
      depends on [W1_SLAVE_DS2433]
      select CRC16 if [W1 && W1_SLAVE_DS2433]
      inherited [W1 && W1_SLAVE_DS2433]
     }
    }
    config W1_SLAVE_DS2760 tristate {
     prompt "Dallas 2760 battery monitor chip (HP iPAQ & others)" if [W1]
     depends on [W1]
     inherited [W1]
    }
    config W1_SLAVE_BQ27000 tristate {
     prompt "BQ27000 slave support" if [W1]
     depends on [W1]
     inherited [W1]
    }
   }
  }
 }
 menuconfig POWER_SUPPLY tristate {
  prompt "Power supply class support" if []
  if [POWER_SUPPLY] {
   config POWER_SUPPLY_DEBUG boolean {
    prompt "Power supply debug" if [POWER_SUPPLY]
    inherited [POWER_SUPPLY]
   }
   config PDA_POWER tristate {
    prompt "Generic PDA/phone power driver" if [POWER_SUPPLY && !S390]
    depends on [!S390]
    inherited [POWER_SUPPLY && !S390]
   }
   config APM_POWER tristate {
    prompt "APM emulation for class batteries" if [POWER_SUPPLY && APM_EMULATION]
    depends on [APM_EMULATION]
    inherited [POWER_SUPPLY && APM_EMULATION]
   }
   config WM831X_POWER tristate {
    prompt "WM831X PMU support" if [POWER_SUPPLY && MFD_WM831X]
    depends on [MFD_WM831X]
    inherited [POWER_SUPPLY && MFD_WM831X]
   }
   config WM8350_POWER tristate {
    prompt "WM8350 PMU support" if [POWER_SUPPLY && MFD_WM8350]
    depends on [MFD_WM8350]
    inherited [POWER_SUPPLY && MFD_WM8350]
   }
   config BATTERY_DS2760 tristate {
    prompt "DS2760 battery driver (HP iPAQ & others)" if [POWER_SUPPLY]
    select W1 if [POWER_SUPPLY]
    select W1_SLAVE_DS2760 if [POWER_SUPPLY]
    inherited [POWER_SUPPLY]
   }
   config BATTERY_DS2782 tristate {
    prompt "DS2782 standalone gas-gauge" if [POWER_SUPPLY && I2C]
    depends on [I2C]
    inherited [POWER_SUPPLY && I2C]
   }
   config BATTERY_PMU tristate {
    prompt "Apple PMU battery" if [POWER_SUPPLY && PPC32 && ADB_PMU]
    depends on [PPC32 && ADB_PMU]
    inherited [POWER_SUPPLY && PPC32 && ADB_PMU]
   }
   config BATTERY_OLPC tristate {
    prompt "One Laptop Per Child battery" if [POWER_SUPPLY && X86_32 && OLPC]
    depends on [X86_32 && OLPC]
    inherited [POWER_SUPPLY && X86_32 && OLPC]
   }
   config BATTERY_TOSA tristate {
    prompt "Sharp SL-6000 (tosa) battery" if [POWER_SUPPLY && MACH_TOSA && MFD_TC6393XB && TOUCHSCREEN_WM97XX]
    depends on [MACH_TOSA && MFD_TC6393XB && TOUCHSCREEN_WM97XX]
    inherited [POWER_SUPPLY && MACH_TOSA && MFD_TC6393XB && TOUCHSCREEN_WM97XX]
   }
   config BATTERY_WM97XX boolean {
    prompt "WM97xx generic battery driver" if [POWER_SUPPLY && TOUCHSCREEN_WM97XX="y"]
    depends on [TOUCHSCREEN_WM97XX="y"]
    inherited [POWER_SUPPLY && TOUCHSCREEN_WM97XX="y"]
   }
   config BATTERY_BQ27x00 tristate {
    prompt "BQ27200 battery driver" if [POWER_SUPPLY && I2C]
    depends on [I2C]
    inherited [POWER_SUPPLY && I2C]
   }
   config BATTERY_DA9030 tristate {
    prompt "DA9030 battery driver" if [POWER_SUPPLY && PMIC_DA903X]
    depends on [PMIC_DA903X]
    inherited [POWER_SUPPLY && PMIC_DA903X]
   }
   config BATTERY_MAX17040 tristate {
    prompt "Maxim MAX17040 Fuel Gauge" if [POWER_SUPPLY && I2C]
    depends on [I2C]
    inherited [POWER_SUPPLY && I2C]
   }
   config CHARGER_PCF50633 tristate {
    prompt "NXP PCF50633 MBC" if [POWER_SUPPLY && MFD_PCF50633]
    depends on [MFD_PCF50633]
    inherited [POWER_SUPPLY && MFD_PCF50633]
   }
  }
 }
 menuconfig HWMON tristate {
  prompt "Hardware Monitoring support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  default [y] if [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [HWMON] {
   config HWMON_VID tristate {
    default [n] if [HWMON]
    inherited [HWMON]
   }
   config HWMON_DEBUG_CHIP boolean {
    prompt "Hardware Monitoring Chip debugging messages" if [HWMON]
    default [n] if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_ABITUGURU tristate {
    prompt "Abit uGuru (rev 1 & 2)" if [HWMON && X86 && EXPERIMENTAL]
    depends on [X86 && EXPERIMENTAL]
    inherited [HWMON && X86 && EXPERIMENTAL]
   }
   config SENSORS_ABITUGURU3 tristate {
    prompt "Abit uGuru (rev 3)" if [HWMON && X86 && EXPERIMENTAL]
    depends on [X86 && EXPERIMENTAL]
    inherited [HWMON && X86 && EXPERIMENTAL]
   }
   config SENSORS_AD7414 tristate {
    prompt "Analog Devices AD7414" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_AD7418 tristate {
    prompt "Analog Devices AD7416, AD7417 and AD7418" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADCXX tristate {
    prompt "National Semiconductor ADCxxxSxxx" if [HWMON && SPI_MASTER && EXPERIMENTAL]
    depends on [SPI_MASTER && EXPERIMENTAL]
    inherited [HWMON && SPI_MASTER && EXPERIMENTAL]
   }
   config SENSORS_ADM1021 tristate {
    prompt "Analog Devices ADM1021 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_ADM1025 tristate {
    prompt "Analog Devices ADM1025 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_ADM1026 tristate {
    prompt "Analog Devices ADM1026 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADM1029 tristate {
    prompt "Analog Devices ADM1029" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADM1031 tristate {
    prompt "Analog Devices ADM1031 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADM9240 tristate {
    prompt "Analog Devices ADM9240 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_ADT7462 tristate {
    prompt "Analog Devices ADT7462" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADT7470 tristate {
    prompt "Analog Devices ADT7470" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADT7473 tristate {
    prompt "Analog Devices ADT7473" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADT7475 tristate {
    prompt "Analog Devices ADT7475" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_K8TEMP tristate {
    prompt "AMD Athlon64/FX or Opteron temperature sensor" if [HWMON && X86 && PCI && EXPERIMENTAL]
    depends on [X86 && PCI && EXPERIMENTAL]
    inherited [HWMON && X86 && PCI && EXPERIMENTAL]
   }
   config SENSORS_AMS tristate {
    prompt "Apple Motion Sensor driver" if [HWMON && PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
    depends on [PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
    select INPUT_POLLDEV if [HWMON && PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
    inherited [HWMON && PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
    config SENSORS_AMS_PMU boolean {
     prompt "PMU variant" if [HWMON && SENSORS_AMS && ADB_PMU]
     depends on [SENSORS_AMS && ADB_PMU]
     default [y] if [HWMON && SENSORS_AMS && ADB_PMU]
     inherited [HWMON && SENSORS_AMS && ADB_PMU]
    }
    config SENSORS_AMS_I2C boolean {
     prompt "I2C variant" if [HWMON && SENSORS_AMS && I2C]
     depends on [SENSORS_AMS && I2C]
     default [y] if [HWMON && SENSORS_AMS && I2C]
     inherited [HWMON && SENSORS_AMS && I2C]
    }
   }
   config SENSORS_ASB100 tristate {
    prompt "Asus ASB100 Bach" if [HWMON && X86 && I2C && EXPERIMENTAL]
    depends on [X86 && I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && X86 && I2C && EXPERIMENTAL]
    inherited [HWMON && X86 && I2C && EXPERIMENTAL]
   }
   config SENSORS_ATXP1 tristate {
    prompt "Attansic ATXP1 VID controller" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_DS1621 tristate {
    prompt "Dallas Semiconductor DS1621 and DS1625" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_I5K_AMB tristate {
    prompt "FB-DIMM AMB temperature sensor on Intel 5000 series chipsets" if [HWMON && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [HWMON && PCI && EXPERIMENTAL]
   }
   config SENSORS_F71805F tristate {
    prompt "Fintek F71805F/FG, F71806F/FG and F71872F/FG" if [HWMON && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [HWMON && EXPERIMENTAL]
   }
   config SENSORS_F71882FG tristate {
    prompt "Fintek F71858FG, F71862FG, F71882FG and F8000" if [HWMON && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [HWMON && EXPERIMENTAL]
   }
   config SENSORS_F75375S tristate {
    prompt "Fintek F75375S/SP and F75373" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_FSCHMD tristate {
    prompt "Fujitsu Siemens Computers sensor chips" if [HWMON && X86 && I2C]
    depends on [X86 && I2C]
    inherited [HWMON && X86 && I2C]
   }
   config SENSORS_G760A tristate {
    prompt "GMT G760A" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_GL518SM tristate {
    prompt "Genesys Logic GL518SM" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_GL520SM tristate {
    prompt "Genesys Logic GL520SM" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_CORETEMP tristate {
    prompt "Intel Core/Core2/Atom temperature sensor" if [HWMON && X86 && EXPERIMENTAL]
    depends on [X86 && EXPERIMENTAL]
    inherited [HWMON && X86 && EXPERIMENTAL]
   }
   config SENSORS_IBMAEM tristate {
    prompt "IBM Active Energy Manager temperature/power sensors and control" if [HWMON && IPMI_HANDLER]
    select IPMI_SI if [HWMON && IPMI_HANDLER]
    depends on [IPMI_HANDLER]
    inherited [HWMON && IPMI_HANDLER]
   }
   config SENSORS_IBMPEX tristate {
    prompt "IBM PowerExecutive temperature/power sensors" if [HWMON && IPMI_HANDLER]
    select IPMI_SI if [HWMON && IPMI_HANDLER]
    depends on [IPMI_HANDLER]
    inherited [HWMON && IPMI_HANDLER]
   }
   config SENSORS_IT87 tristate {
    prompt "ITE IT87xx and compatibles" if [HWMON]
    select HWMON_VID if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_LM63 tristate {
    prompt "National Semiconductor LM63" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM70 tristate {
    prompt "National Semiconductor LM70 / Texas Instruments TMP121" if [HWMON && SPI_MASTER && EXPERIMENTAL]
    depends on [SPI_MASTER && EXPERIMENTAL]
    inherited [HWMON && SPI_MASTER && EXPERIMENTAL]
   }
   config SENSORS_LM75 tristate {
    prompt "National Semiconductor LM75 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM77 tristate {
    prompt "National Semiconductor LM77" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM78 tristate {
    prompt "National Semiconductor LM78 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM80 tristate {
    prompt "National Semiconductor LM80" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_LM83 tristate {
    prompt "National Semiconductor LM83 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM85 tristate {
    prompt "National Semiconductor LM85 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_LM87 tristate {
    prompt "National Semiconductor LM87 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM90 tristate {
    prompt "National Semiconductor LM90 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM92 tristate {
    prompt "National Semiconductor LM92 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM93 tristate {
    prompt "National Semiconductor LM93 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LTC4215 tristate {
    prompt "Linear Technology LTC4215" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    default [n] if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_LTC4245 tristate {
    prompt "Linear Technology LTC4245" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    default [n] if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_LM95241 tristate {
    prompt "National Semiconductor LM95241 sensor chip" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_MAX1111 tristate {
    prompt "Maxim MAX1111 Multichannel, Serial 8-bit ADC chip" if [HWMON && SPI_MASTER]
    depends on [SPI_MASTER]
    inherited [HWMON && SPI_MASTER]
   }
   config SENSORS_MAX1619 tristate {
    prompt "Maxim MAX1619 sensor chip" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_MAX6650 tristate {
    prompt "Maxim MAX6650 sensor chip" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_PC87360 tristate {
    prompt "National Semiconductor PC87360 family" if [HWMON]
    select HWMON_VID if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_PC87427 tristate {
    prompt "National Semiconductor PC87427" if [HWMON && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [HWMON && EXPERIMENTAL]
   }
   config SENSORS_PCF8591 tristate {
    prompt "Philips PCF8591 ADC/DAC" if [HWMON && I2C]
    depends on [I2C]
    default [n] if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_SHT15 tristate {
    prompt "Sensiron humidity and temperature sensors. SHT15 and compat." if [HWMON && GENERIC_GPIO]
    depends on [GENERIC_GPIO]
    inherited [HWMON && GENERIC_GPIO]
   }
   config SENSORS_S3C tristate {
    prompt "S3C24XX/S3C64XX Inbuilt ADC" if [HWMON && ARCH_S3C2410]
    depends on [ARCH_S3C2410]
    inherited [HWMON && ARCH_S3C2410]
    config SENSORS_S3C_RAW boolean {
     prompt "Include raw channel attributes in sysfs" if [HWMON && SENSORS_S3C]
     depends on [SENSORS_S3C]
     inherited [HWMON && SENSORS_S3C]
    }
   }
   config SENSORS_SIS5595 tristate {
    prompt "Silicon Integrated Systems Corp. SiS5595" if [HWMON && PCI]
    depends on [PCI]
    inherited [HWMON && PCI]
   }
   config SENSORS_DME1737 tristate {
    prompt "SMSC DME1737, SCH311x and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_SMSC47M1 tristate {
    prompt "SMSC LPC47M10x and compatibles" if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_SMSC47M192 tristate {
    prompt "SMSC LPC47M192 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_SMSC47B397 tristate {
    prompt "SMSC LPC47B397-NC" if [HWMON && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [HWMON && EXPERIMENTAL]
   }
   config SENSORS_ADS7828 tristate {
    prompt "Texas Instruments ADS7828" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_THMC50 tristate {
    prompt "Texas Instruments THMC50 / Analog Devices ADM1022" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_TMP401 tristate {
    prompt "Texas Instruments TMP401 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_TMP421 tristate {
    prompt "Texas Instruments TMP421 and compatible" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_VIA686A tristate {
    prompt "VIA686A" if [HWMON && PCI]
    depends on [PCI]
    inherited [HWMON && PCI]
   }
   config SENSORS_VT1211 tristate {
    prompt "VIA VT1211" if [HWMON && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    select HWMON_VID if [HWMON && EXPERIMENTAL]
    inherited [HWMON && EXPERIMENTAL]
   }
   config SENSORS_VT8231 tristate {
    prompt "VIA VT8231" if [HWMON && PCI]
    depends on [PCI]
    select HWMON_VID if [HWMON && PCI]
    inherited [HWMON && PCI]
   }
   config SENSORS_W83781D tristate {
    prompt "Winbond W83781D, W83782D, W83783S, Asus AS99127F" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_W83791D tristate {
    prompt "Winbond W83791D" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_W83792D tristate {
    prompt "Winbond W83792D" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_W83793 tristate {
    prompt "Winbond W83793" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_W83L785TS tristate {
    prompt "Winbond W83L785TS-S" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_W83L786NG tristate {
    prompt "Winbond W83L786NG, W83L786NR" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_W83627HF tristate {
    prompt "Winbond W83627HF, W83627THF, W83637HF, W83687THF, W83697HF" if [HWMON]
    select HWMON_VID if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_W83627EHF tristate {
    prompt "Winbond W83627EHF/EHG/DHG, W83667HG" if [HWMON]
    select HWMON_VID if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_WM831X tristate {
    prompt "WM831x PMICs" if [HWMON && MFD_WM831X]
    depends on [MFD_WM831X]
    inherited [HWMON && MFD_WM831X]
   }
   config SENSORS_WM8350 tristate {
    prompt "Wolfson Microelectronics WM835x" if [HWMON && MFD_WM8350]
    depends on [MFD_WM8350]
    inherited [HWMON && MFD_WM8350]
   }
   config SENSORS_ULTRA45 tristate {
    prompt "Sun Ultra45 PIC16F747" if [HWMON && SPARC64]
    depends on [SPARC64]
    inherited [HWMON && SPARC64]
   }
   config SENSORS_HDAPS tristate {
    prompt "IBM Hard Drive Active Protection System (hdaps)" if [HWMON && INPUT && X86]
    depends on [INPUT && X86]
    select INPUT_POLLDEV if [HWMON && INPUT && X86]
    default [n] if [HWMON && INPUT && X86]
    inherited [HWMON && INPUT && X86]
   }
   config SENSORS_LIS3_SPI tristate {
    prompt "STMicroeletronics LIS3LV02Dx three-axis digital accelerometer (SPI)" if [HWMON && !ACPI && SPI_MASTER && INPUT]
    depends on [!ACPI && SPI_MASTER && INPUT]
    select INPUT_POLLDEV if [HWMON && !ACPI && SPI_MASTER && INPUT]
    default [n] if [HWMON && !ACPI && SPI_MASTER && INPUT]
    inherited [HWMON && !ACPI && SPI_MASTER && INPUT]
   }
   config SENSORS_APPLESMC tristate {
    prompt "Apple SMC (Motion sensor, light sensor, keyboard backlight)" if [HWMON && INPUT && X86]
    depends on [INPUT && X86]
    select NEW_LEDS if [HWMON && INPUT && X86]
    select LEDS_CLASS if [HWMON && INPUT && X86]
    select INPUT_POLLDEV if [HWMON && INPUT && X86]
    default [n] if [HWMON && INPUT && X86]
    inherited [HWMON && INPUT && X86]
   }
   if [HWMON && ACPI] {
    config SENSORS_ATK0110 tristate {
     prompt "ASUS ATK0110" if [HWMON && ACPI && X86 && EXPERIMENTAL]
     depends on [X86 && EXPERIMENTAL]
     inherited [HWMON && ACPI && X86 && EXPERIMENTAL]
    }
    config SENSORS_LIS3LV02D tristate {
     prompt "STMicroeletronics LIS3LV02Dx three-axis digital accelerometer" if [HWMON && ACPI && INPUT]
     depends on [INPUT]
     select INPUT_POLLDEV if [HWMON && ACPI && INPUT]
     select NEW_LEDS if [HWMON && ACPI && INPUT]
     select LEDS_CLASS if [HWMON && ACPI && INPUT]
     default [n] if [HWMON && ACPI && INPUT]
     inherited [HWMON && ACPI && INPUT]
    }
   }
  }
 }
 menuconfig THERMAL tristate {
  prompt "Generic Thermal sysfs driver" if []
  config THERMAL_HWMON boolean {
   prompt "Hardware monitoring support" if [THERMAL && (HWMON="y" || HWMON="THERMAL")]
   depends on [THERMAL]
   depends on [HWMON="y" || HWMON="THERMAL"]
   inherited [THERMAL && (HWMON="y" || HWMON="THERMAL")]
  }
 }
 menuconfig WATCHDOG boolean {
  prompt "Watchdog Timer Support" if []
  if [WATCHDOG] {
   config WATCHDOG_NOWAYOUT boolean {
    prompt "Disable watchdog shutdown on close" if [WATCHDOG]
    inherited [WATCHDOG]
   }
   config SOFT_WATCHDOG tristate {
    prompt "Software watchdog" if [WATCHDOG]
    inherited [WATCHDOG]
   }
   config WM831X_WATCHDOG tristate {
    prompt "WM831x watchdog" if [WATCHDOG && MFD_WM831X]
    depends on [MFD_WM831X]
    inherited [WATCHDOG && MFD_WM831X]
   }
   config WM8350_WATCHDOG tristate {
    prompt "WM8350 watchdog" if [WATCHDOG && MFD_WM8350]
    depends on [MFD_WM8350]
    inherited [WATCHDOG && MFD_WM8350]
   }
   config AT91RM9200_WATCHDOG tristate {
    prompt "AT91RM9200 watchdog" if [WATCHDOG && ARCH_AT91RM9200]
    depends on [ARCH_AT91RM9200]
    inherited [WATCHDOG && ARCH_AT91RM9200]
   }
   config AT91SAM9X_WATCHDOG tristate {
    prompt "AT91SAM9X / AT91CAP9 watchdog" if [WATCHDOG && ARCH_AT91 && !ARCH_AT91RM9200]
    depends on [ARCH_AT91 && !ARCH_AT91RM9200]
    inherited [WATCHDOG && ARCH_AT91 && !ARCH_AT91RM9200]
   }
   config 21285_WATCHDOG tristate {
    prompt "DC21285 watchdog" if [WATCHDOG && FOOTBRIDGE]
    depends on [FOOTBRIDGE]
    inherited [WATCHDOG && FOOTBRIDGE]
   }
   config 977_WATCHDOG tristate {
    prompt "NetWinder WB83C977 watchdog" if [WATCHDOG && FOOTBRIDGE && ARCH_NETWINDER]
    depends on [FOOTBRIDGE && ARCH_NETWINDER]
    inherited [WATCHDOG && FOOTBRIDGE && ARCH_NETWINDER]
   }
   config IXP2000_WATCHDOG tristate {
    prompt "IXP2000 Watchdog" if [WATCHDOG && ARCH_IXP2000]
    depends on [ARCH_IXP2000]
    inherited [WATCHDOG && ARCH_IXP2000]
   }
   config IXP4XX_WATCHDOG tristate {
    prompt "IXP4xx Watchdog" if [WATCHDOG && ARCH_IXP4XX]
    depends on [ARCH_IXP4XX]
    inherited [WATCHDOG && ARCH_IXP4XX]
   }
   config KS8695_WATCHDOG tristate {
    prompt "KS8695 watchdog" if [WATCHDOG && ARCH_KS8695]
    depends on [ARCH_KS8695]
    inherited [WATCHDOG && ARCH_KS8695]
   }
   config S3C2410_WATCHDOG tristate {
    prompt "S3C2410 Watchdog" if [WATCHDOG && ARCH_S3C2410]
    depends on [ARCH_S3C2410]
    inherited [WATCHDOG && ARCH_S3C2410]
   }
   config SA1100_WATCHDOG tristate {
    prompt "SA1100/PXA2xx watchdog" if [WATCHDOG && (ARCH_SA1100 || ARCH_PXA)]
    depends on [ARCH_SA1100 || ARCH_PXA]
    inherited [WATCHDOG && (ARCH_SA1100 || ARCH_PXA)]
   }
   config MPCORE_WATCHDOG tristate {
    prompt "MPcore watchdog" if [WATCHDOG && ARM_MPCORE_PLATFORM && LOCAL_TIMERS]
    depends on [ARM_MPCORE_PLATFORM && LOCAL_TIMERS]
    inherited [WATCHDOG && ARM_MPCORE_PLATFORM && LOCAL_TIMERS]
   }
   config EP93XX_WATCHDOG tristate {
    prompt "EP93xx Watchdog" if [WATCHDOG && ARCH_EP93XX]
    depends on [ARCH_EP93XX]
    inherited [WATCHDOG && ARCH_EP93XX]
   }
   config OMAP_WATCHDOG tristate {
    prompt "OMAP Watchdog" if [WATCHDOG && (ARCH_OMAP16XX || ARCH_OMAP24XX || ARCH_OMAP34XX)]
    depends on [ARCH_OMAP16XX || ARCH_OMAP24XX || ARCH_OMAP34XX]
    inherited [WATCHDOG && (ARCH_OMAP16XX || ARCH_OMAP24XX || ARCH_OMAP34XX)]
   }
   config PNX4008_WATCHDOG tristate {
    prompt "PNX4008 Watchdog" if [WATCHDOG && ARCH_PNX4008]
    depends on [ARCH_PNX4008]
    inherited [WATCHDOG && ARCH_PNX4008]
   }
   config IOP_WATCHDOG tristate {
    prompt "IOP Watchdog" if [WATCHDOG && PLAT_IOP]
    depends on [PLAT_IOP]
    select WATCHDOG_NOWAYOUT if [WATCHDOG && PLAT_IOP && (ARCH_IOP32X || ARCH_IOP33X)]
    inherited [WATCHDOG && PLAT_IOP]
   }
   config DAVINCI_WATCHDOG tristate {
    prompt "DaVinci watchdog" if [WATCHDOG && ARCH_DAVINCI]
    depends on [ARCH_DAVINCI]
    inherited [WATCHDOG && ARCH_DAVINCI]
   }
   config ORION_WATCHDOG tristate {
    prompt "Orion watchdog" if [WATCHDOG && (ARCH_ORION5X || ARCH_KIRKWOOD)]
    depends on [ARCH_ORION5X || ARCH_KIRKWOOD]
    inherited [WATCHDOG && (ARCH_ORION5X || ARCH_KIRKWOOD)]
   }
   config COH901327_WATCHDOG boolean {
    prompt "ST-Ericsson COH 901 327 watchdog" if [WATCHDOG && ARCH_U300]
    depends on [ARCH_U300]
    default [y] if [WATCHDOG && ARCH_U300 && MACH_U300]
    inherited [WATCHDOG && ARCH_U300]
   }
   config TWL4030_WATCHDOG tristate {
    prompt "TWL4030 Watchdog" if [WATCHDOG && TWL4030_CORE]
    depends on [TWL4030_CORE]
    inherited [WATCHDOG && TWL4030_CORE]
   }
   config STMP3XXX_WATCHDOG tristate {
    prompt "Freescale STMP3XXX watchdog" if [WATCHDOG && ARCH_STMP3XXX]
    depends on [ARCH_STMP3XXX]
    inherited [WATCHDOG && ARCH_STMP3XXX]
   }
   config NUC900_WATCHDOG tristate {
    prompt "Nuvoton NUC900 watchdog" if [WATCHDOG && ARCH_W90X900]
    depends on [ARCH_W90X900]
    inherited [WATCHDOG && ARCH_W90X900]
   }
   config ADX_WATCHDOG tristate {
    prompt "Avionic Design Xanthos watchdog" if [WATCHDOG && ARCH_PXA_ADX]
    depends on [ARCH_PXA_ADX]
    inherited [WATCHDOG && ARCH_PXA_ADX]
   }
   config AT32AP700X_WDT tristate {
    prompt "AT32AP700x watchdog" if [WATCHDOG && CPU_AT32AP700X]
    depends on [CPU_AT32AP700X]
    inherited [WATCHDOG && CPU_AT32AP700X]
   }
   config BFIN_WDT tristate {
    prompt "Blackfin On-Chip Watchdog Timer" if [WATCHDOG && BLACKFIN]
    depends on [BLACKFIN]
    inherited [WATCHDOG && BLACKFIN]
   }
   config ACQUIRE_WDT tristate {
    prompt "Acquire SBC Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config ADVANTECH_WDT tristate {
    prompt "Advantech SBC Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config ALIM1535_WDT tristate {
    prompt "ALi M1535 PMU Watchdog Timer" if [WATCHDOG && X86 && PCI]
    depends on [X86 && PCI]
    inherited [WATCHDOG && X86 && PCI]
   }
   config ALIM7101_WDT tristate {
    prompt "ALi M7101 PMU Computer Watchdog" if [WATCHDOG && PCI]
    depends on [PCI]
    inherited [WATCHDOG && PCI]
   }
   config GEODE_WDT tristate {
    prompt "AMD Geode CS5535/CS5536 Watchdog" if [WATCHDOG && MGEODE_LX]
    depends on [MGEODE_LX]
    inherited [WATCHDOG && MGEODE_LX]
   }
   config SC520_WDT tristate {
    prompt "AMD Elan SC520 processor Watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SBC_FITPC2_WATCHDOG tristate {
    prompt "Compulab SBC-FITPC2 watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config EUROTECH_WDT tristate {
    prompt "Eurotech CPU-1220/1410 Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config IB700_WDT tristate {
    prompt "IB700 SBC Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config IBMASR tristate {
    prompt "IBM Automatic Server Restart" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config WAFER_WDT tristate {
    prompt "ICP Single Board Computer Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config I6300ESB_WDT tristate {
    prompt "Intel 6300ESB Timer/Watchdog" if [WATCHDOG && X86 && PCI]
    depends on [X86 && PCI]
    inherited [WATCHDOG && X86 && PCI]
   }
   config ITCO_WDT tristate {
    prompt "Intel TCO Timer/Watchdog" if [WATCHDOG && (X86 || IA64) && PCI]
    depends on [(X86 || IA64) && PCI]
    inherited [WATCHDOG && (X86 || IA64) && PCI]
    config ITCO_VENDOR_SUPPORT boolean {
     prompt "Intel TCO Timer/Watchdog Specific Vendor Support" if [WATCHDOG && ITCO_WDT]
     depends on [ITCO_WDT]
     inherited [WATCHDOG && ITCO_WDT]
    }
   }
   config IT8712F_WDT tristate {
    prompt "IT8712F (Smart Guardian) Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config IT87_WDT tristate {
    prompt "IT87 Watchdog Timer" if [WATCHDOG && X86 && EXPERIMENTAL]
    depends on [X86 && EXPERIMENTAL]
    inherited [WATCHDOG && X86 && EXPERIMENTAL]
   }
   config HP_WATCHDOG tristate {
    prompt "HP Proliant iLO 2 Hardware Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SC1200_WDT tristate {
    prompt "National Semiconductor PC87307/PC97307 (ala SC1200) Watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SCx200_WDT tristate {
    prompt "National Semiconductor SCx200 Watchdog" if [WATCHDOG && SCx200 && PCI]
    depends on [SCx200 && PCI]
    inherited [WATCHDOG && SCx200 && PCI]
   }
   config PC87413_WDT tristate {
    prompt "NS PC87413 watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config RDC321X_WDT tristate {
    prompt "RDC R-321x SoC watchdog" if [WATCHDOG && X86_RDC321X]
    depends on [X86_RDC321X]
    inherited [WATCHDOG && X86_RDC321X]
   }
   config 60XX_WDT tristate {
    prompt "SBC-60XX Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SBC8360_WDT tristate {
    prompt "SBC8360 Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SBC7240_WDT tristate {
    prompt "SBC Nano 7240 Watchdog Timer" if [WATCHDOG && X86_32]
    depends on [X86_32]
    inherited [WATCHDOG && X86_32]
   }
   config CPU5_WDT tristate {
    prompt "SMA CPU5 Watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SMSC_SCH311X_WDT tristate {
    prompt "SMSC SCH311X Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SMSC37B787_WDT tristate {
    prompt "Winbond SMsC37B787 Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config W83627HF_WDT tristate {
    prompt "W83627HF Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config W83697HF_WDT tristate {
    prompt "W83697HF/W83697HG Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config W83697UG_WDT tristate {
    prompt "W83697UG/W83697UF Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config W83877F_WDT tristate {
    prompt "W83877F (EMACS) Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config W83977F_WDT tristate {
    prompt "W83977F (PCM-5335) Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config MACHZ_WDT tristate {
    prompt "ZF MachZ Watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SBC_EPX_C3_WATCHDOG tristate {
    prompt "Winsystems SBC EPX-C3 watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config BCM47XX_WDT tristate {
    prompt "Broadcom BCM47xx Watchdog Timer" if [WATCHDOG && BCM47XX]
    depends on [BCM47XX]
    inherited [WATCHDOG && BCM47XX]
   }
   config RC32434_WDT tristate {
    prompt "IDT RC32434 SoC Watchdog Timer" if [WATCHDOG && MIKROTIK_RB532]
    depends on [MIKROTIK_RB532]
    inherited [WATCHDOG && MIKROTIK_RB532]
   }
   config INDYDOG tristate {
    prompt "Indy/I2 Hardware Watchdog" if [WATCHDOG && SGI_HAS_INDYDOG]
    depends on [SGI_HAS_INDYDOG]
    inherited [WATCHDOG && SGI_HAS_INDYDOG]
   }
   config WDT_MTX1 tristate {
    prompt "MTX-1 Hardware Watchdog" if [WATCHDOG && MIPS_MTX1]
    depends on [MIPS_MTX1]
    inherited [WATCHDOG && MIPS_MTX1]
   }
   config PNX833X_WDT tristate {
    prompt "PNX833x Hardware Watchdog" if [WATCHDOG && SOC_PNX8335]
    depends on [SOC_PNX8335]
    inherited [WATCHDOG && SOC_PNX8335]
   }
   config WDT_RM9K_GPI tristate {
    prompt "RM9000/GPI hardware watchdog" if [WATCHDOG && CPU_RM9000]
    depends on [CPU_RM9000]
    inherited [WATCHDOG && CPU_RM9000]
   }
   config SIBYTE_WDOG tristate {
    prompt "Sibyte SoC hardware watchdog" if [WATCHDOG && CPU_SB1]
    depends on [CPU_SB1]
    inherited [WATCHDOG && CPU_SB1]
   }
   config AR7_WDT tristate {
    prompt "TI AR7 Watchdog Timer" if [WATCHDOG && AR7]
    depends on [AR7]
    inherited [WATCHDOG && AR7]
   }
   config TXX9_WDT tristate {
    prompt "Toshiba TXx9 Watchdog Timer" if [WATCHDOG && (CPU_TX39XX || CPU_TX49XX)]
    depends on [CPU_TX39XX || CPU_TX49XX]
    inherited [WATCHDOG && (CPU_TX39XX || CPU_TX49XX)]
   }
   config GEF_WDT tristate {
    prompt "GE Fanuc Watchdog Timer" if [WATCHDOG && (GEF_SBC610 || GEF_SBC310 || GEF_PPC9A)]
    depends on [GEF_SBC610 || GEF_SBC310 || GEF_PPC9A]
    inherited [WATCHDOG && (GEF_SBC610 || GEF_SBC310 || GEF_PPC9A)]
   }
   config MPC5200_WDT tristate {
    prompt "MPC5200 Watchdog Timer" if [WATCHDOG && PPC_MPC52xx]
    depends on [PPC_MPC52xx]
    inherited [WATCHDOG && PPC_MPC52xx]
   }
   config 8xxx_WDT tristate {
    prompt "MPC8xxx Platform Watchdog Timer" if [WATCHDOG && (PPC_8xx || PPC_83xx || PPC_86xx)]
    depends on [PPC_8xx || PPC_83xx || PPC_86xx]
    inherited [WATCHDOG && (PPC_8xx || PPC_83xx || PPC_86xx)]
   }
   config MV64X60_WDT tristate {
    prompt "MV64X60 (Marvell Discovery) Watchdog Timer" if [WATCHDOG && MV64X60]
    depends on [MV64X60]
    inherited [WATCHDOG && MV64X60]
   }
   config PIKA_WDT tristate {
    prompt "PIKA FPGA Watchdog" if [WATCHDOG && WARP]
    depends on [WARP]
    default [y] if [WATCHDOG && WARP]
    inherited [WATCHDOG && WARP]
   }
   config BOOKE_WDT boolean {
    prompt "PowerPC Book-E Watchdog Timer" if [WATCHDOG && (BOOKE || 4xx)]
    depends on [BOOKE || 4xx]
    inherited [WATCHDOG && (BOOKE || 4xx)]
   }
   config WATCHDOG_RTAS tristate {
    prompt "RTAS watchdog" if [WATCHDOG && PPC_RTAS]
    depends on [PPC_RTAS]
    inherited [WATCHDOG && PPC_RTAS]
   }
   config ZVM_WATCHDOG tristate {
    prompt "z/VM Watchdog Timer" if [WATCHDOG && S390]
    depends on [S390]
    inherited [WATCHDOG && S390]
   }
   config SH_WDT tristate {
    prompt "SuperH Watchdog" if [WATCHDOG && SUPERH && (CPU_SH3 || CPU_SH4)]
    depends on [SUPERH && (CPU_SH3 || CPU_SH4)]
    inherited [WATCHDOG && SUPERH && (CPU_SH3 || CPU_SH4)]
    config SH_WDT_MMAP boolean {
     prompt "Allow mmap of SH WDT" if [WATCHDOG && SH_WDT]
     default [n] if [WATCHDOG && SH_WDT]
     depends on [SH_WDT]
     inherited [WATCHDOG && SH_WDT]
    }
   }
   config WATCHDOG_CP1XXX tristate {
    prompt "CP1XXX Hardware Watchdog support" if [WATCHDOG && SPARC64 && PCI]
    depends on [SPARC64 && PCI]
    inherited [WATCHDOG && SPARC64 && PCI]
   }
   config WATCHDOG_RIO tristate {
    prompt "RIO Hardware Watchdog support" if [WATCHDOG && SPARC64 && PCI]
    depends on [SPARC64 && PCI]
    inherited [WATCHDOG && SPARC64 && PCI]
   }
   config PCWATCHDOG tristate {
    prompt "Berkshire Products ISA-PC Watchdog" if [WATCHDOG && ISA]
    depends on [ISA]
    inherited [WATCHDOG && ISA]
   }
   config MIXCOMWD tristate {
    prompt "Mixcom Watchdog" if [WATCHDOG && ISA]
    depends on [ISA]
    inherited [WATCHDOG && ISA]
   }
   config WDT tristate {
    prompt "WDT Watchdog timer" if [WATCHDOG && ISA]
    depends on [ISA]
    inherited [WATCHDOG && ISA]
   }
   config PCIPCWATCHDOG tristate {
    prompt "Berkshire Products PCI-PC Watchdog" if [WATCHDOG && PCI]
    depends on [PCI]
    inherited [WATCHDOG && PCI]
   }
   config WDTPCI tristate {
    prompt "PCI-WDT500/501 Watchdog timer" if [WATCHDOG && PCI]
    depends on [PCI]
    inherited [WATCHDOG && PCI]
   }
   config USBPCWATCHDOG tristate {
    prompt "Berkshire Products USB-PC Watchdog" if [WATCHDOG && USB]
    depends on [USB]
    inherited [WATCHDOG && USB]
   }
  }
 }
 config SSB_POSSIBLE boolean {
  depends on [HAS_IOMEM && HAS_DMA]
  default [y] if [HAS_IOMEM && HAS_DMA]
  inherited [HAS_IOMEM && HAS_DMA]
 }
 menu "Sonics Silicon Backplane" {
  depends on [SSB_POSSIBLE]
  config SSB tristate {
   prompt "Sonics Silicon Backplane support" if [SSB_POSSIBLE]
   depends on [SSB_POSSIBLE]
   inherited [SSB_POSSIBLE]
  }
  config SSB_SPROM boolean {
   inherited [SSB_POSSIBLE]
  }
  config SSB_BLOCKIO boolean {
   depends on [SSB]
   inherited [SSB_POSSIBLE && SSB]
  }
  config SSB_PCIHOST_POSSIBLE boolean {
   depends on [SSB && (PCI="y" || PCI="SSB")]
   default [y] if [SSB_POSSIBLE && SSB && (PCI || PCI="SSB")]
   inherited [SSB_POSSIBLE && SSB && (PCI || PCI="SSB")]
  }
  config SSB_PCIHOST boolean {
   prompt "Support for SSB on PCI-bus host" if [SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE]
   depends on [SSB_PCIHOST_POSSIBLE]
   select SSB_SPROM if [SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE]
   default [y] if [SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE]
   inherited [SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE]
   config SSB_B43_PCI_BRIDGE boolean {
    depends on [SSB_PCIHOST]
    default [n] if [SSB_POSSIBLE && SSB_PCIHOST]
    inherited [SSB_POSSIBLE && SSB_PCIHOST]
   }
  }
  config SSB_PCMCIAHOST_POSSIBLE boolean {
   depends on [SSB && (PCMCIA="y" || PCMCIA="SSB")]
   default [y] if [SSB_POSSIBLE && SSB && (PCMCIA="y" || PCMCIA="SSB")]
   inherited [SSB_POSSIBLE && SSB && (PCMCIA="y" || PCMCIA="SSB")]
  }
  config SSB_PCMCIAHOST boolean {
   prompt "Support for SSB on PCMCIA-bus host" if [SSB_POSSIBLE && SSB_PCMCIAHOST_POSSIBLE]
   depends on [SSB_PCMCIAHOST_POSSIBLE]
   select SSB_SPROM if [SSB_POSSIBLE && SSB_PCMCIAHOST_POSSIBLE]
   inherited [SSB_POSSIBLE && SSB_PCMCIAHOST_POSSIBLE]
  }
  config SSB_SDIOHOST_POSSIBLE boolean {
   depends on [SSB && (MMC="y" || MMC="SSB")]
   default [y] if [SSB_POSSIBLE && SSB && (MMC="y" || MMC="SSB")]
   inherited [SSB_POSSIBLE && SSB && (MMC="y" || MMC="SSB")]
  }
  config SSB_SDIOHOST boolean {
   prompt "Support for SSB on SDIO-bus host" if [SSB_POSSIBLE && SSB_SDIOHOST_POSSIBLE]
   depends on [SSB_SDIOHOST_POSSIBLE]
   inherited [SSB_POSSIBLE && SSB_SDIOHOST_POSSIBLE]
  }
  config SSB_SILENT boolean {
   prompt "No SSB kernel messages" if [SSB_POSSIBLE && SSB && EMBEDDED]
   depends on [SSB && EMBEDDED]
   inherited [SSB_POSSIBLE && SSB && EMBEDDED]
  }
  config SSB_DEBUG boolean {
   prompt "SSB debugging" if [SSB_POSSIBLE && SSB && !SSB_SILENT]
   depends on [SSB && !SSB_SILENT]
   inherited [SSB_POSSIBLE && SSB && !SSB_SILENT]
  }
  config SSB_SERIAL boolean {
   depends on [SSB]
   inherited [SSB_POSSIBLE && SSB]
  }
  config SSB_DRIVER_PCICORE_POSSIBLE boolean {
   depends on [SSB_PCIHOST]
   default [y] if [SSB_POSSIBLE && SSB_PCIHOST]
   inherited [SSB_POSSIBLE && SSB_PCIHOST]
  }
  config SSB_DRIVER_PCICORE boolean {
   prompt "SSB PCI core driver" if [SSB_POSSIBLE && SSB_DRIVER_PCICORE_POSSIBLE]
   depends on [SSB_DRIVER_PCICORE_POSSIBLE]
   inherited [SSB_POSSIBLE && SSB_DRIVER_PCICORE_POSSIBLE]
   config SSB_PCICORE_HOSTMODE boolean {
    prompt "Hostmode support for SSB PCI core" if [SSB_POSSIBLE && SSB_DRIVER_PCICORE && SSB_DRIVER_MIPS]
    depends on [SSB_DRIVER_PCICORE && SSB_DRIVER_MIPS]
    inherited [SSB_POSSIBLE && SSB_DRIVER_PCICORE && SSB_DRIVER_MIPS]
   }
  }
  config SSB_DRIVER_MIPS boolean {
   prompt "SSB Broadcom MIPS core driver" if [SSB_POSSIBLE && SSB && MIPS]
   depends on [SSB && MIPS]
   select SSB_SERIAL if [SSB_POSSIBLE && SSB && MIPS]
   inherited [SSB_POSSIBLE && SSB && MIPS]
   config SSB_EMBEDDED boolean {
    depends on [SSB_DRIVER_MIPS]
    default [y] if [SSB_POSSIBLE && SSB_DRIVER_MIPS]
    inherited [SSB_POSSIBLE && SSB_DRIVER_MIPS]
   }
   config SSB_DRIVER_EXTIF boolean {
    prompt "SSB Broadcom EXTIF core driver" if [SSB_POSSIBLE && SSB_DRIVER_MIPS]
    depends on [SSB_DRIVER_MIPS]
    inherited [SSB_POSSIBLE && SSB_DRIVER_MIPS]
   }
  }
  config SSB_DRIVER_GIGE boolean {
   prompt "SSB Broadcom Gigabit Ethernet driver" if [SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE && SSB_EMBEDDED && MIPS]
   depends on [SSB_PCIHOST_POSSIBLE && SSB_EMBEDDED && MIPS]
   inherited [SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE && SSB_EMBEDDED && MIPS]
  }
 }
 menu "Multifunction device drivers" {
  depends on [HAS_IOMEM]
  config MFD_CORE tristate {
   default [n] if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  config MFD_SM501 tristate {
   prompt "Support for Silicon Motion SM501" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config MFD_SM501_GPIO boolean {
    prompt "Export GPIO via GPIO layer" if [HAS_IOMEM && MFD_SM501 && GPIOLIB]
    depends on [MFD_SM501 && GPIOLIB]
    inherited [HAS_IOMEM && MFD_SM501 && GPIOLIB]
   }
  }
  config MFD_ASIC3 boolean {
   prompt "Support for Compaq ASIC3" if [HAS_IOMEM && GENERIC_HARDIRQS && GPIOLIB && ARM]
   depends on [GENERIC_HARDIRQS && GPIOLIB && ARM]
   select MFD_CORE if [HAS_IOMEM && GENERIC_HARDIRQS && GPIOLIB && ARM]
   inherited [HAS_IOMEM && GENERIC_HARDIRQS && GPIOLIB && ARM]
  }
  config MFD_DM355EVM_MSP boolean {
   prompt "DaVinci DM355 EVM microcontroller" if [HAS_IOMEM && I2C && MACH_DAVINCI_DM355_EVM]
   depends on [I2C && MACH_DAVINCI_DM355_EVM]
   inherited [HAS_IOMEM && I2C && MACH_DAVINCI_DM355_EVM]
  }
  config HTC_EGPIO boolean {
   prompt "HTC EGPIO support" if [HAS_IOMEM && GENERIC_HARDIRQS && GPIOLIB && ARM]
   depends on [GENERIC_HARDIRQS && GPIOLIB && ARM]
   inherited [HAS_IOMEM && GENERIC_HARDIRQS && GPIOLIB && ARM]
  }
  config HTC_PASIC3 tristate {
   prompt "HTC PASIC3 LED/DS1WM chip support" if [HAS_IOMEM]
   select MFD_CORE if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  config UCB1400_CORE tristate {
   prompt "Philips UCB1400 Core driver" if [HAS_IOMEM && AC97_BUS && GPIOLIB]
   depends on [AC97_BUS]
   depends on [GPIOLIB]
   inherited [HAS_IOMEM && AC97_BUS && GPIOLIB]
  }
  config TPS65010 tristate {
   prompt "TPS6501x Power Management chips" if [HAS_IOMEM && I2C && GPIOLIB]
   depends on [I2C && GPIOLIB]
   default [y] if [HAS_IOMEM && I2C && GPIOLIB && (MACH_OMAP_H2 || MACH_OMAP_H3 || MACH_OMAP_OSK)]
   inherited [HAS_IOMEM && I2C && GPIOLIB]
  }
  config MENELAUS boolean {
   prompt "Texas Instruments TWL92330/Menelaus PM chip" if [HAS_IOMEM && I2C="y" && ARCH_OMAP24XX]
   depends on [I2C="y" && ARCH_OMAP24XX]
   inherited [HAS_IOMEM && I2C="y" && ARCH_OMAP24XX]
  }
  config TWL4030_CORE boolean {
   prompt "Texas Instruments TWL4030/TPS659x0 Support" if [HAS_IOMEM && I2C="y" && GENERIC_HARDIRQS]
   depends on [I2C="y" && GENERIC_HARDIRQS]
   inherited [HAS_IOMEM && I2C="y" && GENERIC_HARDIRQS]
   config TWL4030_POWER boolean {
    prompt "Support power resources on TWL4030 family chips" if [HAS_IOMEM && TWL4030_CORE && ARM]
    depends on [TWL4030_CORE && ARM]
    inherited [HAS_IOMEM && TWL4030_CORE && ARM]
   }
  }
  config MFD_TMIO boolean {
   default [n] if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  config MFD_T7L66XB boolean {
   prompt "Support Toshiba T7L66XB" if [HAS_IOMEM && ARM && HAVE_CLK]
   depends on [ARM && HAVE_CLK]
   select MFD_CORE if [HAS_IOMEM && ARM && HAVE_CLK]
   select MFD_TMIO if [HAS_IOMEM && ARM && HAVE_CLK]
   inherited [HAS_IOMEM && ARM && HAVE_CLK]
  }
  config MFD_TC6387XB boolean {
   prompt "Support Toshiba TC6387XB" if [HAS_IOMEM && ARM && HAVE_CLK]
   depends on [ARM && HAVE_CLK]
   select MFD_CORE if [HAS_IOMEM && ARM && HAVE_CLK]
   select MFD_TMIO if [HAS_IOMEM && ARM && HAVE_CLK]
   inherited [HAS_IOMEM && ARM && HAVE_CLK]
  }
  config MFD_TC6393XB boolean {
   prompt "Support Toshiba TC6393XB" if [HAS_IOMEM && GPIOLIB && ARM]
   depends on [GPIOLIB && ARM]
   select MFD_CORE if [HAS_IOMEM && GPIOLIB && ARM]
   select MFD_TMIO if [HAS_IOMEM && GPIOLIB && ARM]
   inherited [HAS_IOMEM && GPIOLIB && ARM]
  }
  config PMIC_DA903X boolean {
   prompt "Dialog Semiconductor DA9030/DA9034 PMIC Support" if [HAS_IOMEM && I2C="y"]
   depends on [I2C="y"]
   inherited [HAS_IOMEM && I2C="y"]
  }
  config MFD_WM8400 tristate {
   prompt "Support Wolfson Microelectronics WM8400" if [HAS_IOMEM && I2C]
   select MFD_CORE if [HAS_IOMEM && I2C]
   depends on [I2C]
   inherited [HAS_IOMEM && I2C]
  }
  config MFD_WM831X tristate {
   prompt "Support Wolfson Microelectronics WM831x PMICs" if [HAS_IOMEM && I2C]
   select MFD_CORE if [HAS_IOMEM && I2C]
   depends on [I2C]
   inherited [HAS_IOMEM && I2C]
  }
  config MFD_WM8350 tristate {
   inherited [HAS_IOMEM]
  }
  config MFD_WM8350_CONFIG_MODE_0 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8350_CONFIG_MODE_1 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8350_CONFIG_MODE_2 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8350_CONFIG_MODE_3 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8351_CONFIG_MODE_0 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8351_CONFIG_MODE_1 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8351_CONFIG_MODE_2 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8351_CONFIG_MODE_3 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8352_CONFIG_MODE_0 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8352_CONFIG_MODE_1 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8352_CONFIG_MODE_2 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8352_CONFIG_MODE_3 boolean {
   depends on [MFD_WM8350]
   inherited [HAS_IOMEM && MFD_WM8350]
  }
  config MFD_WM8350_I2C tristate {
   prompt "Support Wolfson Microelectronics WM8350 with I2C" if [HAS_IOMEM && I2C]
   select MFD_WM8350 if [HAS_IOMEM && I2C]
   depends on [I2C]
   inherited [HAS_IOMEM && I2C]
  }
  config MFD_PCF50633 tristate {
   prompt "Support for NXP PCF50633" if [HAS_IOMEM && I2C]
   depends on [I2C]
   inherited [HAS_IOMEM && I2C]
  }
  config MFD_MC13783 tristate {
   prompt "Support Freescale MC13783" if [HAS_IOMEM && SPI_MASTER]
   depends on [SPI_MASTER]
   select MFD_CORE if [HAS_IOMEM && SPI_MASTER]
   inherited [HAS_IOMEM && SPI_MASTER]
  }
  config PCF50633_ADC tristate {
   prompt "Support for NXP PCF50633 ADC" if [HAS_IOMEM && MFD_PCF50633]
   depends on [MFD_PCF50633]
   inherited [HAS_IOMEM && MFD_PCF50633]
  }
  config PCF50633_GPIO tristate {
   prompt "Support for NXP PCF50633 GPIO" if [HAS_IOMEM && MFD_PCF50633]
   depends on [MFD_PCF50633]
   inherited [HAS_IOMEM && MFD_PCF50633]
  }
  config AB3100_CORE tristate {
   prompt "ST-Ericsson AB3100 Mixed Signal Circuit core functions" if [HAS_IOMEM && I2C]
   depends on [I2C]
   default [y] if [HAS_IOMEM && I2C && ARCH_U300]
   inherited [HAS_IOMEM && I2C]
   config AB3100_OTP tristate {
    prompt "ST-Ericsson AB3100 OTP functions" if [HAS_IOMEM && AB3100_CORE]
    depends on [AB3100_CORE]
    default [y] if [HAS_IOMEM && AB3100_CORE]
    inherited [HAS_IOMEM && AB3100_CORE]
   }
  }
  config EZX_PCAP boolean {
   prompt "PCAP Support" if [HAS_IOMEM && GENERIC_HARDIRQS && SPI_MASTER]
   depends on [GENERIC_HARDIRQS && SPI_MASTER]
   inherited [HAS_IOMEM && GENERIC_HARDIRQS && SPI_MASTER]
  }
 }
 menu "Multimedia Capabilities Port drivers" {
  depends on [ARCH_SA1100]
  config MCP tristate {
   inherited [ARCH_SA1100]
  }
  config MCP_SA11X0 tristate {
   prompt "Support SA11x0 MCP interface" if [ARCH_SA1100]
   depends on [ARCH_SA1100]
   select MCP if [ARCH_SA1100]
   inherited [ARCH_SA1100]
  }
  config MCP_UCB1200 tristate {
   prompt "Support for UCB1200 / UCB1300" if [ARCH_SA1100 && MCP]
   depends on [MCP]
   inherited [ARCH_SA1100 && MCP]
   config MCP_UCB1200_TS tristate {
    prompt "Touchscreen interface support" if [ARCH_SA1100 && MCP_UCB1200 && INPUT]
    depends on [MCP_UCB1200 && INPUT]
    inherited [ARCH_SA1100 && MCP_UCB1200 && INPUT]
   }
  }
 }
 menuconfig REGULATOR boolean {
  prompt "Voltage and Current Regulator Support" if []
  if [REGULATOR] {
   config REGULATOR_DEBUG boolean {
    prompt "Regulator debug support" if [REGULATOR]
    inherited [REGULATOR]
   }
   config REGULATOR_FIXED_VOLTAGE tristate {
    prompt "Fixed voltage regulator support" if [REGULATOR]
    inherited [REGULATOR]
   }
   config REGULATOR_VIRTUAL_CONSUMER tristate {
    prompt "Virtual regulator consumer support" if [REGULATOR]
    inherited [REGULATOR]
   }
   config REGULATOR_USERSPACE_CONSUMER tristate {
    prompt "Userspace regulator consumer support" if [REGULATOR]
    inherited [REGULATOR]
   }
   config REGULATOR_BQ24022 tristate {
    prompt "TI bq24022 Dual Input 1-Cell Li-Ion Charger IC" if [REGULATOR]
    inherited [REGULATOR]
   }
   config REGULATOR_MAX1586 tristate {
    prompt "Maxim 1586/1587 voltage regulator" if [REGULATOR && I2C]
    depends on [I2C]
    inherited [REGULATOR && I2C]
   }
   config REGULATOR_TWL4030 boolean {
    prompt "TI TWL4030/TWL5030/TPS695x0 PMIC" if [REGULATOR && TWL4030_CORE]
    depends on [TWL4030_CORE]
    inherited [REGULATOR && TWL4030_CORE]
   }
   config REGULATOR_WM831X tristate {
    prompt "Wolfson Microelcronics WM831x PMIC regulators" if [REGULATOR && MFD_WM831X]
    depends on [MFD_WM831X]
    inherited [REGULATOR && MFD_WM831X]
   }
   config REGULATOR_WM8350 tristate {
    prompt "Wolfson Microelectroncis WM8350 AudioPlus PMIC" if [REGULATOR && MFD_WM8350]
    depends on [MFD_WM8350]
    inherited [REGULATOR && MFD_WM8350]
   }
   config REGULATOR_WM8400 tristate {
    prompt "Wolfson Microelectroncis WM8400 AudioPlus PMIC" if [REGULATOR && MFD_WM8400]
    depends on [MFD_WM8400]
    inherited [REGULATOR && MFD_WM8400]
   }
   config REGULATOR_DA903X tristate {
    prompt "Support regulators on Dialog Semiconductor DA9030/DA9034 PMIC" if [REGULATOR && PMIC_DA903X]
    depends on [PMIC_DA903X]
    inherited [REGULATOR && PMIC_DA903X]
   }
   config REGULATOR_PCF50633 tristate {
    prompt "PCF50633 regulator driver" if [REGULATOR && MFD_PCF50633]
    depends on [MFD_PCF50633]
    inherited [REGULATOR && MFD_PCF50633]
   }
   config REGULATOR_LP3971 tristate {
    prompt "National Semiconductors LP3971 PMIC regulator driver" if [REGULATOR && I2C]
    depends on [I2C]
    inherited [REGULATOR && I2C]
   }
   config REGULATOR_PCAP tristate {
    prompt "PCAP2 regulator driver" if [REGULATOR && EZX_PCAP]
    depends on [EZX_PCAP]
    inherited [REGULATOR && EZX_PCAP]
   }
   config REGULATOR_MC13783 tristate {
    prompt "Support regulators on Freescale MC13783 PMIC" if [REGULATOR && MFD_MC13783]
    depends on [MFD_MC13783]
    inherited [REGULATOR && MFD_MC13783]
   }
   config REGULATOR_AB3100 tristate {
    prompt "ST-Ericsson AB3100 Regulator functions" if [REGULATOR && AB3100_CORE]
    depends on [AB3100_CORE]
    default [y] if [REGULATOR && AB3100_CORE]
    inherited [REGULATOR && AB3100_CORE]
   }
   config REGULATOR_TPS65023 tristate {
    prompt "TI TPS65023 Power regulators" if [REGULATOR && I2C]
    depends on [I2C]
    inherited [REGULATOR && I2C]
   }
   config REGULATOR_TPS6507X tristate {
    prompt "TI TPS6507X Power regulators" if [REGULATOR && I2C]
    depends on [I2C]
    inherited [REGULATOR && I2C]
   }
  }
 }
 menuconfig MEDIA_SUPPORT tristate {
  prompt "Multimedia support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [MEDIA_SUPPORT] {
   config VIDEO_DEV tristate {
    prompt "Video For Linux" if [MEDIA_SUPPORT]
    inherited [MEDIA_SUPPORT]
    config VIDEO_V4L2_COMMON tristate {
     depends on [(I2C || I2C="n") && VIDEO_DEV]
     default [(I2C || I2C="n") && VIDEO_DEV] if [MEDIA_SUPPORT && (I2C || I2C="n") && VIDEO_DEV]
     inherited [MEDIA_SUPPORT && (I2C || I2C="n") && VIDEO_DEV]
    }
    config VIDEO_ALLOW_V4L1 boolean {
     prompt "Enable Video For Linux API 1 (DEPRECATED)" if [MEDIA_SUPPORT && VIDEO_DEV && VIDEO_V4L2_COMMON]
     depends on [VIDEO_DEV && VIDEO_V4L2_COMMON]
     default [VIDEO_DEV && VIDEO_V4L2_COMMON] if [MEDIA_SUPPORT && VIDEO_DEV && VIDEO_V4L2_COMMON]
     inherited [MEDIA_SUPPORT && VIDEO_DEV && VIDEO_V4L2_COMMON]
    }
    config VIDEO_V4L1_COMPAT boolean {
     prompt "Enable Video For Linux API 1 compatible Layer" if [MEDIA_SUPPORT && VIDEO_DEV && !VIDEO_ALLOW_V4L1]
     depends on [VIDEO_DEV]
     default [y] if [MEDIA_SUPPORT && VIDEO_DEV]
     inherited [MEDIA_SUPPORT && VIDEO_DEV]
    }
   }
   config DVB_CORE tristate {
    prompt "DVB for Linux" if [MEDIA_SUPPORT && NET && INET]
    depends on [NET && INET]
    select CRC32 if [MEDIA_SUPPORT && NET && INET]
    inherited [MEDIA_SUPPORT && NET && INET]
   }
   config VIDEO_MEDIA tristate {
    default [DVB_CORE && VIDEO_DEV="n" || VIDEO_DEV && DVB_CORE="n" || DVB_CORE && VIDEO_DEV] if [MEDIA_SUPPORT]
    inherited [MEDIA_SUPPORT]
   }
   config VIDEO_SAA7146 tristate {
    depends on [I2C && PCI]
    inherited [MEDIA_SUPPORT && I2C && PCI]
   }
   config VIDEO_SAA7146_VV tristate {
    depends on [VIDEO_V4L2]
    select VIDEOBUF_DMA_SG if [MEDIA_SUPPORT && VIDEO_V4L2]
    select VIDEO_SAA7146 if [MEDIA_SUPPORT && VIDEO_V4L2]
    inherited [MEDIA_SUPPORT && VIDEO_V4L2]
   }
   config MEDIA_ATTACH boolean {
    prompt "Load and attach frontend and tuner driver modules as needed" if [MEDIA_SUPPORT && VIDEO_MEDIA && MODULES]
    depends on [VIDEO_MEDIA]
    depends on [MODULES]
    inherited [MEDIA_SUPPORT && VIDEO_MEDIA && MODULES]
   }
   config MEDIA_TUNER tristate {
    default [VIDEO_MEDIA && I2C] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C]
    depends on [VIDEO_MEDIA && I2C]
    select MEDIA_TUNER_XC2028 if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && !MEDIA_TUNER_CUSTOMISE]
    select MEDIA_TUNER_XC5000 if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && !MEDIA_TUNER_CUSTOMISE]
    select MEDIA_TUNER_MT20XX if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && !MEDIA_TUNER_CUSTOMISE]
    select MEDIA_TUNER_TDA8290 if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && !MEDIA_TUNER_CUSTOMISE]
    select MEDIA_TUNER_TEA5761 if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && !MEDIA_TUNER_CUSTOMISE]
    select MEDIA_TUNER_TEA5767 if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && !MEDIA_TUNER_CUSTOMISE]
    select MEDIA_TUNER_SIMPLE if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && !MEDIA_TUNER_CUSTOMISE]
    select MEDIA_TUNER_TDA9887 if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && !MEDIA_TUNER_CUSTOMISE]
    select MEDIA_TUNER_MC44S803 if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && !MEDIA_TUNER_CUSTOMISE]
    inherited [MEDIA_SUPPORT && VIDEO_MEDIA && I2C]
   }
   menuconfig MEDIA_TUNER_CUSTOMISE boolean {
    prompt "Customize analog and hybrid tuner modules to build" if [MEDIA_SUPPORT && MEDIA_TUNER]
    depends on [MEDIA_TUNER]
    default [n] if [MEDIA_SUPPORT && MEDIA_TUNER]
    inherited [MEDIA_SUPPORT && MEDIA_TUNER]
    if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE] {
     config MEDIA_TUNER_SIMPLE tristate {
      prompt "Simple tuner support" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      select MEDIA_TUNER_TDA9887 if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_TDA8290 tristate {
      prompt "TDA 8290/8295 + 8275(a)/18271 tuner combo" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      select MEDIA_TUNER_TDA827X if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      select MEDIA_TUNER_TDA18271 if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_TDA827X tristate {
      prompt "Philips TDA827X silicon tuner" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_TDA18271 tristate {
      prompt "NXP TDA18271 silicon tuner" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_TDA9887 tristate {
      prompt "TDA 9885/6/7 analog IF demodulator" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_TEA5761 tristate {
      prompt "TEA 5761 radio tuner (EXPERIMENTAL)" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C && EXPERIMENTAL]
      depends on [VIDEO_MEDIA && I2C]
      depends on [EXPERIMENTAL]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && EXPERIMENTAL && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C && EXPERIMENTAL]
     }
     config MEDIA_TUNER_TEA5767 tristate {
      prompt "TEA 5767 radio tuner" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_MT20XX tristate {
      prompt "Microtune 2032 / 2050 tuners" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_MT2060 tristate {
      prompt "Microtune MT2060 silicon IF tuner" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_MT2266 tristate {
      prompt "Microtune MT2266 silicon tuner" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_MT2131 tristate {
      prompt "Microtune MT2131 silicon tuner" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_QT1010 tristate {
      prompt "Quantek QT1010 silicon tuner" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_XC2028 tristate {
      prompt "XCeive xc2028/xc3028 tuners" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_XC5000 tristate {
      prompt "Xceive XC5000 silicon tuner" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_MXL5005S tristate {
      prompt "MaxLinear MSL5005S silicon tuner" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_MXL5007T tristate {
      prompt "MaxLinear MxL5007T silicon tuner" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
     config MEDIA_TUNER_MC44S803 tristate {
      prompt "Freescale MC44S803 Low Power CMOS Broadband tuners" if [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
      depends on [VIDEO_MEDIA && I2C]
      default [m] if [MEDIA_SUPPORT && VIDEO_MEDIA && I2C && MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && MEDIA_TUNER_CUSTOMISE && VIDEO_MEDIA && I2C]
     }
    }
   }
   config VIDEO_V4L2 tristate {
    depends on [VIDEO_DEV && VIDEO_V4L2_COMMON]
    default [VIDEO_DEV && VIDEO_V4L2_COMMON] if [MEDIA_SUPPORT && VIDEO_DEV && VIDEO_V4L2_COMMON]
    inherited [MEDIA_SUPPORT && VIDEO_DEV && VIDEO_V4L2_COMMON]
   }
   config VIDEO_V4L1 tristate {
    depends on [VIDEO_DEV && VIDEO_V4L2_COMMON && VIDEO_ALLOW_V4L1]
    default [VIDEO_DEV && VIDEO_V4L2_COMMON && VIDEO_ALLOW_V4L1] if [MEDIA_SUPPORT && VIDEO_DEV && VIDEO_V4L2_COMMON && VIDEO_ALLOW_V4L1]
    inherited [MEDIA_SUPPORT && VIDEO_DEV && VIDEO_V4L2_COMMON && VIDEO_ALLOW_V4L1]
   }
   config VIDEOBUF_GEN tristate {
    inherited [MEDIA_SUPPORT]
   }
   config VIDEOBUF_DMA_SG tristate {
    depends on [HAS_DMA]
    select VIDEOBUF_GEN if [MEDIA_SUPPORT && HAS_DMA]
    inherited [MEDIA_SUPPORT && HAS_DMA]
   }
   config VIDEOBUF_VMALLOC tristate {
    select VIDEOBUF_GEN if [MEDIA_SUPPORT]
    inherited [MEDIA_SUPPORT]
   }
   config VIDEOBUF_DMA_CONTIG tristate {
    depends on [HAS_DMA]
    select VIDEOBUF_GEN if [MEDIA_SUPPORT && HAS_DMA]
    inherited [MEDIA_SUPPORT && HAS_DMA]
   }
   config VIDEOBUF_DVB tristate {
    select VIDEOBUF_GEN if [MEDIA_SUPPORT]
    inherited [MEDIA_SUPPORT]
   }
   config VIDEO_BTCX tristate {
    depends on [PCI]
    inherited [MEDIA_SUPPORT && PCI]
   }
   config VIDEO_IR tristate {
    depends on [INPUT]
    inherited [MEDIA_SUPPORT && INPUT]
   }
   config VIDEO_TVEEPROM tristate {
    depends on [I2C]
    inherited [MEDIA_SUPPORT && I2C]
   }
   config VIDEO_TUNER tristate {
    depends on [MEDIA_TUNER]
    inherited [MEDIA_SUPPORT && MEDIA_TUNER]
   }
   menuconfig VIDEO_CAPTURE_DRIVERS boolean {
    prompt "Video capture adapters" if [MEDIA_SUPPORT && VIDEO_V4L2]
    depends on [VIDEO_V4L2]
    default [y] if [MEDIA_SUPPORT && VIDEO_V4L2]
    inherited [MEDIA_SUPPORT && VIDEO_V4L2]
    if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2] {
     config VIDEO_ADV_DEBUG boolean {
      prompt "Enable advanced debug functionality" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
      default [n] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
     }
     config VIDEO_FIXED_MINOR_RANGES boolean {
      prompt "Enable old-style fixed minor ranges for video devices" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
      default [n] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
     }
     config VIDEO_HELPER_CHIPS_AUTO boolean {
      prompt "Autoselect pertinent encoders/decoders and other helper chips" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
      default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
      config VIDEO_IR_I2C tristate {
       prompt "I2C module for IR" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && I2C && VIDEO_IR && !VIDEO_HELPER_CHIPS_AUTO]
       depends on [I2C && VIDEO_IR]
       default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && I2C && VIDEO_IR]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && I2C && VIDEO_IR]
      }
      menu "Encoders/decoders and other helper chips" {
       depends on [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO]
       config VIDEO_TVAUDIO tristate {
        prompt "Simple audio decoder chips" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_TDA7432 tristate {
        prompt "Philips TDA7432 audio processor" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_TDA9840 tristate {
        prompt "Philips TDA9840 audio processor" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && I2C]
        depends on [I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && I2C]
       }
       config VIDEO_TDA9875 tristate {
        prompt "Philips TDA9875 audio processor" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_TEA6415C tristate {
        prompt "Philips TEA6415C audio processor" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && I2C]
        depends on [I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && I2C]
       }
       config VIDEO_TEA6420 tristate {
        prompt "Philips TEA6420 audio processor" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && I2C]
        depends on [I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && I2C]
       }
       config VIDEO_MSP3400 tristate {
        prompt "Micronas MSP34xx audio decoders" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_CS5345 tristate {
        prompt "Cirrus Logic CS5345 audio ADC" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_CS53L32A tristate {
        prompt "Cirrus Logic CS53L32A audio ADC" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_M52790 tristate {
        prompt "Mitsubishi M52790 A/V switch" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_TLV320AIC23B tristate {
        prompt "Texas Instruments TLV320AIC23B audio codec" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
       config VIDEO_WM8775 tristate {
        prompt "Wolfson Microelectronics WM8775 audio ADC with input mixer" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_WM8739 tristate {
        prompt "Wolfson Microelectronics WM8739 stereo audio ADC" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_VP27SMPX tristate {
        prompt "Panasonic VP27s internal MPX" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_SAA6588 tristate {
        prompt "SAA6588 Radio Chip RDS decoder support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_ADV7180 tristate {
        prompt "Analog Devices ADV7180 decoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_BT819 tristate {
        prompt "BT819A VideoStream decoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_BT856 tristate {
        prompt "BT856 VideoStream decoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_BT866 tristate {
        prompt "BT866 VideoStream decoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_KS0127 tristate {
        prompt "KS0127 video decoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_OV7670 tristate {
        prompt "OmniVision OV7670 sensor support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
        depends on [I2C && VIDEO_V4L2]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
       }
       config VIDEO_MT9V011 tristate {
        prompt "Micron mt9v011 sensor support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
        depends on [I2C && VIDEO_V4L2]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
       }
       config VIDEO_TCM825X tristate {
        prompt "TCM825x camera sensor support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
        depends on [I2C && VIDEO_V4L2]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
       }
       config VIDEO_SAA7110 tristate {
        prompt "Philips SAA7110 video decoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_SAA711X tristate {
        prompt "Philips SAA7111/3/4/5 video decoders" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_SAA717X tristate {
        prompt "Philips SAA7171/3/4 audio/video decoders" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_SAA7191 tristate {
        prompt "Philips SAA7191 video decoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_TVP514X tristate {
        prompt "Texas Instruments TVP514x video decoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_TVP5150 tristate {
        prompt "Texas Instruments TVP5150 video decoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_VPX3220 tristate {
        prompt "vpx3220a, vpx3216b & vpx3214c video decoders" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_CX25840 tristate {
        prompt "Conexant CX2584x audio/video decoders" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_CX2341X tristate {
        prompt "Conexant CX2341x MPEG encoders" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && VIDEO_V4L2_COMMON]
        depends on [VIDEO_V4L2 && VIDEO_V4L2_COMMON]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && VIDEO_V4L2_COMMON]
       }
       config VIDEO_SAA7127 tristate {
        prompt "Philips SAA7127/9 digital video encoders" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_SAA7185 tristate {
        prompt "Philips SAA7185 video encoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_ADV7170 tristate {
        prompt "Analog Devices ADV7170 video encoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_ADV7175 tristate {
        prompt "Analog Devices ADV7175 video encoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_THS7303 tristate {
        prompt "THS7303 Video Amplifier" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && I2C]
        depends on [I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && I2C]
       }
       config VIDEO_ADV7343 tristate {
        prompt "ADV7343 video encoder" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && I2C]
        depends on [I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && !VIDEO_HELPER_CHIPS_AUTO && I2C]
       }
       config VIDEO_UPD64031A tristate {
        prompt "NEC Electronics uPD64031A Ghost Reduction" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_UPD64083 tristate {
        prompt "NEC Electronics uPD64083 3-Dimensional Y/C separation" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
      }
     }
     config DISPLAY_DAVINCI_DM646X_EVM tristate {
      prompt "DM646x EVM Video Display" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
      depends on [VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
      select VIDEOBUF_DMA_CONTIG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
      select VIDEO_DAVINCI_VPIF if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
      select VIDEO_ADV7343 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
      select VIDEO_THS7303 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
     }
     config CAPTURE_DAVINCI_DM646X_EVM tristate {
      prompt "DM646x EVM Video Capture" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
      depends on [VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
      select VIDEOBUF_DMA_CONTIG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
      select VIDEO_DAVINCI_VPIF if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MACH_DAVINCI_DM6467_EVM]
     }
     config VIDEO_DAVINCI_VPIF tristate {
      prompt "DaVinci VPIF Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DISPLAY_DAVINCI_DM646X_EVM]
      depends on [DISPLAY_DAVINCI_DM646X_EVM]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DISPLAY_DAVINCI_DM646X_EVM]
     }
     config VIDEO_VIVI tristate {
      prompt "Virtual Video Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
      depends on [VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
      select VIDEOBUF_VMALLOC if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
      default [n] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
     }
     config VIDEO_VPSS_SYSTEM tristate {
      prompt "VPSS System module driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI]
      depends on [ARCH_DAVINCI]
      default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI]
     }
     config VIDEO_VPFE_CAPTURE tristate {
      prompt "VPFE Video Capture Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI]
      depends on [VIDEO_V4L2 && ARCH_DAVINCI]
      select VIDEOBUF_DMA_CONTIG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI]
      config VIDEO_DM6446_CCDC tristate {
       prompt "DM6446 CCDC HW module" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE]
       depends on [ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE]
       select VIDEO_VPSS_SYSTEM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE]
       default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE]
      }
      config VIDEO_DM355_CCDC tristate {
       prompt "DM355 CCDC HW module" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE]
       depends on [ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE]
       select VIDEO_VPSS_SYSTEM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE]
       default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE]
      }
     }
     config VIDEO_BT848 tristate {
      prompt "BT848 Video For Linux" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT]
      depends on [VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT]
      select I2C_ALGOBIT if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT]
      select VIDEO_BTCX if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT]
      select VIDEOBUF_DMA_SG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT]
      select VIDEO_IR if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT]
      select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT]
      select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT]
      select VIDEO_MSP3400 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TVAUDIO if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TDA7432 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_SAA6588 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT && VIDEO_HELPER_CHIPS_AUTO]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2 && INPUT]
      config VIDEO_BT848_DVB boolean {
       prompt "DVB/ATSC Support for bt878 based TV cards" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_BT848 && DVB_CORE]
       depends on [VIDEO_BT848 && DVB_CORE]
       select DVB_BT8XX if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_BT848 && DVB_CORE]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_BT848 && DVB_CORE]
      }
     }
     config VIDEO_PMS tristate {
      prompt "Mediavision Pro Movie Studio Video For Linux" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ISA && VIDEO_V4L1]
      depends on [ISA && VIDEO_V4L1]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && ISA && VIDEO_V4L1]
     }
     config VIDEO_BWQCAM tristate {
      prompt "Quickcam BW Video For Linux" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PARPORT && VIDEO_V4L1]
      depends on [PARPORT && VIDEO_V4L1]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PARPORT && VIDEO_V4L1]
     }
     config VIDEO_CQCAM tristate {
      prompt "QuickCam Colour Video For Linux (EXPERIMENTAL)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && EXPERIMENTAL && PARPORT && VIDEO_V4L1]
      depends on [EXPERIMENTAL && PARPORT && VIDEO_V4L1]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && EXPERIMENTAL && PARPORT && VIDEO_V4L1]
     }
     config VIDEO_W9966 tristate {
      prompt "W9966CF Webcam (FlyCam Supra and others) Video For Linux" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PARPORT_1284 && PARPORT && VIDEO_V4L1]
      depends on [PARPORT_1284 && PARPORT && VIDEO_V4L1]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PARPORT_1284 && PARPORT && VIDEO_V4L1]
     }
     config VIDEO_CPIA tristate {
      prompt "CPiA Video For Linux" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_V4L1]
      depends on [VIDEO_V4L1]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_V4L1]
      config VIDEO_CPIA_PP tristate {
       prompt "CPiA Parallel Port Lowlevel Support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PARPORT_1284 && VIDEO_CPIA && PARPORT]
       depends on [PARPORT_1284 && VIDEO_CPIA && PARPORT]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PARPORT_1284 && VIDEO_CPIA && PARPORT]
      }
      config VIDEO_CPIA_USB tristate {
       prompt "CPiA USB Lowlevel Support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CPIA && USB]
       depends on [VIDEO_CPIA && USB]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CPIA && USB]
      }
     }
     config VIDEO_CPIA2 tristate {
      prompt "CPiA2 Video For Linux" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && USB && VIDEO_V4L1]
      depends on [VIDEO_DEV && USB && VIDEO_V4L1]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && USB && VIDEO_V4L1]
     }
     config VIDEO_SAA5246A tristate {
      prompt "SAA5246A, SAA5281 Teletext processor" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && VIDEO_V4L2]
      depends on [I2C && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && VIDEO_V4L2]
     }
     config VIDEO_SAA5249 tristate {
      prompt "SAA5249 Teletext processor" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && VIDEO_V4L2]
      depends on [I2C && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && VIDEO_V4L2]
     }
     config VIDEO_VINO tristate {
      prompt "SGI Vino Video For Linux (EXPERIMENTAL)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
      depends on [I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
      select VIDEO_SAA7191 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2 && VIDEO_HELPER_CHIPS_AUTO]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
     }
     config VIDEO_STRADIS tristate {
      prompt "Stradis 4:2:2 MPEG-2 video driver  (EXPERIMENTAL)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && EXPERIMENTAL && PCI && VIDEO_V4L1 && VIRT_TO_BUS]
      depends on [EXPERIMENTAL && PCI && VIDEO_V4L1 && VIRT_TO_BUS]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && EXPERIMENTAL && PCI && VIDEO_V4L1 && VIRT_TO_BUS]
     }
     config VIDEO_ZORAN tristate {
      prompt "Zoran ZR36057/36067 Video For Linux" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && I2C_ALGOBIT && VIDEO_V4L2 && VIRT_TO_BUS]
      depends on [PCI && I2C_ALGOBIT && VIDEO_V4L2 && VIRT_TO_BUS]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && I2C_ALGOBIT && VIDEO_V4L2 && VIRT_TO_BUS]
      config VIDEO_ZORAN_DC30 tristate {
       prompt "Pinnacle/Miro DC30(+) support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN]
       depends on [VIDEO_ZORAN]
       select VIDEO_ADV7175 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_VPX3220 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN]
      }
      config VIDEO_ZORAN_ZR36060 tristate {
       prompt "Zoran ZR36060" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN]
       depends on [VIDEO_ZORAN]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN]
       config VIDEO_ZORAN_BUZ tristate {
        prompt "Iomega Buz support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060]
        depends on [VIDEO_ZORAN_ZR36060]
        select VIDEO_SAA711X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO]
        select VIDEO_SAA7185 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060]
       }
       config VIDEO_ZORAN_DC10 tristate {
        prompt "Pinnacle/Miro DC10(+) support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060]
        depends on [VIDEO_ZORAN_ZR36060]
        select VIDEO_SAA7110 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO]
        select VIDEO_ADV7175 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060]
       }
       config VIDEO_ZORAN_LML33 tristate {
        prompt "Linux Media Labs LML33 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060]
        depends on [VIDEO_ZORAN_ZR36060]
        select VIDEO_BT819 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO]
        select VIDEO_BT856 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060]
       }
       config VIDEO_ZORAN_LML33R10 tristate {
        prompt "Linux Media Labs LML33R10 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060]
        depends on [VIDEO_ZORAN_ZR36060]
        select VIDEO_SAA711X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO]
        select VIDEO_ADV7170 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060]
       }
       config VIDEO_ZORAN_AVS6EYES tristate {
        prompt "AverMedia 6 Eyes support (EXPERIMENTAL)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && EXPERIMENTAL]
        depends on [VIDEO_ZORAN_ZR36060 && EXPERIMENTAL]
        select VIDEO_BT856 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && EXPERIMENTAL && VIDEO_HELPER_CHIPS_AUTO]
        select VIDEO_BT866 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && EXPERIMENTAL && VIDEO_HELPER_CHIPS_AUTO]
        select VIDEO_KS0127 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && EXPERIMENTAL && VIDEO_HELPER_CHIPS_AUTO]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_ZORAN_ZR36060 && EXPERIMENTAL]
       }
      }
     }
     config VIDEO_MEYE tristate {
      prompt "Sony Vaio Picturebook Motion Eye Video For Linux" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && SONY_LAPTOP && VIDEO_V4L1]
      depends on [PCI && SONY_LAPTOP && VIDEO_V4L1]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && SONY_LAPTOP && VIDEO_V4L1]
     }
     config VIDEO_SAA7134 tristate {
      prompt "Philips SAA7134 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      depends on [VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEOBUF_DMA_SG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_IR if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select CRC32 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_SAA6588 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT && VIDEO_HELPER_CHIPS_AUTO]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      config VIDEO_SAA7134_ALSA tristate {
       prompt "Philips SAA7134 DMA audio support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && SND]
       depends on [VIDEO_SAA7134 && SND]
       select SND_PCM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && SND]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && SND]
      }
      config VIDEO_SAA7134_DVB tristate {
       prompt "DVB/ATSC Support for saa7134 based TV cards" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE]
       depends on [VIDEO_SAA7134 && DVB_CORE]
       select VIDEOBUF_DVB if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE]
       select DVB_PLL if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_TDA1004X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_NXT200X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_TDA10086 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_TDA826X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_ISL6421 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_ISL6405 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_TDA827X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_SIMPLE if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !MEDIA_TUNER_CUSTOMISE]
       select DVB_ZL10036 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_MT312 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_LNBP21 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_ZL10353 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_LGDT3305 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_TDA10048 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_TDA18271 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_TDA8290 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !MEDIA_TUNER_CUSTOMISE]
       select DVB_ZL10039 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_SAA7134 && DVB_CORE]
      }
     }
     config VIDEO_MXB tristate {
      prompt "Siemens-Nixdorf 'Multimedia eXtension Board'" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && VIDEO_V4L1 && I2C]
      depends on [PCI && VIDEO_V4L1 && I2C]
      select VIDEO_SAA7146_VV if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && VIDEO_V4L1 && I2C]
      select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && VIDEO_V4L1 && I2C]
      select VIDEO_SAA711X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TDA9840 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TEA6415C if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TEA6420 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && VIDEO_V4L1 && I2C]
     }
     config VIDEO_HEXIUM_ORION tristate {
      prompt "Hexium HV-PCI6 and Orion frame grabber" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && VIDEO_V4L2 && I2C]
      depends on [PCI && VIDEO_V4L2 && I2C]
      select VIDEO_SAA7146_VV if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && VIDEO_V4L2 && I2C]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && VIDEO_V4L2 && I2C]
     }
     config VIDEO_HEXIUM_GEMINI tristate {
      prompt "Hexium Gemini frame grabber" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && VIDEO_V4L2 && I2C]
      depends on [PCI && VIDEO_V4L2 && I2C]
      select VIDEO_SAA7146_VV if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && VIDEO_V4L2 && I2C]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && VIDEO_V4L2 && I2C]
     }
     config VIDEO_CX88 tristate {
      prompt "Conexant 2388x (bt878 successor) support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      depends on [VIDEO_DEV && PCI && I2C && INPUT]
      select I2C_ALGOBIT if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_BTCX if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEOBUF_DMA_SG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_IR if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_WM8775 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT && VIDEO_HELPER_CHIPS_AUTO]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PCI && I2C && INPUT]
      config VIDEO_CX88_ALSA tristate {
       prompt "Conexant 2388x DMA audio support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && SND && EXPERIMENTAL]
       depends on [VIDEO_CX88 && SND && EXPERIMENTAL]
       select SND_PCM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && SND && EXPERIMENTAL]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && SND && EXPERIMENTAL]
      }
      config VIDEO_CX88_BLACKBIRD tristate {
       prompt "Blackbird MPEG encoder support (cx2388x + cx23416)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88]
       depends on [VIDEO_CX88]
       select VIDEO_CX2341X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88]
      }
      config VIDEO_CX88_DVB tristate {
       prompt "DVB/ATSC Support for cx2388x based TV cards" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE]
       depends on [VIDEO_CX88 && DVB_CORE]
       select VIDEOBUF_DVB if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE]
       select DVB_PLL if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_ZL10353 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_OR51132 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_CX22702 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_LGDT330X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_NXT200X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_CX24123 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_ISL6421 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_S5H1411 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_CX24116 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_STV0299 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_STV0288 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_STB6000 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_SIMPLE if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88 && DVB_CORE]
      }
     }
     config VIDEO_CX88_MPEG tristate {
      depends on [VIDEO_CX88_DVB || VIDEO_CX88_BLACKBIRD]
      default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && (VIDEO_CX88_DVB || VIDEO_CX88_BLACKBIRD)]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && (VIDEO_CX88_DVB || VIDEO_CX88_BLACKBIRD)]
     }
     config VIDEO_CX88_VP3054 tristate {
      prompt "VP-3054 Secondary I2C Bus Support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88_DVB && DVB_MT352]
      default [m] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88_DVB && DVB_MT352]
      depends on [VIDEO_CX88_DVB && DVB_MT352]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_CX88_DVB && DVB_MT352]
     }
     config VIDEO_CX23885 tristate {
      prompt "Conexant cx23885 (2388x successor) support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      depends on [DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select I2C_ALGOBIT if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_BTCX if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_IR if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEOBUF_DVB if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEOBUF_DMA_SG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_CX25840 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_CX2341X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select DVB_DIB7000P if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_S5H1409 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_S5H1411 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_LGDT330X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_ZL10353 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_TDA10048 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_STV6110 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_STV0900 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select MEDIA_TUNER_MT2131 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !MEDIA_TUNER_CUSTOMISE]
      select MEDIA_TUNER_XC2028 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !MEDIA_TUNER_CUSTOMISE]
      select MEDIA_TUNER_TDA8290 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !MEDIA_TUNER_CUSTOMISE]
      select MEDIA_TUNER_TDA18271 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !MEDIA_TUNER_CUSTOMISE]
      select MEDIA_TUNER_XC5000 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     }
     config VIDEO_AU0828 tristate {
      prompt "Auvitek AU0828 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && INPUT && DVB_CORE && USB && VIDEO_V4L2]
      depends on [I2C && INPUT && DVB_CORE && USB && VIDEO_V4L2]
      select I2C_ALGOBIT if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && INPUT && DVB_CORE && USB && VIDEO_V4L2]
      select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && INPUT && DVB_CORE && USB && VIDEO_V4L2]
      select VIDEOBUF_VMALLOC if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && INPUT && DVB_CORE && USB && VIDEO_V4L2]
      select DVB_AU8522 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && INPUT && DVB_CORE && USB && VIDEO_V4L2 && !DVB_FE_CUSTOMISE]
      select MEDIA_TUNER_XC5000 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && INPUT && DVB_CORE && USB && VIDEO_V4L2 && !MEDIA_TUNER_CUSTOMISE]
      select MEDIA_TUNER_MXL5007T if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && INPUT && DVB_CORE && USB && VIDEO_V4L2 && !MEDIA_TUNER_CUSTOMISE]
      select MEDIA_TUNER_TDA18271 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && INPUT && DVB_CORE && USB && VIDEO_V4L2 && !MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && I2C && INPUT && DVB_CORE && USB && VIDEO_V4L2]
     }
     config VIDEO_IVTV tristate {
      prompt "Conexant cx23416/cx23415 MPEG encoder/decoder support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      depends on [VIDEO_V4L2 && PCI && I2C]
      depends on [INPUT]
      select I2C_ALGOBIT if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_IR if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_CX2341X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_CX25840 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_MSP3400 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_SAA711X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_SAA717X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_SAA7127 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_CS53L32A if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_M52790 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_WM8775 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_WM8739 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_VP27SMPX if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_UPD64031A if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      select VIDEO_UPD64083 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PCI && I2C && INPUT]
      config VIDEO_FB_IVTV tristate {
       prompt "Conexant cx23415 framebuffer support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_IVTV && FB]
       depends on [VIDEO_IVTV && FB]
       select FB_CFB_FILLRECT if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_IVTV && FB]
       select FB_CFB_COPYAREA if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_IVTV && FB]
       select FB_CFB_IMAGEBLIT if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_IVTV && FB]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_IVTV && FB]
      }
     }
     config VIDEO_CX18 tristate {
      prompt "Conexant cx23418 MPEG encoder support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL && INPUT]
      depends on [VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL]
      depends on [INPUT]
      select I2C_ALGOBIT if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL && INPUT]
      select VIDEO_IR if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL && INPUT]
      select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL && INPUT]
      select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL && INPUT]
      select VIDEO_CX2341X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL && INPUT]
      select VIDEO_CS5345 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL && INPUT]
      select DVB_S5H1409 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL && INPUT && !DVB_FE_CUSTOMISE]
      select MEDIA_TUNER_MXL5005S if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL && INPUT && !MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && EXPERIMENTAL && INPUT]
     }
     config VIDEO_SAA7164 tristate {
      prompt "NXP SAA7164 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C]
      depends on [DVB_CORE && PCI && I2C]
      select I2C_ALGOBIT if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C]
      select FW_LOADER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C]
      select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C]
      select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C]
      select VIDEOBUF_DVB if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C]
      select DVB_TDA10048 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && !DVB_FE_CUSTOMISE]
      select DVB_S5H1411 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && !DVB_FE_CUSTOMISE]
      select MEDIA_TUNER_TDA18271 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C && !MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && DVB_CORE && PCI && I2C]
     }
     config VIDEO_M32R_AR tristate {
      prompt "AR devices" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && M32R && VIDEO_V4L1]
      depends on [M32R && VIDEO_V4L1]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && M32R && VIDEO_V4L1]
     }
     config VIDEO_M32R_AR_M64278 tristate {
      prompt "AR device with color module M64278(VGA)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PLAT_M32700UT]
      depends on [PLAT_M32700UT]
      select VIDEO_M32R_AR if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PLAT_M32700UT]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && PLAT_M32700UT]
     }
     config VIDEO_CAFE_CCIC tristate {
      prompt "Marvell 88ALP01 (Cafe) CMOS Camera Controller support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && I2C && VIDEO_V4L2]
      depends on [PCI && I2C && VIDEO_V4L2]
      select VIDEO_OV7670 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && I2C && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && PCI && I2C && VIDEO_V4L2]
     }
     config SOC_CAMERA tristate {
      prompt "SoC camera support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && HAS_DMA && I2C]
      depends on [VIDEO_V4L2 && HAS_DMA && I2C]
      select VIDEOBUF_GEN if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && HAS_DMA && I2C]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && HAS_DMA && I2C]
      config SOC_CAMERA_MT9M001 tristate {
       prompt "mt9m001 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
       depends on [SOC_CAMERA && I2C]
       select GPIO_PCA953X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C && MT9M001_PCA9536_SWITCH]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
      }
      config SOC_CAMERA_MT9M111 tristate {
       prompt "mt9m111 and mt9m112 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
       depends on [SOC_CAMERA && I2C]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
      }
      config SOC_CAMERA_MT9T031 tristate {
       prompt "mt9t031 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
       depends on [SOC_CAMERA && I2C]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
      }
      config SOC_CAMERA_MT9V022 tristate {
       prompt "mt9v022 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
       depends on [SOC_CAMERA && I2C]
       select GPIO_PCA953X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C && MT9V022_PCA9536_SWITCH]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
      }
      config SOC_CAMERA_TW9910 tristate {
       prompt "tw9910 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
       depends on [SOC_CAMERA && I2C]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
      }
      config SOC_CAMERA_PLATFORM tristate {
       prompt "platform camera support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA]
       depends on [SOC_CAMERA]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA]
      }
      config SOC_CAMERA_OV772X tristate {
       prompt "ov772x camera support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
       depends on [SOC_CAMERA && I2C]
       inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && SOC_CAMERA && I2C]
      }
     }
     config MX1_VIDEO boolean {
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
     }
     config VIDEO_MX1 tristate {
      prompt "i.MX1/i.MXL CMOS Sensor Interface driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && ARCH_MX1 && SOC_CAMERA]
      depends on [VIDEO_DEV && ARCH_MX1 && SOC_CAMERA]
      select FIQ if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && ARCH_MX1 && SOC_CAMERA]
      select VIDEOBUF_DMA_CONTIG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && ARCH_MX1 && SOC_CAMERA]
      select MX1_VIDEO if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && ARCH_MX1 && SOC_CAMERA]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && ARCH_MX1 && SOC_CAMERA]
     }
     config MX3_VIDEO boolean {
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2]
     }
     config VIDEO_MX3 tristate {
      prompt "i.MX3x Camera Sensor Interface driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MX3_IPU && SOC_CAMERA]
      depends on [VIDEO_DEV && MX3_IPU && SOC_CAMERA]
      select VIDEOBUF_DMA_CONTIG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MX3_IPU && SOC_CAMERA]
      select MX3_VIDEO if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MX3_IPU && SOC_CAMERA]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && MX3_IPU && SOC_CAMERA]
     }
     config VIDEO_PXA27x tristate {
      prompt "PXA27x Quick Capture Interface driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PXA27x && SOC_CAMERA]
      depends on [VIDEO_DEV && PXA27x && SOC_CAMERA]
      select VIDEOBUF_DMA_SG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PXA27x && SOC_CAMERA]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && PXA27x && SOC_CAMERA]
     }
     config VIDEO_SH_MOBILE_CEU tristate {
      prompt "SuperH Mobile CEU Interface driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && SOC_CAMERA && HAS_DMA && HAVE_CLK]
      depends on [VIDEO_DEV && SOC_CAMERA && HAS_DMA && HAVE_CLK]
      select VIDEOBUF_DMA_CONTIG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && SOC_CAMERA && HAS_DMA && HAVE_CLK]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && SOC_CAMERA && HAS_DMA && HAVE_CLK]
     }
     config VIDEO_OMAP2 tristate {
      prompt "OMAP2 Camera Capture Interface driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && ARCH_OMAP2]
      depends on [VIDEO_DEV && ARCH_OMAP2]
      select VIDEOBUF_DMA_SG if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && ARCH_OMAP2]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && VIDEO_DEV && ARCH_OMAP2]
     }
     menuconfig V4L_USB_DRIVERS boolean {
      prompt "V4L USB devices" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && USB]
      depends on [USB]
      default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && USB]
      inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && USB]
      if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB] {
       config USB_VIDEO_CLASS tristate {
        prompt "USB Video Class (UVC)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB]
        config USB_VIDEO_CLASS_INPUT_EVDEV boolean {
         prompt "UVC input events device support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && (USB_VIDEO_CLASS="INPUT" || INPUT="y")]
         default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && (USB_VIDEO_CLASS="INPUT" || INPUT="y")]
         depends on [USB_VIDEO_CLASS="INPUT" || INPUT="y"]
         inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && (USB_VIDEO_CLASS="INPUT" || INPUT="y")]
        }
       }
       menuconfig USB_GSPCA tristate {
        prompt "GSPCA based webcams" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        depends on [VIDEO_V4L2]
        default [m] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && USB_GSPCA && VIDEO_V4L2] {
         config USB_M5602 tristate {
          prompt "ALi USB m5602 Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_STV06XX tristate {
          prompt "STV06XX USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GL860 tristate {
          prompt "GL860 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_CONEX tristate {
          prompt "Conexant Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_ETOMS tristate {
          prompt "Etoms USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_FINEPIX tristate {
          prompt "Fujifilm FinePix USB V4L2 driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_JEILINJ tristate {
          prompt "Jeilin JPEG USB V4L2 driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_MARS tristate {
          prompt "Mars USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_MR97310A tristate {
          prompt "Mars-Semi MR97310A USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_OV519 tristate {
          prompt "OV519 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_OV534 tristate {
          prompt "OV534 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_PAC207 tristate {
          prompt "Pixart PAC207 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_PAC7311 tristate {
          prompt "Pixart PAC7311 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SN9C20X tristate {
          prompt "SN9C20X USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          config USB_GSPCA_SN9C20X_EVDEV boolean {
           prompt "Enable evdev support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && USB_GSPCA && VIDEO_V4L2 && USB_GSPCA_SN9C20X && INPUT]
           depends on [USB_GSPCA_SN9C20X && INPUT]
           inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && USB_GSPCA && VIDEO_V4L2 && USB_GSPCA_SN9C20X && INPUT]
          }
         }
         config USB_GSPCA_SONIXB tristate {
          prompt "SONIX Bayer USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SONIXJ tristate {
          prompt "SONIX JPEG USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SPCA500 tristate {
          prompt "SPCA500 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SPCA501 tristate {
          prompt "SPCA501 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SPCA505 tristate {
          prompt "SPCA505 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SPCA506 tristate {
          prompt "SPCA506 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SPCA508 tristate {
          prompt "SPCA508 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SPCA561 tristate {
          prompt "SPCA561 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SQ905 tristate {
          prompt "SQ Technologies SQ905 based USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SQ905C tristate {
          prompt "SQ Technologies SQ905C based USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_STK014 tristate {
          prompt "Syntek DV4000 (STK014) USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_SUNPLUS tristate {
          prompt "SUNPLUS USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_T613 tristate {
          prompt "T613 (JPEG Compliance) USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_TV8532 tristate {
          prompt "TV8532 USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_VC032X tristate {
          prompt "VC032X USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
         config USB_GSPCA_ZC3XX tristate {
          prompt "ZC3XX USB Camera Driver" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
          depends on [VIDEO_V4L2 && USB_GSPCA]
          inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && USB_GSPCA]
         }
        }
       }
       config VIDEO_PVRUSB2 tristate {
        prompt "Hauppauge WinTV-PVR USB2 support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && VIDEO_MEDIA]
        depends on [VIDEO_V4L2 && I2C]
        depends on [VIDEO_MEDIA]
        select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && VIDEO_MEDIA]
        select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && VIDEO_MEDIA]
        select VIDEO_CX2341X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && VIDEO_MEDIA]
        select VIDEO_SAA711X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && VIDEO_MEDIA]
        select VIDEO_CX25840 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && VIDEO_MEDIA]
        select VIDEO_MSP3400 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && VIDEO_MEDIA]
        select VIDEO_WM8775 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && VIDEO_MEDIA]
        select VIDEO_CS53L32A if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && VIDEO_MEDIA]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && VIDEO_MEDIA]
        config VIDEO_PVRUSB2_SYSFS boolean {
         prompt "pvrusb2 sysfs support (EXPERIMENTAL)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
         default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
         depends on [VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
         inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
        }
        config VIDEO_PVRUSB2_DVB boolean {
         prompt "pvrusb2 ATSC/DVB support (EXPERIMENTAL)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL]
         default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL]
         depends on [VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL]
         select DVB_LGDT330X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL && !DVB_FE_CUSTOMISE]
         select DVB_S5H1409 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL && !DVB_FE_CUSTOMISE]
         select DVB_S5H1411 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL && !DVB_FE_CUSTOMISE]
         select DVB_TDA10048 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL && !DVB_FE_CUSTOMISE]
         select MEDIA_TUNER_TDA18271 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL && !MEDIA_TUNER_CUSTOMISE]
         select MEDIA_TUNER_SIMPLE if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL && !MEDIA_TUNER_CUSTOMISE]
         select MEDIA_TUNER_TDA8290 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL && !MEDIA_TUNER_CUSTOMISE]
         inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && DVB_CORE && EXPERIMENTAL]
        }
       }
       config VIDEO_PVRUSB2_DEBUGIFC boolean {
        prompt "pvrusb2 debug interface" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2_SYSFS]
        depends on [VIDEO_PVRUSB2_SYSFS]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2_SYSFS]
       }
       config VIDEO_HDPVR tristate {
        prompt "Hauppauge HD PVR support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV]
        depends on [VIDEO_DEV]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV]
       }
       config VIDEO_EM28XX tristate {
        prompt "Empia EM28xx USB video capture support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        depends on [VIDEO_DEV && I2C && INPUT]
        select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        select VIDEO_IR if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        select VIDEOBUF_VMALLOC if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        select VIDEO_SAA711X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT && VIDEO_HELPER_CHIPS_AUTO]
        select VIDEO_TVP5150 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT && VIDEO_HELPER_CHIPS_AUTO]
        select VIDEO_MSP3400 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT && VIDEO_HELPER_CHIPS_AUTO]
        select VIDEO_MT9V011 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT && VIDEO_HELPER_CHIPS_AUTO]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        config VIDEO_EM28XX_ALSA tristate {
         depends on [VIDEO_EM28XX && SND]
         select SND_PCM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_EM28XX && SND]
         prompt "Empia EM28xx ALSA audio module" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_EM28XX && SND]
         inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_EM28XX && SND]
        }
        config VIDEO_EM28XX_DVB tristate {
         prompt "DVB/ATSC Support for em28xx based TV cards" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_EM28XX && DVB_CORE]
         depends on [VIDEO_EM28XX && DVB_CORE]
         select DVB_LGDT330X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_EM28XX && DVB_CORE && !DVB_FE_CUSTOMISE]
         select DVB_ZL10353 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_EM28XX && DVB_CORE && !DVB_FE_CUSTOMISE]
         select DVB_TDA10023 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_EM28XX && DVB_CORE && !DVB_FE_CUSTOMISE]
         select VIDEOBUF_DVB if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_EM28XX && DVB_CORE]
         inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_EM28XX && DVB_CORE]
        }
       }
       config VIDEO_CX231XX tristate {
        prompt "Conexant cx231xx USB video capture support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        depends on [VIDEO_DEV && I2C && INPUT]
        select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        select VIDEO_TVEEPROM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        select VIDEO_IR if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        select VIDEOBUF_VMALLOC if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        select VIDEO_CX25840 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_DEV && I2C && INPUT]
        config VIDEO_CX231XX_ALSA tristate {
         prompt "Conexant Cx231xx ALSA audio module" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_CX231XX && SND]
         depends on [VIDEO_CX231XX && SND]
         select SND_PCM if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_CX231XX && SND]
         inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_CX231XX && SND]
        }
        config VIDEO_CX231XX_DVB tristate {
         prompt "DVB/ATSC Support for Cx231xx based TV cards" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_CX231XX && DVB_CORE]
         depends on [VIDEO_CX231XX && DVB_CORE]
         select VIDEOBUF_DVB if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_CX231XX && DVB_CORE]
         select MEDIA_TUNER_XC5000 if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_CX231XX && DVB_CORE && !DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_CX231XX && DVB_CORE]
        }
       }
       config VIDEO_USBVISION tristate {
        prompt "USB video devices based on Nogatech NT1003/1004/1005" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L2]
        depends on [I2C && VIDEO_V4L2]
        select VIDEO_TUNER if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L2]
        select VIDEO_SAA711X if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L2 && VIDEO_HELPER_CHIPS_AUTO]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L2]
       }
       config VIDEO_USBVIDEO tristate {
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB]
       }
       config USB_VICAM tristate {
        prompt "USB 3com HomeConnect (aka vicam) support (EXPERIMENTAL)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && EXPERIMENTAL]
        depends on [VIDEO_V4L1 && EXPERIMENTAL]
        select VIDEO_USBVIDEO if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && EXPERIMENTAL]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && EXPERIMENTAL]
       }
       config USB_IBMCAM tristate {
        prompt "USB IBM (Xirlink) C-it Camera support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        select VIDEO_USBVIDEO if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_KONICAWC tristate {
        prompt "USB Konica Webcam support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        select VIDEO_USBVIDEO if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_QUICKCAM_MESSENGER tristate {
        prompt "USB Logitech Quickcam Messenger (DEPRECATED)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        select VIDEO_USBVIDEO if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_ET61X251 tristate {
        prompt "USB ET61X[12]51 PC Camera Controller support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        depends on [VIDEO_V4L2]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
       }
       config VIDEO_OVCAMCHIP tristate {
        prompt "OmniVision Camera Chip support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L1]
        depends on [I2C && VIDEO_V4L1]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L1]
        config USB_W9968CF tristate {
         prompt "USB W996[87]CF JPEG Dual Mode Camera support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C && VIDEO_OVCAMCHIP]
         depends on [VIDEO_V4L1 && I2C && VIDEO_OVCAMCHIP]
         inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C && VIDEO_OVCAMCHIP]
        }
       }
       config USB_OV511 tristate {
        prompt "USB OV511 Camera support (DEPRECATED)" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_SE401 tristate {
        prompt "USB SE401 Camera support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_SN9C102 tristate {
        prompt "USB SN9C1xx PC Camera Controller support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        depends on [VIDEO_V4L2]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
       }
       config USB_STV680 tristate {
        prompt "USB STV680 (Pencam) Camera support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_ZC0301 tristate {
        prompt "USB ZC0301[P] Image Processor and Control Chip support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        depends on [VIDEO_V4L2]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
       }
       config USB_PWC tristate {
        prompt "USB Philips Cameras" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        config USB_PWC_DEBUG boolean {
         prompt "USB Philips Cameras verbose debug" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && USB_PWC]
         depends on [USB_PWC]
         inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && USB_PWC]
        }
       }
       config USB_PWC_INPUT_EVDEV boolean {
        prompt "USB Philips Cameras input events device support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && (USB_PWC="INPUT" || INPUT="y")]
        default [y] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && (USB_PWC="INPUT" || INPUT="y")]
        depends on [USB_PWC="INPUT" || INPUT="y"]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2 && V4L_USB_DRIVERS && USB && (USB_PWC="INPUT" || INPUT="y")]
       }
       config USB_ZR364XX tristate {
        prompt "USB ZR364XX Camera support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        depends on [VIDEO_V4L2]
        select VIDEOBUF_GEN if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        select VIDEOBUF_VMALLOC if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
       }
       config USB_STKWEBCAM tristate {
        prompt "USB Syntek DC1125 Camera support" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && EXPERIMENTAL]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && EXPERIMENTAL]
       }
       config USB_S2255 tristate {
        prompt "USB Sensoray 2255 video capture device" if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        depends on [VIDEO_V4L2]
        select VIDEOBUF_VMALLOC if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        default [n] if [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        inherited [MEDIA_SUPPORT && VIDEO_CAPTURE_DRIVERS && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
       }
      }
     }
    }
   }
   menuconfig RADIO_ADAPTERS boolean {
    prompt "Radio Adapters" if [MEDIA_SUPPORT && VIDEO_V4L2]
    depends on [VIDEO_V4L2]
    default [y] if [MEDIA_SUPPORT && VIDEO_V4L2]
    inherited [MEDIA_SUPPORT && VIDEO_V4L2]
    if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2] {
     config RADIO_CADET tristate {
      prompt "ADS Cadet AM/FM Tuner" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
     }
     config RADIO_RTRACK tristate {
      prompt "AIMSlab RadioTrack (aka RadioReveal) support" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      config RADIO_RTRACK_PORT hex {
       prompt "RadioTrack i/o port (0x20f or 0x30f)" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_RTRACK="y"]
       depends on [RADIO_RTRACK="y"]
       default [20f] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_RTRACK="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_RTRACK="y"]
      }
     }
     config RADIO_RTRACK2 tristate {
      prompt "AIMSlab RadioTrack II support" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      config RADIO_RTRACK2_PORT hex {
       prompt "RadioTrack II i/o port (0x20c or 0x30c)" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_RTRACK2="y"]
       depends on [RADIO_RTRACK2="y"]
       default [30c] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_RTRACK2="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_RTRACK2="y"]
      }
     }
     config RADIO_AZTECH tristate {
      prompt "Aztech/Packard Bell Radio" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      config RADIO_AZTECH_PORT hex {
       prompt "Aztech/Packard Bell I/O port (0x350 or 0x358)" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_AZTECH="y"]
       depends on [RADIO_AZTECH="y"]
       default [350] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_AZTECH="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_AZTECH="y"]
      }
     }
     config RADIO_GEMTEK tristate {
      prompt "GemTek Radio card (or compatible) support" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      config RADIO_GEMTEK_PORT hex {
       prompt "Fixed I/O port (0x20c, 0x30c, 0x24c, 0x34c, 0c24c or 0x28c)" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_GEMTEK="y"]
       depends on [RADIO_GEMTEK="y"]
       default [34c] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_GEMTEK="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_GEMTEK="y"]
      }
      config RADIO_GEMTEK_PROBE boolean {
       prompt "Automatic I/O port probing" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_GEMTEK="y"]
       depends on [RADIO_GEMTEK="y"]
       default [y] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_GEMTEK="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_GEMTEK="y"]
      }
     }
     config RADIO_GEMTEK_PCI tristate {
      prompt "GemTek PCI Radio Card support" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && PCI]
      depends on [VIDEO_V4L2 && PCI]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && PCI]
     }
     config RADIO_MAXIRADIO tristate {
      prompt "Guillemot MAXI Radio FM 2000 radio" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && PCI]
      depends on [VIDEO_V4L2 && PCI]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && PCI]
     }
     config RADIO_MAESTRO tristate {
      prompt "Maestro on board radio" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && PCI]
      depends on [VIDEO_V4L2 && PCI]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && PCI]
     }
     config RADIO_SF16FMI tristate {
      prompt "SF16FMI Radio" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
     }
     config RADIO_SF16FMR2 tristate {
      prompt "SF16FMR2 Radio" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
     }
     config RADIO_TERRATEC tristate {
      prompt "TerraTec ActiveRadio ISA Standalone" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      config RADIO_TERRATEC_PORT hex {
       prompt "Terratec i/o port (normally 0x590)" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TERRATEC="y"]
       depends on [RADIO_TERRATEC="y"]
       default [590] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TERRATEC="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TERRATEC="y"]
      }
     }
     config RADIO_TRUST tristate {
      prompt "Trust FM radio card" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      config RADIO_TRUST_PORT hex {
       prompt "Trust i/o port (usually 0x350 or 0x358)" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TRUST="y"]
       depends on [RADIO_TRUST="y"]
       default [350] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TRUST="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TRUST="y"]
      }
     }
     config RADIO_TYPHOON tristate {
      prompt "Typhoon Radio (a.k.a. EcoRadio)" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      config RADIO_TYPHOON_PORT hex {
       prompt "Typhoon I/O port (0x316 or 0x336)" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TYPHOON="y"]
       depends on [RADIO_TYPHOON="y"]
       default [316] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TYPHOON="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TYPHOON="y"]
      }
      config RADIO_TYPHOON_MUTEFREQ integer {
       prompt "Typhoon frequency set when muting the device (kHz)" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TYPHOON="y"]
       depends on [RADIO_TYPHOON="y"]
       default [87500] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TYPHOON="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TYPHOON="y"]
      }
     }
     config RADIO_ZOLTRIX tristate {
      prompt "Zoltrix Radio" if [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && ISA && VIDEO_V4L2]
      config RADIO_ZOLTRIX_PORT hex {
       prompt "ZOLTRIX I/O port (0x20c or 0x30c)" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_ZOLTRIX="y"]
       depends on [RADIO_ZOLTRIX="y"]
       default [20c] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_ZOLTRIX="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_ZOLTRIX="y"]
      }
     }
     config I2C_SI4713 tristate {
      prompt "I2C driver for Silicon Labs Si4713 device" if [MEDIA_SUPPORT && RADIO_ADAPTERS && I2C && VIDEO_V4L2]
      depends on [I2C && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && I2C && VIDEO_V4L2]
     }
     config RADIO_SI4713 tristate {
      prompt "Silicon Labs Si4713 FM Radio Transmitter support" if [MEDIA_SUPPORT && RADIO_ADAPTERS && I2C && VIDEO_V4L2]
      depends on [I2C && VIDEO_V4L2]
      select I2C_SI4713 if [MEDIA_SUPPORT && RADIO_ADAPTERS && I2C && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && I2C && VIDEO_V4L2]
     }
     config USB_DSBR tristate {
      prompt "D-Link/GemTek USB FM radio support" if [MEDIA_SUPPORT && RADIO_ADAPTERS && USB && VIDEO_V4L2]
      depends on [USB && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && USB && VIDEO_V4L2]
     }
     config RADIO_SI470X boolean {
      prompt "Silicon Labs Si470x FM Radio Receiver support" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2]
      depends on [VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2]
      config USB_SI470X tristate {
       prompt "Silicon Labs Si470x FM Radio Receiver support with USB" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && USB && RADIO_SI470X]
       depends on [USB && RADIO_SI470X]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && USB && RADIO_SI470X]
      }
      config I2C_SI470X tristate {
       prompt "Silicon Labs Si470x FM Radio Receiver support with I2C" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && I2C && RADIO_SI470X && !USB_SI470X]
       depends on [I2C && RADIO_SI470X && !USB_SI470X]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && I2C && RADIO_SI470X && !USB_SI470X]
      }
     }
     config USB_MR800 tristate {
      prompt "AverMedia MR 800 USB FM radio support" if [MEDIA_SUPPORT && RADIO_ADAPTERS && USB && VIDEO_V4L2]
      depends on [USB && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && USB && VIDEO_V4L2]
     }
     config RADIO_TEA5764 tristate {
      prompt "TEA5764 I2C FM radio support" if [MEDIA_SUPPORT && RADIO_ADAPTERS && I2C && VIDEO_V4L2]
      depends on [I2C && VIDEO_V4L2]
      inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && I2C && VIDEO_V4L2]
      config RADIO_TEA5764_XTAL boolean {
       prompt "TEA5764 crystal reference" if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TEA5764="y"]
       depends on [RADIO_TEA5764="y"]
       default [y] if [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TEA5764="y"]
       inherited [MEDIA_SUPPORT && RADIO_ADAPTERS && VIDEO_V4L2 && RADIO_TEA5764="y"]
      }
     }
    }
   }
   config DVB_MAX_ADAPTERS integer {
    prompt "maximum number of DVB/ATSC adapters" if [MEDIA_SUPPORT && DVB_CORE]
    depends on [DVB_CORE]
    default [8] if [MEDIA_SUPPORT && DVB_CORE]
    range [1 255] if [MEDIA_SUPPORT && DVB_CORE]
    inherited [MEDIA_SUPPORT && DVB_CORE]
   }
   config DVB_DYNAMIC_MINORS boolean {
    prompt "Dynamic DVB minor allocation" if [MEDIA_SUPPORT && DVB_CORE]
    depends on [DVB_CORE]
    default [n] if [MEDIA_SUPPORT && DVB_CORE]
    inherited [MEDIA_SUPPORT && DVB_CORE]
   }
   menuconfig DVB_CAPTURE_DRIVERS boolean {
    prompt "DVB/ATSC adapters" if [MEDIA_SUPPORT && DVB_CORE]
    depends on [DVB_CORE]
    default [y] if [MEDIA_SUPPORT && DVB_CORE]
    inherited [MEDIA_SUPPORT && DVB_CORE]
    if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE] {
     config TTPCI_EEPROM tristate {
      depends on [I2C]
      default [n] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
     }
     config DVB_AV7110 tristate {
      prompt "AV7110 cards" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV]
      depends on [DVB_CORE && PCI && I2C]
      select TTPCI_EEPROM if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV]
      select VIDEO_SAA7146_VV if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV]
      depends on [VIDEO_DEV]
      select DVB_VES1820 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
      select DVB_VES1X93 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
      select DVB_TDA8083 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
      select DVB_SP8870 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
      select DVB_STV0297 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
      select DVB_L64781 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_DEV]
      config DVB_AV7110_OSD boolean {
       prompt "AV7110 OSD support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110]
       depends on [DVB_AV7110]
       default [y] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110]
      }
     }
     config DVB_BUDGET_CORE tristate {
      prompt "SAA7146 DVB cards (aka Budget, Nova-PCI)" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      depends on [DVB_CORE && PCI && I2C]
      select VIDEO_SAA7146 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      select TTPCI_EEPROM if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      config DVB_BUDGET tristate {
       prompt "Budget cards" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C]
       depends on [DVB_BUDGET_CORE && I2C]
       select DVB_STV0299 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_VES1X93 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_VES1820 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_L64781 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_TDA8083 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_TDA10021 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_TDA10023 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_S5H1420 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_TDA10086 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_TDA826X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_LNBP21 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       select DVB_TDA1004X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && !DVB_FE_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C]
      }
      config DVB_BUDGET_CI tristate {
       prompt "Budget cards with onboard CI connector" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT]
       depends on [DVB_BUDGET_CORE && I2C]
       depends on [INPUT]
       select DVB_STV0297 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT && !DVB_FE_CUSTOMISE]
       select DVB_STV0299 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT && !DVB_FE_CUSTOMISE]
       select DVB_TDA1004X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT && !DVB_FE_CUSTOMISE]
       select DVB_STB0899 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT && !DVB_FE_CUSTOMISE]
       select DVB_STB6100 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT && !DVB_FE_CUSTOMISE]
       select DVB_LNBP21 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT && !DVB_FE_CUSTOMISE]
       select DVB_TDA10023 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_TDA827X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT && !MEDIA_TUNER_CUSTOMISE]
       select VIDEO_IR if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && INPUT]
      }
      config DVB_BUDGET_AV tristate {
       prompt "Budget cards with analog video inputs" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV]
       depends on [DVB_BUDGET_CORE && I2C]
       select VIDEO_SAA7146_VV if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV]
       depends on [VIDEO_DEV]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
       select DVB_STV0299 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
       select DVB_TDA1004X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
       select DVB_TDA10021 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
       select DVB_TDA10023 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
       select DVB_STB0899 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
       select DVB_TDA8261 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
       select DVB_TUA6100 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV && !DVB_FE_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && VIDEO_DEV]
      }
      config DVB_BUDGET_PATCH tristate {
       prompt "AV7110 cards with Budget Patch" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && DVB_AV7110]
       depends on [DVB_BUDGET_CORE && I2C]
       depends on [DVB_AV7110]
       select DVB_STV0299 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && DVB_AV7110 && !DVB_FE_CUSTOMISE]
       select DVB_VES1X93 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && DVB_AV7110 && !DVB_FE_CUSTOMISE]
       select DVB_TDA8083 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && DVB_AV7110 && !DVB_FE_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET_CORE && I2C && DVB_AV7110]
      }
     }
     config DVB_USB tristate {
      prompt "Support for various USB DVB devices" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && INPUT]
      depends on [DVB_CORE && USB && I2C && INPUT]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && INPUT]
      config DVB_USB_DEBUG boolean {
       prompt "Enable extended debug support for all DVB-USB devices" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_A800 tristate {
       prompt "AVerMedia AverTV DVB-T USB 2.0 (A800)" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MC if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_MT2060 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_DIBUSB_MB tristate {
       prompt "DiBcom USB DVB-T devices (based on the DiB3000M-B) (see help for device list)" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_DIB3000MB if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select MEDIA_TUNER_MT2060 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       config DVB_USB_DIBUSB_MB_FAULTY boolean {
        prompt "Support faulty USB IDs" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB_DIBUSB_MB]
        depends on [DVB_USB_DIBUSB_MB]
        inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB_DIBUSB_MB]
       }
      }
      config DVB_USB_DIBUSB_MC tristate {
       prompt "DiBcom USB DVB-T devices (based on the DiB3000M-C/P) (see help for device list)" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MC if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select MEDIA_TUNER_MT2060 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_DIB0700 tristate {
       prompt "DiBcom DiB0700 USB DVB devices (see help for supported devices)" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB7000P if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_DIB7000M if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_DIB8000 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_DIB3000MC if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_S5H1411 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_LGDT3305 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TUNER_DIB0070 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_MT2060 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_MT2266 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_XC2028 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_XC5000 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_MXL5007T if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_UMT_010 tristate {
       prompt "HanfTek UMT-010 DVB-T USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_DIB3000MC if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select MEDIA_TUNER_MT2060 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select DVB_MT352 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_CXUSB tristate {
       prompt "Conexant USB2.0 hybrid reference design support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_CX22702 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_LGDT330X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_ZL10353 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_DIB7000P if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_LGS8GL5 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TUNER_DIB0070 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_SIMPLE if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_XC2028 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_MXL5005S if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_M920X tristate {
       prompt "Uli m920x DVB-T USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_MT352 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TDA1004X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_QT1010 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_TDA827X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_GL861 tristate {
       prompt "Genesys Logic GL861 USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_ZL10353 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_QT1010 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_AU6610 tristate {
       prompt "Alcor Micro AU6610 USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_ZL10353 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_QT1010 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_DIGITV tristate {
       prompt "Nebula Electronics uDigiTV DVB-T USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_NXT6000 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_VP7045 tristate {
       prompt "TwinhanDTV Alpha/MagicBoxII, DNTV tinyUSB2, Beetle USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_VP702X tristate {
       prompt "TwinhanDTV StarBox and clones DVB-S USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_GP8PSK tristate {
       prompt "GENPIX 8PSK->USB module support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_NOVA_T_USB2 tristate {
       prompt "Hauppauge WinTV-NOVA-T usb2 DVB-T USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MC if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_MT2060 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_TTUSB2 tristate {
       prompt "Pinnacle 400e DVB-S USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_TDA10086 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_LNBP21 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TDA826X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_DTT200U tristate {
       prompt "WideView WT-200U and WT-220U (pen) DVB-T USB2.0 support (Yakumo/Hama/Typhoon/Yuan)" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_OPERA1 tristate {
       prompt "Opera1 DVB-S USB2.0 receiver" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_STV0299 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_AF9005 tristate {
       prompt "Afatech AF9005 DVB-T USB1.1 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL]
       depends on [DVB_USB && EXPERIMENTAL]
       select MEDIA_TUNER_MT2060 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_QT1010 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL]
       config DVB_USB_AF9005_REMOTE tristate {
        prompt "Afatech AF9005 default remote control support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB_AF9005]
        depends on [DVB_USB_AF9005]
        inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB_AF9005]
       }
      }
      config DVB_USB_DW2102 tristate {
       prompt "DvbWorld & TeVii DVB-S/S2 USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_STV0299 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_STV0288 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_STB6000 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_CX24116 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_SI21XX if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TDA10021 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_MT312 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_ZL10039 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_CINERGY_T2 tristate {
       prompt "Terratec CinergyT2/qanu USB 2.0 DVB-T receiver" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_ANYSEE tristate {
       prompt "Anysee DVB-T/C USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_ZL10353 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TDA10023 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_DTV5100 tristate {
       prompt "AME DTV-5100 USB2.0 DVB-T support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_ZL10353 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_QT1010 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_AF9015 tristate {
       prompt "Afatech AF9015 DVB-T USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_AF9013 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select MEDIA_TUNER_MT2060 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_QT1010 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_TDA18271 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_MXL5005S if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       select MEDIA_TUNER_MC44S803 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_CE6230 tristate {
       prompt "Intel CE6230 DVB-T USB2.0 support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL]
       depends on [DVB_USB && EXPERIMENTAL]
       select DVB_ZL10353 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL]
       select MEDIA_TUNER_MXL5005S if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL && !MEDIA_TUNER_CUSTOMISE]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL]
      }
      config DVB_USB_FRIIO tristate {
       prompt "Friio ISDB-T USB2.0 Receiver support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
     }
     config DVB_TTUSB_BUDGET tristate {
      prompt "Technotrend/Hauppauge Nova-USB devices" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && PCI]
      depends on [DVB_CORE && USB && I2C && PCI]
      select DVB_CX22700 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && PCI && !DVB_FE_CUSTOMISE]
      select DVB_TDA1004X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && PCI && !DVB_FE_CUSTOMISE]
      select DVB_VES1820 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && PCI && !DVB_FE_CUSTOMISE]
      select DVB_TDA8083 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && PCI && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && PCI && !DVB_FE_CUSTOMISE]
      select DVB_STV0297 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && PCI && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && PCI && !DVB_FE_CUSTOMISE]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && PCI]
     }
     config DVB_TTUSB_DEC tristate {
      prompt "Technotrend/Hauppauge USB DEC devices" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && INPUT && PCI]
      depends on [DVB_CORE && USB && INPUT && PCI]
      select CRC32 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && INPUT && PCI]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && INPUT && PCI]
     }
     config SMS_SIANO_MDTV tristate {
      prompt "Siano SMS1xxx based MDTV receiver" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && INPUT && HAS_DMA]
      depends on [DVB_CORE && INPUT && HAS_DMA]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && INPUT && HAS_DMA]
      if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && SMS_SIANO_MDTV] {
       menu "Siano module components" {
        depends on [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && SMS_SIANO_MDTV]
        config SMS_USB_DRV tristate {
         prompt "USB interface support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && SMS_SIANO_MDTV && DVB_CORE && USB]
         depends on [DVB_CORE && USB]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && SMS_SIANO_MDTV && DVB_CORE && USB]
        }
        config SMS_SDIO_DRV tristate {
         prompt "SDIO interface support" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && SMS_SIANO_MDTV && DVB_CORE && MMC]
         depends on [DVB_CORE && MMC]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && SMS_SIANO_MDTV && DVB_CORE && MMC]
        }
       }
      }
     }
     config DVB_B2C2_FLEXCOP tristate {
      prompt "Technisat/B2C2 FlexCopII(b) and FlexCopIII adapters" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      depends on [DVB_CORE && I2C]
      select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_MT352 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_MT312 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_NXT200X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_STV0297 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_BCM3510 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_LGDT330X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_S5H1420 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_TUNER_ITD1000 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_ISL6421 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_CX24123 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select MEDIA_TUNER_SIMPLE if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !MEDIA_TUNER_CUSTOMISE]
      select DVB_TUNER_CX24113 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      config DVB_B2C2_FLEXCOP_PCI tristate {
       prompt "Technisat/B2C2 Air/Sky/Cable2PC PCI" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP && PCI && I2C]
       depends on [DVB_B2C2_FLEXCOP && PCI && I2C]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP && PCI && I2C]
      }
      config DVB_B2C2_FLEXCOP_USB tristate {
       prompt "Technisat/B2C2 Air/Sky/Cable2PC USB" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP && USB && I2C]
       depends on [DVB_B2C2_FLEXCOP && USB && I2C]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP && USB && I2C]
      }
      config DVB_B2C2_FLEXCOP_DEBUG boolean {
       prompt "Enable debug for the B2C2 FlexCop drivers" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP]
       depends on [DVB_B2C2_FLEXCOP]
       inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP]
      }
     }
     config DVB_BT8XX tristate {
      prompt "BT8xx based PCI cards" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848]
      depends on [DVB_CORE && PCI && I2C && VIDEO_BT848]
      select DVB_MT352 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_SP887X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_NXT6000 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_CX24110 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_OR51211 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_LGDT330X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_ZL10353 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select MEDIA_TUNER_SIMPLE if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !MEDIA_TUNER_CUSTOMISE]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848]
     }
     config DVB_PLUTO2 tristate {
      prompt "Pluto2 cards" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      depends on [DVB_CORE && PCI && I2C]
      select I2C_ALGOBIT if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      select DVB_TDA1004X if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
     }
     config DVB_DM1105 tristate {
      prompt "SDMC DM1105 based PCI cards" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && INPUT]
      depends on [DVB_CORE && PCI && I2C]
      depends on [INPUT]
      select DVB_PLL if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_STV0288 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_STB6000 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_CX24116 if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_SI21XX if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select VIDEO_IR if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && INPUT]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && INPUT]
     }
     config DVB_FIREDTV tristate {
      prompt "FireDTV and FloppyDTV" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && IEEE1394]
      depends on [DVB_CORE && IEEE1394]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && IEEE1394]
      if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FIREDTV] {
       config DVB_FIREDTV_IEEE1394 boolean {
        default [IEEE1394] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FIREDTV]
        inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FIREDTV]
       }
       config DVB_FIREDTV_INPUT boolean {
        default [INPUT="y" || INPUT="m" && DVB_FIREDTV="m"] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FIREDTV]
        inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FIREDTV]
       }
      }
     }
     config DVB_PT1 tristate {
      prompt "PT1 cards" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      depends on [DVB_CORE && PCI && I2C]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
     }
     config DVB_FE_CUSTOMISE boolean {
      prompt "Customise the frontend modules to build" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE]
      depends on [DVB_CORE]
      default [N] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE]
      inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE]
      if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FE_CUSTOMISE] {
       menu "Customise DVB Frontends" {
        depends on [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FE_CUSTOMISE]
        config DVB_STB0899 tristate {
         prompt "STB0899 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_STB6100 tristate {
         prompt "STB6100 based tuners" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_STV090x tristate {
         prompt "STV0900/STV0903(A/B) based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_STV6110x tristate {
         prompt "STV6110/(A) based tuners" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_CX24110 tristate {
         prompt "Conexant CX24110 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_CX24123 tristate {
         prompt "Conexant CX24123 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_MT312 tristate {
         prompt "Zarlink VP310/MT312/ZL10313 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_ZL10036 tristate {
         prompt "Zarlink ZL10036 silicon tuner" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_ZL10039 tristate {
         prompt "Zarlink ZL10039 silicon tuner" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_S5H1420 tristate {
         prompt "Samsung S5H1420 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_STV0288 tristate {
         prompt "ST STV0288 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_STB6000 tristate {
         prompt "ST STB6000 silicon tuner" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_STV0299 tristate {
         prompt "ST STV0299 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_STV6110 tristate {
         prompt "ST STV6110 silicon tuner" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_STV0900 tristate {
         prompt "ST STV0900 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TDA8083 tristate {
         prompt "Philips TDA8083 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TDA10086 tristate {
         prompt "Philips TDA10086 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TDA8261 tristate {
         prompt "Philips TDA8261 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_VES1X93 tristate {
         prompt "VLSI VES1893 or VES1993 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TUNER_ITD1000 tristate {
         prompt "Integrant ITD1000 Zero IF tuner for DVB-S/DSS" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TUNER_CX24113 tristate {
         prompt "Conexant CX24113/CX24128 tuner for DVB-S/DSS" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TDA826X tristate {
         prompt "Philips TDA826X silicon tuner" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TUA6100 tristate {
         prompt "Infineon TUA6100 PLL" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_CX24116 tristate {
         prompt "Conexant CX24116 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_SI21XX tristate {
         prompt "Silicon Labs SI21XX based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_SP8870 tristate {
         prompt "Spase sp8870 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_SP887X tristate {
         prompt "Spase sp887x based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_CX22700 tristate {
         prompt "Conexant CX22700 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_CX22702 tristate {
         prompt "Conexant cx22702 demodulator (OFDM)" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_DRX397XD tristate {
         prompt "Micronas DRX3975D/DRX3977D based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_L64781 tristate {
         prompt "LSI L64781" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TDA1004X tristate {
         prompt "Philips TDA10045H/TDA10046H based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_NXT6000 tristate {
         prompt "NxtWave Communications NXT6000 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_MT352 tristate {
         prompt "Zarlink MT352 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_ZL10353 tristate {
         prompt "Zarlink ZL10353 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_DIB3000MB tristate {
         prompt "DiBcom 3000M-B" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_DIB3000MC tristate {
         prompt "DiBcom 3000P/M-C" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_DIB7000M tristate {
         prompt "DiBcom 7000MA/MB/PA/PB/MC" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_DIB7000P tristate {
         prompt "DiBcom 7000PC" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TDA10048 tristate {
         prompt "Philips TDA10048HN based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_AF9013 tristate {
         prompt "Afatech AF9013 demodulator" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_VES1820 tristate {
         prompt "VLSI VES1820 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TDA10021 tristate {
         prompt "Philips TDA10021 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TDA10023 tristate {
         prompt "Philips TDA10023 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_STV0297 tristate {
         prompt "ST STV0297 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_NXT200X tristate {
         prompt "NxtWave Communications NXT2002/NXT2004 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_OR51211 tristate {
         prompt "Oren OR51211 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_OR51132 tristate {
         prompt "Oren OR51132 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_BCM3510 tristate {
         prompt "Broadcom BCM3510" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_LGDT330X tristate {
         prompt "LG Electronics LGDT3302/LGDT3303 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_LGDT3304 tristate {
         prompt "LG Electronics LGDT3304" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_LGDT3305 tristate {
         prompt "LG Electronics LGDT3305 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_S5H1409 tristate {
         prompt "Samsung S5H1409 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_AU8522 tristate {
         prompt "Auvitek AU8522 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C && VIDEO_V4L2]
         depends on [DVB_CORE && I2C && VIDEO_V4L2]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && VIDEO_V4L2 && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C && VIDEO_V4L2]
        }
        config DVB_S5H1411 tristate {
         prompt "Samsung S5H1411 based" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_S921 tristate {
         prompt "Sharp S921 tuner" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_DIB8000 tristate {
         prompt "DiBcom 8000MB/MC" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_PLL tristate {
         prompt "Generic I2C PLL based tuners" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_TUNER_DIB0070 tristate {
         prompt "DiBcom DiB0070 silicon base-band tuner" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FE_CUSTOMISE && I2C]
         depends on [I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FE_CUSTOMISE && I2C]
        }
        config DVB_LNBP21 tristate {
         prompt "LNBP21/LNBH24 SEC controllers" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_ISL6405 tristate {
         prompt "ISL6405 SEC controller" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_ISL6421 tristate {
         prompt "ISL6421 SEC controller" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_ISL6423 tristate {
         prompt "ISL6423 SEC controller" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_LGS8GL5 tristate {
         prompt "Silicon Legend LGS-8GL5 demodulator (OFDM)" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_LGS8GXX tristate {
         prompt "Legend Silicon LGS8913/LGS8GL5/LGS8GXX DMB-TH demodulator" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
         depends on [DVB_CORE && I2C]
         default [m] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_FE_CUSTOMISE && DVB_CORE && I2C]
        }
        config DVB_DUMMY_FE tristate {
         prompt "Dummy frontend driver" if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FE_CUSTOMISE]
         default [n] if [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FE_CUSTOMISE]
         inherited [MEDIA_SUPPORT && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_FE_CUSTOMISE]
        }
       }
      }
     }
    }
   }
   config DAB boolean {
    prompt "DAB adapters" if [MEDIA_SUPPORT]
    inherited [MEDIA_SUPPORT]
    if [MEDIA_SUPPORT && DAB] {
     config USB_DABUSB tristate {
      prompt "DABUSB driver" if [MEDIA_SUPPORT && DAB && USB]
      depends on [USB]
      inherited [MEDIA_SUPPORT && DAB && USB]
     }
    }
   }
  }
 }
 menu "Graphics support" {
  depends on [HAS_IOMEM]
  menuconfig AGP tristate {
   prompt "/dev/agpgart (AGP Support)" if [HAS_IOMEM && (ALPHA || IA64 || PARISC || PPC || X86) && PCI]
   depends on [ALPHA || IA64 || PARISC || PPC || X86]
   depends on [PCI]
   inherited [HAS_IOMEM && (ALPHA || IA64 || PARISC || PPC || X86) && PCI]
   config AGP_ALI tristate {
    prompt "ALI chipset support" if [HAS_IOMEM && AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [HAS_IOMEM && AGP && X86_32]
   }
   config AGP_ATI tristate {
    prompt "ATI chipset support" if [HAS_IOMEM && AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [HAS_IOMEM && AGP && X86_32]
   }
   config AGP_AMD tristate {
    prompt "AMD Irongate, 761, and 762 chipset support" if [HAS_IOMEM && AGP && (X86_32 || ALPHA)]
    depends on [AGP && (X86_32 || ALPHA)]
    inherited [HAS_IOMEM && AGP && (X86_32 || ALPHA)]
   }
   config AGP_AMD64 tristate {
    prompt "AMD Opteron/Athlon64 on-CPU GART support" if [HAS_IOMEM && AGP && X86 && !GART_IOMMU]
    depends on [AGP && X86]
    default [y] if [HAS_IOMEM && AGP && X86 && GART_IOMMU]
    inherited [HAS_IOMEM && AGP && X86]
   }
   config AGP_INTEL tristate {
    prompt "Intel 440LX/BX/GX, I8xx and E7x05 chipset support" if [HAS_IOMEM && AGP && X86]
    depends on [AGP && X86]
    inherited [HAS_IOMEM && AGP && X86]
   }
   config AGP_NVIDIA tristate {
    prompt "NVIDIA nForce/nForce2 chipset support" if [HAS_IOMEM && AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [HAS_IOMEM && AGP && X86_32]
   }
   config AGP_SIS tristate {
    prompt "SiS chipset support" if [HAS_IOMEM && AGP && X86]
    depends on [AGP && X86]
    inherited [HAS_IOMEM && AGP && X86]
   }
   config AGP_SWORKS tristate {
    prompt "Serverworks LE/HE chipset support" if [HAS_IOMEM && AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [HAS_IOMEM && AGP && X86_32]
   }
   config AGP_VIA tristate {
    prompt "VIA chipset support" if [HAS_IOMEM && AGP && X86]
    depends on [AGP && X86]
    inherited [HAS_IOMEM && AGP && X86]
   }
   config AGP_I460 tristate {
    prompt "Intel 460GX chipset support" if [HAS_IOMEM && AGP && (IA64_DIG || IA64_GENERIC)]
    depends on [AGP && (IA64_DIG || IA64_GENERIC)]
    inherited [HAS_IOMEM && AGP && (IA64_DIG || IA64_GENERIC)]
   }
   config AGP_HP_ZX1 tristate {
    prompt "HP ZX1 chipset AGP support" if [HAS_IOMEM && AGP && (IA64_HP_ZX1 || IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)]
    depends on [AGP && (IA64_HP_ZX1 || IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)]
    inherited [HAS_IOMEM && AGP && (IA64_HP_ZX1 || IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)]
   }
   config AGP_PARISC tristate {
    prompt "HP Quicksilver AGP support" if [HAS_IOMEM && AGP && PARISC && 64BIT]
    depends on [AGP && PARISC && 64BIT]
    inherited [HAS_IOMEM && AGP && PARISC && 64BIT]
   }
   config AGP_ALPHA_CORE tristate {
    prompt "Alpha AGP support" if [HAS_IOMEM && AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
    depends on [AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
    default [AGP] if [HAS_IOMEM && AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
    inherited [HAS_IOMEM && AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
   }
   config AGP_UNINORTH tristate {
    prompt "Apple UniNorth & U3 AGP support" if [HAS_IOMEM && AGP && PPC_PMAC]
    depends on [AGP && PPC_PMAC]
    inherited [HAS_IOMEM && AGP && PPC_PMAC]
   }
   config AGP_EFFICEON tristate {
    prompt "Transmeta Efficeon support" if [HAS_IOMEM && AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [HAS_IOMEM && AGP && X86_32]
   }
   config AGP_SGI_TIOCA tristate {
    prompt "SGI TIO chipset AGP support" if [HAS_IOMEM && AGP && (IA64_SGI_SN2 || IA64_GENERIC)]
    depends on [AGP && (IA64_SGI_SN2 || IA64_GENERIC)]
    inherited [HAS_IOMEM && AGP && (IA64_SGI_SN2 || IA64_GENERIC)]
   }
  }
  config VGA_ARB boolean {
   prompt "VGA Arbitration" if [HAS_IOMEM && PCI && EMBEDDED]
   default [y] if [HAS_IOMEM && PCI]
   depends on [PCI]
   inherited [HAS_IOMEM && PCI]
  }
  menuconfig DRM tristate {
   prompt "Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)" if [HAS_IOMEM && (AGP || AGP="n") && PCI && !EMULATED_CMPXCHG && MMU]
   depends on [(AGP || AGP="n") && PCI && !EMULATED_CMPXCHG && MMU]
   select I2C if [HAS_IOMEM && (AGP || AGP="n") && PCI && !EMULATED_CMPXCHG && MMU]
   select I2C_ALGOBIT if [HAS_IOMEM && (AGP || AGP="n") && PCI && !EMULATED_CMPXCHG && MMU]
   inherited [HAS_IOMEM && (AGP || AGP="n") && PCI && !EMULATED_CMPXCHG && MMU]
   config DRM_KMS_HELPER tristate {
    depends on [DRM]
    select FB if [HAS_IOMEM && DRM]
    select FRAMEBUFFER_CONSOLE if [HAS_IOMEM && DRM && !EMBEDDED]
    inherited [HAS_IOMEM && DRM]
   }
   config DRM_TTM tristate {
    depends on [DRM]
    inherited [HAS_IOMEM && DRM]
   }
   config DRM_TDFX tristate {
    prompt "3dfx Banshee/Voodoo3+" if [HAS_IOMEM && DRM && PCI]
    depends on [DRM && PCI]
    inherited [HAS_IOMEM && DRM && PCI]
   }
   config DRM_R128 tristate {
    prompt "ATI Rage 128" if [HAS_IOMEM && DRM && PCI]
    depends on [DRM && PCI]
    select FW_LOADER if [HAS_IOMEM && DRM && PCI]
    inherited [HAS_IOMEM && DRM && PCI]
   }
   config DRM_RADEON tristate {
    prompt "ATI Radeon" if [HAS_IOMEM && DRM && PCI]
    depends on [DRM && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && DRM && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && DRM && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && DRM && PCI]
    select FW_LOADER if [HAS_IOMEM && DRM && PCI]
    select DRM_KMS_HELPER if [HAS_IOMEM && DRM && PCI]
    select DRM_TTM if [HAS_IOMEM && DRM && PCI]
    inherited [HAS_IOMEM && DRM && PCI]
   }
   config DRM_I810 tristate {
    prompt "Intel I810" if [HAS_IOMEM && DRM && AGP && AGP_INTEL]
    depends on [DRM && AGP && AGP_INTEL]
    inherited [HAS_IOMEM && DRM && AGP && AGP_INTEL]
   }
   choice tristate optional {
    prompt "Intel 830M, 845G, 852GM, 855GM, 865G" if [HAS_IOMEM && DRM && AGP && AGP_INTEL]
    depends on [DRM && AGP && AGP_INTEL]
    config DRM_I830 tristate {
     prompt "i830 driver" if [<choice>]
     inherited [<choice>]
    }
    config DRM_I915 tristate {
     prompt "i915 driver" if [<choice> && AGP_INTEL]
     depends on [AGP_INTEL]
     select SHMEM if [<choice> && AGP_INTEL]
     select DRM_KMS_HELPER if [<choice> && AGP_INTEL]
     select FB_CFB_FILLRECT if [<choice> && AGP_INTEL]
     select FB_CFB_COPYAREA if [<choice> && AGP_INTEL]
     select FB_CFB_IMAGEBLIT if [<choice> && AGP_INTEL]
     select VIDEO_OUTPUT_CONTROL if [<choice> && AGP_INTEL && ACPI]
     select BACKLIGHT_CLASS_DEVICE if [<choice> && AGP_INTEL && ACPI]
     select INPUT if [<choice> && AGP_INTEL && ACPI]
     select ACPI_VIDEO if [<choice> && AGP_INTEL && ACPI]
     select ACPI_BUTTON if [<choice> && AGP_INTEL && ACPI]
     inherited [<choice> && AGP_INTEL]
     config DRM_I915_KMS boolean {
      prompt "Enable modesetting on intel by default" if [<choice> && DRM_I915]
      depends on [DRM_I915]
      inherited [<choice> && DRM_I915]
     }
    }
   }
   config DRM_MGA tristate {
    prompt "Matrox g200/g400" if [HAS_IOMEM && DRM]
    depends on [DRM]
    select FW_LOADER if [HAS_IOMEM && DRM]
    inherited [HAS_IOMEM && DRM]
   }
   config DRM_SIS tristate {
    prompt "SiS video cards" if [HAS_IOMEM && DRM && AGP && (FB_SIS || FB_SIS="n")]
    depends on [DRM && AGP]
    depends on [FB_SIS || FB_SIS="n"]
    inherited [HAS_IOMEM && DRM && AGP && (FB_SIS || FB_SIS="n")]
   }
   config DRM_VIA tristate {
    prompt "Via unichrome video cards" if [HAS_IOMEM && DRM]
    depends on [DRM]
    inherited [HAS_IOMEM && DRM]
   }
   config DRM_SAVAGE tristate {
    prompt "Savage video cards" if [HAS_IOMEM && DRM]
    depends on [DRM]
    inherited [HAS_IOMEM && DRM]
   }
  }
  config VGASTATE tristate {
   default [n] if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  config VIDEO_OUTPUT_CONTROL tristate {
   prompt "Lowlevel video output switch controls" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  menuconfig FB tristate {
   prompt "Support for frame buffer devices" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config FIRMWARE_EDID boolean {
    prompt "Enable firmware EDID" if [HAS_IOMEM && FB]
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_DDC tristate {
    depends on [FB]
    select I2C_ALGOBIT if [HAS_IOMEM && FB]
    select I2C if [HAS_IOMEM && FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_BOOT_VESA_SUPPORT boolean {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_CFB_FILLRECT tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_CFB_COPYAREA tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_CFB_IMAGEBLIT tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_CFB_REV_PIXELS_IN_BYTE boolean {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_SYS_FILLRECT tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_SYS_COPYAREA tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_SYS_IMAGEBLIT tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   menuconfig FB_FOREIGN_ENDIAN boolean {
    prompt "Framebuffer foreign endianness support" if [HAS_IOMEM && FB]
    depends on [FB]
    inherited [HAS_IOMEM && FB]
    choice boolean {
     prompt "Choice endianness support" if [HAS_IOMEM && FB_FOREIGN_ENDIAN]
     depends on [FB_FOREIGN_ENDIAN]
     config FB_BOTH_ENDIAN boolean {
      prompt "Support for Big- and Little-Endian framebuffers" if [<choice>]
      inherited [<choice>]
     }
     config FB_BIG_ENDIAN boolean {
      prompt "Support for Big-Endian framebuffers only" if [<choice>]
      inherited [<choice>]
     }
     config FB_LITTLE_ENDIAN boolean {
      prompt "Support for Little-Endian framebuffers only" if [<choice>]
      inherited [<choice>]
     }
    }
   }
   config FB_SYS_FOPS tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_DEFERRED_IO boolean {
    depends on [FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_HECUBA tristate {
    depends on [FB]
    depends on [FB_DEFERRED_IO]
    inherited [HAS_IOMEM && FB && FB_DEFERRED_IO]
   }
   config FB_SVGALIB tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_MACMODES tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_BACKLIGHT boolean {
    depends on [FB]
    select BACKLIGHT_LCD_SUPPORT if [HAS_IOMEM && FB]
    select BACKLIGHT_CLASS_DEVICE if [HAS_IOMEM && FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_MODE_HELPERS boolean {
    prompt "Enable Video Mode Handling Helpers" if [HAS_IOMEM && FB]
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_TILEBLITTING boolean {
    prompt "Enable Tile Blitting Support" if [HAS_IOMEM && FB]
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_CIRRUS tristate {
    prompt "Cirrus Logic support" if [HAS_IOMEM && FB && (ZORRO || PCI)]
    depends on [FB && (ZORRO || PCI)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (ZORRO || PCI)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (ZORRO || PCI)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (ZORRO || PCI)]
    inherited [HAS_IOMEM && FB && (ZORRO || PCI)]
   }
   config FB_PM2 tristate {
    prompt "Permedia2 support" if [HAS_IOMEM && FB && (AMIGA && BROKEN || PCI)]
    depends on [FB && (AMIGA && BROKEN || PCI)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (AMIGA && BROKEN || PCI)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (AMIGA && BROKEN || PCI)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (AMIGA && BROKEN || PCI)]
    inherited [HAS_IOMEM && FB && (AMIGA && BROKEN || PCI)]
    config FB_PM2_FIFO_DISCONNECT boolean {
     prompt "enable FIFO disconnect feature" if [HAS_IOMEM && FB_PM2 && PCI]
     depends on [FB_PM2 && PCI]
     inherited [HAS_IOMEM && FB_PM2 && PCI]
    }
   }
   config FB_ARMCLCD tristate {
    prompt "ARM PrimeCell PL110 support" if [HAS_IOMEM && FB && ARM && ARM_AMBA]
    depends on [FB && ARM && ARM_AMBA]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARM && ARM_AMBA]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARM && ARM_AMBA]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARM && ARM_AMBA]
    inherited [HAS_IOMEM && FB && ARM && ARM_AMBA]
    choice boolean {
     depends on [FB_ARMCLCD && (ARCH_LH7A40X || ARCH_LH7952X)]
     prompt "LCD Panel" if [HAS_IOMEM && FB_ARMCLCD && (ARCH_LH7A40X || ARCH_LH7952X)]
     default [FB_ARMCLCD_SHARP_LQ035Q7DB02] if [HAS_IOMEM && FB_ARMCLCD && (ARCH_LH7A40X || ARCH_LH7952X)]
     config FB_ARMCLCD_SHARP_LQ035Q7DB02_HRTFT boolean {
      prompt "LogicPD LCD 3.5\" QVGA w/HRTFT IC" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ057Q3DC02 boolean {
      prompt "LogicPD LCD 5.7\" QVGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ64D343 boolean {
      prompt "LogicPD LCD 6.4\" VGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ10D368 boolean {
      prompt "LogicPD LCD 10.4\" VGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ121S1DG41 boolean {
      prompt "LogicPD LCD 12.1\" SVGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_AUO_A070VW01_WIDE boolean {
      prompt "AU Optronics A070VW01 LCD 7.0\" WIDE" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_HITACHI boolean {
      prompt "Hitachi Wide Screen 800x480" if [<choice>]
      inherited [<choice>]
     }
    }
   }
   config FB_ACORN boolean {
    prompt "Acorn VIDC support" if [HAS_IOMEM && FB="y" && ARM && ARCH_ACORN]
    depends on [FB="y" && ARM && ARCH_ACORN]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ARM && ARCH_ACORN]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ARM && ARCH_ACORN]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ARM && ARCH_ACORN]
    inherited [HAS_IOMEM && FB="y" && ARM && ARCH_ACORN]
   }
   config FB_CLPS711X boolean {
    prompt "CLPS711X LCD support" if [HAS_IOMEM && FB="y" && ARM && ARCH_CLPS711X]
    depends on [FB="y" && ARM && ARCH_CLPS711X]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ARM && ARCH_CLPS711X]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ARM && ARCH_CLPS711X]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ARM && ARCH_CLPS711X]
    inherited [HAS_IOMEM && FB="y" && ARM && ARCH_CLPS711X]
   }
   config FB_SA1100 boolean {
    prompt "SA-1100 LCD support" if [HAS_IOMEM && FB="y" && ARM && ARCH_SA1100]
    depends on [FB="y" && ARM && ARCH_SA1100]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ARM && ARCH_SA1100]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ARM && ARCH_SA1100]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ARM && ARCH_SA1100]
    inherited [HAS_IOMEM && FB="y" && ARM && ARCH_SA1100]
   }
   config FB_IMX tristate {
    prompt "Motorola i.MX LCD support" if [HAS_IOMEM && FB && (ARCH_MX1 || ARCH_MX2)]
    depends on [FB && (ARCH_MX1 || ARCH_MX2)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (ARCH_MX1 || ARCH_MX2)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (ARCH_MX1 || ARCH_MX2)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (ARCH_MX1 || ARCH_MX2)]
    inherited [HAS_IOMEM && FB && (ARCH_MX1 || ARCH_MX2)]
   }
   config FB_CYBER2000 tristate {
    prompt "CyberPro 2000/2010/5000 support" if [HAS_IOMEM && FB && PCI && (BROKEN || !SPARC64)]
    depends on [FB && PCI && (BROKEN || !SPARC64)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI && (BROKEN || !SPARC64)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI && (BROKEN || !SPARC64)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI && (BROKEN || !SPARC64)]
    inherited [HAS_IOMEM && FB && PCI && (BROKEN || !SPARC64)]
   }
   config FB_APOLLO boolean {
    depends on [FB="y" && APOLLO]
    default [y] if [HAS_IOMEM && FB="y" && APOLLO]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && APOLLO]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && APOLLO]
    inherited [HAS_IOMEM && FB="y" && APOLLO]
   }
   config FB_Q40 boolean {
    depends on [FB="y" && Q40]
    default [y] if [HAS_IOMEM && FB="y" && Q40]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && Q40]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && Q40]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && Q40]
    inherited [HAS_IOMEM && FB="y" && Q40]
   }
   config FB_AMIGA tristate {
    prompt "Amiga native chipset support" if [HAS_IOMEM && FB && AMIGA]
    depends on [FB && AMIGA]
    inherited [HAS_IOMEM && FB && AMIGA]
    config FB_AMIGA_OCS boolean {
     prompt "Amiga OCS chipset support" if [HAS_IOMEM && FB_AMIGA]
     depends on [FB_AMIGA]
     inherited [HAS_IOMEM && FB_AMIGA]
    }
    config FB_AMIGA_ECS boolean {
     prompt "Amiga ECS chipset support" if [HAS_IOMEM && FB_AMIGA]
     depends on [FB_AMIGA]
     inherited [HAS_IOMEM && FB_AMIGA]
    }
    config FB_AMIGA_AGA boolean {
     prompt "Amiga AGA chipset support" if [HAS_IOMEM && FB_AMIGA]
     depends on [FB_AMIGA]
     inherited [HAS_IOMEM && FB_AMIGA]
    }
   }
   config FB_FM2 boolean {
    prompt "Amiga FrameMaster II/Rainbow II support" if [HAS_IOMEM && FB="y" && ZORRO]
    depends on [FB="y" && ZORRO]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ZORRO]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ZORRO]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ZORRO]
    inherited [HAS_IOMEM && FB="y" && ZORRO]
   }
   config FB_ARC tristate {
    prompt "Arc Monochrome LCD board support" if [HAS_IOMEM && FB && X86]
    depends on [FB && X86]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB && X86]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB && X86]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB && X86]
    select FB_SYS_FOPS if [HAS_IOMEM && FB && X86]
    inherited [HAS_IOMEM && FB && X86]
   }
   config FB_ATARI boolean {
    prompt "Atari native chipset support" if [HAS_IOMEM && FB="y" && ATARI]
    depends on [FB="y" && ATARI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ATARI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ATARI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ATARI]
    inherited [HAS_IOMEM && FB="y" && ATARI]
   }
   config FB_OF boolean {
    prompt "Open Firmware frame buffer device support" if [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    depends on [FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    inherited [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
   }
   config FB_CONTROL boolean {
    prompt "Apple \"control\" display support" if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    depends on [FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    inherited [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
   }
   config FB_PLATINUM boolean {
    prompt "Apple \"platinum\" display support" if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    depends on [FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    inherited [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
   }
   config FB_VALKYRIE boolean {
    prompt "Apple \"valkyrie\" display support" if [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
    depends on [FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
    inherited [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
   }
   config FB_CT65550 boolean {
    prompt "Chips 65550 display support" if [HAS_IOMEM && FB="y" && PPC32 && PCI]
    depends on [FB="y" && PPC32 && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PPC32 && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PPC32 && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PPC32 && PCI]
    inherited [HAS_IOMEM && FB="y" && PPC32 && PCI]
   }
   config FB_ASILIANT boolean {
    prompt "Asiliant (Chips) 69000 display support" if [HAS_IOMEM && FB="y" && PCI]
    depends on [FB="y" && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PCI]
    inherited [HAS_IOMEM && FB="y" && PCI]
   }
   config FB_IMSTT boolean {
    prompt "IMS Twin Turbo display support" if [HAS_IOMEM && FB="y" && PCI]
    depends on [FB="y" && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PCI]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && PCI && PPC]
    inherited [HAS_IOMEM && FB="y" && PCI]
   }
   config FB_VGA16 tristate {
    prompt "VGA 16-color graphics support" if [HAS_IOMEM && FB && (X86 || PPC)]
    depends on [FB && (X86 || PPC)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (X86 || PPC)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (X86 || PPC)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (X86 || PPC)]
    select VGASTATE if [HAS_IOMEM && FB && (X86 || PPC)]
    select FONT_8x16 if [HAS_IOMEM && FB && (X86 || PPC) && FRAMEBUFFER_CONSOLE]
    inherited [HAS_IOMEM && FB && (X86 || PPC)]
   }
   config FB_BF54X_LQ043 tristate {
    prompt "SHARP LQ043 TFT LCD (BF548 EZKIT)" if [HAS_IOMEM && FB && BF54x && !BF542]
    depends on [FB && BF54x && !BF542]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && BF54x && !BF542]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && BF54x && !BF542]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && BF54x && !BF542]
    inherited [HAS_IOMEM && FB && BF54x && !BF542]
   }
   config FB_BFIN_T350MCQB tristate {
    prompt "Varitronix COG-T350MCQB TFT LCD display (BF527 EZKIT)" if [HAS_IOMEM && FB && BLACKFIN]
    depends on [FB && BLACKFIN]
    select BFIN_GPTIMERS if [HAS_IOMEM && FB && BLACKFIN]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && BLACKFIN]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && BLACKFIN]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && BLACKFIN]
    inherited [HAS_IOMEM && FB && BLACKFIN]
   }
   config FB_STI tristate {
    prompt "HP STI frame buffer device support" if [HAS_IOMEM && FB && PARISC]
    depends on [FB && PARISC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PARISC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PARISC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PARISC]
    select STI_CONSOLE if [HAS_IOMEM && FB && PARISC]
    select VT if [HAS_IOMEM && FB && PARISC]
    default [y] if [HAS_IOMEM && FB && PARISC]
    inherited [HAS_IOMEM && FB && PARISC]
   }
   config FB_MAC boolean {
    prompt "Generic Macintosh display support" if [HAS_IOMEM && FB="y" && MAC]
    depends on [FB="y" && MAC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && MAC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && MAC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && MAC]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && MAC]
    inherited [HAS_IOMEM && FB="y" && MAC]
   }
   config FB_HP300 boolean {
    depends on [FB="y" && DIO]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && DIO]
    default [y] if [HAS_IOMEM && FB="y" && DIO]
    inherited [HAS_IOMEM && FB="y" && DIO]
   }
   config FB_TGA tristate {
    prompt "TGA/SFB+ framebuffer support" if [HAS_IOMEM && FB && (ALPHA || TC)]
    depends on [FB && (ALPHA || TC)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (ALPHA || TC)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (ALPHA || TC)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (ALPHA || TC)]
    select BITREVERSE if [HAS_IOMEM && FB && (ALPHA || TC)]
    inherited [HAS_IOMEM && FB && (ALPHA || TC)]
   }
   config FB_UVESA tristate {
    prompt "Userspace VESA VGA graphics support" if [HAS_IOMEM && FB && CONNECTOR]
    depends on [FB && CONNECTOR]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && CONNECTOR]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && CONNECTOR]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && CONNECTOR]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && CONNECTOR]
    inherited [HAS_IOMEM && FB && CONNECTOR]
   }
   config FB_VESA boolean {
    prompt "VESA VGA graphics support" if [HAS_IOMEM && FB="y" && X86]
    depends on [FB="y" && X86]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && X86]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && X86]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && X86]
    select FB_BOOT_VESA_SUPPORT if [HAS_IOMEM && FB="y" && X86]
    inherited [HAS_IOMEM && FB="y" && X86]
   }
   config FB_EFI boolean {
    prompt "EFI-based Framebuffer Support" if [HAS_IOMEM && FB="y" && X86 && EFI]
    depends on [FB="y" && X86 && EFI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && X86 && EFI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && X86 && EFI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && X86 && EFI]
    inherited [HAS_IOMEM && FB="y" && X86 && EFI]
   }
   config FB_N411 tristate {
    prompt "N411 Apollo/Hecuba devkit support" if [HAS_IOMEM && FB && X86 && MMU]
    depends on [FB && X86 && MMU]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB && X86 && MMU]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB && X86 && MMU]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB && X86 && MMU]
    select FB_SYS_FOPS if [HAS_IOMEM && FB && X86 && MMU]
    select FB_DEFERRED_IO if [HAS_IOMEM && FB && X86 && MMU]
    select FB_HECUBA if [HAS_IOMEM && FB && X86 && MMU]
    inherited [HAS_IOMEM && FB && X86 && MMU]
   }
   config FB_HGA tristate {
    prompt "Hercules mono graphics support" if [HAS_IOMEM && FB && X86]
    depends on [FB && X86]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && X86]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && X86]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && X86]
    inherited [HAS_IOMEM && FB && X86]
    config FB_HGA_ACCEL boolean {
     prompt "Hercules mono Acceleration functions (EXPERIMENTAL)" if [HAS_IOMEM && FB_HGA && EXPERIMENTAL]
     depends on [FB_HGA && EXPERIMENTAL]
     inherited [HAS_IOMEM && FB_HGA && EXPERIMENTAL]
    }
   }
   config FB_SGIVW tristate {
    prompt "SGI Visual Workstation framebuffer support" if [HAS_IOMEM && FB && X86_VISWS]
    depends on [FB && X86_VISWS]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && X86_VISWS]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && X86_VISWS]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && X86_VISWS]
    inherited [HAS_IOMEM && FB && X86_VISWS]
   }
   config FB_GBE boolean {
    prompt "SGI Graphics Backend frame buffer support" if [HAS_IOMEM && FB="y" && (SGI_IP32 || X86_VISWS)]
    depends on [FB="y" && (SGI_IP32 || X86_VISWS)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && (SGI_IP32 || X86_VISWS)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && (SGI_IP32 || X86_VISWS)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && (SGI_IP32 || X86_VISWS)]
    inherited [HAS_IOMEM && FB="y" && (SGI_IP32 || X86_VISWS)]
    config FB_GBE_MEM integer {
     prompt "Video memory size in MB" if [HAS_IOMEM && FB_GBE]
     depends on [FB_GBE]
     default [4] if [HAS_IOMEM && FB_GBE]
     inherited [HAS_IOMEM && FB_GBE]
    }
   }
   config FB_SBUS boolean {
    prompt "SBUS and UPA framebuffers" if [HAS_IOMEM && FB="y" && SPARC]
    depends on [FB="y" && SPARC]
    inherited [HAS_IOMEM && FB="y" && SPARC]
    config FB_BW2 boolean {
     prompt "BWtwo support" if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     depends on [FB="y" && SPARC && FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     inherited [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
    }
    config FB_CG3 boolean {
     prompt "CGthree support" if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     depends on [FB="y" && SPARC && FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     inherited [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
    }
    config FB_CG6 boolean {
     prompt "CGsix (GX,TurboGX) support" if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     depends on [FB="y" && SPARC && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     inherited [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
    }
    config FB_FFB boolean {
     prompt "Creator/Creator3D/Elite3D support" if [HAS_IOMEM && FB_SBUS && SPARC64]
     depends on [FB_SBUS && SPARC64]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_SBUS && SPARC64]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_SBUS && SPARC64]
     inherited [HAS_IOMEM && FB_SBUS && SPARC64]
    }
    config FB_TCX boolean {
     prompt "TCX (SS4/SS5 only) support" if [HAS_IOMEM && FB_SBUS]
     depends on [FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_SBUS]
     inherited [HAS_IOMEM && FB_SBUS]
    }
    config FB_CG14 boolean {
     prompt "CGfourteen (SX) support" if [HAS_IOMEM && FB_SBUS]
     depends on [FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_SBUS]
     inherited [HAS_IOMEM && FB_SBUS]
    }
    config FB_P9100 boolean {
     prompt "P9100 (Sparcbook 3 only) support" if [HAS_IOMEM && FB_SBUS]
     depends on [FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_SBUS]
     inherited [HAS_IOMEM && FB_SBUS]
    }
    config FB_LEO boolean {
     prompt "Leo (ZX) support" if [HAS_IOMEM && FB_SBUS]
     depends on [FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_SBUS]
     inherited [HAS_IOMEM && FB_SBUS]
    }
   }
   config FB_IGA boolean {
    prompt "IGA 168x display support" if [HAS_IOMEM && FB="y" && SPARC32]
    depends on [FB="y" && SPARC32]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && SPARC32]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && SPARC32]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && SPARC32]
    inherited [HAS_IOMEM && FB="y" && SPARC32]
   }
   config FB_XVR500 boolean {
    prompt "Sun XVR-500 3DLABS Wildcat support" if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    depends on [FB="y" && PCI && SPARC64]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    inherited [HAS_IOMEM && FB="y" && PCI && SPARC64]
   }
   config FB_XVR2500 boolean {
    prompt "Sun XVR-2500 3DLABS Wildcat support" if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    depends on [FB="y" && PCI && SPARC64]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    inherited [HAS_IOMEM && FB="y" && PCI && SPARC64]
   }
   config FB_PVR2 tristate {
    prompt "NEC PowerVR 2 display support" if [HAS_IOMEM && FB && SH_DREAMCAST]
    depends on [FB && SH_DREAMCAST]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && SH_DREAMCAST]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && SH_DREAMCAST]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && SH_DREAMCAST]
    inherited [HAS_IOMEM && FB && SH_DREAMCAST]
   }
   config FB_EPSON1355 boolean {
    prompt "Epson 1355 framebuffer support" if [HAS_IOMEM && FB="y" && ARCH_CEIVA]
    depends on [FB="y" && ARCH_CEIVA]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ARCH_CEIVA]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ARCH_CEIVA]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ARCH_CEIVA]
    inherited [HAS_IOMEM && FB="y" && ARCH_CEIVA]
   }
   config FB_S1D13XXX tristate {
    prompt "Epson S1D13XXX framebuffer support" if [HAS_IOMEM && FB]
    depends on [FB]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_ATMEL tristate {
    prompt "AT91/AT32 LCD Controller support" if [HAS_IOMEM && FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9G10 || ARCH_AT91SAM9263 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45 || ARCH_AT91CAP9 || AVR32)]
    depends on [FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9G10 || ARCH_AT91SAM9263 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45 || ARCH_AT91CAP9 || AVR32)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9G10 || ARCH_AT91SAM9263 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45 || ARCH_AT91CAP9 || AVR32)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9G10 || ARCH_AT91SAM9263 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45 || ARCH_AT91CAP9 || AVR32)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9G10 || ARCH_AT91SAM9263 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45 || ARCH_AT91CAP9 || AVR32)]
    inherited [HAS_IOMEM && FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9G10 || ARCH_AT91SAM9263 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45 || ARCH_AT91CAP9 || AVR32)]
    config FB_INTSRAM boolean {
     prompt "Frame Buffer in internal SRAM" if [HAS_IOMEM && FB_ATMEL && ARCH_AT91SAM9261]
     depends on [FB_ATMEL && ARCH_AT91SAM9261]
     inherited [HAS_IOMEM && FB_ATMEL && ARCH_AT91SAM9261]
    }
    config FB_ATMEL_STN boolean {
     prompt "Use a STN display with AT91/AT32 LCD Controller" if [HAS_IOMEM && FB_ATMEL && (MACH_AT91SAM9261EK || MACH_AT91SAM9G10EK)]
     depends on [FB_ATMEL && (MACH_AT91SAM9261EK || MACH_AT91SAM9G10EK)]
     default [n] if [HAS_IOMEM && FB_ATMEL && (MACH_AT91SAM9261EK || MACH_AT91SAM9G10EK)]
     inherited [HAS_IOMEM && FB_ATMEL && (MACH_AT91SAM9261EK || MACH_AT91SAM9G10EK)]
    }
   }
   config FB_NVIDIA tristate {
    prompt "nVidia Framebuffer Support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_BACKLIGHT if [HAS_IOMEM && FB && PCI && FB_NVIDIA_BACKLIGHT]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select BITREVERSE if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_NVIDIA_I2C boolean {
     prompt "Enable DDC Support" if [HAS_IOMEM && FB_NVIDIA]
     depends on [FB_NVIDIA]
     select FB_DDC if [HAS_IOMEM && FB_NVIDIA]
     inherited [HAS_IOMEM && FB_NVIDIA]
    }
    config FB_NVIDIA_DEBUG boolean {
     prompt "Lots of debug output" if [HAS_IOMEM && FB_NVIDIA]
     depends on [FB_NVIDIA]
     default [n] if [HAS_IOMEM && FB_NVIDIA]
     inherited [HAS_IOMEM && FB_NVIDIA]
    }
    config FB_NVIDIA_BACKLIGHT boolean {
     prompt "Support for backlight control" if [HAS_IOMEM && FB_NVIDIA]
     depends on [FB_NVIDIA]
     default [y] if [HAS_IOMEM && FB_NVIDIA]
     inherited [HAS_IOMEM && FB_NVIDIA]
    }
   }
   config FB_RIVA tristate {
    prompt "nVidia Riva support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_BACKLIGHT if [HAS_IOMEM && FB && PCI && FB_RIVA_BACKLIGHT]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select BITREVERSE if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_RIVA_I2C boolean {
     prompt "Enable DDC Support" if [HAS_IOMEM && FB_RIVA]
     depends on [FB_RIVA]
     select FB_DDC if [HAS_IOMEM && FB_RIVA]
     inherited [HAS_IOMEM && FB_RIVA]
    }
    config FB_RIVA_DEBUG boolean {
     prompt "Lots of debug output" if [HAS_IOMEM && FB_RIVA]
     depends on [FB_RIVA]
     default [n] if [HAS_IOMEM && FB_RIVA]
     inherited [HAS_IOMEM && FB_RIVA]
    }
    config FB_RIVA_BACKLIGHT boolean {
     prompt "Support for backlight control" if [HAS_IOMEM && FB_RIVA]
     depends on [FB_RIVA]
     default [y] if [HAS_IOMEM && FB_RIVA]
     inherited [HAS_IOMEM && FB_RIVA]
    }
   }
   config FB_I810 tristate {
    prompt "Intel 810/815 support (EXPERIMENTAL)" if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86_32 && AGP_INTEL]
    depends on [EXPERIMENTAL && FB && PCI && X86_32 && AGP_INTEL]
    select FB_MODE_HELPERS if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86_32 && AGP_INTEL]
    select FB_CFB_FILLRECT if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86_32 && AGP_INTEL]
    select FB_CFB_COPYAREA if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86_32 && AGP_INTEL]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86_32 && AGP_INTEL]
    select VGASTATE if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86_32 && AGP_INTEL]
    inherited [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86_32 && AGP_INTEL]
    config FB_I810_GTF boolean {
     prompt "use VESA Generalized Timing Formula" if [HAS_IOMEM && FB_I810]
     depends on [FB_I810]
     inherited [HAS_IOMEM && FB_I810]
     config FB_I810_I2C boolean {
      prompt "Enable DDC Support" if [HAS_IOMEM && FB_I810 && FB_I810_GTF]
      depends on [FB_I810 && FB_I810_GTF]
      select FB_DDC if [HAS_IOMEM && FB_I810 && FB_I810_GTF]
      inherited [HAS_IOMEM && FB_I810 && FB_I810_GTF]
     }
    }
   }
   config FB_LE80578 tristate {
    prompt "Intel LE80578 (Vermilion) support" if [HAS_IOMEM && FB && PCI && X86]
    depends on [FB && PCI && X86]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI && X86]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI && X86]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI && X86]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI && X86]
    inherited [HAS_IOMEM && FB && PCI && X86]
    config FB_CARILLO_RANCH tristate {
     prompt "Intel Carillo Ranch support" if [HAS_IOMEM && FB_LE80578 && FB && PCI && X86]
     depends on [FB_LE80578 && FB && PCI && X86]
     inherited [HAS_IOMEM && FB_LE80578 && FB && PCI && X86]
    }
   }
   config FB_INTEL tristate {
    prompt "Intel 830M/845G/852GM/855GM/865G/915G/945G/945GM/965G/965GM support (EXPERIMENTAL)" if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86 && AGP_INTEL && EMBEDDED && !DRM_I915]
    depends on [EXPERIMENTAL && FB && PCI && X86 && AGP_INTEL && EMBEDDED]
    select FB_MODE_HELPERS if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86 && AGP_INTEL && EMBEDDED && !DRM_I915]
    select FB_CFB_FILLRECT if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86 && AGP_INTEL && EMBEDDED && !DRM_I915]
    select FB_CFB_COPYAREA if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86 && AGP_INTEL && EMBEDDED && !DRM_I915]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86 && AGP_INTEL && EMBEDDED && !DRM_I915]
    select FB_BOOT_VESA_SUPPORT if [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86 && AGP_INTEL && EMBEDDED && !DRM_I915 && FB_INTEL="y"]
    depends on [!DRM_I915]
    inherited [HAS_IOMEM && EXPERIMENTAL && FB && PCI && X86 && AGP_INTEL && EMBEDDED && !DRM_I915]
    config FB_INTEL_DEBUG boolean {
     prompt "Intel driver Debug Messages" if [HAS_IOMEM && FB_INTEL]
     depends on [FB_INTEL]
     inherited [HAS_IOMEM && FB_INTEL]
    }
    config FB_INTEL_I2C boolean {
     prompt "DDC/I2C for Intel framebuffer support" if [HAS_IOMEM && FB_INTEL]
     depends on [FB_INTEL]
     select FB_DDC if [HAS_IOMEM && FB_INTEL]
     default [y] if [HAS_IOMEM && FB_INTEL]
     inherited [HAS_IOMEM && FB_INTEL]
    }
   }
   config FB_MATROX tristate {
    prompt "Matrox acceleration" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_TILEBLITTING if [HAS_IOMEM && FB && PCI]
    select FB_MACMODES if [HAS_IOMEM && FB && PCI && PPC_PMAC]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_MATROX_MILLENIUM boolean {
     prompt "Millennium I/II support" if [HAS_IOMEM && FB_MATROX]
     depends on [FB_MATROX]
     inherited [HAS_IOMEM && FB_MATROX]
    }
    config FB_MATROX_MYSTIQUE boolean {
     prompt "Mystique support" if [HAS_IOMEM && FB_MATROX]
     depends on [FB_MATROX]
     inherited [HAS_IOMEM && FB_MATROX]
    }
    config FB_MATROX_G boolean {
     prompt "G100/G200/G400/G450/G550 support" if [HAS_IOMEM && FB_MATROX]
     depends on [FB_MATROX]
     inherited [HAS_IOMEM && FB_MATROX]
    }
    config FB_MATROX_I2C tristate {
     prompt "Matrox I2C support" if [HAS_IOMEM && FB_MATROX]
     depends on [FB_MATROX]
     select FB_DDC if [HAS_IOMEM && FB_MATROX]
     inherited [HAS_IOMEM && FB_MATROX]
     config FB_MATROX_MAVEN tristate {
      prompt "G400 second head support" if [HAS_IOMEM && FB_MATROX_G && FB_MATROX_I2C]
      depends on [FB_MATROX_G && FB_MATROX_I2C]
      inherited [HAS_IOMEM && FB_MATROX_G && FB_MATROX_I2C]
     }
    }
   }
   config FB_RADEON tristate {
    prompt "ATI Radeon display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_BACKLIGHT if [HAS_IOMEM && FB && PCI && FB_RADEON_BACKLIGHT]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_MACMODES if [HAS_IOMEM && FB && PCI && PPC_OF]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_RADEON_I2C boolean {
     prompt "DDC/I2C for ATI Radeon support" if [HAS_IOMEM && FB_RADEON]
     depends on [FB_RADEON]
     select FB_DDC if [HAS_IOMEM && FB_RADEON]
     default [y] if [HAS_IOMEM && FB_RADEON]
     inherited [HAS_IOMEM && FB_RADEON]
    }
    config FB_RADEON_BACKLIGHT boolean {
     prompt "Support for backlight control" if [HAS_IOMEM && FB_RADEON]
     depends on [FB_RADEON]
     default [y] if [HAS_IOMEM && FB_RADEON]
     inherited [HAS_IOMEM && FB_RADEON]
    }
    config FB_RADEON_DEBUG boolean {
     prompt "Lots of debug output from Radeon driver" if [HAS_IOMEM && FB_RADEON]
     depends on [FB_RADEON]
     default [n] if [HAS_IOMEM && FB_RADEON]
     inherited [HAS_IOMEM && FB_RADEON]
    }
   }
   config FB_ATY128 tristate {
    prompt "ATI Rage128 display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_BACKLIGHT if [HAS_IOMEM && FB && PCI && FB_ATY128_BACKLIGHT]
    select FB_MACMODES if [HAS_IOMEM && FB && PCI && PPC_PMAC]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_ATY128_BACKLIGHT boolean {
     prompt "Support for backlight control" if [HAS_IOMEM && FB_ATY128]
     depends on [FB_ATY128]
     default [y] if [HAS_IOMEM && FB_ATY128]
     inherited [HAS_IOMEM && FB_ATY128]
    }
   }
   config FB_ATY tristate {
    prompt "ATI Mach64 display support" if [HAS_IOMEM && FB && !SPARC32 && (PCI || ATARI)]
    depends on [FB && !SPARC32]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && !SPARC32]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && !SPARC32]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && !SPARC32]
    select FB_BACKLIGHT if [HAS_IOMEM && FB && !SPARC32 && FB_ATY_BACKLIGHT]
    select FB_MACMODES if [HAS_IOMEM && FB && !SPARC32 && PPC]
    inherited [HAS_IOMEM && FB && !SPARC32]
    config FB_ATY_CT boolean {
     prompt "Mach64 CT/VT/GT/LT (incl. 3D RAGE) support" if [HAS_IOMEM && PCI && FB_ATY]
     depends on [PCI && FB_ATY]
     default [y] if [HAS_IOMEM && FB_ATY && SPARC64 && PCI]
     inherited [HAS_IOMEM && PCI && FB_ATY]
     config FB_ATY_GENERIC_LCD boolean {
      prompt "Mach64 generic LCD support (EXPERIMENTAL)" if [HAS_IOMEM && FB_ATY_CT]
      depends on [FB_ATY_CT]
      inherited [HAS_IOMEM && FB_ATY_CT]
     }
    }
    config FB_ATY_GX boolean {
     prompt "Mach64 GX support" if [HAS_IOMEM && FB_ATY && PCI]
     depends on [FB_ATY]
     default [y] if [HAS_IOMEM && FB_ATY && ATARI]
     inherited [HAS_IOMEM && FB_ATY]
    }
    config FB_ATY_BACKLIGHT boolean {
     prompt "Support for backlight control" if [HAS_IOMEM && FB_ATY]
     depends on [FB_ATY]
     default [y] if [HAS_IOMEM && FB_ATY]
     inherited [HAS_IOMEM && FB_ATY]
    }
   }
   config FB_S3 tristate {
    prompt "S3 Trio/Virge support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_TILEBLITTING if [HAS_IOMEM && FB && PCI]
    select FB_SVGALIB if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    select FONT_8x16 if [HAS_IOMEM && FB && PCI && FRAMEBUFFER_CONSOLE]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_SAVAGE tristate {
    prompt "S3 Savage support" if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    depends on [FB && PCI && EXPERIMENTAL]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select VGASTATE if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    inherited [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    config FB_SAVAGE_I2C boolean {
     prompt "Enable DDC2 Support" if [HAS_IOMEM && FB_SAVAGE]
     depends on [FB_SAVAGE]
     select FB_DDC if [HAS_IOMEM && FB_SAVAGE]
     inherited [HAS_IOMEM && FB_SAVAGE]
    }
    config FB_SAVAGE_ACCEL boolean {
     prompt "Enable Console Acceleration" if [HAS_IOMEM && FB_SAVAGE]
     depends on [FB_SAVAGE]
     default [n] if [HAS_IOMEM && FB_SAVAGE]
     inherited [HAS_IOMEM && FB_SAVAGE]
    }
   }
   config FB_SIS tristate {
    prompt "SiS/XGI display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_BOOT_VESA_SUPPORT if [HAS_IOMEM && FB && PCI && FB_SIS="y"]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_SIS_300 boolean {
     prompt "SiS 300 series support" if [HAS_IOMEM && FB_SIS]
     depends on [FB_SIS]
     inherited [HAS_IOMEM && FB_SIS]
    }
    config FB_SIS_315 boolean {
     prompt "SiS 315/330/340 series and XGI support" if [HAS_IOMEM && FB_SIS]
     depends on [FB_SIS]
     inherited [HAS_IOMEM && FB_SIS]
    }
   }
   config FB_VIA tristate {
    prompt "VIA UniChrome (Pro) and Chrome9 display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_SOFT_CURSOR if [HAS_IOMEM && FB && PCI]
    select I2C_ALGOBIT if [HAS_IOMEM && FB && PCI]
    select I2C if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_NEOMAGIC tristate {
    prompt "NeoMagic display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_KYRO tristate {
    prompt "IMG Kyro support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_3DFX tristate {
    prompt "3Dfx Banshee/Voodoo3/Voodoo5 display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_3DFX_ACCEL boolean {
     prompt "3Dfx Acceleration functions (EXPERIMENTAL)" if [HAS_IOMEM && FB_3DFX && EXPERIMENTAL]
     depends on [FB_3DFX && EXPERIMENTAL]
     inherited [HAS_IOMEM && FB_3DFX && EXPERIMENTAL]
    }
    config FB_3DFX_I2C boolean {
     prompt "Enable DDC/I2C support" if [HAS_IOMEM && FB_3DFX && EXPERIMENTAL]
     depends on [FB_3DFX && EXPERIMENTAL]
     select FB_DDC if [HAS_IOMEM && FB_3DFX && EXPERIMENTAL]
     default [y] if [HAS_IOMEM && FB_3DFX && EXPERIMENTAL]
     inherited [HAS_IOMEM && FB_3DFX && EXPERIMENTAL]
    }
   }
   config FB_VOODOO1 tristate {
    prompt "3Dfx Voodoo Graphics (sst1) support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_VT8623 tristate {
    prompt "VIA VT8623 support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_TILEBLITTING if [HAS_IOMEM && FB && PCI]
    select FB_SVGALIB if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    select FONT_8x16 if [HAS_IOMEM && FB && PCI && FRAMEBUFFER_CONSOLE]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_TRIDENT tristate {
    prompt "Trident/CyberXXX/CyberBlade support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_ARK tristate {
    prompt "ARK 2000PV support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_TILEBLITTING if [HAS_IOMEM && FB && PCI]
    select FB_SVGALIB if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    select FONT_8x16 if [HAS_IOMEM && FB && PCI && FRAMEBUFFER_CONSOLE]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_PM3 tristate {
    prompt "Permedia3 support (EXPERIMENTAL)" if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    depends on [FB && PCI && EXPERIMENTAL]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    inherited [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
   }
   config FB_CARMINE tristate {
    prompt "Fujitsu carmine frame buffer support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
    choice boolean {
     depends on [FB_CARMINE]
     prompt "DRAM timing" if [HAS_IOMEM && FB_CARMINE]
     default [FB_CARMINE_DRAM_EVAL] if [HAS_IOMEM && FB_CARMINE]
     config FB_CARMINE_DRAM_EVAL boolean {
      prompt "Eval board timings" if [<choice>]
      inherited [<choice>]
     }
     config CARMINE_DRAM_CUSTOM boolean {
      prompt "Custom board timings" if [<choice>]
      inherited [<choice>]
     }
    }
   }
   config FB_AU1100 boolean {
    prompt "Au1100 LCD Driver" if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1100]
    depends on [FB="y" && MIPS && SOC_AU1100]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1100]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1100]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1100]
    inherited [HAS_IOMEM && FB="y" && MIPS && SOC_AU1100]
   }
   config FB_AU1200 boolean {
    prompt "Au1200 LCD Driver" if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1200]
    depends on [FB="y" && MIPS && SOC_AU1200]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1200]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1200]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1200]
    inherited [HAS_IOMEM && FB="y" && MIPS && SOC_AU1200]
   }
   config FB_GEODE boolean {
    prompt "AMD Geode family framebuffer support (EXPERIMENTAL)" if [HAS_IOMEM && FB && PCI && EXPERIMENTAL && X86]
    depends on [FB && PCI && EXPERIMENTAL && X86]
    inherited [HAS_IOMEM && FB && PCI && EXPERIMENTAL && X86]
    config FB_GEODE_LX tristate {
     prompt "AMD Geode LX framebuffer support (EXPERIMENTAL)" if [HAS_IOMEM && FB && FB_GEODE]
     depends on [FB && FB_GEODE]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB && FB_GEODE]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB && FB_GEODE]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && FB_GEODE]
     inherited [HAS_IOMEM && FB && FB_GEODE]
    }
    config FB_GEODE_GX tristate {
     prompt "AMD Geode GX framebuffer support (EXPERIMENTAL)" if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     depends on [FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     inherited [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
    }
    config FB_GEODE_GX1 tristate {
     prompt "AMD Geode GX1 framebuffer support (EXPERIMENTAL)" if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     depends on [FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     inherited [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
    }
   }
   config FB_HIT tristate {
    prompt "HD64461 Frame Buffer support" if [HAS_IOMEM && FB && HD64461]
    depends on [FB && HD64461]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && HD64461]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && HD64461]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && HD64461]
    inherited [HAS_IOMEM && FB && HD64461]
   }
   config FB_PMAG_AA boolean {
    prompt "PMAG-AA TURBOchannel framebuffer support" if [HAS_IOMEM && FB="y" && TC]
    depends on [FB="y" && TC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && TC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && TC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && TC]
    inherited [HAS_IOMEM && FB="y" && TC]
   }
   config FB_PMAG_BA tristate {
    prompt "PMAG-BA TURBOchannel framebuffer support" if [HAS_IOMEM && FB && TC]
    depends on [FB && TC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && TC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && TC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && TC]
    inherited [HAS_IOMEM && FB && TC]
   }
   config FB_PMAGB_B tristate {
    prompt "PMAGB-B TURBOchannel framebuffer support" if [HAS_IOMEM && FB && TC]
    depends on [FB && TC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && TC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && TC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && TC]
    inherited [HAS_IOMEM && FB && TC]
   }
   config FB_MAXINE boolean {
    prompt "Maxine (Personal DECstation) onboard framebuffer support" if [HAS_IOMEM && FB="y" && MACH_DECSTATION]
    depends on [FB="y" && MACH_DECSTATION]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && MACH_DECSTATION]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && MACH_DECSTATION]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && MACH_DECSTATION]
    inherited [HAS_IOMEM && FB="y" && MACH_DECSTATION]
   }
   config FB_G364 boolean {
    prompt "G364 frame buffer support" if [HAS_IOMEM && FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
    depends on [FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
    inherited [HAS_IOMEM && FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
   }
   config FB_68328 boolean {
    prompt "Motorola 68328 native frame buffer support" if [HAS_IOMEM && FB="y" && (M68328 || M68EZ328 || M68VZ328)]
    depends on [FB="y" && (M68328 || M68EZ328 || M68VZ328)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && (M68328 || M68EZ328 || M68VZ328)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && (M68328 || M68EZ328 || M68VZ328)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && (M68328 || M68EZ328 || M68VZ328)]
    inherited [HAS_IOMEM && FB="y" && (M68328 || M68EZ328 || M68VZ328)]
   }
   config FB_PXA168 tristate {
    prompt "PXA168/910 LCD framebuffer support" if [HAS_IOMEM && FB && (CPU_PXA168 || CPU_PXA910)]
    depends on [FB && (CPU_PXA168 || CPU_PXA910)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (CPU_PXA168 || CPU_PXA910)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (CPU_PXA168 || CPU_PXA910)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (CPU_PXA168 || CPU_PXA910)]
    inherited [HAS_IOMEM && FB && (CPU_PXA168 || CPU_PXA910)]
   }
   config FB_PXA tristate {
    prompt "PXA LCD framebuffer support" if [HAS_IOMEM && FB && ARCH_PXA]
    depends on [FB && ARCH_PXA]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_PXA]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_PXA]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_PXA]
    inherited [HAS_IOMEM && FB && ARCH_PXA]
    config FB_PXA_OVERLAY boolean {
     prompt "Support PXA27x/PXA3xx Overlay(s) as framebuffer" if [HAS_IOMEM && FB_PXA && (PXA27x || PXA3xx)]
     default [n] if [HAS_IOMEM && FB_PXA && (PXA27x || PXA3xx)]
     depends on [FB_PXA && (PXA27x || PXA3xx)]
     inherited [HAS_IOMEM && FB_PXA && (PXA27x || PXA3xx)]
    }
    config FB_PXA_SMARTPANEL boolean {
     prompt "PXA Smartpanel LCD support" if [HAS_IOMEM && FB_PXA]
     default [n] if [HAS_IOMEM && FB_PXA]
     depends on [FB_PXA]
     inherited [HAS_IOMEM && FB_PXA]
    }
    config FB_PXA_PARAMETERS boolean {
     prompt "PXA LCD command line parameters" if [HAS_IOMEM && FB_PXA]
     default [n] if [HAS_IOMEM && FB_PXA]
     depends on [FB_PXA]
     inherited [HAS_IOMEM && FB_PXA]
    }
   }
   config FB_MBX tristate {
    prompt "2700G LCD framebuffer support" if [HAS_IOMEM && FB && ARCH_PXA]
    depends on [FB && ARCH_PXA]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_PXA]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_PXA]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_PXA]
    inherited [HAS_IOMEM && FB && ARCH_PXA]
    config FB_MBX_DEBUG boolean {
     prompt "Enable debugging info via debugfs" if [HAS_IOMEM && FB_MBX && DEBUG_FS]
     depends on [FB_MBX && DEBUG_FS]
     default [n] if [HAS_IOMEM && FB_MBX && DEBUG_FS]
     inherited [HAS_IOMEM && FB_MBX && DEBUG_FS]
    }
   }
   config FB_FSL_DIU tristate {
    prompt "Freescale DIU framebuffer support" if [HAS_IOMEM && FB && FSL_SOC]
    depends on [FB && FSL_SOC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && FSL_SOC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && FSL_SOC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && FSL_SOC]
    select PPC_LIB_RHEAP if [HAS_IOMEM && FB && FSL_SOC]
    inherited [HAS_IOMEM && FB && FSL_SOC]
   }
   config FB_W100 tristate {
    prompt "W100 frame buffer support" if [HAS_IOMEM && FB && ARCH_PXA]
    depends on [FB && ARCH_PXA]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_PXA]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_PXA]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_PXA]
    inherited [HAS_IOMEM && FB && ARCH_PXA]
   }
   config FB_SH_MOBILE_LCDC tristate {
    prompt "SuperH Mobile LCDC framebuffer support" if [HAS_IOMEM && FB && SUPERH && HAVE_CLK]
    depends on [FB && SUPERH && HAVE_CLK]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB && SUPERH && HAVE_CLK]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB && SUPERH && HAVE_CLK]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB && SUPERH && HAVE_CLK]
    select FB_SYS_FOPS if [HAS_IOMEM && FB && SUPERH && HAVE_CLK]
    select FB_DEFERRED_IO if [HAS_IOMEM && FB && SUPERH && HAVE_CLK]
    inherited [HAS_IOMEM && FB && SUPERH && HAVE_CLK]
   }
   config FB_TMIO tristate {
    prompt "Toshiba Mobile IO FrameBuffer support" if [HAS_IOMEM && FB && MFD_CORE]
    depends on [FB && MFD_CORE]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && MFD_CORE]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && MFD_CORE]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && MFD_CORE]
    inherited [HAS_IOMEM && FB && MFD_CORE]
    config FB_TMIO_ACCELL boolean {
     prompt "tmiofb acceleration" if [HAS_IOMEM && FB_TMIO]
     depends on [FB_TMIO]
     default [y] if [HAS_IOMEM && FB_TMIO]
     inherited [HAS_IOMEM && FB_TMIO]
    }
   }
   config FB_S3C tristate {
    prompt "Samsung S3C framebuffer support" if [HAS_IOMEM && FB && ARCH_S3C64XX]
    depends on [FB && ARCH_S3C64XX]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_S3C64XX]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_S3C64XX]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_S3C64XX]
    inherited [HAS_IOMEM && FB && ARCH_S3C64XX]
    config FB_S3C_DEBUG_REGWRITE boolean {
     prompt "Debug register writes" if [HAS_IOMEM && FB_S3C]
     depends on [FB_S3C]
     inherited [HAS_IOMEM && FB_S3C]
    }
   }
   config FB_S3C2410 tristate {
    prompt "S3C2410 LCD framebuffer support" if [HAS_IOMEM && FB && ARCH_S3C2410]
    depends on [FB && ARCH_S3C2410]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_S3C2410]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_S3C2410]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_S3C2410]
    inherited [HAS_IOMEM && FB && ARCH_S3C2410]
    config FB_S3C2410_DEBUG boolean {
     prompt "S3C2410 lcd debug messages" if [HAS_IOMEM && FB_S3C2410]
     depends on [FB_S3C2410]
     inherited [HAS_IOMEM && FB_S3C2410]
    }
   }
   config FB_SM501 tristate {
    prompt "Silicon Motion SM501 framebuffer support" if [HAS_IOMEM && FB && MFD_SM501]
    depends on [FB && MFD_SM501]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && MFD_SM501]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && MFD_SM501]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && MFD_SM501]
    inherited [HAS_IOMEM && FB && MFD_SM501]
   }
   config FB_PNX4008_DUM tristate {
    prompt "Display Update Module support on Philips PNX4008 board" if [HAS_IOMEM && FB && ARCH_PNX4008]
    depends on [FB && ARCH_PNX4008]
    inherited [HAS_IOMEM && FB && ARCH_PNX4008]
    config FB_PNX4008_DUM_RGB tristate {
     prompt "RGB Framebuffer support on Philips PNX4008 board" if [HAS_IOMEM && FB_PNX4008_DUM]
     depends on [FB_PNX4008_DUM]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB_PNX4008_DUM]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_PNX4008_DUM]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_PNX4008_DUM]
     inherited [HAS_IOMEM && FB_PNX4008_DUM]
    }
   }
   config FB_IBM_GXT4500 tristate {
    prompt "Framebuffer support for IBM GXT4500P adaptor" if [HAS_IOMEM && FB && PPC]
    depends on [FB && PPC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PPC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PPC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PPC]
    inherited [HAS_IOMEM && FB && PPC]
   }
   config FB_PS3 tristate {
    prompt "PS3 GPU framebuffer driver" if [HAS_IOMEM && FB && PS3_PS3AV]
    depends on [FB && PS3_PS3AV]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB && PS3_PS3AV]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB && PS3_PS3AV]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB && PS3_PS3AV]
    select FB_SYS_FOPS if [HAS_IOMEM && FB && PS3_PS3AV]
    select VT_HW_CONSOLE_BINDING if [HAS_IOMEM && FB && PS3_PS3AV && FRAMEBUFFER_CONSOLE]
    inherited [HAS_IOMEM && FB && PS3_PS3AV]
    config FB_PS3_DEFAULT_SIZE_M integer {
     prompt "PS3 default frame buffer size (in MiB)" if [HAS_IOMEM && FB_PS3]
     depends on [FB_PS3]
     default [9] if [HAS_IOMEM && FB_PS3]
     inherited [HAS_IOMEM && FB_PS3]
    }
   }
   config FB_XILINX tristate {
    prompt "Xilinx frame buffer support" if [HAS_IOMEM && FB && (XILINX_VIRTEX || MICROBLAZE)]
    depends on [FB && (XILINX_VIRTEX || MICROBLAZE)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (XILINX_VIRTEX || MICROBLAZE)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (XILINX_VIRTEX || MICROBLAZE)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (XILINX_VIRTEX || MICROBLAZE)]
    inherited [HAS_IOMEM && FB && (XILINX_VIRTEX || MICROBLAZE)]
   }
   config FB_COBALT tristate {
    prompt "Cobalt server LCD frame buffer support" if [HAS_IOMEM && FB && MIPS_COBALT]
    depends on [FB && MIPS_COBALT]
    inherited [HAS_IOMEM && FB && MIPS_COBALT]
   }
   config FB_SH7760 boolean {
    prompt "SH7760/SH7763/SH7720/SH7721 LCDC support" if [HAS_IOMEM && FB && (CPU_SUBTYPE_SH7760 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721)]
    depends on [FB && (CPU_SUBTYPE_SH7760 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (CPU_SUBTYPE_SH7760 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (CPU_SUBTYPE_SH7760 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (CPU_SUBTYPE_SH7760 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721)]
    inherited [HAS_IOMEM && FB && (CPU_SUBTYPE_SH7760 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721)]
   }
   config FB_DA8XX tristate {
    prompt "DA8xx/OMAP-L1xx Framebuffer support" if [HAS_IOMEM && FB && ARCH_DAVINCI_DA8XX]
    depends on [FB && ARCH_DAVINCI_DA8XX]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_DAVINCI_DA8XX]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_DAVINCI_DA8XX]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_DAVINCI_DA8XX]
    inherited [HAS_IOMEM && FB && ARCH_DAVINCI_DA8XX]
   }
   config FB_VIRTUAL tristate {
    prompt "Virtual Frame Buffer support (ONLY FOR TESTING!)" if [HAS_IOMEM && FB]
    depends on [FB]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB]
    select FB_SYS_FOPS if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config XEN_FBDEV_FRONTEND tristate {
    prompt "Xen virtual frame buffer support" if [HAS_IOMEM && FB && XEN]
    depends on [FB && XEN]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB && XEN]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB && XEN]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB && XEN]
    select FB_SYS_FOPS if [HAS_IOMEM && FB && XEN]
    select FB_DEFERRED_IO if [HAS_IOMEM && FB && XEN]
    default [y] if [HAS_IOMEM && FB && XEN]
    inherited [HAS_IOMEM && FB && XEN]
   }
   config FB_METRONOME tristate {
    prompt "E-Ink Metronome/8track controller support" if [HAS_IOMEM && FB]
    depends on [FB]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB]
    select FB_SYS_FOPS if [HAS_IOMEM && FB]
    select FB_DEFERRED_IO if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_MB862XX tristate {
    prompt "Fujitsu MB862xx GDC support" if [HAS_IOMEM && FB]
    depends on [FB]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
    config FB_MB862XX_PCI_GDC boolean {
     prompt "Carmine/Coral-P(A) GDC" if [HAS_IOMEM && PCI && FB_MB862XX]
     depends on [PCI && FB_MB862XX]
     inherited [HAS_IOMEM && PCI && FB_MB862XX]
    }
    config FB_MB862XX_LIME boolean {
     prompt "Lime GDC" if [HAS_IOMEM && FB_MB862XX && OF && !FB_MB862XX_PCI_GDC && PPC]
     depends on [FB_MB862XX]
     depends on [OF && !FB_MB862XX_PCI_GDC]
     depends on [PPC]
     select FB_FOREIGN_ENDIAN if [HAS_IOMEM && FB_MB862XX && OF && !FB_MB862XX_PCI_GDC && PPC]
     select FB_LITTLE_ENDIAN if [HAS_IOMEM && FB_MB862XX && OF && !FB_MB862XX_PCI_GDC && PPC]
     inherited [HAS_IOMEM && FB_MB862XX && OF && !FB_MB862XX_PCI_GDC && PPC]
    }
   }
   config FB_EP93XX tristate {
    prompt "EP93XX frame buffer support" if [HAS_IOMEM && FB && ARCH_EP93XX]
    depends on [FB && ARCH_EP93XX]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_EP93XX]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_EP93XX]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_EP93XX]
    inherited [HAS_IOMEM && FB && ARCH_EP93XX]
   }
   config FB_PRE_INIT_FB boolean {
    prompt "Don't reinitialize, use bootloader's GDC/Display configuration" if [HAS_IOMEM && FB && FB_MB862XX_LIME]
    depends on [FB && FB_MB862XX_LIME]
    inherited [HAS_IOMEM && FB && FB_MB862XX_LIME]
   }
   config FB_MSM tristate {
    depends on [FB && ARCH_MSM]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_MSM]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_MSM]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_MSM]
    default [y] if [HAS_IOMEM && FB && ARCH_MSM]
    inherited [HAS_IOMEM && FB && ARCH_MSM]
   }
   config FB_MX3 tristate {
    prompt "MX3 Framebuffer support" if [HAS_IOMEM && FB && MX3_IPU]
    depends on [FB && MX3_IPU]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && MX3_IPU]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && MX3_IPU]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && MX3_IPU]
    default [y] if [HAS_IOMEM && FB && MX3_IPU]
    inherited [HAS_IOMEM && FB && MX3_IPU]
   }
   config FB_BROADSHEET tristate {
    prompt "E-Ink Broadsheet/Epson S1D13521 controller support" if [HAS_IOMEM && FB]
    depends on [FB]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB]
    select FB_SYS_FOPS if [HAS_IOMEM && FB]
    select FB_DEFERRED_IO if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_OMAP tristate {
    prompt "OMAP frame buffer support (EXPERIMENTAL)" if [HAS_IOMEM && FB && ARCH_OMAP]
    depends on [FB && ARCH_OMAP]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_OMAP]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_OMAP]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_OMAP]
    inherited [HAS_IOMEM && FB && ARCH_OMAP]
   }
  }
  config FB_OMAP_LCD_VGA boolean {
   prompt "Use LCD in VGA mode" if [HAS_IOMEM && (MACH_OMAP_3430SDP || MACH_OMAP_LDP)]
   depends on [MACH_OMAP_3430SDP || MACH_OMAP_LDP]
   inherited [HAS_IOMEM && (MACH_OMAP_3430SDP || MACH_OMAP_LDP)]
  }
  choice boolean {
   depends on [FB_OMAP && MACH_OVERO]
   prompt "Screen resolution" if [HAS_IOMEM && FB_OMAP && MACH_OVERO]
   default [FB_OMAP_079M3R] if [HAS_IOMEM && FB_OMAP && MACH_OVERO]
   config FB_OMAP_031M3R boolean {
    prompt "640 x 480 @ 60 Hz Reduced blanking" if [<choice>]
    inherited [<choice>]
   }
   config FB_OMAP_048M3R boolean {
    prompt "800 x 600 @ 60 Hz Reduced blanking" if [<choice>]
    inherited [<choice>]
   }
   config FB_OMAP_079M3R boolean {
    prompt "1024 x 768 @ 60 Hz Reduced blanking" if [<choice>]
    inherited [<choice>]
   }
   config FB_OMAP_092M9R boolean {
    prompt "1280 x 720 @ 60 Hz Reduced blanking" if [<choice>]
    inherited [<choice>]
   }
  }
  config FB_OMAP_LCDC_EXTERNAL boolean {
   prompt "External LCD controller support" if [HAS_IOMEM && FB_OMAP]
   depends on [FB_OMAP]
   inherited [HAS_IOMEM && FB_OMAP]
   config FB_OMAP_LCDC_HWA742 boolean {
    prompt "Epson HWA742 LCD controller support" if [HAS_IOMEM && FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
    depends on [FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
    inherited [HAS_IOMEM && FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
   }
   config FB_OMAP_LCDC_BLIZZARD boolean {
    prompt "Epson Blizzard LCD controller support" if [HAS_IOMEM && FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
    depends on [FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
    inherited [HAS_IOMEM && FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
   }
   config FB_OMAP_MANUAL_UPDATE boolean {
    prompt "Default to manual update mode" if [HAS_IOMEM && FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
    depends on [FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
    inherited [HAS_IOMEM && FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
   }
  }
  config FB_OMAP_LCD_MIPID boolean {
   prompt "MIPI DBI-C/DCS compatible LCD support" if [HAS_IOMEM && FB_OMAP && SPI_MASTER]
   depends on [FB_OMAP && SPI_MASTER]
   inherited [HAS_IOMEM && FB_OMAP && SPI_MASTER]
  }
  config FB_OMAP_BOOTLOADER_INIT boolean {
   prompt "Check bootloader initialization" if [HAS_IOMEM && FB_OMAP]
   depends on [FB_OMAP]
   inherited [HAS_IOMEM && FB_OMAP]
  }
  config FB_OMAP_CONSISTENT_DMA_SIZE integer {
   prompt "Consistent DMA memory size (MB)" if [HAS_IOMEM && FB_OMAP]
   depends on [FB_OMAP]
   range [1 14] if [HAS_IOMEM && FB_OMAP]
   default [2] if [HAS_IOMEM && FB_OMAP]
   inherited [HAS_IOMEM && FB_OMAP]
  }
  config FB_OMAP_DMA_TUNE boolean {
   prompt "Set DMA SDRAM access priority high" if [HAS_IOMEM && FB_OMAP && ARCH_OMAP1]
   depends on [FB_OMAP && ARCH_OMAP1]
   inherited [HAS_IOMEM && FB_OMAP && ARCH_OMAP1]
  }
  menuconfig BACKLIGHT_LCD_SUPPORT boolean {
   prompt "Backlight & LCD device support" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config LCD_CLASS_DEVICE tristate {
    prompt "Lowlevel LCD controls" if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    depends on [BACKLIGHT_LCD_SUPPORT]
    default [m] if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    inherited [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    config LCD_CORGI tristate {
     prompt "LCD Panel support for SHARP corgi/spitz model" if [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER && PXA_SHARPSL]
     depends on [LCD_CLASS_DEVICE && SPI_MASTER && PXA_SHARPSL]
     inherited [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER && PXA_SHARPSL]
    }
    config LCD_LMS283GF05 tristate {
     prompt "Samsung LMS283GF05 LCD" if [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER && GENERIC_GPIO]
     depends on [LCD_CLASS_DEVICE && SPI_MASTER && GENERIC_GPIO]
     inherited [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER && GENERIC_GPIO]
    }
    config LCD_LTV350QV tristate {
     prompt "Samsung LTV350QV LCD Panel" if [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER]
     depends on [LCD_CLASS_DEVICE && SPI_MASTER]
     default [n] if [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER]
     inherited [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER]
    }
    config LCD_ILI9320 tristate {
     depends on [LCD_CLASS_DEVICE && BACKLIGHT_LCD_SUPPORT]
     default [n] if [HAS_IOMEM && LCD_CLASS_DEVICE && BACKLIGHT_LCD_SUPPORT]
     inherited [HAS_IOMEM && LCD_CLASS_DEVICE && BACKLIGHT_LCD_SUPPORT]
    }
    config LCD_TDO24M tristate {
     prompt "Toppoly TDO24M  and TDO35S LCD Panels support" if [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER]
     depends on [LCD_CLASS_DEVICE && SPI_MASTER]
     default [n] if [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER]
     inherited [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER]
    }
    config LCD_VGG2432A4 tristate {
     prompt "VGG2432A4 LCM device support" if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT && LCD_CLASS_DEVICE && SPI_MASTER]
     depends on [BACKLIGHT_LCD_SUPPORT && LCD_CLASS_DEVICE && SPI_MASTER]
     select LCD_ILI9320 if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT && LCD_CLASS_DEVICE && SPI_MASTER]
     default [n] if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT && LCD_CLASS_DEVICE && SPI_MASTER]
     inherited [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT && LCD_CLASS_DEVICE && SPI_MASTER]
    }
    config LCD_PLATFORM tristate {
     prompt "Platform LCD controls" if [HAS_IOMEM && LCD_CLASS_DEVICE]
     depends on [LCD_CLASS_DEVICE]
     inherited [HAS_IOMEM && LCD_CLASS_DEVICE]
    }
    config LCD_TOSA tristate {
     prompt "Sharp SL-6000 LCD Driver" if [HAS_IOMEM && LCD_CLASS_DEVICE && SPI && MACH_TOSA]
     depends on [LCD_CLASS_DEVICE && SPI]
     depends on [MACH_TOSA]
     default [n] if [HAS_IOMEM && LCD_CLASS_DEVICE && SPI && MACH_TOSA]
     inherited [HAS_IOMEM && LCD_CLASS_DEVICE && SPI && MACH_TOSA]
    }
    config LCD_HP700 tristate {
     prompt "HP Jornada 700 series LCD Driver" if [HAS_IOMEM && LCD_CLASS_DEVICE && SA1100_JORNADA720_SSP && !PREEMPT]
     depends on [LCD_CLASS_DEVICE]
     depends on [SA1100_JORNADA720_SSP && !PREEMPT]
     default [y] if [HAS_IOMEM && LCD_CLASS_DEVICE && SA1100_JORNADA720_SSP && !PREEMPT]
     inherited [HAS_IOMEM && LCD_CLASS_DEVICE && SA1100_JORNADA720_SSP && !PREEMPT]
    }
   }
   config BACKLIGHT_CLASS_DEVICE tristate {
    prompt "Lowlevel Backlight controls" if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    depends on [BACKLIGHT_LCD_SUPPORT]
    default [m] if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    inherited [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    config BACKLIGHT_ATMEL_LCDC boolean {
     prompt "Atmel LCDC Contrast-as-Backlight control" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && FB_ATMEL]
     depends on [BACKLIGHT_CLASS_DEVICE && FB_ATMEL]
     default [y] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && FB_ATMEL && (MACH_SAM9261EK || MACH_SAM9G10EK || MACH_SAM9263EK)]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && FB_ATMEL]
    }
    config BACKLIGHT_ATMEL_PWM tristate {
     prompt "Atmel PWM backlight control" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && ATMEL_PWM]
     depends on [BACKLIGHT_CLASS_DEVICE && ATMEL_PWM]
     default [n] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && ATMEL_PWM]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && ATMEL_PWM]
    }
    config BACKLIGHT_GENERIC tristate {
     prompt "Generic (aka Sharp Corgi) Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE]
     depends on [BACKLIGHT_CLASS_DEVICE]
     default [y] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE]
    }
    config BACKLIGHT_LOCOMO tristate {
     prompt "Sharp LOCOMO LCD/Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO]
     depends on [BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO]
     default [y] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO]
    }
    config BACKLIGHT_OMAP1 tristate {
     prompt "OMAP1 PWL-based LCD Backlight" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && ARCH_OMAP1]
     depends on [BACKLIGHT_CLASS_DEVICE && ARCH_OMAP1]
     default [y] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && ARCH_OMAP1]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && ARCH_OMAP1]
    }
    config BACKLIGHT_HP680 tristate {
     prompt "HP Jornada 680 Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SH_HP6XX]
     depends on [BACKLIGHT_CLASS_DEVICE && SH_HP6XX]
     default [y] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SH_HP6XX]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SH_HP6XX]
    }
    config BACKLIGHT_HP700 tristate {
     prompt "HP Jornada 700 series Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SA1100_JORNADA720_SSP && !PREEMPT]
     depends on [BACKLIGHT_CLASS_DEVICE]
     depends on [SA1100_JORNADA720_SSP && !PREEMPT]
     default [y] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SA1100_JORNADA720_SSP && !PREEMPT]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SA1100_JORNADA720_SSP && !PREEMPT]
    }
    config BACKLIGHT_PROGEAR tristate {
     prompt "Frontpath ProGear Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && PCI && X86]
     depends on [BACKLIGHT_CLASS_DEVICE && PCI && X86]
     default [n] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && PCI && X86]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && PCI && X86]
    }
    config BACKLIGHT_CARILLO_RANCH tristate {
     prompt "Intel Carillo Ranch Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && LCD_CLASS_DEVICE && PCI && X86 && FB_LE80578]
     depends on [BACKLIGHT_CLASS_DEVICE && LCD_CLASS_DEVICE && PCI && X86 && FB_LE80578]
     default [n] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && LCD_CLASS_DEVICE && PCI && X86 && FB_LE80578]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && LCD_CLASS_DEVICE && PCI && X86 && FB_LE80578]
    }
    config BACKLIGHT_PWM tristate {
     prompt "Generic PWM based Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && HAVE_PWM]
     depends on [BACKLIGHT_CLASS_DEVICE && HAVE_PWM]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && HAVE_PWM]
    }
    config BACKLIGHT_DA903X tristate {
     prompt "Backlight Driver for DA9030/DA9034 using WLED" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && PMIC_DA903X]
     depends on [BACKLIGHT_CLASS_DEVICE && PMIC_DA903X]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && PMIC_DA903X]
    }
    config BACKLIGHT_MBP_NVIDIA tristate {
     prompt "MacBook Pro Nvidia Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && X86]
     depends on [BACKLIGHT_CLASS_DEVICE && X86]
     default [n] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && X86]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && X86]
    }
    config BACKLIGHT_TOSA tristate {
     prompt "Sharp SL-6000 Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && I2C && MACH_TOSA && LCD_TOSA]
     depends on [BACKLIGHT_CLASS_DEVICE && I2C]
     depends on [MACH_TOSA && LCD_TOSA]
     default [n] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && I2C && MACH_TOSA && LCD_TOSA]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && I2C && MACH_TOSA && LCD_TOSA]
    }
    config BACKLIGHT_SAHARA tristate {
     prompt "Tabletkiosk Sahara Touch-iT Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && X86]
     depends on [BACKLIGHT_CLASS_DEVICE && X86]
     default [n] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && X86]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && X86]
    }
    config BACKLIGHT_WM831X tristate {
     prompt "WM831x PMIC Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && MFD_WM831X]
     depends on [BACKLIGHT_CLASS_DEVICE && MFD_WM831X]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && MFD_WM831X]
    }
    config BACKLIGHT_ADX tristate {
     prompt "Avionic Design Xanthos Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && ARCH_PXA_ADX]
     depends on [BACKLIGHT_CLASS_DEVICE && ARCH_PXA_ADX]
     default [y] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && ARCH_PXA_ADX]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && ARCH_PXA_ADX]
    }
    config BACKLIGHT_ADP5520 tristate {
     prompt "Backlight Driver for ADP5520/ADP5501 using WLED" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && PMIC_ADP5520]
     depends on [BACKLIGHT_CLASS_DEVICE && PMIC_ADP5520]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && PMIC_ADP5520]
    }
   }
  }
  menu "Display device support" {
   depends on [HAS_IOMEM]
   config DISPLAY_SUPPORT tristate {
    prompt "Display panel/monitor support" if [HAS_IOMEM]
    inherited [HAS_IOMEM]
   }
  }
  if [HAS_IOMEM && VT] {
   menu "Console display driver support" {
    depends on [HAS_IOMEM && VT]
    config VGA_CONSOLE boolean {
     prompt "VGA text console" if [HAS_IOMEM && VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH && !BLACKFIN && !AVR32 && !MN10300 && (EMBEDDED || !X86)]
     depends on [!ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH && !BLACKFIN && !AVR32 && !MN10300]
     default [y] if [HAS_IOMEM && VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH && !BLACKFIN && !AVR32 && !MN10300]
     inherited [HAS_IOMEM && VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH && !BLACKFIN && !AVR32 && !MN10300]
     config VGACON_SOFT_SCROLLBACK boolean {
      prompt "Enable Scrollback Buffer in System RAM" if [HAS_IOMEM && VT && VGA_CONSOLE]
      depends on [VGA_CONSOLE]
      default [n] if [HAS_IOMEM && VT && VGA_CONSOLE]
      inherited [HAS_IOMEM && VT && VGA_CONSOLE]
      config VGACON_SOFT_SCROLLBACK_SIZE integer {
       prompt "Scrollback Buffer Size (in KB)" if [HAS_IOMEM && VT && VGACON_SOFT_SCROLLBACK]
       depends on [VGACON_SOFT_SCROLLBACK]
       default [64] if [HAS_IOMEM && VT && VGACON_SOFT_SCROLLBACK]
       inherited [HAS_IOMEM && VT && VGACON_SOFT_SCROLLBACK]
      }
     }
    }
    config MDA_CONSOLE tristate {
     depends on [!M68K && !PARISC && ISA]
     prompt "MDA text console (dual-headed) (EXPERIMENTAL)" if [HAS_IOMEM && VT && !M68K && !PARISC && ISA]
     inherited [HAS_IOMEM && VT && !M68K && !PARISC && ISA]
    }
    config SGI_NEWPORT_CONSOLE tristate {
     prompt "SGI Newport Console support" if [HAS_IOMEM && VT && SGI_IP22]
     depends on [SGI_IP22]
     inherited [HAS_IOMEM && VT && SGI_IP22]
    }
    config DUMMY_CONSOLE boolean {
     depends on [VGA_CONSOLE!="y" || SGI_NEWPORT_CONSOLE!="y"]
     default [y] if [HAS_IOMEM && VT && (!VGA_CONSOLE || SGI_NEWPORT_CONSOLE!="y")]
     inherited [HAS_IOMEM && VT && (!VGA_CONSOLE || SGI_NEWPORT_CONSOLE!="y")]
    }
    config DUMMY_CONSOLE_COLUMNS integer {
     prompt "Initial number of console screen columns" if [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
     depends on [PARISC && DUMMY_CONSOLE]
     default [160] if [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
     inherited [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
    }
    config DUMMY_CONSOLE_ROWS integer {
     prompt "Initial number of console screen rows" if [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
     depends on [PARISC && DUMMY_CONSOLE]
     default [64] if [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
     inherited [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
    }
    config FRAMEBUFFER_CONSOLE tristate {
     prompt "Framebuffer Console support" if [HAS_IOMEM && VT && FB]
     depends on [FB]
     select CRC32 if [HAS_IOMEM && VT && FB]
     inherited [HAS_IOMEM && VT && FB]
     config FRAMEBUFFER_CONSOLE_DETECT_PRIMARY boolean {
      prompt "Map the console to the primary display device" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
      depends on [FRAMEBUFFER_CONSOLE]
      default [n] if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
      inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
     }
     config FRAMEBUFFER_CONSOLE_ROTATION boolean {
      prompt "Framebuffer Console Rotation" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
      depends on [FRAMEBUFFER_CONSOLE]
      inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
     }
    }
    config STI_CONSOLE boolean {
     prompt "STI text console" if [HAS_IOMEM && VT && PARISC]
     depends on [PARISC]
     default [y] if [HAS_IOMEM && VT && PARISC]
     inherited [HAS_IOMEM && VT && PARISC]
    }
    config FONTS boolean {
     prompt "Select compiled-in fonts" if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     depends on [FRAMEBUFFER_CONSOLE || STI_CONSOLE]
     inherited [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     config FONT_8x8 boolean {
      prompt "VGA 8x8 font" if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && FONTS]
      depends on [FRAMEBUFFER_CONSOLE || STI_CONSOLE]
      default [y] if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && !SPARC && !FONTS]
      inherited [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     }
     config FONT_8x16 boolean {
      prompt "VGA 8x16 font" if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON) && FONTS]
      depends on [FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON]
      default [y] if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON) && !SPARC && !FONTS]
      inherited [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON)]
     }
     config FONT_6x11 boolean {
      prompt "Mac console 6x11 font (not supported by all drivers)" if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && FONTS]
      depends on [FRAMEBUFFER_CONSOLE || STI_CONSOLE]
      default [y] if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && !SPARC && !FONTS && MAC]
      inherited [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     }
     config FONT_7x14 boolean {
      prompt "console 7x14 font (not supported by all drivers)" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && FONTS]
      depends on [FRAMEBUFFER_CONSOLE]
      inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
     }
     config FONT_PEARL_8x8 boolean {
      prompt "Pearl (old m68k) console 8x8 font" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && FONTS]
      depends on [FRAMEBUFFER_CONSOLE]
      default [y] if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && !SPARC && !FONTS && AMIGA]
      inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
     }
     config FONT_ACORN_8x8 boolean {
      prompt "Acorn console 8x8 font" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && FONTS]
      depends on [FRAMEBUFFER_CONSOLE]
      default [y] if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && !SPARC && !FONTS && ARM && ARCH_ACORN]
      inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
     }
     config FONT_MINI_4x6 boolean {
      prompt "Mini 4x6 font" if [HAS_IOMEM && VT && !SPARC && FONTS]
      depends on [!SPARC && FONTS]
      inherited [HAS_IOMEM && VT && !SPARC && FONTS]
     }
    }
    config FONT_SUN8x16 boolean {
     prompt "Sparc console 8x16 font" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     depends on [FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
    }
    config FONT_SUN12x22 boolean {
     prompt "Sparc console 12x22 font (not supported by all drivers)" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     depends on [FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
    }
    config FONT_10x18 boolean {
     prompt "console 10x18 font (not supported by all drivers)" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && FONTS]
     depends on [FRAMEBUFFER_CONSOLE]
     inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
    }
   }
  }
  if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE)] {
   menuconfig LOGO boolean {
    prompt "Bootup logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE)]
    depends on [FB || SGI_NEWPORT_CONSOLE]
    inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE)]
    if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO] {
     config FB_LOGO_EXTRA boolean {
      depends on [FB="y"]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && FB="y" && SPU_BASE]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && FB="y"]
     }
     config LOGO_LINUX_MONO boolean {
      prompt "Standard black and white Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
     }
     config LOGO_LINUX_VGA16 boolean {
      prompt "Standard 16-color Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
     }
     config LOGO_LINUX_CLUT224 boolean {
      prompt "Standard 224-color Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
     }
     config LOGO_BLACKFIN_VGA16 boolean {
      prompt "16-colour Blackfin Processor Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && BLACKFIN]
      depends on [BLACKFIN]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && BLACKFIN]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && BLACKFIN]
     }
     config LOGO_BLACKFIN_CLUT224 boolean {
      prompt "224-colour Blackfin Processor Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && BLACKFIN]
      depends on [BLACKFIN]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && BLACKFIN]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && BLACKFIN]
     }
     config LOGO_DEC_CLUT224 boolean {
      prompt "224-color Digital Equipment Corporation Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)]
      depends on [MACH_DECSTATION || ALPHA]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)]
     }
     config LOGO_MAC_CLUT224 boolean {
      prompt "224-color Macintosh Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC]
      depends on [MAC]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC]
     }
     config LOGO_PARISC_CLUT224 boolean {
      prompt "224-color PA-RISC Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC]
      depends on [PARISC]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC]
     }
     config LOGO_SGI_CLUT224 boolean {
      prompt "224-color SGI Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)]
      depends on [SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)]
     }
     config LOGO_SUN_CLUT224 boolean {
      prompt "224-color Sun Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SPARC]
      depends on [SPARC]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SPARC]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SPARC]
     }
     config LOGO_SUPERH_MONO boolean {
      prompt "Black and white SuperH Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      depends on [SUPERH]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
     }
     config LOGO_SUPERH_VGA16 boolean {
      prompt "16-color SuperH Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      depends on [SUPERH]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
     }
     config LOGO_SUPERH_CLUT224 boolean {
      prompt "224-color SuperH Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      depends on [SUPERH]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
     }
     config LOGO_M32R_CLUT224 boolean {
      prompt "224-color M32R Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R]
      depends on [M32R]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R]
     }
    }
   }
  }
 }
 menuconfig SOUND tristate {
  prompt "Sound card support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [SOUND] {
   config SOUND_OSS_CORE boolean {
    default [n] if [SOUND]
    inherited [SOUND]
   }
   config SOUND_OSS_CORE_PRECLAIM boolean {
    prompt "Preclaim OSS device numbers" if [SOUND && SOUND_OSS_CORE]
    depends on [SOUND_OSS_CORE]
    default [y] if [SOUND && SOUND_OSS_CORE]
    inherited [SOUND && SOUND_OSS_CORE]
   }
   config DMASOUND_ATARI tristate {
    prompt "Atari DMA sound support" if [ATARI && SOUND]
    depends on [ATARI && SOUND]
    select DMASOUND if [ATARI && SOUND]
    inherited [ATARI && SOUND]
   }
   config DMASOUND_PAULA tristate {
    prompt "Amiga DMA sound support" if [AMIGA && SOUND]
    depends on [AMIGA && SOUND]
    select DMASOUND if [AMIGA && SOUND]
    inherited [AMIGA && SOUND]
   }
   config DMASOUND_Q40 tristate {
    prompt "Q40 sound support" if [Q40 && SOUND]
    depends on [Q40 && SOUND]
    select DMASOUND if [Q40 && SOUND]
    inherited [Q40 && SOUND]
   }
   config DMASOUND tristate {
    select SOUND_OSS_CORE if [SOUND]
    inherited [SOUND]
   }
   if [SOUND && !M68K] {
    menuconfig SND tristate {
     prompt "Advanced Linux Sound Architecture" if [SOUND && !M68K]
     inherited [SOUND && !M68K]
     if [SOUND && !M68K && SND] {
      config SND_TIMER tristate {
       inherited [SOUND && !M68K && SND]
      }
      config SND_PCM tristate {
       select SND_TIMER if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_HWDEP tristate {
       inherited [SOUND && !M68K && SND]
      }
      config SND_RAWMIDI tristate {
       inherited [SOUND && !M68K && SND]
      }
      config SND_JACK boolean {
       inherited [SOUND && !M68K && SND]
      }
      config SND_SEQUENCER tristate {
       prompt "Sequencer support" if [SOUND && !M68K && SND]
       select SND_TIMER if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
       config SND_SEQ_DUMMY tristate {
        prompt "Sequencer dummy client" if [SOUND && !M68K && SND && SND_SEQUENCER]
        depends on [SND_SEQUENCER]
        inherited [SOUND && !M68K && SND && SND_SEQUENCER]
       }
      }
      config SND_OSSEMUL boolean {
       select SOUND_OSS_CORE if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_MIXER_OSS tristate {
       prompt "OSS Mixer API" if [SOUND && !M68K && SND]
       select SND_OSSEMUL if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_PCM_OSS tristate {
       prompt "OSS PCM (digital audio) API" if [SOUND && !M68K && SND]
       select SND_OSSEMUL if [SOUND && !M68K && SND]
       select SND_PCM if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
       config SND_PCM_OSS_PLUGINS boolean {
        prompt "OSS PCM (digital audio) API - Include plugin system" if [SOUND && !M68K && SND && SND_PCM_OSS]
        depends on [SND_PCM_OSS]
        default [y] if [SOUND && !M68K && SND && SND_PCM_OSS]
        inherited [SOUND && !M68K && SND && SND_PCM_OSS]
       }
      }
      config SND_SEQUENCER_OSS boolean {
       prompt "OSS Sequencer API" if [SOUND && !M68K && SND && SND_SEQUENCER]
       depends on [SND_SEQUENCER]
       select SND_OSSEMUL if [SOUND && !M68K && SND && SND_SEQUENCER]
       inherited [SOUND && !M68K && SND && SND_SEQUENCER]
      }
      config SND_HRTIMER tristate {
       prompt "HR-timer backend support" if [SOUND && !M68K && SND && HIGH_RES_TIMERS]
       depends on [HIGH_RES_TIMERS]
       select SND_TIMER if [SOUND && !M68K && SND && HIGH_RES_TIMERS]
       inherited [SOUND && !M68K && SND && HIGH_RES_TIMERS]
       config SND_SEQ_HRTIMER_DEFAULT boolean {
        prompt "Use HR-timer as default sequencer timer" if [SOUND && !M68K && SND && SND_HRTIMER && SND_SEQUENCER]
        depends on [SND_HRTIMER && SND_SEQUENCER]
        default [y] if [SOUND && !M68K && SND && SND_HRTIMER && SND_SEQUENCER]
        inherited [SOUND && !M68K && SND && SND_HRTIMER && SND_SEQUENCER]
       }
      }
      config SND_RTCTIMER tristate {
       prompt "RTC Timer support" if [SOUND && !M68K && SND && RTC]
       depends on [RTC]
       select SND_TIMER if [SOUND && !M68K && SND && RTC]
       inherited [SOUND && !M68K && SND && RTC]
       config SND_SEQ_RTCTIMER_DEFAULT boolean {
        prompt "Use RTC as default sequencer timer" if [SOUND && !M68K && SND && SND_RTCTIMER && SND_SEQUENCER && !SND_SEQ_HRTIMER_DEFAULT]
        depends on [SND_RTCTIMER && SND_SEQUENCER]
        depends on [!SND_SEQ_HRTIMER_DEFAULT]
        default [y] if [SOUND && !M68K && SND && SND_RTCTIMER && SND_SEQUENCER && !SND_SEQ_HRTIMER_DEFAULT]
        inherited [SOUND && !M68K && SND && SND_RTCTIMER && SND_SEQUENCER && !SND_SEQ_HRTIMER_DEFAULT]
       }
      }
      config SND_DYNAMIC_MINORS boolean {
       prompt "Dynamic device file minor numbers" if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_SUPPORT_OLD_API boolean {
       prompt "Support old ALSA API" if [SOUND && !M68K && SND]
       default [y] if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_VERBOSE_PROCFS boolean {
       prompt "Verbose procfs contents" if [SOUND && !M68K && SND && PROC_FS]
       depends on [PROC_FS]
       default [y] if [SOUND && !M68K && SND && PROC_FS]
       inherited [SOUND && !M68K && SND && PROC_FS]
      }
      config SND_VERBOSE_PRINTK boolean {
       prompt "Verbose printk" if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_DEBUG boolean {
       prompt "Debug" if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
       config SND_DEBUG_VERBOSE boolean {
        prompt "More verbose debug" if [SOUND && !M68K && SND && SND_DEBUG]
        depends on [SND_DEBUG]
        inherited [SOUND && !M68K && SND && SND_DEBUG]
       }
       config SND_PCM_XRUN_DEBUG boolean {
        prompt "Enable PCM ring buffer overrun/underrun debugging" if [SOUND && !M68K && SND && SND_DEBUG && SND_VERBOSE_PROCFS]
        default [n] if [SOUND && !M68K && SND && SND_DEBUG && SND_VERBOSE_PROCFS]
        depends on [SND_DEBUG && SND_VERBOSE_PROCFS]
        inherited [SOUND && !M68K && SND && SND_DEBUG && SND_VERBOSE_PROCFS]
       }
      }
      config SND_VMASTER boolean {
       inherited [SOUND && !M68K && SND]
      }
      config SND_DMA_SGBUF boolean {
       default [y] if [SOUND && !M68K && SND && X86]
       depends on [X86]
       inherited [SOUND && !M68K && SND && X86]
      }
      config SND_RAWMIDI_SEQ tristate {
       default [SND_SEQUENCER && SND_RAWMIDI] if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_OPL3_LIB_SEQ tristate {
       default [SND_SEQUENCER && SND_OPL3_LIB] if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_OPL4_LIB_SEQ tristate {
       default [SND_SEQUENCER && SND_OPL4_LIB] if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_SBAWE_SEQ tristate {
       default [SND_SEQUENCER && SND_SBAWE] if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_EMU10K1_SEQ tristate {
       default [SND_SEQUENCER && SND_EMU10K1] if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_MPU401_UART tristate {
       select SND_RAWMIDI if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_OPL3_LIB tristate {
       select SND_TIMER if [SOUND && !M68K && SND]
       select SND_HWDEP if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_OPL4_LIB tristate {
       select SND_TIMER if [SOUND && !M68K && SND]
       select SND_HWDEP if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_VX_LIB tristate {
       select SND_HWDEP if [SOUND && !M68K && SND]
       select SND_PCM if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_AC97_CODEC tristate {
       select SND_PCM if [SOUND && !M68K && SND]
       select AC97_BUS if [SOUND && !M68K && SND]
       select SND_VMASTER if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      menuconfig SND_DRIVERS boolean {
       prompt "Generic sound devices" if [SOUND && !M68K && SND]
       default [y] if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
       if [SOUND && !M68K && SND && SND_DRIVERS] {
        config SND_PCSP tristate {
         prompt "PC-Speaker support (READ HELP!)" if [SOUND && !M68K && SND && SND_DRIVERS && PCSPKR_PLATFORM && X86 && HIGH_RES_TIMERS && INPUT && EXPERIMENTAL]
         depends on [PCSPKR_PLATFORM && X86 && HIGH_RES_TIMERS]
         depends on [INPUT]
         depends on [EXPERIMENTAL]
         select SND_PCM if [SOUND && !M68K && SND && SND_DRIVERS && PCSPKR_PLATFORM && X86 && HIGH_RES_TIMERS && INPUT && EXPERIMENTAL]
         inherited [SOUND && !M68K && SND && SND_DRIVERS && PCSPKR_PLATFORM && X86 && HIGH_RES_TIMERS && INPUT && EXPERIMENTAL]
        }
        config SND_DUMMY tristate {
         prompt "Dummy (/dev/null) soundcard" if [SOUND && !M68K && SND && SND_DRIVERS]
         select SND_PCM if [SOUND && !M68K && SND && SND_DRIVERS]
         inherited [SOUND && !M68K && SND && SND_DRIVERS]
        }
        config SND_VIRMIDI tristate {
         prompt "Virtual MIDI soundcard" if [SOUND && !M68K && SND && SND_DRIVERS && SND_SEQUENCER]
         depends on [SND_SEQUENCER]
         select SND_TIMER if [SOUND && !M68K && SND && SND_DRIVERS && SND_SEQUENCER]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_DRIVERS && SND_SEQUENCER]
         inherited [SOUND && !M68K && SND && SND_DRIVERS && SND_SEQUENCER]
        }
        config SND_MTPAV tristate {
         prompt "MOTU MidiTimePiece AV multiport MIDI" if [SOUND && !M68K && SND && SND_DRIVERS]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_DRIVERS]
         inherited [SOUND && !M68K && SND && SND_DRIVERS]
        }
        config SND_MTS64 tristate {
         prompt "ESI Miditerminal 4140 driver" if [SOUND && !M68K && SND && SND_DRIVERS && PARPORT]
         depends on [PARPORT]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_DRIVERS && PARPORT]
         inherited [SOUND && !M68K && SND && SND_DRIVERS && PARPORT]
        }
        config SND_SERIAL_U16550 tristate {
         prompt "UART16550 serial MIDI driver" if [SOUND && !M68K && SND && SND_DRIVERS]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_DRIVERS]
         inherited [SOUND && !M68K && SND && SND_DRIVERS]
        }
        config SND_MPU401 tristate {
         prompt "Generic MPU-401 UART driver" if [SOUND && !M68K && SND && SND_DRIVERS]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_DRIVERS]
         inherited [SOUND && !M68K && SND && SND_DRIVERS]
        }
        config SND_PORTMAN2X4 tristate {
         prompt "Portman 2x4 driver" if [SOUND && !M68K && SND && SND_DRIVERS && PARPORT]
         depends on [PARPORT]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_DRIVERS && PARPORT]
         inherited [SOUND && !M68K && SND && SND_DRIVERS && PARPORT]
        }
        config SND_ML403_AC97CR tristate {
         prompt "Xilinx ML403 AC97 Controller Reference" if [SOUND && !M68K && SND && SND_DRIVERS && XILINX_VIRTEX]
         depends on [XILINX_VIRTEX]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_DRIVERS && XILINX_VIRTEX]
         inherited [SOUND && !M68K && SND && SND_DRIVERS && XILINX_VIRTEX]
        }
        config SND_AC97_POWER_SAVE boolean {
         prompt "AC97 Power-Saving Mode" if [SOUND && !M68K && SND && SND_DRIVERS && SND_AC97_CODEC]
         depends on [SND_AC97_CODEC]
         default [n] if [SOUND && !M68K && SND && SND_DRIVERS && SND_AC97_CODEC]
         inherited [SOUND && !M68K && SND && SND_DRIVERS && SND_AC97_CODEC]
         config SND_AC97_POWER_SAVE_DEFAULT integer {
          prompt "Default time-out for AC97 power-save mode" if [SOUND && !M68K && SND && SND_DRIVERS && SND_AC97_POWER_SAVE]
          depends on [SND_AC97_POWER_SAVE]
          default [0] if [SOUND && !M68K && SND && SND_DRIVERS && SND_AC97_POWER_SAVE]
          inherited [SOUND && !M68K && SND && SND_DRIVERS && SND_AC97_POWER_SAVE]
         }
        }
       }
      }
      config SND_WSS_LIB tristate {
       select SND_PCM if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_SB_COMMON tristate {
       inherited [SOUND && !M68K && SND]
      }
      config SND_SB8_DSP tristate {
       select SND_PCM if [SOUND && !M68K && SND]
       select SND_SB_COMMON if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      config SND_SB16_DSP tristate {
       select SND_PCM if [SOUND && !M68K && SND]
       select SND_SB_COMMON if [SOUND && !M68K && SND]
       inherited [SOUND && !M68K && SND]
      }
      menuconfig SND_ISA boolean {
       prompt "ISA sound devices" if [SOUND && !M68K && SND && ISA && ISA_DMA_API]
       depends on [ISA && ISA_DMA_API]
       default [y] if [SOUND && !M68K && SND && ISA && ISA_DMA_API]
       inherited [SOUND && !M68K && SND && ISA && ISA_DMA_API]
       if [SOUND && !M68K && SND && SND_ISA] {
        config SND_ADLIB tristate {
         prompt "AdLib FM card" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_AD1816A tristate {
         prompt "Analog Devices SoundPort AD1816A" if [SOUND && !M68K && SND && SND_ISA && PNP]
         depends on [PNP]
         select ISAPNP if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_PCM if [SOUND && !M68K && SND && SND_ISA && PNP]
         inherited [SOUND && !M68K && SND && SND_ISA && PNP]
        }
        config SND_AD1848 tristate {
         prompt "Generic AD1848/CS4248 driver" if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_ALS100 tristate {
         prompt "Avance Logic ALS100/ALS120" if [SOUND && !M68K && SND && SND_ISA && PNP]
         depends on [PNP]
         select ISAPNP if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_SB16_DSP if [SOUND && !M68K && SND && SND_ISA && PNP]
         inherited [SOUND && !M68K && SND && SND_ISA && PNP]
        }
        config SND_AZT2320 tristate {
         prompt "Aztech Systems AZT2320" if [SOUND && !M68K && SND && SND_ISA && PNP]
         depends on [PNP]
         select ISAPNP if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA && PNP]
         inherited [SOUND && !M68K && SND && SND_ISA && PNP]
        }
        config SND_CMI8330 tristate {
         prompt "C-Media CMI8330" if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_SB16_DSP if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_CS4231 tristate {
         prompt "Generic Cirrus Logic CS4231 driver" if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_CS4236 tristate {
         prompt "Generic Cirrus Logic CS4232/CS4236+ driver" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_DT019X tristate {
         prompt "Diamond Technologies DT-019X, Avance Logic ALS-007" if [SOUND && !M68K && SND && SND_ISA && PNP]
         depends on [PNP]
         select ISAPNP if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_SB16_DSP if [SOUND && !M68K && SND && SND_ISA && PNP]
         inherited [SOUND && !M68K && SND && SND_ISA && PNP]
        }
        config SND_ES968 tristate {
         prompt "Generic ESS ES968 driver" if [SOUND && !M68K && SND && SND_ISA && PNP]
         depends on [PNP]
         select ISAPNP if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_SB8_DSP if [SOUND && !M68K && SND && SND_ISA && PNP]
         inherited [SOUND && !M68K && SND && SND_ISA && PNP]
        }
        config SND_ES1688 tristate {
         prompt "Generic ESS ES688/ES1688 driver" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_PCM if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_ES18XX tristate {
         prompt "Generic ESS ES18xx driver" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_PCM if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_SC6000 tristate {
         prompt "Gallant SC-6000/6600/7000 and Audio Excel DSP 16" if [SOUND && !M68K && SND && SND_ISA && HAS_IOPORT]
         depends on [HAS_IOPORT]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA && HAS_IOPORT]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA && HAS_IOPORT]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA && HAS_IOPORT]
         inherited [SOUND && !M68K && SND && SND_ISA && HAS_IOPORT]
        }
        config SND_GUSCLASSIC tristate {
         prompt "Gravis UltraSound Classic" if [SOUND && !M68K && SND && SND_ISA]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_ISA]
         select SND_PCM if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_GUSEXTREME tristate {
         prompt "Gravis UltraSound Extreme" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_PCM if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_GUSMAX tristate {
         prompt "Gravis UltraSound MAX" if [SOUND && !M68K && SND && SND_ISA]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_INTERWAVE tristate {
         prompt "AMD InterWave, Gravis UltraSound PnP" if [SOUND && !M68K && SND && SND_ISA && PNP]
         depends on [PNP]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA && PNP]
         inherited [SOUND && !M68K && SND && SND_ISA && PNP]
        }
        config SND_INTERWAVE_STB tristate {
         prompt "AMD InterWave + TEA6330T (UltraSound 32-Pro)" if [SOUND && !M68K && SND && SND_ISA && PNP]
         depends on [PNP]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_ISA && PNP]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA && PNP]
         inherited [SOUND && !M68K && SND && SND_ISA && PNP]
        }
        config SND_OPL3SA2 tristate {
         prompt "Yamaha OPL3-SA2/SA3" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_OPTI92X_AD1848 tristate {
         prompt "OPTi 82C92x - AD1848" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL4_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_OPTI92X_CS4231 tristate {
         prompt "OPTi 82C92x - CS4231" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL4_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_OPTI93X tristate {
         prompt "OPTi 82C93x" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_MIRO tristate {
         prompt "Miro miroSOUND PCM1pro/PCM12/PCM20radio driver" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL4_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_PCM if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_SB8 tristate {
         prompt "Sound Blaster 1.0/2.0/Pro (8-bit)" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_ISA]
         select SND_SB8_DSP if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_SB16 tristate {
         prompt "Sound Blaster 16 (PnP)" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_SB16_DSP if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_SBAWE tristate {
         prompt "Sound Blaster AWE (32,64) (PnP)" if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_SB16_DSP if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
         config SND_SB16_CSP boolean {
          prompt "Sound Blaster 16/AWE CSP support" if [SOUND && !M68K && SND && SND_ISA && (SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)]
          depends on [(SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)]
          select FW_LOADER if [SOUND && !M68K && SND && SND_ISA && (SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)]
          inherited [SOUND && !M68K && SND && SND_ISA && (SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)]
         }
        }
        config SND_SGALAXY tristate {
         prompt "Aztech Sound Galaxy" if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_SSCAPE tristate {
         prompt "Ensoniq SoundScape driver" if [SOUND && !M68K && SND && SND_ISA]
         select SND_HWDEP if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_WAVEFRONT tristate {
         prompt "Turtle Beach Maui,Tropez,Tropez+ (Wavefront)" if [SOUND && !M68K && SND && SND_ISA]
         select FW_LOADER if [SOUND && !M68K && SND && SND_ISA]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_ISA]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA]
         select SND_WSS_LIB if [SOUND && !M68K && SND && SND_ISA]
         inherited [SOUND && !M68K && SND && SND_ISA]
        }
        config SND_MSND_PINNACLE tristate {
         prompt "Turtle Beach MultiSound Pinnacle/Fiji driver" if [SOUND && !M68K && SND && SND_ISA && X86 && EXPERIMENTAL]
         depends on [X86 && EXPERIMENTAL]
         select FW_LOADER if [SOUND && !M68K && SND && SND_ISA && X86 && EXPERIMENTAL]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA && X86 && EXPERIMENTAL]
         select SND_PCM if [SOUND && !M68K && SND && SND_ISA && X86 && EXPERIMENTAL]
         inherited [SOUND && !M68K && SND && SND_ISA && X86 && EXPERIMENTAL]
        }
        config SND_MSND_CLASSIC tristate {
         prompt "Support for Turtle Beach MultiSound Classic, Tahiti, Monterey" if [SOUND && !M68K && SND && SND_ISA && X86 && EXPERIMENTAL]
         depends on [X86 && EXPERIMENTAL]
         select FW_LOADER if [SOUND && !M68K && SND && SND_ISA && X86 && EXPERIMENTAL]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_ISA && X86 && EXPERIMENTAL]
         select SND_PCM if [SOUND && !M68K && SND && SND_ISA && X86 && EXPERIMENTAL]
         inherited [SOUND && !M68K && SND && SND_ISA && X86 && EXPERIMENTAL]
        }
       }
      }
      menuconfig SND_PCI boolean {
       prompt "PCI sound devices" if [SOUND && !M68K && SND && PCI]
       depends on [PCI]
       default [y] if [SOUND && !M68K && SND && PCI]
       inherited [SOUND && !M68K && SND && PCI]
       if [SOUND && !M68K && SND && SND_PCI] {
        config SND_AD1889 tristate {
         prompt "Analog Devices AD1889" if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ALS300 tristate {
         prompt "Avance Logic ALS300/ALS300+" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ALS4000 tristate {
         prompt "Avance Logic ALS4000" if [SOUND && !M68K && SND && SND_PCI && ISA_DMA_API]
         depends on [ISA_DMA_API]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_PCI && ISA_DMA_API]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI && ISA_DMA_API]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI && ISA_DMA_API]
         select SND_SB_COMMON if [SOUND && !M68K && SND && SND_PCI && ISA_DMA_API]
         inherited [SOUND && !M68K && SND && SND_PCI && ISA_DMA_API]
        }
        config SND_ALI5451 tristate {
         prompt "ALi M5451 PCI Audio Controller" if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ATIIXP tristate {
         prompt "ATI IXP AC97 Controller" if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ATIIXP_MODEM tristate {
         prompt "ATI IXP Modem" if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_AU8810 tristate {
         prompt "Aureal Advantage" if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_AU8820 tristate {
         prompt "Aureal Vortex" if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_AU8830 tristate {
         prompt "Aureal Vortex 2" if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_AW2 tristate {
         prompt "Emagic Audiowerk 2" if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_AZT3328 tristate {
         prompt "Aztech AZF3328 / PCI168" if [SOUND && !M68K && SND && SND_PCI]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_BT87X tristate {
         prompt "Bt87x Audio Capture" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
         config SND_BT87X_OVERCLOCK boolean {
          prompt "Bt87x Audio overclocking" if [SOUND && !M68K && SND && SND_PCI && SND_BT87X]
          depends on [SND_BT87X]
          inherited [SOUND && !M68K && SND && SND_PCI && SND_BT87X]
         }
        }
        config SND_CA0106 tristate {
         prompt "SB Audigy LS / Live 24bit" if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_VMASTER if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_CMIPCI tristate {
         prompt "C-Media 8338, 8738, 8768, 8770" if [SOUND && !M68K && SND && SND_PCI]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_OXYGEN_LIB tristate {
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_OXYGEN tristate {
         prompt "C-Media 8788 (Oxygen)" if [SOUND && !M68K && SND && SND_PCI]
         select SND_OXYGEN_LIB if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_CS4281 tristate {
         prompt "Cirrus Logic (Sound Fusion) CS4281" if [SOUND && !M68K && SND && SND_PCI]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_CS46XX tristate {
         prompt "Cirrus Logic (Sound Fusion) CS4280/CS461x/CS462x/CS463x" if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
         config SND_CS46XX_NEW_DSP boolean {
          prompt "Cirrus Logic (Sound Fusion) New DSP support" if [SOUND && !M68K && SND && SND_PCI && SND_CS46XX]
          depends on [SND_CS46XX]
          default [y] if [SOUND && !M68K && SND && SND_PCI && SND_CS46XX]
          inherited [SOUND && !M68K && SND && SND_PCI && SND_CS46XX]
         }
        }
        config SND_CS5530 tristate {
         prompt "CS5530 Audio" if [SOUND && !M68K && SND && SND_PCI && ISA_DMA_API]
         depends on [ISA_DMA_API]
         select SND_SB16_DSP if [SOUND && !M68K && SND && SND_PCI && ISA_DMA_API]
         inherited [SOUND && !M68K && SND && SND_PCI && ISA_DMA_API]
        }
        config SND_CS5535AUDIO tristate {
         prompt "CS5535/CS5536 Audio" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_CTXFI tristate {
         prompt "Creative Sound Blaster X-Fi" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_DARLA20 tristate {
         prompt "(Echoaudio) Darla20" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_GINA20 tristate {
         prompt "(Echoaudio) Gina20" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_LAYLA20 tristate {
         prompt "(Echoaudio) Layla20" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_DARLA24 tristate {
         prompt "(Echoaudio) Darla24" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_GINA24 tristate {
         prompt "(Echoaudio) Gina24" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_LAYLA24 tristate {
         prompt "(Echoaudio) Layla24" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_MONA tristate {
         prompt "(Echoaudio) Mona" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_MIA tristate {
         prompt "(Echoaudio) Mia" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ECHO3G tristate {
         prompt "(Echoaudio) 3G cards" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_INDIGO tristate {
         prompt "(Echoaudio) Indigo" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_INDIGOIO tristate {
         prompt "(Echoaudio) Indigo IO" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_INDIGODJ tristate {
         prompt "(Echoaudio) Indigo DJ" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_INDIGOIOX tristate {
         prompt "(Echoaudio) Indigo IOx" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_INDIGODJX tristate {
         prompt "(Echoaudio) Indigo DJx" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_EMU10K1 tristate {
         prompt "Emu10k1 (SB Live!, Audigy, E-mu APS)" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_HWDEP if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_EMU10K1X tristate {
         prompt "Emu10k1X (Dell OEM Version)" if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ENS1370 tristate {
         prompt "(Creative) Ensoniq AudioPCI 1370" if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ENS1371 tristate {
         prompt "(Creative) Ensoniq AudioPCI 1371/1373" if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ES1938 tristate {
         prompt "ESS ES1938/1946/1969 (Solo-1)" if [SOUND && !M68K && SND && SND_PCI]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ES1968 tristate {
         prompt "ESS ES1968/1978 (Maestro-1/2/2E)" if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_FM801 tristate {
         prompt "ForteMedia FM801" if [SOUND && !M68K && SND && SND_PCI]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
         config SND_FM801_TEA575X_BOOL boolean {
          prompt "ForteMedia FM801 + TEA5757 tuner" if [SOUND && !M68K && SND && SND_PCI && SND_FM801 && (VIDEO_V4L2="y" || VIDEO_V4L2="SND_FM801")]
          depends on [SND_FM801]
          depends on [VIDEO_V4L2="y" || VIDEO_V4L2="SND_FM801"]
          inherited [SOUND && !M68K && SND && SND_PCI && SND_FM801 && (VIDEO_V4L2="y" || VIDEO_V4L2="SND_FM801")]
          config SND_FM801_TEA575X tristate {
           depends on [SND_FM801_TEA575X_BOOL]
           default [SND_FM801] if [SOUND && !M68K && SND && SND_PCI && SND_FM801_TEA575X_BOOL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_FM801_TEA575X_BOOL]
          }
         }
        }
        menuconfig SND_HDA_INTEL tristate {
         prompt "Intel HD Audio" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         select SND_VMASTER if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
         if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL] {
          config SND_HDA_HWDEP boolean {
           prompt "Build hwdep interface for HD-audio driver" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           select SND_HWDEP if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           config SND_HDA_RECONFIG boolean {
            prompt "Allow dynamic codec reconfiguration (EXPERIMENTAL)" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && SND_HDA_HWDEP && EXPERIMENTAL]
            depends on [SND_HDA_HWDEP && EXPERIMENTAL]
            inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && SND_HDA_HWDEP && EXPERIMENTAL]
           }
          }
          config SND_HDA_INPUT_BEEP boolean {
           prompt "Support digital beep via input layer" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && (INPUT="y" || INPUT="SND_HDA_INTEL")]
           depends on [INPUT="y" || INPUT="SND_HDA_INTEL"]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && (INPUT="y" || INPUT="SND_HDA_INTEL")]
          }
          config SND_HDA_INPUT_JACK boolean {
           prompt "Support jack plugging notification via input layer" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && (INPUT="y" || INPUT="SND_HDA_INTEL")]
           depends on [INPUT="y" || INPUT="SND_HDA_INTEL"]
           select SND_JACK if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && (INPUT="y" || INPUT="SND_HDA_INTEL")]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && (INPUT="y" || INPUT="SND_HDA_INTEL")]
          }
          config SND_HDA_PATCH_LOADER boolean {
           prompt "Support initialization patch loading for HD-audio" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && EXPERIMENTAL]
           depends on [EXPERIMENTAL]
           select FW_LOADER if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && EXPERIMENTAL]
           select SND_HDA_HWDEP if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && EXPERIMENTAL]
           select SND_HDA_RECONFIG if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && EXPERIMENTAL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && EXPERIMENTAL]
          }
          config SND_HDA_CODEC_REALTEK boolean {
           prompt "Build Realtek HD-audio codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_CODEC_ANALOG boolean {
           prompt "Build Analog Device HD-audio codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_CODEC_SIGMATEL boolean {
           prompt "Build IDT/Sigmatel HD-audio codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_CODEC_VIA boolean {
           prompt "Build VIA HD-audio codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_CODEC_ATIHDMI boolean {
           prompt "Build ATI HDMI HD-audio codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_CODEC_NVHDMI boolean {
           prompt "Build NVIDIA HDMI HD-audio codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_CODEC_INTELHDMI boolean {
           prompt "Build INTEL HDMI HD-audio codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           config SND_HDA_ELD boolean {
            default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && SND_HDA_CODEC_INTELHDMI]
            depends on [SND_HDA_CODEC_INTELHDMI]
            inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && SND_HDA_CODEC_INTELHDMI]
           }
          }
          config SND_HDA_CODEC_CIRRUS boolean {
           prompt "Build Cirrus Logic codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           depends on [SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_CODEC_CONEXANT boolean {
           prompt "Build Conexant HD-audio codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_CODEC_CA0110 boolean {
           prompt "Build Creative CA0110-IBG codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           depends on [SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_CODEC_CMEDIA boolean {
           prompt "Build C-Media HD-audio codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_CODEC_SI3054 boolean {
           prompt "Build Silicon Labs 3054 HD-modem codec support" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_GENERIC boolean {
           prompt "Enable generic HD-audio codec parser" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           default [y] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
          }
          config SND_HDA_POWER_SAVE boolean {
           prompt "Aggressive power-saving on HD-audio" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL]
           config SND_HDA_POWER_SAVE_DEFAULT integer {
            prompt "Default time-out for HD-audio power-save mode" if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && SND_HDA_POWER_SAVE]
            depends on [SND_HDA_POWER_SAVE]
            default [0] if [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && SND_HDA_POWER_SAVE]
            inherited [SOUND && !M68K && SND && SND_PCI && SND_HDA_INTEL && SND_HDA_POWER_SAVE]
           }
          }
         }
        }
        config SND_HDSP tristate {
         prompt "RME Hammerfall DSP Audio" if [SOUND && !M68K && SND && SND_PCI]
         select SND_HWDEP if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_HDSPM tristate {
         prompt "RME Hammerfall DSP MADI" if [SOUND && !M68K && SND && SND_PCI]
         select SND_HWDEP if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_HIFIER tristate {
         prompt "TempoTec HiFier Fantasia" if [SOUND && !M68K && SND && SND_PCI]
         select SND_OXYGEN_LIB if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ICE1712 tristate {
         prompt "ICEnsemble ICE1712 (Envy24)" if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_ICE1724 tristate {
         prompt "ICE/VT1724/1720 (Envy24HT/PT)" if [SOUND && !M68K && SND && SND_PCI]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         select SND_VMASTER if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_INTEL8X0 tristate {
         prompt "Intel/SiS/nVidia/AMD/ALi AC97 Controller" if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_INTEL8X0M tristate {
         prompt "Intel/SiS/nVidia/AMD MC97 Modem" if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_KORG1212 tristate {
         prompt "Korg 1212 IO" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_LX6464ES tristate {
         prompt "Digigram LX6464ES" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_MAESTRO3 tristate {
         prompt "ESS Allegro/Maestro3" if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_MIXART tristate {
         prompt "Digigram miXart" if [SOUND && !M68K && SND && SND_PCI]
         select SND_HWDEP if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_NM256 tristate {
         prompt "NeoMagic NM256AV/ZX" if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_PCXHR tristate {
         prompt "Digigram PCXHR" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         select SND_HWDEP if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_RIPTIDE tristate {
         prompt "Conexant Riptide" if [SOUND && !M68K && SND && SND_PCI]
         select FW_LOADER if [SOUND && !M68K && SND && SND_PCI]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_RME32 tristate {
         prompt "RME Digi32, 32/8, 32 PRO" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_RME96 tristate {
         prompt "RME Digi96, 96/8, 96/8 PRO" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_RME9652 tristate {
         prompt "RME Digi9652 (Hammerfall)" if [SOUND && !M68K && SND && SND_PCI]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_SIS7019 tristate {
         prompt "SiS 7019 Audio Accelerator" if [SOUND && !M68K && SND && SND_PCI && X86 && !X86_64]
         depends on [X86 && !X86_64]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI && X86 && !X86_64]
         inherited [SOUND && !M68K && SND && SND_PCI && X86 && !X86_64]
        }
        config SND_SONICVIBES tristate {
         prompt "S3 SonicVibes" if [SOUND && !M68K && SND && SND_PCI]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_TRIDENT tristate {
         prompt "Trident 4D-Wave DX/NX; SiS 7018" if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_VIA82XX tristate {
         prompt "VIA 82C686A/B, 8233/8235 AC97 Controller" if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_VIA82XX_MODEM tristate {
         prompt "VIA 82C686A/B, 8233 based Modems" if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_VIRTUOSO tristate {
         prompt "Asus Virtuoso 100/200 (Xonar)" if [SOUND && !M68K && SND && SND_PCI]
         select SND_OXYGEN_LIB if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_VX222 tristate {
         prompt "Digigram VX222" if [SOUND && !M68K && SND && SND_PCI]
         select SND_VX_LIB if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
        config SND_YMFPCI tristate {
         prompt "Yamaha YMF724/740/744/754" if [SOUND && !M68K && SND && SND_PCI]
         select SND_OPL3_LIB if [SOUND && !M68K && SND && SND_PCI]
         select SND_MPU401_UART if [SOUND && !M68K && SND && SND_PCI]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_PCI]
         inherited [SOUND && !M68K && SND && SND_PCI]
        }
       }
      }
      menuconfig SND_PPC boolean {
       prompt "PowerPC sound devices" if [SOUND && !M68K && SND && PPC]
       depends on [PPC]
       default [y] if [SOUND && !M68K && SND && PPC]
       inherited [SOUND && !M68K && SND && PPC]
       if [SOUND && !M68K && SND && SND_PPC] {
        config SND_POWERMAC tristate {
         prompt "PowerMac (AWACS, DACA, Burgundy, Tumbler, Keywest)" if [SOUND && !M68K && SND && SND_PPC && I2C && INPUT && PPC_PMAC]
         depends on [I2C && INPUT && PPC_PMAC]
         select SND_PCM if [SOUND && !M68K && SND && SND_PPC && I2C && INPUT && PPC_PMAC]
         select SND_VMASTER if [SOUND && !M68K && SND && SND_PPC && I2C && INPUT && PPC_PMAC]
         inherited [SOUND && !M68K && SND && SND_PPC && I2C && INPUT && PPC_PMAC]
         config SND_POWERMAC_AUTO_DRC boolean {
          prompt "Toggle DRC automatically at headphone/line plug-in" if [SOUND && !M68K && SND && SND_PPC && SND_POWERMAC]
          depends on [SND_POWERMAC]
          default [y] if [SOUND && !M68K && SND && SND_PPC && SND_POWERMAC]
          inherited [SOUND && !M68K && SND && SND_PPC && SND_POWERMAC]
         }
        }
        config SND_PS3 tristate {
         prompt "PS3 Audio support" if [SOUND && !M68K && SND && SND_PPC && PS3_PS3AV]
         depends on [PS3_PS3AV]
         select SND_PCM if [SOUND && !M68K && SND && SND_PPC && PS3_PS3AV]
         default [m] if [SOUND && !M68K && SND && SND_PPC && PS3_PS3AV]
         inherited [SOUND && !M68K && SND && SND_PPC && PS3_PS3AV]
         config SND_PS3_DEFAULT_START_DELAY integer {
          prompt "Startup delay time in ms" if [SOUND && !M68K && SND && SND_PPC && SND_PS3]
          depends on [SND_PS3]
          default [2000] if [SOUND && !M68K && SND && SND_PPC && SND_PS3]
          inherited [SOUND && !M68K && SND && SND_PPC && SND_PS3]
         }
        }
       }
      }
      menuconfig SND_AOA tristate {
       prompt "Apple Onboard Audio driver" if [SOUND && !M68K && SND && PPC_PMAC]
       depends on [PPC_PMAC]
       select SND_PCM if [SOUND && !M68K && SND && PPC_PMAC]
       inherited [SOUND && !M68K && SND && PPC_PMAC]
       if [SOUND && !M68K && SND && SND_AOA] {
        config SND_AOA_FABRIC_LAYOUT tristate {
         prompt "layout-id fabric" if [SOUND && !M68K && SND && SND_AOA]
         select SND_AOA_SOUNDBUS if [SOUND && !M68K && SND && SND_AOA]
         select SND_AOA_SOUNDBUS_I2S if [SOUND && !M68K && SND && SND_AOA]
         inherited [SOUND && !M68K && SND && SND_AOA]
        }
        config SND_AOA_ONYX tristate {
         prompt "support Onyx chip" if [SOUND && !M68K && SND && SND_AOA]
         select I2C if [SOUND && !M68K && SND && SND_AOA]
         select I2C_POWERMAC if [SOUND && !M68K && SND && SND_AOA]
         inherited [SOUND && !M68K && SND && SND_AOA]
        }
        config SND_AOA_TAS tristate {
         prompt "support TAS chips" if [SOUND && !M68K && SND && SND_AOA]
         select I2C if [SOUND && !M68K && SND && SND_AOA]
         select I2C_POWERMAC if [SOUND && !M68K && SND && SND_AOA]
         inherited [SOUND && !M68K && SND && SND_AOA]
        }
        config SND_AOA_TOONIE tristate {
         prompt "support Toonie chip" if [SOUND && !M68K && SND && SND_AOA]
         inherited [SOUND && !M68K && SND && SND_AOA]
        }
        config SND_AOA_SOUNDBUS tristate {
         prompt "Apple Soundbus support" if [SOUND && !M68K && SND && SND_AOA]
         select SND_PCM if [SOUND && !M68K && SND && SND_AOA]
         inherited [SOUND && !M68K && SND && SND_AOA]
         config SND_AOA_SOUNDBUS_I2S tristate {
          prompt "I2S bus support" if [SOUND && !M68K && SND && SND_AOA && SND_AOA_SOUNDBUS && PCI]
          depends on [SND_AOA_SOUNDBUS && PCI]
          inherited [SOUND && !M68K && SND && SND_AOA && SND_AOA_SOUNDBUS && PCI]
         }
        }
       }
      }
      menuconfig SND_ARM boolean {
       prompt "ARM sound devices" if [SOUND && !M68K && SND && ARM]
       depends on [ARM]
       default [y] if [SOUND && !M68K && SND && ARM]
       inherited [SOUND && !M68K && SND && ARM]
       if [SOUND && !M68K && SND && SND_ARM] {
        config SND_ARMAACI tristate {
         prompt "ARM PrimeCell PL041 AC Link support" if [SOUND && !M68K && SND && SND_ARM && ARM_AMBA]
         depends on [ARM_AMBA]
         select SND_PCM if [SOUND && !M68K && SND && SND_ARM && ARM_AMBA]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_ARM && ARM_AMBA]
         inherited [SOUND && !M68K && SND && SND_ARM && ARM_AMBA]
        }
        config SND_PXA2XX_PCM tristate {
         select SND_PCM if [SOUND && !M68K && SND && SND_ARM]
         inherited [SOUND && !M68K && SND && SND_ARM]
        }
        config SND_PXA2XX_LIB tristate {
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_ARM && SND_PXA2XX_LIB_AC97]
         inherited [SOUND && !M68K && SND && SND_ARM]
        }
        config SND_PXA2XX_LIB_AC97 boolean {
         inherited [SOUND && !M68K && SND && SND_ARM]
        }
        config SND_PXA2XX_AC97 tristate {
         prompt "AC97 driver for the Intel PXA2xx chip" if [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
         depends on [ARCH_PXA]
         select SND_PXA2XX_PCM if [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
         select SND_PXA2XX_LIB if [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
         select SND_PXA2XX_LIB_AC97 if [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
        }
       }
      }
      menu "Atmel devices (AVR32 and AT91)" {
       depends on [SOUND && !M68K && SND && (AVR32 || ARCH_AT91)]
       config SND_ATMEL_ABDAC tristate {
        prompt "Atmel Audio Bitstream DAC (ABDAC) driver" if [SOUND && !M68K && SND && (AVR32 || ARCH_AT91) && DW_DMAC && AVR32]
        select SND_PCM if [SOUND && !M68K && SND && (AVR32 || ARCH_AT91) && DW_DMAC && AVR32]
        depends on [DW_DMAC && AVR32]
        inherited [SOUND && !M68K && SND && (AVR32 || ARCH_AT91) && DW_DMAC && AVR32]
       }
       config SND_ATMEL_AC97C tristate {
        prompt "Atmel AC97 Controller (AC97C) driver" if [SOUND && !M68K && SND && (AVR32 || ARCH_AT91) && DW_DMAC && AVR32]
        select SND_PCM if [SOUND && !M68K && SND && (AVR32 || ARCH_AT91) && DW_DMAC && AVR32]
        select SND_AC97_CODEC if [SOUND && !M68K && SND && (AVR32 || ARCH_AT91) && DW_DMAC && AVR32]
        depends on [DW_DMAC && AVR32]
        inherited [SOUND && !M68K && SND && (AVR32 || ARCH_AT91) && DW_DMAC && AVR32]
       }
      }
      menuconfig SND_SPI boolean {
       prompt "SPI sound devices" if [SOUND && !M68K && SND && SPI]
       depends on [SPI]
       default [y] if [SOUND && !M68K && SND && SPI]
       inherited [SOUND && !M68K && SND && SPI]
       if [SOUND && !M68K && SND && SND_SPI] {
        config SND_AT73C213 tristate {
         prompt "Atmel AT73C213 DAC driver" if [SOUND && !M68K && SND && SND_SPI && ATMEL_SSC]
         depends on [ATMEL_SSC]
         select SND_PCM if [SOUND && !M68K && SND && SND_SPI && ATMEL_SSC]
         inherited [SOUND && !M68K && SND && SND_SPI && ATMEL_SSC]
         config SND_AT73C213_TARGET_BITRATE integer {
          prompt "Target bitrate for AT73C213" if [SOUND && !M68K && SND && SND_SPI && SND_AT73C213]
          depends on [SND_AT73C213]
          default [48000] if [SOUND && !M68K && SND && SND_SPI && SND_AT73C213]
          range [8000 50000] if [SOUND && !M68K && SND && SND_SPI && SND_AT73C213]
          inherited [SOUND && !M68K && SND && SND_SPI && SND_AT73C213]
         }
        }
       }
      }
      menuconfig SND_MIPS boolean {
       prompt "MIPS sound devices" if [SOUND && !M68K && SND && MIPS]
       depends on [MIPS]
       default [y] if [SOUND && !M68K && SND && MIPS]
       inherited [SOUND && !M68K && SND && MIPS]
       if [SOUND && !M68K && SND && SND_MIPS] {
        config SND_SGI_O2 tristate {
         prompt "SGI O2 Audio" if [SOUND && !M68K && SND && SND_MIPS && SGI_IP32]
         depends on [SGI_IP32]
         inherited [SOUND && !M68K && SND && SND_MIPS && SGI_IP32]
        }
        config SND_SGI_HAL2 tristate {
         prompt "SGI HAL2 Audio" if [SOUND && !M68K && SND && SND_MIPS && SGI_HAS_HAL2]
         depends on [SGI_HAS_HAL2]
         inherited [SOUND && !M68K && SND && SND_MIPS && SGI_HAS_HAL2]
        }
        config SND_AU1X00 tristate {
         prompt "Au1x00 AC97 Port Driver" if [SOUND && !M68K && SND && SND_MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500)]
         depends on [SOC_AU1000 || SOC_AU1100 || SOC_AU1500]
         select SND_PCM if [SOUND && !M68K && SND && SND_MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500)]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500)]
         inherited [SOUND && !M68K && SND && SND_MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500)]
        }
       }
      }
      menuconfig SND_SUPERH boolean {
       prompt "SUPERH sound devices" if [SOUND && !M68K && SND && SUPERH]
       depends on [SUPERH]
       default [y] if [SOUND && !M68K && SND && SUPERH]
       inherited [SOUND && !M68K && SND && SUPERH]
       if [SOUND && !M68K && SND && SND_SUPERH] {
        config SND_AICA tristate {
         prompt "Dreamcast Yamaha AICA sound" if [SOUND && !M68K && SND && SND_SUPERH && SH_DREAMCAST]
         depends on [SH_DREAMCAST]
         select SND_PCM if [SOUND && !M68K && SND && SND_SUPERH && SH_DREAMCAST]
         select G2_DMA if [SOUND && !M68K && SND && SND_SUPERH && SH_DREAMCAST]
         inherited [SOUND && !M68K && SND && SND_SUPERH && SH_DREAMCAST]
        }
       }
      }
      menuconfig SND_USB boolean {
       prompt "USB sound devices" if [SOUND && !M68K && SND && USB]
       depends on [USB]
       default [y] if [SOUND && !M68K && SND && USB]
       inherited [SOUND && !M68K && SND && USB]
       if [SOUND && !M68K && SND && SND_USB && USB] {
        config SND_USB_AUDIO tristate {
         prompt "USB Audio/MIDI driver" if [SOUND && !M68K && SND && SND_USB && USB]
         select SND_HWDEP if [SOUND && !M68K && SND && SND_USB && USB]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_USB && USB]
         select SND_PCM if [SOUND && !M68K && SND && SND_USB && USB]
         inherited [SOUND && !M68K && SND && SND_USB && USB]
        }
        config SND_USB_USX2Y tristate {
         prompt "Tascam US-122, US-224 and US-428 USB driver" if [SOUND && !M68K && SND && SND_USB && USB && (X86 || PPC || ALPHA)]
         depends on [X86 || PPC || ALPHA]
         select SND_HWDEP if [SOUND && !M68K && SND && SND_USB && USB && (X86 || PPC || ALPHA)]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_USB && USB && (X86 || PPC || ALPHA)]
         select SND_PCM if [SOUND && !M68K && SND && SND_USB && USB && (X86 || PPC || ALPHA)]
         inherited [SOUND && !M68K && SND && SND_USB && USB && (X86 || PPC || ALPHA)]
        }
        config SND_USB_CAIAQ tristate {
         prompt "Native Instruments USB audio devices" if [SOUND && !M68K && SND && SND_USB && USB]
         select SND_HWDEP if [SOUND && !M68K && SND && SND_USB && USB]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_USB && USB]
         select SND_PCM if [SOUND && !M68K && SND && SND_USB && USB]
         inherited [SOUND && !M68K && SND && SND_USB && USB]
         config SND_USB_CAIAQ_INPUT boolean {
          prompt "enable input device for controllers" if [SOUND && !M68K && SND && SND_USB && USB && SND_USB_CAIAQ && (INPUT="y" || INPUT="SND_USB_CAIAQ")]
          depends on [SND_USB_CAIAQ]
          depends on [INPUT="y" || INPUT="SND_USB_CAIAQ"]
          inherited [SOUND && !M68K && SND && SND_USB && USB && SND_USB_CAIAQ && (INPUT="y" || INPUT="SND_USB_CAIAQ")]
         }
        }
        config SND_USB_US122L tristate {
         prompt "Tascam US-122L USB driver" if [SOUND && !M68K && SND && SND_USB && USB && X86 && EXPERIMENTAL]
         depends on [X86 && EXPERIMENTAL]
         select SND_HWDEP if [SOUND && !M68K && SND && SND_USB && USB && X86 && EXPERIMENTAL]
         select SND_RAWMIDI if [SOUND && !M68K && SND && SND_USB && USB && X86 && EXPERIMENTAL]
         inherited [SOUND && !M68K && SND && SND_USB && USB && X86 && EXPERIMENTAL]
        }
       }
      }
      menuconfig SND_PCMCIA boolean {
       prompt "PCMCIA sound devices" if [SOUND && !M68K && SND && PCMCIA]
       depends on [PCMCIA]
       default [y] if [SOUND && !M68K && SND && PCMCIA]
       inherited [SOUND && !M68K && SND && PCMCIA]
       if [SOUND && !M68K && SND && SND_PCMCIA && PCMCIA] {
        config SND_VXPOCKET tristate {
         prompt "Digigram VXpocket" if [SOUND && !M68K && SND && SND_PCMCIA && PCMCIA]
         select SND_VX_LIB if [SOUND && !M68K && SND && SND_PCMCIA && PCMCIA]
         inherited [SOUND && !M68K && SND && SND_PCMCIA && PCMCIA]
        }
        config SND_PDAUDIOCF tristate {
         prompt "Sound Core PDAudioCF" if [SOUND && !M68K && SND && SND_PCMCIA && PCMCIA]
         select SND_PCM if [SOUND && !M68K && SND && SND_PCMCIA && PCMCIA]
         inherited [SOUND && !M68K && SND && SND_PCMCIA && PCMCIA]
        }
       }
      }
      menuconfig SND_SPARC boolean {
       prompt "Sparc sound devices" if [SOUND && !M68K && SND && SPARC]
       depends on [SPARC]
       default [y] if [SOUND && !M68K && SND && SPARC]
       inherited [SOUND && !M68K && SND && SPARC]
       if [SOUND && !M68K && SND && SND_SPARC] {
        config SND_SUN_AMD7930 tristate {
         prompt "Sun AMD7930" if [SOUND && !M68K && SND && SND_SPARC && SBUS]
         depends on [SBUS]
         select SND_PCM if [SOUND && !M68K && SND && SND_SPARC && SBUS]
         inherited [SOUND && !M68K && SND && SND_SPARC && SBUS]
        }
        config SND_SUN_CS4231 tristate {
         prompt "Sun CS4231" if [SOUND && !M68K && SND && SND_SPARC]
         select SND_PCM if [SOUND && !M68K && SND && SND_SPARC]
         inherited [SOUND && !M68K && SND && SND_SPARC]
        }
        config SND_SUN_DBRI tristate {
         prompt "Sun DBRI" if [SOUND && !M68K && SND && SND_SPARC && SBUS]
         depends on [SBUS]
         select SND_PCM if [SOUND && !M68K && SND && SND_SPARC && SBUS]
         inherited [SOUND && !M68K && SND && SND_SPARC && SBUS]
        }
       }
      }
      menuconfig SND_GSC boolean {
       prompt "GSC sound devices" if [SOUND && !M68K && SND && GSC]
       depends on [GSC]
       default [y] if [SOUND && !M68K && SND && GSC]
       inherited [SOUND && !M68K && SND && GSC]
       if [SOUND && !M68K && SND && SND_GSC] {
        config SND_HARMONY tristate {
         prompt "Harmony/Vivace sound chip" if [SOUND && !M68K && SND && SND_GSC]
         select SND_PCM if [SOUND && !M68K && SND && SND_GSC]
         inherited [SOUND && !M68K && SND && SND_GSC]
        }
       }
      }
      menuconfig SND_SOC tristate {
       prompt "ALSA for SoC audio support" if [SOUND && !M68K && SND]
       select SND_PCM if [SOUND && !M68K && SND]
       select AC97_BUS if [SOUND && !M68K && SND && SND_SOC_AC97_BUS]
       select SND_JACK if [SOUND && !M68K && SND && (INPUT="y" || INPUT="SND")]
       inherited [SOUND && !M68K && SND]
       if [SOUND && !M68K && SND && SND_SOC] {
        config SND_SOC_AC97_BUS boolean {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_ATMEL_SOC tristate {
         prompt "SoC Audio for the Atmel System-on-Chip" if [SOUND && !M68K && SND && SND_SOC && (ARCH_AT91 || AVR32)]
         depends on [ARCH_AT91 || AVR32]
         inherited [SOUND && !M68K && SND && SND_SOC && (ARCH_AT91 || AVR32)]
         config SND_ATMEL_SOC_SSC tristate {
          depends on [SND_ATMEL_SOC]
          inherited [SOUND && !M68K && SND && SND_SOC && SND_ATMEL_SOC]
         }
         config SND_AT91_SOC_SAM9G20_WM8731 tristate {
          prompt "SoC Audio support for WM8731-based At91sam9g20 evaluation board" if [SOUND && !M68K && SND && SND_SOC && ATMEL_SSC && ARCH_AT91SAM9G20 && SND_ATMEL_SOC]
          depends on [ATMEL_SSC && ARCH_AT91SAM9G20 && SND_ATMEL_SOC]
          select SND_ATMEL_SOC_SSC if [SOUND && !M68K && SND && SND_SOC && ATMEL_SSC && ARCH_AT91SAM9G20 && SND_ATMEL_SOC]
          select SND_SOC_WM8731 if [SOUND && !M68K && SND && SND_SOC && ATMEL_SSC && ARCH_AT91SAM9G20 && SND_ATMEL_SOC]
          inherited [SOUND && !M68K && SND && SND_SOC && ATMEL_SSC && ARCH_AT91SAM9G20 && SND_ATMEL_SOC]
         }
         config SND_AT32_SOC_PLAYPAQ tristate {
          prompt "SoC Audio support for PlayPaq with WM8510" if [SOUND && !M68K && SND && SND_SOC && SND_ATMEL_SOC && BOARD_PLAYPAQ]
          depends on [SND_ATMEL_SOC && BOARD_PLAYPAQ]
          select SND_ATMEL_SOC_SSC if [SOUND && !M68K && SND && SND_SOC && SND_ATMEL_SOC && BOARD_PLAYPAQ]
          select SND_SOC_WM8510 if [SOUND && !M68K && SND && SND_SOC && SND_ATMEL_SOC && BOARD_PLAYPAQ]
          inherited [SOUND && !M68K && SND && SND_SOC && SND_ATMEL_SOC && BOARD_PLAYPAQ]
          config SND_AT32_SOC_PLAYPAQ_SLAVE boolean {
           prompt "Run CODEC on PlayPaq in slave mode" if [SOUND && !M68K && SND && SND_SOC && SND_AT32_SOC_PLAYPAQ]
           depends on [SND_AT32_SOC_PLAYPAQ]
           default [n] if [SOUND && !M68K && SND && SND_SOC && SND_AT32_SOC_PLAYPAQ]
           inherited [SOUND && !M68K && SND && SND_SOC && SND_AT32_SOC_PLAYPAQ]
          }
         }
         config SND_AT91_SOC_AFEB9260 tristate {
          prompt "SoC Audio support for AFEB9260 board" if [SOUND && !M68K && SND && SND_SOC && ARCH_AT91 && MACH_AFEB9260 && SND_ATMEL_SOC]
          depends on [ARCH_AT91 && MACH_AFEB9260 && SND_ATMEL_SOC]
          select SND_ATMEL_SOC_SSC if [SOUND && !M68K && SND && SND_SOC && ARCH_AT91 && MACH_AFEB9260 && SND_ATMEL_SOC]
          select SND_SOC_TLV320AIC23 if [SOUND && !M68K && SND && SND_SOC && ARCH_AT91 && MACH_AFEB9260 && SND_ATMEL_SOC]
          inherited [SOUND && !M68K && SND && SND_SOC && ARCH_AT91 && MACH_AFEB9260 && SND_ATMEL_SOC]
         }
        }
        config SND_SOC_AU1XPSC tristate {
         prompt "SoC Audio for Au1200/Au1250/Au1550" if [SOUND && !M68K && SND && SND_SOC && (SOC_AU1200 || SOC_AU1550)]
         depends on [SOC_AU1200 || SOC_AU1550]
         inherited [SOUND && !M68K && SND && SND_SOC && (SOC_AU1200 || SOC_AU1550)]
        }
        config SND_SOC_AU1XPSC_I2S tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_AU1XPSC_AC97 tristate {
         select AC97_BUS if [SOUND && !M68K && SND && SND_SOC]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC]
         select SND_SOC_AC97_BUS if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_SAMPLE_PSC_AC97 tristate {
         prompt "Sample Au12x0/Au1550 PSC AC97 sound machine" if [SOUND && !M68K && SND && SND_SOC && SND_SOC_AU1XPSC]
         depends on [SND_SOC_AU1XPSC]
         select SND_SOC_AU1XPSC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_AU1XPSC]
         select SND_SOC_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC && SND_SOC_AU1XPSC]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_SOC_AU1XPSC]
        }
        config SND_BF5XX_I2S tristate {
         prompt "SoC I2S Audio for the ADI BF5xx chip" if [SOUND && !M68K && SND && SND_SOC && BLACKFIN]
         depends on [BLACKFIN]
         inherited [SOUND && !M68K && SND && SND_SOC && BLACKFIN]
         config SND_BF5XX_SOC_SSM2602 tristate {
          prompt "SoC SSM2602 Audio support for BF52x ezkit" if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_I2S]
          depends on [SND_BF5XX_I2S]
          select SND_BF5XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_I2S]
          select SND_SOC_SSM2602 if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_I2S]
          select I2C if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_I2S]
          inherited [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_I2S]
         }
         config SND_BF5XX_SOC_AD73311 tristate {
          prompt "SoC AD73311 Audio support for Blackfin" if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_I2S]
          depends on [SND_BF5XX_I2S]
          select SND_BF5XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_I2S]
          select SND_SOC_AD73311 if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_I2S]
          inherited [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_I2S]
          config SND_BFIN_AD73311_SE integer {
           prompt "PF pin for AD73311L Chip Select" if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_SOC_AD73311]
           depends on [SND_BF5XX_SOC_AD73311]
           default [4] if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_SOC_AD73311]
           inherited [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_SOC_AD73311]
          }
         }
        }
        config SND_BF5XX_TDM tristate {
         prompt "SoC I2S(TDM mode) Audio for the ADI BF5xx chip" if [SOUND && !M68K && SND && BLACKFIN && SND_SOC]
         depends on [BLACKFIN && SND_SOC]
         inherited [SOUND && !M68K && SND && BLACKFIN && SND_SOC]
         config SND_BF5XX_SOC_AD1836 tristate {
          prompt "SoC AD1836 Audio support for BF5xx" if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_TDM]
          depends on [SND_BF5XX_TDM]
          select SND_BF5XX_SOC_TDM if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_TDM]
          select SND_SOC_AD1836 if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_TDM]
          inherited [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_TDM]
         }
         config SND_BF5XX_SOC_AD1938 tristate {
          prompt "SoC AD1938 Audio support for Blackfin" if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_TDM]
          depends on [SND_BF5XX_TDM]
          select SND_BF5XX_SOC_TDM if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_TDM]
          select SND_SOC_AD1938 if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_TDM]
          inherited [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_TDM]
         }
        }
        config SND_BF5XX_AC97 tristate {
         prompt "SoC AC97 Audio for the ADI BF5xx chip" if [SOUND && !M68K && SND && SND_SOC && BLACKFIN]
         depends on [BLACKFIN]
         inherited [SOUND && !M68K && SND && SND_SOC && BLACKFIN]
         config SND_BF5XX_MMAP_SUPPORT boolean {
          prompt "Enable MMAP Support" if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
          depends on [SND_BF5XX_AC97]
          default [y] if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
          inherited [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
         }
         config SND_BF5XX_MULTICHAN_SUPPORT boolean {
          prompt "Enable Multichannel Support" if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
          depends on [SND_BF5XX_AC97]
          default [n] if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
          inherited [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
         }
         config SND_BF5XX_HAVE_COLD_RESET boolean {
          prompt "BOARD has COLD Reset GPIO" if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
          depends on [SND_BF5XX_AC97]
          default [y] if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97 && BFIN548_EZKIT]
          default [n] if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97 && !BFIN548_EZKIT]
          inherited [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
          config SND_BF5XX_RESET_GPIO_NUM integer {
           prompt "Set a GPIO for cold reset" if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_HAVE_COLD_RESET]
           depends on [SND_BF5XX_HAVE_COLD_RESET]
           range [0 159] if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_HAVE_COLD_RESET]
           default [19] if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_HAVE_COLD_RESET && BFIN548_EZKIT]
           default [5] if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_HAVE_COLD_RESET && BFIN537_STAMP]
           default [0] if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_HAVE_COLD_RESET]
           inherited [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_HAVE_COLD_RESET]
          }
         }
         config SND_BF5XX_SOC_AD1980 tristate {
          prompt "SoC AD1980/1 Audio support for BF5xx" if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
          depends on [SND_BF5XX_AC97]
          select SND_BF5XX_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
          select SND_SOC_AD1980 if [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
          inherited [SOUND && !M68K && SND && SND_SOC && SND_BF5XX_AC97]
         }
        }
        config SND_BF5XX_SOC_SPORT tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_BF5XX_SOC_I2S tristate {
         select SND_BF5XX_SOC_SPORT if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_BF5XX_SOC_TDM tristate {
         select SND_BF5XX_SOC_SPORT if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_BF5XX_SOC_AC97 tristate {
         select AC97_BUS if [SOUND && !M68K && SND && SND_SOC]
         select SND_SOC_AC97_BUS if [SOUND && !M68K && SND && SND_SOC]
         select SND_BF5XX_SOC_SPORT if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_BF5XX_SPORT_NUM integer {
         prompt "Set a SPORT for Sound chip" if [SOUND && !M68K && SND && SND_SOC && (SND_BF5XX_I2S || SND_BF5XX_AC97 || SND_BF5XX_TDM)]
         depends on [SND_BF5XX_I2S || SND_BF5XX_AC97 || SND_BF5XX_TDM]
         range [0 3] if [SOUND && !M68K && SND && SND_SOC && (SND_BF5XX_I2S || SND_BF5XX_AC97 || SND_BF5XX_TDM) && BF54x]
         range [0 1] if [SOUND && !M68K && SND && SND_SOC && (SND_BF5XX_I2S || SND_BF5XX_AC97 || SND_BF5XX_TDM) && !BF54x]
         default [0] if [SOUND && !M68K && SND && SND_SOC && (SND_BF5XX_I2S || SND_BF5XX_AC97 || SND_BF5XX_TDM)]
         inherited [SOUND && !M68K && SND && SND_SOC && (SND_BF5XX_I2S || SND_BF5XX_AC97 || SND_BF5XX_TDM)]
        }
        config SND_DAVINCI_SOC tristate {
         prompt "SoC Audio for the TI DAVINCI chip" if [SOUND && !M68K && SND && SND_SOC && ARCH_DAVINCI]
         depends on [ARCH_DAVINCI]
         inherited [SOUND && !M68K && SND && SND_SOC && ARCH_DAVINCI]
        }
        config SND_DAVINCI_SOC_I2S tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_DAVINCI_SOC_MCASP tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_DAVINCI_SOC_EVM tristate {
         prompt "SoC Audio support for DaVinci DM6446 or DM355 EVM" if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && (MACH_DAVINCI_EVM || MACH_DAVINCI_DM355_EVM)]
         depends on [SND_DAVINCI_SOC]
         depends on [MACH_DAVINCI_EVM || MACH_DAVINCI_DM355_EVM]
         select SND_DAVINCI_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && (MACH_DAVINCI_EVM || MACH_DAVINCI_DM355_EVM)]
         select SND_SOC_TLV320AIC3X if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && (MACH_DAVINCI_EVM || MACH_DAVINCI_DM355_EVM)]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && (MACH_DAVINCI_EVM || MACH_DAVINCI_DM355_EVM)]
        }
        config SND_DM6467_SOC_EVM tristate {
         prompt "SoC Audio support for DaVinci DM6467 EVM" if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM]
         depends on [SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM]
         select SND_DAVINCI_SOC_MCASP if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM]
         select SND_SOC_TLV320AIC3X if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM]
         select SND_SOC_SPDIF if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM]
        }
        config SND_DAVINCI_SOC_SFFSDR tristate {
         prompt "SoC Audio support for SFFSDR" if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_SFFSDR]
         depends on [SND_DAVINCI_SOC && MACH_SFFSDR]
         select SND_DAVINCI_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_SFFSDR]
         select SND_SOC_PCM3008 if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_SFFSDR]
         select SFFSDR_FPGA if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_SFFSDR]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_SFFSDR]
        }
        config SND_DA830_SOC_EVM tristate {
         prompt "SoC Audio support for DA830/OMAP-L137 EVM" if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DA830_EVM]
         depends on [SND_DAVINCI_SOC && MACH_DAVINCI_DA830_EVM]
         select SND_DAVINCI_SOC_MCASP if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DA830_EVM]
         select SND_SOC_TLV320AIC3X if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DA830_EVM]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DA830_EVM]
        }
        config SND_DA850_SOC_EVM tristate {
         prompt "SoC Audio support for DA850/OMAP-L138 EVM" if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DA850_EVM]
         depends on [SND_DAVINCI_SOC && MACH_DAVINCI_DA850_EVM]
         select SND_DAVINCI_SOC_MCASP if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DA850_EVM]
         select SND_SOC_TLV320AIC3X if [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DA850_EVM]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_DAVINCI_SOC && MACH_DAVINCI_DA850_EVM]
        }
        config SND_SOC_OF_SIMPLE tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_MPC52xx_DMA tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_MPC8610 tristate {
         depends on [MPC8610]
         inherited [SOUND && !M68K && SND && SND_SOC && MPC8610]
        }
        config SND_SOC_MPC8610_HPCD tristate {
         prompt "ALSA SoC support for the Freescale MPC8610 HPCD board" if [SOUND && !M68K && SND && SND_SOC && MPC8610_HPCD && I2C]
         depends on [MPC8610_HPCD && I2C]
         select SND_SOC_MPC8610 if [SOUND && !M68K && SND && SND_SOC && MPC8610_HPCD && I2C]
         select SND_SOC_CS4270 if [SOUND && !M68K && SND && SND_SOC && MPC8610_HPCD && I2C]
         select SND_SOC_CS4270_VD33_ERRATA if [SOUND && !M68K && SND && SND_SOC && MPC8610_HPCD && I2C]
         default [y] if [SOUND && !M68K && SND && SND_SOC && I2C && MPC8610_HPCD]
         inherited [SOUND && !M68K && SND && SND_SOC && MPC8610_HPCD && I2C]
        }
        config SND_SOC_MPC5200_I2S tristate {
         prompt "Freescale MPC5200 PSC in I2S mode driver" if [SOUND && !M68K && SND && SND_SOC && PPC_MPC52xx && PPC_BESTCOMM]
         depends on [PPC_MPC52xx && PPC_BESTCOMM]
         select SND_MPC52xx_DMA if [SOUND && !M68K && SND && SND_SOC && PPC_MPC52xx && PPC_BESTCOMM]
         select PPC_BESTCOMM_GEN_BD if [SOUND && !M68K && SND && SND_SOC && PPC_MPC52xx && PPC_BESTCOMM]
         inherited [SOUND && !M68K && SND && SND_SOC && PPC_MPC52xx && PPC_BESTCOMM]
        }
        config SND_SOC_MPC5200_AC97 tristate {
         prompt "Freescale MPC5200 PSC in AC97 mode driver" if [SOUND && !M68K && SND && SND_SOC && PPC_MPC52xx && PPC_BESTCOMM]
         depends on [PPC_MPC52xx && PPC_BESTCOMM]
         select SND_SOC_AC97_BUS if [SOUND && !M68K && SND && SND_SOC && PPC_MPC52xx && PPC_BESTCOMM]
         select SND_MPC52xx_DMA if [SOUND && !M68K && SND && SND_SOC && PPC_MPC52xx && PPC_BESTCOMM]
         select PPC_BESTCOMM_GEN_BD if [SOUND && !M68K && SND && SND_SOC && PPC_MPC52xx && PPC_BESTCOMM]
         inherited [SOUND && !M68K && SND && SND_SOC && PPC_MPC52xx && PPC_BESTCOMM]
        }
        config SND_MPC52xx_SOC_PCM030 tristate {
         prompt "SoC AC97 Audio support for Phytec pcm030 and WM9712" if [SOUND && !M68K && SND && SND_SOC && PPC_MPC5200_SIMPLE]
         depends on [PPC_MPC5200_SIMPLE]
         select SND_SOC_MPC5200_AC97 if [SOUND && !M68K && SND && SND_SOC && PPC_MPC5200_SIMPLE]
         select SND_SOC_WM9712 if [SOUND && !M68K && SND && SND_SOC && PPC_MPC5200_SIMPLE]
         inherited [SOUND && !M68K && SND && SND_SOC && PPC_MPC5200_SIMPLE]
        }
        config SND_MPC52xx_SOC_EFIKA tristate {
         prompt "SoC AC97 Audio support for bbplan Efika and STAC9766" if [SOUND && !M68K && SND && SND_SOC && PPC_EFIKA]
         depends on [PPC_EFIKA]
         select SND_SOC_MPC5200_AC97 if [SOUND && !M68K && SND && SND_SOC && PPC_EFIKA]
         select SND_SOC_STAC9766 if [SOUND && !M68K && SND && SND_SOC && PPC_EFIKA]
         inherited [SOUND && !M68K && SND && SND_SOC && PPC_EFIKA]
        }
        config SND_MX1_MX2_SOC tristate {
         prompt "SoC Audio for Freecale i.MX1x i.MX2x CPUs" if [SOUND && !M68K && SND && SND_SOC && (ARCH_MX2 || ARCH_MX1)]
         depends on [ARCH_MX2 || ARCH_MX1]
         select SND_PCM if [SOUND && !M68K && SND && SND_SOC && (ARCH_MX2 || ARCH_MX1)]
         inherited [SOUND && !M68K && SND && SND_SOC && (ARCH_MX2 || ARCH_MX1)]
        }
        config SND_MXC_SOC_SSI tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_MX27VIS_WM8974 tristate {
         prompt "SoC Audio support for MX27 - WM8974 Visstrim_sm10 board" if [SOUND && !M68K && SND && SND_SOC && SND_MX1_MX2_SOC && MACH_MX27 && MACH_IMX27_VISSTRIM_M10]
         depends on [SND_MX1_MX2_SOC && MACH_MX27 && MACH_IMX27_VISSTRIM_M10]
         select SND_MXC_SOC_SSI if [SOUND && !M68K && SND && SND_SOC && SND_MX1_MX2_SOC && MACH_MX27 && MACH_IMX27_VISSTRIM_M10]
         select SND_SOC_WM8974 if [SOUND && !M68K && SND && SND_SOC && SND_MX1_MX2_SOC && MACH_MX27 && MACH_IMX27_VISSTRIM_M10]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_MX1_MX2_SOC && MACH_MX27 && MACH_IMX27_VISSTRIM_M10]
        }
        config SND_OMAP_SOC tristate {
         prompt "SoC Audio for the Texas Instruments OMAP chips" if [SOUND && !M68K && SND && SND_SOC && ARCH_OMAP]
         depends on [ARCH_OMAP]
         inherited [SOUND && !M68K && SND && SND_SOC && ARCH_OMAP]
        }
        config SND_OMAP_SOC_MCBSP tristate {
         select OMAP_MCBSP if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_OMAP_SOC_N810 tristate {
         prompt "SoC Audio support for Nokia N810" if [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_NOKIA_N810 && I2C]
         depends on [SND_OMAP_SOC && MACH_NOKIA_N810 && I2C]
         select SND_OMAP_SOC_MCBSP if [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_NOKIA_N810 && I2C]
         select OMAP_MUX if [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_NOKIA_N810 && I2C]
         select SND_SOC_TLV320AIC3X if [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_NOKIA_N810 && I2C]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_NOKIA_N810 && I2C]
        }
        config SND_OMAP_SOC_AMS_DELTA tristate {
         prompt "SoC Audio support for Amstrad E3 (Delta) videophone" if [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_AMS_DELTA]
         depends on [SND_OMAP_SOC && MACH_AMS_DELTA]
         select SND_OMAP_SOC_MCBSP if [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_AMS_DELTA]
         select SND_SOC_CX20442 if [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_AMS_DELTA]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_AMS_DELTA]
        }
        config SND_OMAP_SOC_OSK5912 tristate {
         prompt "SoC Audio support for omap osk5912" if [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_OMAP_OSK && I2C]
         depends on [SND_OMAP_SOC && MACH_OMAP_OSK && I2C]
         select SND_OMAP_SOC_MCBSP if [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_OMAP_OSK && I2C]
         select SND_SOC_TLV320AIC23 if [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_OMAP_OSK && I2C]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_OMAP_SOC && MACH_OMAP_OSK && I2C]
        }
        config SND_OMAP_SOC_OVERO tristate {
         prompt "SoC Audio support for Gumstix Overo" if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OVERO]
         depends on [TWL4030_CORE && SND_OMAP_SOC && MACH_OVERO]
         select SND_OMAP_SOC_MCBSP if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OVERO]
         select SND_SOC_TWL4030 if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OVERO]
         inherited [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OVERO]
        }
        config SND_OMAP_SOC_OMAP2EVM tristate {
         prompt "SoC Audio support for OMAP2EVM board" if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP2EVM]
         depends on [TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP2EVM]
         select SND_OMAP_SOC_MCBSP if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP2EVM]
         select SND_SOC_TWL4030 if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP2EVM]
         inherited [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP2EVM]
        }
        config SND_OMAP_SOC_OMAP3EVM tristate {
         prompt "SoC Audio support for OMAP3EVM board" if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3EVM]
         depends on [TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3EVM]
         select SND_OMAP_SOC_MCBSP if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3EVM]
         select SND_SOC_TWL4030 if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3EVM]
         inherited [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3EVM]
        }
        config SND_OMAP_SOC_SDP3430 tristate {
         prompt "SoC Audio support for Texas Instruments SDP3430" if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP_3430SDP]
         depends on [TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP_3430SDP]
         select SND_OMAP_SOC_MCBSP if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP_3430SDP]
         select SND_SOC_TWL4030 if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP_3430SDP]
         inherited [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP_3430SDP]
        }
        config SND_OMAP_SOC_OMAP3_PANDORA tristate {
         prompt "SoC Audio support for OMAP3 Pandora" if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3_PANDORA]
         depends on [TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3_PANDORA]
         select SND_OMAP_SOC_MCBSP if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3_PANDORA]
         select SND_SOC_TWL4030 if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3_PANDORA]
         inherited [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3_PANDORA]
        }
        config SND_OMAP_SOC_OMAP3_BEAGLE tristate {
         prompt "SoC Audio support for OMAP3 Beagle" if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3_BEAGLE]
         depends on [TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3_BEAGLE]
         select SND_OMAP_SOC_MCBSP if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3_BEAGLE]
         select SND_SOC_TWL4030 if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3_BEAGLE]
         inherited [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP3_BEAGLE]
        }
        config SND_OMAP_SOC_ZOOM2 tristate {
         prompt "SoC Audio support for Zoom2" if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP_ZOOM2]
         depends on [TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP_ZOOM2]
         select SND_OMAP_SOC_MCBSP if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP_ZOOM2]
         select SND_SOC_TWL4030 if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP_ZOOM2]
         inherited [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE && SND_OMAP_SOC && MACH_OMAP_ZOOM2]
        }
        config SND_PXA2XX_SOC tristate {
         prompt "SoC Audio for the Intel PXA2xx chip" if [SOUND && !M68K && SND && SND_SOC && ARCH_PXA]
         depends on [ARCH_PXA]
         select SND_PXA2XX_LIB if [SOUND && !M68K && SND && SND_SOC && ARCH_PXA]
         inherited [SOUND && !M68K && SND && SND_SOC && ARCH_PXA]
        }
        config SND_PXA2XX_AC97 tristate {
         prompt "AC97 driver for the Intel PXA2xx chip" if [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
         depends on [ARCH_PXA]
         select SND_PXA2XX_PCM if [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
         select SND_PXA2XX_LIB if [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
         select SND_PXA2XX_LIB_AC97 if [SOUND && !M68K && SND && SND_ARM && ARCH_PXA]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_PXA2XX_SOC_AC97 tristate {
         select AC97_BUS if [SOUND && !M68K && SND && SND_SOC]
         select SND_ARM if [SOUND && !M68K && SND && SND_SOC]
         select SND_PXA2XX_LIB_AC97 if [SOUND && !M68K && SND && SND_SOC]
         select SND_SOC_AC97_BUS if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_PXA2XX_SOC_I2S tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_PXA_SOC_SSP tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_PXA2XX_SOC_CORGI tristate {
         prompt "SoC Audio support for Sharp Zaurus SL-C7x0" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && PXA_SHARP_C7xx]
         depends on [SND_PXA2XX_SOC && PXA_SHARP_C7xx]
         select SND_PXA2XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && PXA_SHARP_C7xx]
         select SND_SOC_WM8731 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && PXA_SHARP_C7xx]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && PXA_SHARP_C7xx]
        }
        config SND_PXA2XX_SOC_SPITZ tristate {
         prompt "SoC Audio support for Sharp Zaurus SL-Cxx00" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && PXA_SHARP_Cxx00]
         depends on [SND_PXA2XX_SOC && PXA_SHARP_Cxx00]
         select SND_PXA2XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && PXA_SHARP_Cxx00]
         select SND_SOC_WM8750 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && PXA_SHARP_Cxx00]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && PXA_SHARP_Cxx00]
        }
        config SND_PXA2XX_SOC_POODLE tristate {
         prompt "SoC Audio support for Poodle" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_POODLE]
         depends on [SND_PXA2XX_SOC && MACH_POODLE]
         select SND_PXA2XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_POODLE]
         select SND_SOC_WM8731 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_POODLE]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_POODLE]
        }
        config SND_PXA2XX_SOC_TOSA tristate {
         prompt "SoC AC97 Audio support for Tosa" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_TOSA && MFD_TC6393XB]
         depends on [SND_PXA2XX_SOC && MACH_TOSA]
         depends on [MFD_TC6393XB]
         select SND_PXA2XX_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_TOSA && MFD_TC6393XB]
         select SND_SOC_WM9712 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_TOSA && MFD_TC6393XB]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_TOSA && MFD_TC6393XB]
        }
        config SND_PXA2XX_SOC_E740 tristate {
         prompt "SoC AC97 Audio support for e740" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E740]
         depends on [SND_PXA2XX_SOC && MACH_E740]
         select SND_SOC_WM9705 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E740]
         select SND_PXA2XX_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E740]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E740]
        }
        config SND_PXA2XX_SOC_E750 tristate {
         prompt "SoC AC97 Audio support for e750" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E750]
         depends on [SND_PXA2XX_SOC && MACH_E750]
         select SND_SOC_WM9705 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E750]
         select SND_PXA2XX_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E750]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E750]
        }
        config SND_PXA2XX_SOC_E800 tristate {
         prompt "SoC AC97 Audio support for e800" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E800]
         depends on [SND_PXA2XX_SOC && MACH_E800]
         select SND_SOC_WM9712 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E800]
         select SND_PXA2XX_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E800]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_E800]
        }
        config SND_PXA2XX_SOC_EM_X270 tristate {
         prompt "SoC Audio support for CompuLab EM-x270, eXeda and CM-X300" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_EM_X270]
         depends on [SND_PXA2XX_SOC && MACH_EM_X270]
         select SND_PXA2XX_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_EM_X270]
         select SND_SOC_WM9712 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_EM_X270]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_EM_X270]
        }
        config SND_PXA2XX_SOC_PALM27X boolean {
         prompt "SoC Audio support for Palm T|X, T5, E2 and LifeDrive" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && (MACH_PALMLD || MACH_PALMTX || MACH_PALMT5 || MACH_PALMTE2)]
         depends on [SND_PXA2XX_SOC && (MACH_PALMLD || MACH_PALMTX || MACH_PALMT5 || MACH_PALMTE2)]
         select SND_PXA2XX_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && (MACH_PALMLD || MACH_PALMTX || MACH_PALMT5 || MACH_PALMTE2)]
         select SND_SOC_WM9712 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && (MACH_PALMLD || MACH_PALMTX || MACH_PALMT5 || MACH_PALMTE2)]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && (MACH_PALMLD || MACH_PALMTX || MACH_PALMT5 || MACH_PALMTE2)]
        }
        config SND_SOC_ZYLONITE tristate {
         prompt "SoC Audio support for Marvell Zylonite" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_ZYLONITE]
         depends on [SND_PXA2XX_SOC && MACH_ZYLONITE]
         select SND_PXA2XX_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_ZYLONITE]
         select SND_PXA_SOC_SSP if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_ZYLONITE]
         select SND_SOC_WM9713 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_ZYLONITE]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_ZYLONITE]
        }
        config SND_PXA2XX_SOC_MAGICIAN tristate {
         prompt "SoC Audio support for HTC Magician" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_MAGICIAN]
         depends on [SND_PXA2XX_SOC && MACH_MAGICIAN]
         select SND_PXA2XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_MAGICIAN]
         select SND_PXA_SOC_SSP if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_MAGICIAN]
         select SND_SOC_UDA1380 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_MAGICIAN]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_MAGICIAN]
        }
        config SND_PXA2XX_SOC_MIOA701 tristate {
         prompt "SoC Audio support for MIO A701" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_MIOA701]
         depends on [SND_PXA2XX_SOC && MACH_MIOA701]
         select SND_PXA2XX_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_MIOA701]
         select SND_SOC_WM9713 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_MIOA701]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_MIOA701]
        }
        config SND_PXA2XX_SOC_IMOTE2 tristate {
         prompt "SoC Audio support for IMote 2" if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_INTELMOTE2 && I2C]
         depends on [SND_PXA2XX_SOC && MACH_INTELMOTE2 && I2C]
         select SND_PXA2XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_INTELMOTE2 && I2C]
         select SND_SOC_WM8940 if [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_INTELMOTE2 && I2C]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_PXA2XX_SOC && MACH_INTELMOTE2 && I2C]
        }
        config SND_S3C24XX_SOC tristate {
         prompt "SoC Audio for the Samsung S3CXXXX chips" if [SOUND && !M68K && SND && SND_SOC && (ARCH_S3C2410 || ARCH_S3C64XX)]
         depends on [ARCH_S3C2410 || ARCH_S3C64XX]
         select S3C64XX_DMA if [SOUND && !M68K && SND && SND_SOC && (ARCH_S3C2410 || ARCH_S3C64XX) && ARCH_S3C64XX]
         inherited [SOUND && !M68K && SND && SND_SOC && (ARCH_S3C2410 || ARCH_S3C64XX)]
        }
        config SND_S3C24XX_SOC_I2S tristate {
         select S3C2410_DMA if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_S3C_I2SV2_SOC tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_S3C2412_SOC_I2S tristate {
         select SND_S3C_I2SV2_SOC if [SOUND && !M68K && SND && SND_SOC]
         select S3C2410_DMA if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_S3C64XX_SOC_I2S tristate {
         select SND_S3C_I2SV2_SOC if [SOUND && !M68K && SND && SND_SOC]
         select S3C64XX_DMA if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_S3C2443_SOC_AC97 tristate {
         select S3C2410_DMA if [SOUND && !M68K && SND && SND_SOC]
         select AC97_BUS if [SOUND && !M68K && SND && SND_SOC]
         select SND_SOC_AC97_BUS if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_S3C24XX_SOC_NEO1973_WM8753 tristate {
         prompt "SoC I2S Audio support for NEO1973 - WM8753" if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_NEO1973_GTA01]
         depends on [SND_S3C24XX_SOC && MACH_NEO1973_GTA01]
         select SND_S3C24XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_NEO1973_GTA01]
         select SND_SOC_WM8753 if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_NEO1973_GTA01]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_NEO1973_GTA01]
        }
        config SND_S3C24XX_SOC_NEO1973_GTA02_WM8753 tristate {
         prompt "Audio support for the Openmoko Neo FreeRunner (GTA02)" if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_NEO1973_GTA02]
         depends on [SND_S3C24XX_SOC && MACH_NEO1973_GTA02]
         select SND_S3C24XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_NEO1973_GTA02]
         select SND_SOC_WM8753 if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_NEO1973_GTA02]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_NEO1973_GTA02]
        }
        config SND_S3C24XX_SOC_JIVE_WM8750 tristate {
         prompt "SoC I2S Audio support for Jive" if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_JIVE]
         depends on [SND_S3C24XX_SOC && MACH_JIVE]
         select SND_SOC_WM8750 if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_JIVE]
         select SND_S3C2412_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_JIVE]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_JIVE]
        }
        config SND_S3C24XX_SOC_SMDK2443_WM9710 tristate {
         prompt "SoC AC97 Audio support for SMDK2443 - WM9710" if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_SMDK2443]
         depends on [SND_S3C24XX_SOC && MACH_SMDK2443]
         select SND_S3C2443_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_SMDK2443]
         select SND_SOC_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_SMDK2443]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && MACH_SMDK2443]
        }
        config SND_S3C24XX_SOC_LN2440SBC_ALC650 tristate {
         prompt "SoC AC97 Audio support for LN2440SBC - ALC650" if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         depends on [SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_S3C2443_SOC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_SOC_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
        }
        config SND_S3C24XX_SOC_S3C24XX_UDA134X tristate {
         prompt "SoC I2S Audio support UDA134X wired to a S3C24XX" if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         depends on [SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_S3C24XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_SOC_L3 if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_SOC_UDA134X if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
        }
        config SND_S3C24XX_SOC_SIMTEC tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_S3C24XX_SOC_SIMTEC_TLV320AIC23 tristate {
         prompt "SoC I2S Audio support for TLV320AIC23 on Simtec boards" if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         depends on [SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_S3C24XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_SOC_TLV320AIC23 if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_S3C24XX_SOC_SIMTEC if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
        }
        config SND_S3C24XX_SOC_SIMTEC_HERMES tristate {
         prompt "SoC I2S Audio support for Simtec Hermes board" if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         depends on [SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_S3C24XX_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_SOC_TLV320AIC3X if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         select SND_S3C24XX_SOC_SIMTEC if [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_S3C24XX_SOC && ARCH_S3C2410]
        }
        config SND_S6000_SOC tristate {
         prompt "SoC Audio for the Stretch s6000 family" if [SOUND && !M68K && SND && SND_SOC && XTENSA_VARIANT_S6000]
         depends on [XTENSA_VARIANT_S6000]
         inherited [SOUND && !M68K && SND && SND_SOC && XTENSA_VARIANT_S6000]
        }
        config SND_S6000_SOC_I2S tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_S6000_SOC_S6IPCAM tristate {
         prompt "SoC Audio support for Stretch 6105 IP Camera" if [SOUND && !M68K && SND && SND_SOC && SND_S6000_SOC && XTENSA_PLATFORM_S6105]
         depends on [SND_S6000_SOC && XTENSA_PLATFORM_S6105]
         select SND_S6000_SOC_I2S if [SOUND && !M68K && SND && SND_SOC && SND_S6000_SOC && XTENSA_PLATFORM_S6105]
         select SND_SOC_TLV320AIC3X if [SOUND && !M68K && SND && SND_SOC && SND_S6000_SOC && XTENSA_PLATFORM_S6105]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_S6000_SOC && XTENSA_PLATFORM_S6105]
        }
        menu "SoC Audio support for SuperH" {
         depends on [SOUND && !M68K && SND && SND_SOC && SUPERH]
         config SND_SOC_PCM_SH7760 tristate {
          prompt "SoC Audio support for Renesas SH7760" if [SOUND && !M68K && SND && SND_SOC && SUPERH && CPU_SUBTYPE_SH7760 && SH_DMABRG]
          depends on [CPU_SUBTYPE_SH7760 && SH_DMABRG]
          inherited [SOUND && !M68K && SND && SND_SOC && SUPERH && CPU_SUBTYPE_SH7760 && SH_DMABRG]
         }
         config SND_SOC_SH4_HAC tristate {
          select AC97_BUS if [SOUND && !M68K && SND && SND_SOC && SUPERH]
          select SND_SOC_AC97_BUS if [SOUND && !M68K && SND && SND_SOC && SUPERH]
          inherited [SOUND && !M68K && SND && SND_SOC && SUPERH]
         }
         config SND_SOC_SH4_SSI tristate {
          inherited [SOUND && !M68K && SND && SND_SOC && SUPERH]
         }
         config SND_SOC_SH4_FSI tristate {
          prompt "SH4 FSI support" if [SOUND && !M68K && SND && SND_SOC && SUPERH && CPU_SUBTYPE_SH7724]
          depends on [CPU_SUBTYPE_SH7724]
          select SH_DMA if [SOUND && !M68K && SND && SND_SOC && SUPERH && CPU_SUBTYPE_SH7724]
          inherited [SOUND && !M68K && SND && SND_SOC && SUPERH && CPU_SUBTYPE_SH7724]
         }
         config SND_SH7760_AC97 tristate {
          prompt "SH7760 AC97 sound support" if [SOUND && !M68K && SND && SND_SOC && SUPERH && CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760]
          depends on [CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760]
          select SND_SOC_SH4_HAC if [SOUND && !M68K && SND && SND_SOC && SUPERH && CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760]
          select SND_SOC_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC && SUPERH && CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760]
          inherited [SOUND && !M68K && SND && SND_SOC && SUPERH && CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760]
         }
         config SND_FSI_AK4642 boolean {
          prompt "FSI-AK4642 sound support" if [SOUND && !M68K && SND && SND_SOC && SUPERH && SND_SOC_SH4_FSI]
          depends on [SND_SOC_SH4_FSI]
          select SND_SOC_AK4642 if [SOUND && !M68K && SND && SND_SOC && SUPERH && SND_SOC_SH4_FSI]
          inherited [SOUND && !M68K && SND && SND_SOC && SUPERH && SND_SOC_SH4_FSI]
         }
        }
        config SND_SOC_TXX9ACLC tristate {
         prompt "SoC Audio for TXx9" if [SOUND && !M68K && SND && SND_SOC && HAS_TXX9_ACLC && TXX9_DMAC]
         depends on [HAS_TXX9_ACLC && TXX9_DMAC]
         inherited [SOUND && !M68K && SND && SND_SOC && HAS_TXX9_ACLC && TXX9_DMAC]
        }
        config HAS_TXX9_ACLC boolean {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_TXX9ACLC_AC97 tristate {
         select AC97_BUS if [SOUND && !M68K && SND && SND_SOC]
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC]
         select SND_SOC_AC97_BUS if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_TXX9ACLC_GENERIC tristate {
         prompt "Generic TXx9 ACLC sound machine" if [SOUND && !M68K && SND && SND_SOC && SND_SOC_TXX9ACLC]
         depends on [SND_SOC_TXX9ACLC]
         select SND_SOC_TXX9ACLC_AC97 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_TXX9ACLC]
         select SND_SOC_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC && SND_SOC_TXX9ACLC]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_SOC_TXX9ACLC]
        }
        config SND_SOC_I2C_AND_SPI tristate {
         default [m] if [SOUND && !M68K && SND && SND_SOC && I2C="m"]
         default [y] if [SOUND && !M68K && SND && SND_SOC && I2C="y"]
         default [y] if [SOUND && !M68K && SND && SND_SOC && SPI_MASTER]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_ALL_CODECS tristate {
         prompt "Build all ASoC CODEC drivers" if [SOUND && !M68K && SND && SND_SOC]
         select SND_SOC_L3 if [SOUND && !M68K && SND && SND_SOC]
         select SND_SOC_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC && SND_SOC_AC97_BUS]
         select SND_SOC_AD1836 if [SOUND && !M68K && SND && SND_SOC && SPI_MASTER]
         select SND_SOC_AD1938 if [SOUND && !M68K && SND && SND_SOC && SPI_MASTER]
         select SND_SOC_AD1980 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_AC97_BUS]
         select SND_SOC_AD73311 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_AK4104 if [SOUND && !M68K && SND && SND_SOC && SPI_MASTER]
         select SND_SOC_AK4535 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_AK4642 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_CS4270 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_MAX9877 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_PCM3008 if [SOUND && !M68K && SND && SND_SOC]
         select SND_SOC_SPDIF if [SOUND && !M68K && SND && SND_SOC]
         select SND_SOC_SSM2602 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_STAC9766 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_AC97_BUS]
         select SND_SOC_TLV320AIC23 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_TLV320AIC26 if [SOUND && !M68K && SND && SND_SOC && SPI_MASTER]
         select SND_SOC_TLV320AIC3X if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_TWL4030 if [SOUND && !M68K && SND && SND_SOC && TWL4030_CORE]
         select SND_SOC_UDA134X if [SOUND && !M68K && SND && SND_SOC]
         select SND_SOC_UDA1380 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8350 if [SOUND && !M68K && SND && SND_SOC && MFD_WM8350]
         select SND_SOC_WM8400 if [SOUND && !M68K && SND && SND_SOC && MFD_WM8400]
         select SND_SOC_WM8510 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_I2C_AND_SPI]
         select SND_SOC_WM8523 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8580 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8728 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_I2C_AND_SPI]
         select SND_SOC_WM8731 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_I2C_AND_SPI]
         select SND_SOC_WM8750 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_I2C_AND_SPI]
         select SND_SOC_WM8753 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_I2C_AND_SPI]
         select SND_SOC_WM8776 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_I2C_AND_SPI]
         select SND_SOC_WM8900 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8903 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8940 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8960 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8961 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8971 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8974 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8988 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_I2C_AND_SPI]
         select SND_SOC_WM8990 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM8993 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM9081 if [SOUND && !M68K && SND && SND_SOC && I2C]
         select SND_SOC_WM9705 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_AC97_BUS]
         select SND_SOC_WM9712 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_AC97_BUS]
         select SND_SOC_WM9713 if [SOUND && !M68K && SND && SND_SOC && SND_SOC_AC97_BUS]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM_HUBS tristate {
         default [y] if [SOUND && !M68K && SND && SND_SOC && SND_SOC_WM8993="y"]
         default [m] if [SOUND && !M68K && SND && SND_SOC && SND_SOC_WM8993="m"]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_AC97_CODEC tristate {
         select SND_AC97_CODEC if [SOUND && !M68K && SND && SND_SOC]
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_AD1836 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_AD1938 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_AD1980 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_AD73311 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_AK4104 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_AK4535 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_AK4642 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_CS4270 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_CS4270_VD33_ERRATA boolean {
         depends on [SND_SOC_CS4270]
         inherited [SOUND && !M68K && SND && SND_SOC && SND_SOC_CS4270]
        }
        config SND_SOC_CX20442 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_L3 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_PCM3008 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_SPDIF tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_SSM2602 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_STAC9766 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_TLV320AIC23 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_TLV320AIC26 tristate {
         prompt "TI TLV320AIC26 Codec support" if [SOUND && !M68K && SND && SND_SOC && SPI && SND_SOC_OF_SIMPLE]
         depends on [SPI]
         inherited [SOUND && !M68K && SND && SND_SOC && SPI]
        }
        config SND_SOC_TLV320AIC3X tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_TWL4030 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_UDA134X tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_UDA1380 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8350 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8400 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8510 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8523 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8580 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8728 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8731 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8750 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8753 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8776 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8900 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8903 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8940 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8960 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8961 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8971 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8974 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8988 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8990 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM8993 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM9081 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM9705 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM9712 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_WM9713 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
        config SND_SOC_MAX9877 tristate {
         inherited [SOUND && !M68K && SND && SND_SOC]
        }
       }
      }
     }
    }
    menuconfig SOUND_PRIME tristate {
     prompt "Open Sound System (DEPRECATED)" if [SOUND && !M68K]
     select SOUND_OSS_CORE if [SOUND && !M68K]
     inherited [SOUND && !M68K]
     if [SOUND && !M68K && SOUND_PRIME] {
      config SOUND_BCM_CS4297A tristate {
       prompt "Crystal Sound CS4297a (for Swarm)" if [SOUND && !M68K && SOUND_PRIME && SIBYTE_SWARM]
       depends on [SIBYTE_SWARM]
       inherited [SOUND && !M68K && SOUND_PRIME && SIBYTE_SWARM]
      }
      config SOUND_VWSND tristate {
       prompt "SGI Visual Workstation Sound" if [SOUND && !M68K && SOUND_PRIME && X86_VISWS]
       depends on [X86_VISWS]
       inherited [SOUND && !M68K && SOUND_PRIME && X86_VISWS]
      }
      config SOUND_AU1550_AC97 tristate {
       prompt "Au1550/Au1200 AC97 Sound" if [SOUND && !M68K && SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)]
       depends on [SOC_AU1550 || SOC_AU1200]
       inherited [SOUND && !M68K && SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)]
      }
      config SOUND_MSNDCLAS tristate {
       prompt "Support for Turtle Beach MultiSound Classic, Tahiti, Monterey" if [SOUND && !M68K && SOUND_PRIME && (m && <choice> || !STANDALONE) && ISA]
       depends on [(m || !STANDALONE) && ISA]
       inherited [SOUND && !M68K && SOUND_PRIME && (m && <choice> || !STANDALONE) && ISA]
       config MSNDCLAS_HAVE_BOOT boolean {
        depends on [SOUND_MSNDCLAS="y" && !STANDALONE]
        default [y] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y" && !STANDALONE]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y" && !STANDALONE]
       }
       config MSNDCLAS_INIT_FILE string {
        prompt "Full pathname of MSNDINIT.BIN firmware file" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS]
        depends on [SOUND_MSNDCLAS]
        default ["/etc/sound/msndinit.bin"] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS]
       }
       config MSNDCLAS_PERM_FILE string {
        prompt "Full pathname of MSNDPERM.BIN firmware file" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS]
        depends on [SOUND_MSNDCLAS]
        default ["/etc/sound/msndperm.bin"] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS]
       }
       config MSNDCLAS_IRQ integer {
        prompt "MSND Classic IRQ 5, 7, 9, 10, 11, 12" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y"]
        depends on [SOUND_MSNDCLAS="y"]
        default [5] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y"]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y"]
       }
       config MSNDCLAS_MEM hex {
        prompt "MSND Classic memory B0000, C8000, D0000, D8000, E0000, E8000" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y"]
        depends on [SOUND_MSNDCLAS="y"]
        default [D0000] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y"]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y"]
       }
       config MSNDCLAS_IO hex {
        prompt "MSND Classic I/O 210, 220, 230, 240, 250, 260, 290, 3E0" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y"]
        depends on [SOUND_MSNDCLAS="y"]
        default [290] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y"]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDCLAS="y"]
       }
      }
      config SOUND_MSNDPIN tristate {
       prompt "Support for Turtle Beach MultiSound Pinnacle, Fiji" if [SOUND && !M68K && SOUND_PRIME && (m && <choice> || !STANDALONE) && ISA]
       depends on [(m || !STANDALONE) && ISA]
       inherited [SOUND && !M68K && SOUND_PRIME && (m && <choice> || !STANDALONE) && ISA]
       config MSNDPIN_HAVE_BOOT boolean {
        depends on [SOUND_MSNDPIN="y"]
        default [y] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
       }
       config MSNDPIN_INIT_FILE string {
        prompt "Full pathname of PNDSPINI.BIN firmware file" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN]
        depends on [SOUND_MSNDPIN]
        default ["/etc/sound/pndspini.bin"] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN]
       }
       config MSNDPIN_PERM_FILE string {
        prompt "Full pathname of PNDSPERM.BIN firmware file" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN]
        depends on [SOUND_MSNDPIN]
        default ["/etc/sound/pndsperm.bin"] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN]
       }
       config MSNDPIN_IRQ integer {
        prompt "MSND Pinnacle IRQ 5, 7, 9, 10, 11, 12" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
        depends on [SOUND_MSNDPIN="y"]
        default [5] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
       }
       config MSNDPIN_MEM hex {
        prompt "MSND Pinnacle memory B0000, C8000, D0000, D8000, E0000, E8000" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
        depends on [SOUND_MSNDPIN="y"]
        default [D0000] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
       }
       config MSNDPIN_IO hex {
        prompt "MSND Pinnacle I/O 210, 220, 230, 240, 250, 260, 290, 3E0" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
        depends on [SOUND_MSNDPIN="y"]
        default [290] if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
       }
       config MSNDPIN_DIGITAL boolean {
        prompt "MSND Pinnacle has S/PDIF I/O" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
        depends on [SOUND_MSNDPIN="y"]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
       }
       config MSNDPIN_NONPNP boolean {
        prompt "MSND Pinnacle non-PnP Mode" if [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
        depends on [SOUND_MSNDPIN="y"]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_MSNDPIN="y"]
        config MSNDPIN_CFG hex {
         prompt "MSND Pinnacle config port 250,260,270" if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         depends on [MSNDPIN_NONPNP]
         default [250] if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         inherited [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
        }
        config MSNDPIN_MPU_IO hex {
         prompt "MSND Pinnacle MPU I/O (e.g. 330)" if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         depends on [MSNDPIN_NONPNP]
         default [0] if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         inherited [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
        }
        config MSNDPIN_MPU_IRQ integer {
         prompt "MSND Pinnacle MPU IRQ (e.g. 9)" if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         depends on [MSNDPIN_NONPNP]
         default [0] if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         inherited [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
        }
        config MSNDPIN_IDE_IO0 hex {
         prompt "MSND Pinnacle IDE I/O 0 (e.g. 170)" if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         depends on [MSNDPIN_NONPNP]
         default [0] if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         inherited [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
        }
        config MSNDPIN_IDE_IO1 hex {
         prompt "MSND Pinnacle IDE I/O 1 (e.g. 376)" if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         depends on [MSNDPIN_NONPNP]
         default [0] if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         inherited [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
        }
        config MSNDPIN_IDE_IRQ integer {
         prompt "MSND Pinnacle IDE IRQ (e.g. 15)" if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         depends on [MSNDPIN_NONPNP]
         default [0] if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         inherited [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
        }
        config MSNDPIN_JOYSTICK_IO hex {
         prompt "MSND Pinnacle joystick I/O (e.g. 200)" if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         depends on [MSNDPIN_NONPNP]
         default [0] if [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
         inherited [SOUND && !M68K && SOUND_PRIME && MSNDPIN_NONPNP]
        }
       }
      }
      config MSND_FIFOSIZE integer {
       prompt "MSND buffer size (kB)" if [SOUND && !M68K && SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
       depends on [SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y"]
       default [128] if [SOUND && !M68K && SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
       inherited [SOUND && !M68K && SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
      }
      menuconfig SOUND_OSS tristate {
       prompt "OSS sound modules" if [SOUND && !M68K && SOUND_PRIME && ISA_DMA_API && VIRT_TO_BUS]
       depends on [ISA_DMA_API && VIRT_TO_BUS]
       inherited [SOUND && !M68K && SOUND_PRIME && ISA_DMA_API && VIRT_TO_BUS]
       if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS] {
        config SOUND_TRACEINIT boolean {
         prompt "Verbose initialisation" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
        }
        config SOUND_DMAP boolean {
         prompt "Persistent DMA buffers" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
        }
        config SOUND_SSCAPE tristate {
         prompt "Ensoniq SoundScape support" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
        }
        config SOUND_VMIDI tristate {
         prompt "Loopback MIDI device support" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
        }
        config SOUND_TRIX tristate {
         prompt "MediaTrix AudioTrix Pro support" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         config TRIX_HAVE_BOOT boolean {
          prompt "Have TRXPRO.HEX firmware file" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_TRIX="y" && !STANDALONE]
          depends on [SOUND_TRIX="y" && !STANDALONE]
          inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_TRIX="y" && !STANDALONE]
          config TRIX_BOOT_FILE string {
           prompt "Full pathname of TRXPRO.HEX firmware file" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && TRIX_HAVE_BOOT]
           depends on [TRIX_HAVE_BOOT]
           default ["/etc/sound/trxpro.hex"] if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && TRIX_HAVE_BOOT]
           inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && TRIX_HAVE_BOOT]
          }
         }
        }
        config SOUND_MSS tristate {
         prompt "Microsoft Sound System support" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
        }
        config SOUND_MPU401 tristate {
         prompt "MPU-401 support (NOT for SB16)" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
        }
        config SOUND_PAS tristate {
         prompt "ProAudioSpectrum 16 support" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         config PAS_JOYSTICK boolean {
          prompt "Enable PAS16 joystick port" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_PAS="y"]
          depends on [SOUND_PAS="y"]
          inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_PAS="y"]
         }
        }
        config SOUND_PSS tristate {
         prompt "PSS (AD1848, ADSP-2115, ESC614) support" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         config PSS_MIXER boolean {
          prompt "Enable PSS mixer (Beethoven ADSP-16 and other compatible)" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_PSS]
          depends on [SOUND_PSS]
          inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_PSS]
         }
         config PSS_HAVE_BOOT boolean {
          prompt "Have DSPxxx.LD firmware file" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_PSS && !STANDALONE]
          depends on [SOUND_PSS && !STANDALONE]
          inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_PSS && !STANDALONE]
          config PSS_BOOT_FILE string {
           prompt "Full pathname of DSPxxx.LD firmware file" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && PSS_HAVE_BOOT]
           depends on [PSS_HAVE_BOOT]
           default ["/etc/sound/dsp001.ld"] if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && PSS_HAVE_BOOT]
           inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && PSS_HAVE_BOOT]
          }
         }
        }
        config SOUND_SB tristate {
         prompt "100% Sound Blaster compatibles (SB16/32/64, ESS, Jazz16) support" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
        }
        config SOUND_YM3812 tristate {
         prompt "Yamaha FM synthesizer (YM3812/OPL-3) support" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
        }
        config SOUND_UART6850 tristate {
         prompt "6850 UART support" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
        }
        config SOUND_AEDSP16 tristate {
         prompt "Gallant Audio Cards (SC-6000 and SC-6600 based)" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS]
         config SC6600 boolean {
          prompt "SC-6600 based audio cards (new Audio Excel DSP 16)" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_AEDSP16]
          depends on [SOUND_AEDSP16]
          inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_AEDSP16]
          config SC6600_JOY boolean {
           prompt "Activate SC-6600 Joystick Interface" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SC6600]
           depends on [SC6600]
           inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SC6600]
          }
          config SC6600_CDROM integer {
           prompt "SC-6600 CDROM Interface (4=None, 3=IDE, 1=Panasonic, 0=?Sony?)" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SC6600]
           depends on [SC6600]
           default [4] if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SC6600]
           inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SC6600]
          }
          config SC6600_CDROMBASE hex {
           prompt "SC-6600 CDROM Interface I/O Address" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SC6600]
           depends on [SC6600]
           default [0] if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SC6600]
           inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SC6600]
          }
         }
        }
        config SOUND_VIDC tristate {
         prompt "VIDC 16-bit sound" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
         depends on [ARM && (ARCH_ACORN || ARCH_CLPS7500)]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
        }
        config SOUND_WAVEARTIST tristate {
         prompt "Netwinder WaveArtist" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && ARM && ARCH_NETWINDER]
         depends on [ARM && ARCH_NETWINDER]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && ARM && ARCH_NETWINDER]
        }
        config SOUND_KAHLUA tristate {
         prompt "XpressAudio Sound Blaster emulation" if [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_SB]
         depends on [SOUND_SB]
         inherited [SOUND && !M68K && SOUND_PRIME && SOUND_OSS && SOUND_SB]
        }
       }
      }
      config SOUND_SH_DAC_AUDIO tristate {
       prompt "SuperH DAC audio support" if [SOUND && !M68K && SOUND_PRIME && CPU_SH3 && HIGH_RES_TIMERS]
       depends on [CPU_SH3 && HIGH_RES_TIMERS]
       inherited [SOUND && !M68K && SOUND_PRIME && CPU_SH3 && HIGH_RES_TIMERS]
       config SOUND_SH_DAC_AUDIO_CHANNEL integer {
        prompt "DAC channel" if [SOUND && !M68K && SOUND_PRIME && SOUND_SH_DAC_AUDIO]
        default [1] if [SOUND && !M68K && SOUND_PRIME && SOUND_SH_DAC_AUDIO]
        depends on [SOUND_SH_DAC_AUDIO]
        inherited [SOUND && !M68K && SOUND_PRIME && SOUND_SH_DAC_AUDIO]
       }
      }
     }
    }
   }
  }
 }
 config AC97_BUS tristate {
 }
 menuconfig HID_SUPPORT boolean {
  prompt "HID Devices" if [INPUT]
  depends on [INPUT]
  default [y] if [INPUT]
  inherited [INPUT]
  if [HID_SUPPORT] {
   config HID tristate {
    prompt "Generic HID support" if [HID_SUPPORT && INPUT]
    depends on [INPUT]
    default [y] if [HID_SUPPORT && INPUT]
    inherited [HID_SUPPORT && INPUT]
    config HIDRAW boolean {
     prompt "/dev/hidraw raw HID device support" if [HID_SUPPORT && HID]
     depends on [HID]
     inherited [HID_SUPPORT && HID]
    }
   }
   config USB_HID tristate {
    prompt "USB Human Interface Device (full HID) support" if [HID_SUPPORT && USB && INPUT]
    default [y] if [HID_SUPPORT && USB && INPUT]
    depends on [USB && INPUT]
    select HID if [HID_SUPPORT && USB && INPUT]
    inherited [HID_SUPPORT && USB && INPUT]
   }
   config HID_PID boolean {
    prompt "PID device support" if [HID_SUPPORT]
    inherited [HID_SUPPORT]
   }
   config USB_HIDDEV boolean {
    prompt "/dev/hiddev raw HID device support" if [HID_SUPPORT && USB_HID]
    depends on [USB_HID]
    inherited [HID_SUPPORT && USB_HID]
   }
   menu "USB HID Boot Protocol drivers" {
    depends on [HID_SUPPORT && USB!="n" && USB_HID!="y" && EMBEDDED]
    config USB_KBD tristate {
     prompt "USB HIDBP Keyboard (simple Boot) support" if [HID_SUPPORT && USB_HID!="y" && EMBEDDED && USB && INPUT]
     depends on [USB && INPUT]
     inherited [HID_SUPPORT && USB_HID!="y" && EMBEDDED && USB && INPUT]
    }
    config USB_MOUSE tristate {
     prompt "USB HIDBP Mouse (simple Boot) support" if [HID_SUPPORT && USB_HID!="y" && EMBEDDED && USB && INPUT]
     depends on [USB && INPUT]
     inherited [HID_SUPPORT && USB_HID!="y" && EMBEDDED && USB && INPUT]
    }
   }
   menu "Special HID drivers" {
    depends on [HID_SUPPORT && HID]
    config HID_A4TECH tristate {
     prompt "A4 tech" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_APPLE tristate {
     prompt "Apple" if [HID_SUPPORT && HID && (USB_HID || BT_HIDP) && EMBEDDED]
     depends on [USB_HID || BT_HIDP]
     default [!EMBEDDED] if [HID_SUPPORT && HID && (USB_HID || BT_HIDP)]
     inherited [HID_SUPPORT && HID && (USB_HID || BT_HIDP)]
    }
    config HID_BELKIN tristate {
     prompt "Belkin" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_CHERRY tristate {
     prompt "Cherry" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_CHICONY tristate {
     prompt "Chicony" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_CYPRESS tristate {
     prompt "Cypress" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_DRAGONRISE tristate {
     prompt "DragonRise Inc. support" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
     config DRAGONRISE_FF boolean {
      prompt "DragonRise Inc. force feedback support" if [HID_SUPPORT && HID && HID_DRAGONRISE]
      depends on [HID_DRAGONRISE]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID && HID_DRAGONRISE]
      inherited [HID_SUPPORT && HID && HID_DRAGONRISE]
     }
    }
    config HID_EZKEY tristate {
     prompt "Ezkey" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_KYE tristate {
     prompt "Kye" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_GYRATION tristate {
     prompt "Gyration" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_TWINHAN tristate {
     prompt "Twinhan" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_KENSINGTON tristate {
     prompt "Kensington" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_LOGITECH tristate {
     prompt "Logitech" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
     config LOGITECH_FF boolean {
      prompt "Logitech force feedback support" if [HID_SUPPORT && HID && HID_LOGITECH]
      depends on [HID_LOGITECH]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID && HID_LOGITECH]
      inherited [HID_SUPPORT && HID && HID_LOGITECH]
     }
     config LOGIRUMBLEPAD2_FF boolean {
      prompt "Logitech Rumblepad 2 force feedback support" if [HID_SUPPORT && HID && HID_LOGITECH]
      depends on [HID_LOGITECH]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID && HID_LOGITECH]
      inherited [HID_SUPPORT && HID && HID_LOGITECH]
     }
    }
    config HID_MICROSOFT tristate {
     prompt "Microsoft" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_MONTEREY tristate {
     prompt "Monterey" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_NTRIG tristate {
     prompt "NTrig" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_PANTHERLORD tristate {
     prompt "Pantherlord support" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
     config PANTHERLORD_FF boolean {
      prompt "Pantherlord force feedback support" if [HID_SUPPORT && HID && HID_PANTHERLORD]
      depends on [HID_PANTHERLORD]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID && HID_PANTHERLORD]
      inherited [HID_SUPPORT && HID && HID_PANTHERLORD]
     }
    }
    config HID_PETALYNX tristate {
     prompt "Petalynx" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_SAMSUNG tristate {
     prompt "Samsung" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_SONY tristate {
     prompt "Sony" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_SUNPLUS tristate {
     prompt "Sunplus" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_GREENASIA tristate {
     prompt "GreenAsia (Product ID 0x12) support" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
     config GREENASIA_FF boolean {
      prompt "GreenAsia (Product ID 0x12) force feedback support" if [HID_SUPPORT && HID && HID_GREENASIA]
      depends on [HID_GREENASIA]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID && HID_GREENASIA]
      inherited [HID_SUPPORT && HID && HID_GREENASIA]
     }
    }
    config HID_SMARTJOYPLUS tristate {
     prompt "SmartJoy PLUS PS2/USB adapter support" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
     config SMARTJOYPLUS_FF boolean {
      prompt "SmartJoy PLUS PS2/USB adapter force feedback support" if [HID_SUPPORT && HID && HID_SMARTJOYPLUS]
      depends on [HID_SMARTJOYPLUS]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID && HID_SMARTJOYPLUS]
      inherited [HID_SUPPORT && HID && HID_SMARTJOYPLUS]
     }
    }
    config HID_TOPSEED tristate {
     prompt "TopSeed Cyberlink remote control support" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
    }
    config HID_THRUSTMASTER tristate {
     prompt "ThrustMaster devices support" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
     config THRUSTMASTER_FF boolean {
      prompt "ThrustMaster devices force feedback support" if [HID_SUPPORT && HID && HID_THRUSTMASTER]
      depends on [HID_THRUSTMASTER]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID && HID_THRUSTMASTER]
      inherited [HID_SUPPORT && HID && HID_THRUSTMASTER]
     }
    }
    config HID_WACOM tristate {
     prompt "Wacom Bluetooth devices support" if [HID_SUPPORT && HID && BT_HIDP && EMBEDDED]
     depends on [BT_HIDP]
     default [!EMBEDDED] if [HID_SUPPORT && HID && BT_HIDP]
     inherited [HID_SUPPORT && HID && BT_HIDP]
    }
    config HID_ZEROPLUS tristate {
     prompt "Zeroplus based game controller support" if [HID_SUPPORT && HID && USB_HID && EMBEDDED]
     depends on [USB_HID]
     default [!EMBEDDED] if [HID_SUPPORT && HID && USB_HID]
     inherited [HID_SUPPORT && HID && USB_HID]
     config ZEROPLUS_FF boolean {
      prompt "Zeroplus based game controller force feedback support" if [HID_SUPPORT && HID && HID_ZEROPLUS]
      depends on [HID_ZEROPLUS]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID && HID_ZEROPLUS]
      inherited [HID_SUPPORT && HID && HID_ZEROPLUS]
     }
    }
   }
  }
 }
 menuconfig USB_SUPPORT boolean {
  prompt "USB support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  default [y] if [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [USB_SUPPORT] {
   config USB_ARCH_HAS_HCD boolean {
    default [y] if [USB_SUPPORT && USB_ARCH_HAS_OHCI]
    default [y] if [USB_SUPPORT && USB_ARCH_HAS_EHCI]
    default [y] if [USB_SUPPORT && PCMCIA && !M32R]
    default [y] if [USB_SUPPORT && ARM]
    default [y] if [USB_SUPPORT && SUPERH]
    default [PCI] if [USB_SUPPORT]
    inherited [USB_SUPPORT]
   }
   config USB_ARCH_HAS_OHCI boolean {
    default [y] if [USB_SUPPORT && SA1111]
    default [y] if [USB_SUPPORT && ARCH_OMAP]
    default [y] if [USB_SUPPORT && ARCH_LH7A404]
    default [y] if [USB_SUPPORT && ARCH_S3C2410]
    default [y] if [USB_SUPPORT && PXA27x]
    default [y] if [USB_SUPPORT && PXA3xx]
    default [y] if [USB_SUPPORT && ARCH_EP93XX]
    default [y] if [USB_SUPPORT && ARCH_AT91]
    default [y] if [USB_SUPPORT && ARCH_PNX4008 && I2C]
    default [y] if [USB_SUPPORT && MFD_TC6393XB]
    default [y] if [USB_SUPPORT && ARCH_W90X900]
    default [y] if [USB_SUPPORT && STB03xxx]
    default [y] if [USB_SUPPORT && PPC_MPC52xx]
    default [y] if [USB_SUPPORT && SOC_AU1X00]
    default [y] if [USB_SUPPORT && CPU_SUBTYPE_SH7720]
    default [y] if [USB_SUPPORT && CPU_SUBTYPE_SH7721]
    default [y] if [USB_SUPPORT && CPU_SUBTYPE_SH7763]
    default [y] if [USB_SUPPORT && CPU_SUBTYPE_SH7786]
    default [PCI] if [USB_SUPPORT]
    inherited [USB_SUPPORT]
   }
   config USB_ARCH_HAS_EHCI boolean {
    default [y] if [USB_SUPPORT && PPC_83xx]
    default [y] if [USB_SUPPORT && SOC_AU1200]
    default [y] if [USB_SUPPORT && ARCH_IXP4XX]
    default [y] if [USB_SUPPORT && ARCH_W90X900]
    default [y] if [USB_SUPPORT && ARCH_AT91SAM9G45]
    default [PCI] if [USB_SUPPORT]
    inherited [USB_SUPPORT]
   }
   config USB tristate {
    prompt "Support for Host-side USB" if [USB_SUPPORT && USB_ARCH_HAS_HCD]
    depends on [USB_ARCH_HAS_HCD]
    select NLS if [USB_SUPPORT && USB_ARCH_HAS_HCD]
    inherited [USB_SUPPORT && USB_ARCH_HAS_HCD]
    config USB_DEBUG boolean {
     prompt "USB verbose debug messages" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_ANNOUNCE_NEW_DEVICES boolean {
     prompt "USB announce new devices" if [USB_SUPPORT && USB]
     depends on [USB]
     default [N] if [USB_SUPPORT && USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_DEVICEFS boolean {
     prompt "USB device filesystem (DEPRECATED)" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_DEVICE_CLASS boolean {
     prompt "USB device class-devices (DEPRECATED)" if [USB_SUPPORT && USB]
     depends on [USB]
     default [y] if [USB_SUPPORT && USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_DYNAMIC_MINORS boolean {
     prompt "Dynamic USB minor allocation" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_SUSPEND boolean {
     prompt "USB selective suspend/resume and wakeup" if [USB_SUPPORT && USB && PM]
     depends on [USB && PM]
     inherited [USB_SUPPORT && USB && PM]
    }
    config USB_OTG boolean {
     depends on [USB && EXPERIMENTAL]
     select USB_SUSPEND if [USB_SUPPORT && USB && EXPERIMENTAL]
     default [n] if [USB_SUPPORT && USB && EXPERIMENTAL]
     prompt "OTG Support" if [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
     depends on [USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
     inherited [USB_SUPPORT && USB && EXPERIMENTAL]
    }
    config USB_OTG_WHITELIST boolean {
     prompt "Rely on OTG Targeted Peripherals List" if [USB_SUPPORT && (USB_OTG || EMBEDDED)]
     depends on [USB_OTG || EMBEDDED]
     default [y] if [USB_SUPPORT && (USB_OTG || EMBEDDED) && USB_OTG]
     default [n] if [USB_SUPPORT && (USB_OTG || EMBEDDED) && EMBEDDED]
     inherited [USB_SUPPORT && (USB_OTG || EMBEDDED)]
    }
    config USB_OTG_BLACKLIST_HUB boolean {
     prompt "Disable external hubs" if [USB_SUPPORT && (USB_OTG || EMBEDDED)]
     depends on [USB_OTG || EMBEDDED]
     inherited [USB_SUPPORT && (USB_OTG || EMBEDDED)]
    }
    config USB_MON tristate {
     prompt "USB Monitor" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_WUSB tristate {
     prompt "Enable Wireless USB extensions (EXPERIMENTAL)" if [USB_SUPPORT && EXPERIMENTAL && USB]
     depends on [EXPERIMENTAL]
     depends on [USB]
     select UWB if [USB_SUPPORT && EXPERIMENTAL && USB]
     select CRYPTO if [USB_SUPPORT && EXPERIMENTAL && USB]
     select CRYPTO_BLKCIPHER if [USB_SUPPORT && EXPERIMENTAL && USB]
     select CRYPTO_CBC if [USB_SUPPORT && EXPERIMENTAL && USB]
     select CRYPTO_MANAGER if [USB_SUPPORT && EXPERIMENTAL && USB]
     select CRYPTO_AES if [USB_SUPPORT && EXPERIMENTAL && USB]
     inherited [USB_SUPPORT && EXPERIMENTAL && USB]
    }
    config USB_WUSB_CBAF tristate {
     prompt "Support WUSB Cable Based Association (CBA)" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
     config USB_WUSB_CBAF_DEBUG boolean {
      prompt "Enable CBA debug messages" if [USB_SUPPORT && USB_WUSB_CBAF]
      depends on [USB_WUSB_CBAF]
      inherited [USB_SUPPORT && USB_WUSB_CBAF]
     }
    }
    config USB_C67X00_HCD tristate {
     prompt "Cypress C67x00 HCD support" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_XHCI_HCD tristate {
     prompt "xHCI HCD (USB 3.0) support (EXPERIMENTAL)" if [USB_SUPPORT && USB && PCI && EXPERIMENTAL]
     depends on [USB && PCI && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB && PCI && EXPERIMENTAL]
     config USB_XHCI_HCD_DEBUGGING boolean {
      prompt "Debugging for the xHCI host controller" if [USB_SUPPORT && USB_XHCI_HCD]
      depends on [USB_XHCI_HCD]
      inherited [USB_SUPPORT && USB_XHCI_HCD]
     }
    }
    config USB_EHCI_HCD tristate {
     prompt "EHCI HCD (USB 2.0) support" if [USB_SUPPORT && USB && USB_ARCH_HAS_EHCI]
     depends on [USB && USB_ARCH_HAS_EHCI]
     inherited [USB_SUPPORT && USB && USB_ARCH_HAS_EHCI]
     config USB_EHCI_ROOT_HUB_TT boolean {
      prompt "Root Hub Transaction Translators" if [USB_SUPPORT && USB_EHCI_HCD]
      depends on [USB_EHCI_HCD]
      inherited [USB_SUPPORT && USB_EHCI_HCD]
     }
     config USB_EHCI_TT_NEWSCHED boolean {
      prompt "Improved Transaction Translator scheduling (EXPERIMENTAL)" if [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
      depends on [USB_EHCI_HCD && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
     }
     config USB_EHCI_BIG_ENDIAN_MMIO boolean {
      depends on [USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX || ARCH_IXP4XX)]
      default [y] if [USB_SUPPORT && USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX || ARCH_IXP4XX)]
      inherited [USB_SUPPORT && USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX || ARCH_IXP4XX)]
     }
     config USB_EHCI_BIG_ENDIAN_DESC boolean {
      depends on [USB_EHCI_HCD && (440EPX || ARCH_IXP4XX)]
      default [y] if [USB_SUPPORT && USB_EHCI_HCD && (440EPX || ARCH_IXP4XX)]
      inherited [USB_SUPPORT && USB_EHCI_HCD && (440EPX || ARCH_IXP4XX)]
     }
     config USB_EHCI_FSL boolean {
      prompt "Support for Freescale on-chip EHCI USB controller" if [USB_SUPPORT && USB_EHCI_HCD && FSL_SOC]
      depends on [USB_EHCI_HCD && FSL_SOC]
      select USB_EHCI_ROOT_HUB_TT if [USB_SUPPORT && USB_EHCI_HCD && FSL_SOC]
      inherited [USB_SUPPORT && USB_EHCI_HCD && FSL_SOC]
     }
     config USB_EHCI_HCD_PPC_OF boolean {
      prompt "EHCI support for PPC USB controller on OF platform bus" if [USB_SUPPORT && USB_EHCI_HCD && PPC_OF]
      depends on [USB_EHCI_HCD && PPC_OF]
      default [y] if [USB_SUPPORT && USB_EHCI_HCD && PPC_OF]
      inherited [USB_SUPPORT && USB_EHCI_HCD && PPC_OF]
     }
     config USB_W90X900_EHCI boolean {
      prompt "W90X900(W90P910) EHCI support" if [USB_SUPPORT && USB_EHCI_HCD && ARCH_W90X900]
      depends on [USB_EHCI_HCD && ARCH_W90X900]
      inherited [USB_SUPPORT && USB_EHCI_HCD && ARCH_W90X900]
     }
    }
    config USB_OXU210HP_HCD tristate {
     prompt "OXU210HP HCD support" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_ISP116X_HCD tristate {
     prompt "ISP116X HCD support" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_ISP1760_HCD tristate {
     prompt "ISP 1760 HCD support" if [USB_SUPPORT && USB && EXPERIMENTAL]
     depends on [USB && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB && EXPERIMENTAL]
    }
    config USB_ISP1362_HCD tristate {
     prompt "ISP1362 HCD support" if [USB_SUPPORT && USB]
     depends on [USB]
     default [N] if [USB_SUPPORT && USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_OHCI_HCD tristate {
     prompt "OHCI HCD support" if [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI]
     depends on [USB && USB_ARCH_HAS_OHCI]
     select ISP1301_OMAP if [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI && (MACH_OMAP_H2 || MACH_OMAP_H3)]
     select USB_OTG_UTILS if [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI && ARCH_OMAP]
     inherited [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI]
     config USB_OHCI_HCD_PPC_SOC boolean {
      prompt "OHCI support for on-chip PPC USB controller" if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
      depends on [USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
      default [y] if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
      select USB_OHCI_BIG_ENDIAN_DESC if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
      select USB_OHCI_BIG_ENDIAN_MMIO if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
      inherited [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     }
     config USB_OHCI_HCD_PPC_OF_BE boolean {
      prompt "OHCI support for OF platform bus (big endian)" if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
      depends on [USB_OHCI_HCD && PPC_OF]
      select USB_OHCI_BIG_ENDIAN_DESC if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
      select USB_OHCI_BIG_ENDIAN_MMIO if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
      inherited [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     }
     config USB_OHCI_HCD_PPC_OF_LE boolean {
      prompt "OHCI support for OF platform bus (little endian)" if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
      depends on [USB_OHCI_HCD && PPC_OF]
      select USB_OHCI_LITTLE_ENDIAN if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
      inherited [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     }
     config USB_OHCI_HCD_PPC_OF boolean {
      depends on [USB_OHCI_HCD && PPC_OF]
      default [USB_OHCI_HCD_PPC_OF_BE || USB_OHCI_HCD_PPC_OF_LE] if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
      inherited [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     }
     config USB_OHCI_HCD_PCI boolean {
      prompt "OHCI support for PCI-bus USB controllers" if [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
      depends on [USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
      default [y] if [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
      select USB_OHCI_LITTLE_ENDIAN if [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
      inherited [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
     }
     config USB_OHCI_HCD_SSB boolean {
      prompt "OHCI support for Broadcom SSB OHCI core" if [USB_SUPPORT && USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
      depends on [USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
      default [n] if [USB_SUPPORT && USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
     }
     config USB_OHCI_BIG_ENDIAN_DESC boolean {
      depends on [USB_OHCI_HCD]
      default [n] if [USB_SUPPORT && USB_OHCI_HCD]
      inherited [USB_SUPPORT && USB_OHCI_HCD]
     }
     config USB_OHCI_BIG_ENDIAN_MMIO boolean {
      depends on [USB_OHCI_HCD]
      default [n] if [USB_SUPPORT && USB_OHCI_HCD]
      inherited [USB_SUPPORT && USB_OHCI_HCD]
     }
     config USB_OHCI_LITTLE_ENDIAN boolean {
      depends on [USB_OHCI_HCD]
      default [n] if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
      default [y] if [USB_SUPPORT && USB_OHCI_HCD]
      inherited [USB_SUPPORT && USB_OHCI_HCD]
     }
    }
    config USB_UHCI_HCD tristate {
     prompt "UHCI HCD (most Intel and VIA) support" if [USB_SUPPORT && USB && PCI]
     depends on [USB && PCI]
     inherited [USB_SUPPORT && USB && PCI]
    }
    config USB_FHCI_HCD tristate {
     prompt "Freescale QE USB Host Controller support" if [USB_SUPPORT && USB && OF_GPIO && QE_GPIO && QUICC_ENGINE]
     depends on [USB && OF_GPIO && QE_GPIO && QUICC_ENGINE]
     select FSL_GTM if [USB_SUPPORT && USB && OF_GPIO && QE_GPIO && QUICC_ENGINE]
     select QE_USB if [USB_SUPPORT && USB && OF_GPIO && QE_GPIO && QUICC_ENGINE]
     inherited [USB_SUPPORT && USB && OF_GPIO && QE_GPIO && QUICC_ENGINE]
     config FHCI_DEBUG boolean {
      prompt "Freescale QE USB Host Controller debug support" if [USB_SUPPORT && USB_FHCI_HCD && DEBUG_FS]
      depends on [USB_FHCI_HCD && DEBUG_FS]
      inherited [USB_SUPPORT && USB_FHCI_HCD && DEBUG_FS]
     }
    }
    config USB_U132_HCD tristate {
     prompt "Elan U132 Adapter Host Controller" if [USB_SUPPORT && USB && USB_FTDI_ELAN]
     depends on [USB && USB_FTDI_ELAN]
     default [M] if [USB_SUPPORT && USB && USB_FTDI_ELAN]
     inherited [USB_SUPPORT && USB && USB_FTDI_ELAN]
    }
    config USB_SL811_HCD tristate {
     prompt "SL811HS HCD support" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
     config USB_SL811_CS tristate {
      prompt "CF/PCMCIA support for SL811HS HCD" if [USB_SUPPORT && USB_SL811_HCD && PCMCIA]
      depends on [USB_SL811_HCD && PCMCIA]
      inherited [USB_SUPPORT && USB_SL811_HCD && PCMCIA]
     }
    }
    config USB_R8A66597_HCD tristate {
     prompt "R8A66597 HCD support" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_WHCI_HCD tristate {
     prompt "Wireless USB Host Controller Interface (WHCI) driver (EXPERIMENTAL)" if [USB_SUPPORT && EXPERIMENTAL && PCI && USB]
     depends on [EXPERIMENTAL]
     depends on [PCI && USB]
     select USB_WUSB if [USB_SUPPORT && EXPERIMENTAL && PCI && USB]
     select UWB_WHCI if [USB_SUPPORT && EXPERIMENTAL && PCI && USB]
     inherited [USB_SUPPORT && EXPERIMENTAL && PCI && USB]
    }
    config USB_HWA_HCD tristate {
     prompt "Host Wire Adapter (HWA) driver (EXPERIMENTAL)" if [USB_SUPPORT && EXPERIMENTAL && USB]
     depends on [EXPERIMENTAL]
     depends on [USB]
     select USB_WUSB if [USB_SUPPORT && EXPERIMENTAL && USB]
     select UWB_HWA if [USB_SUPPORT && EXPERIMENTAL && USB]
     inherited [USB_SUPPORT && EXPERIMENTAL && USB]
    }
   }
   config USB_MUSB_HDRC tristate {
    depends on [USB || USB_GADGET]
    depends on [ARM || BLACKFIN]
    select NOP_USB_XCEIV if [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BLACKFIN) && ARCH_DAVINCI]
    select TWL4030_USB if [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BLACKFIN) && MACH_OMAP_3430SDP]
    select NOP_USB_XCEIV if [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BLACKFIN) && MACH_OMAP3EVM]
    select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BLACKFIN)]
    prompt "Inventra Highspeed Dual Role Controller (TI, ADI, ...)" if [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BLACKFIN)]
    inherited [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BLACKFIN)]
    config USB_MUSB_SOC boolean {
     depends on [USB_MUSB_HDRC]
     default [y] if [USB_SUPPORT && USB_MUSB_HDRC && ARCH_DAVINCI]
     default [y] if [USB_SUPPORT && USB_MUSB_HDRC && ARCH_OMAP2430]
     default [y] if [USB_SUPPORT && USB_MUSB_HDRC && ARCH_OMAP34XX]
     default [y] if [USB_SUPPORT && USB_MUSB_HDRC && BF54x && !BF544]
     default [y] if [USB_SUPPORT && USB_MUSB_HDRC && BF52x && !BF522 && !BF523]
     inherited [USB_SUPPORT && USB_MUSB_HDRC]
    }
    config USB_TUSB6010 boolean {
     prompt "TUSB 6010 support" if [USB_SUPPORT && USB_MUSB_HDRC && !USB_MUSB_SOC]
     depends on [USB_MUSB_HDRC && !USB_MUSB_SOC]
     select NOP_USB_XCEIV if [USB_SUPPORT && USB_MUSB_HDRC && !USB_MUSB_SOC]
     default [y] if [USB_SUPPORT && USB_MUSB_HDRC && !USB_MUSB_SOC]
     inherited [USB_SUPPORT && USB_MUSB_HDRC && !USB_MUSB_SOC]
    }
    choice boolean {
     prompt "Driver Mode" if [USB_SUPPORT && USB_MUSB_HDRC]
     depends on [USB_MUSB_HDRC]
     config USB_MUSB_HOST boolean {
      depends on [USB]
      prompt "USB Host" if [<choice> && USB]
      inherited [<choice> && USB]
     }
     config USB_MUSB_PERIPHERAL boolean {
      depends on [USB_GADGET]
      prompt "USB Peripheral (gadget stack)" if [<choice> && USB_GADGET]
      select USB_GADGET_MUSB_HDRC if [<choice> && USB_GADGET]
      inherited [<choice> && USB_GADGET]
     }
     config USB_MUSB_OTG boolean {
      depends on [USB && USB_GADGET && PM && EXPERIMENTAL]
      prompt "Both host and peripheral:  USB OTG (On The Go) Device" if [<choice> && USB && USB_GADGET && PM && EXPERIMENTAL]
      select USB_GADGET_MUSB_HDRC if [<choice> && USB && USB_GADGET && PM && EXPERIMENTAL]
      select USB_OTG if [<choice> && USB && USB_GADGET && PM && EXPERIMENTAL]
      inherited [<choice> && USB && USB_GADGET && PM && EXPERIMENTAL]
     }
    }
    config USB_GADGET_MUSB_HDRC boolean {
     depends on [USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
     prompt "Inventra HDRC USB Peripheral (TI, ADI, ...)" if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
     depends on [USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
     select USB_GADGET_DUALSPEED if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
     select USB_GADGET_SELECTED if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
     inherited [USB_SUPPORT && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
    }
    config USB_MUSB_HDRC_HCD boolean {
     depends on [USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG)]
     select USB_OTG if [USB_SUPPORT && USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG) && USB_GADGET_MUSB_HDRC]
     default [y] if [USB_SUPPORT && USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG)]
     inherited [USB_SUPPORT && USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG)]
    }
    config MUSB_PIO_ONLY boolean {
     prompt "Disable DMA (always use PIO)" if [USB_SUPPORT && USB_MUSB_HDRC]
     depends on [USB_MUSB_HDRC]
     default [y] if [USB_SUPPORT && USB_MUSB_HDRC && USB_TUSB6010]
     inherited [USB_SUPPORT && USB_MUSB_HDRC]
     config USB_INVENTRA_DMA boolean {
      depends on [USB_MUSB_HDRC && !MUSB_PIO_ONLY]
      default [ARCH_OMAP2430 || ARCH_OMAP34XX || BLACKFIN] if [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY]
      inherited [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY]
     }
     config USB_TI_CPPI_DMA boolean {
      depends on [USB_MUSB_HDRC && !MUSB_PIO_ONLY]
      default [ARCH_DAVINCI] if [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY]
      inherited [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY]
     }
     config USB_TUSB_OMAP_DMA boolean {
      depends on [USB_MUSB_HDRC && !MUSB_PIO_ONLY]
      depends on [USB_TUSB6010]
      depends on [ARCH_OMAP]
      default [y] if [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY && USB_TUSB6010 && ARCH_OMAP]
      inherited [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY && USB_TUSB6010 && ARCH_OMAP]
     }
    }
    config USB_MUSB_DEBUG boolean {
     depends on [USB_MUSB_HDRC]
     prompt "Enable debugging messages" if [USB_SUPPORT && USB_MUSB_HDRC]
     default [n] if [USB_SUPPORT && USB_MUSB_HDRC]
     inherited [USB_SUPPORT && USB_MUSB_HDRC]
    }
   }
   config USB_ACM tristate {
    prompt "USB Modem (CDC ACM) support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_PRINTER tristate {
    prompt "USB Printer support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_WDM tristate {
    prompt "USB Wireless Device Management support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_TMC tristate {
    prompt "USB Test and Measurement Class support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_STORAGE tristate {
    prompt "USB Mass Storage support" if [USB_SUPPORT && USB && SCSI]
    depends on [USB && SCSI]
    inherited [USB_SUPPORT && USB && SCSI]
    config USB_STORAGE_DEBUG boolean {
     prompt "USB Mass Storage verbose debug" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_DATAFAB tristate {
     prompt "Datafab Compact Flash Reader support" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_FREECOM tristate {
     prompt "Freecom USB/ATAPI Bridge support" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_ISD200 tristate {
     prompt "ISD-200 USB/ATA Bridge support" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_USBAT tristate {
     prompt "USBAT/USBAT02-based storage support" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_SDDR09 tristate {
     prompt "SanDisk SDDR-09 (and other SmartMedia, including DPCM) support" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_SDDR55 tristate {
     prompt "SanDisk SDDR-55 SmartMedia support" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_JUMPSHOT tristate {
     prompt "Lexar Jumpshot Compact Flash Reader" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_ALAUDA tristate {
     prompt "Olympus MAUSB-10/Fuji DPC-R1 support" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_ONETOUCH tristate {
     prompt "Support OneTouch Button on Maxtor Hard Drives" if [USB_SUPPORT && USB_STORAGE && (INPUT="y" || INPUT="USB_STORAGE")]
     depends on [USB_STORAGE]
     depends on [INPUT="y" || INPUT="USB_STORAGE"]
     inherited [USB_SUPPORT && USB_STORAGE && (INPUT="y" || INPUT="USB_STORAGE")]
    }
    config USB_STORAGE_KARMA tristate {
     prompt "Support for Rio Karma music player" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_CYPRESS_ATACB tristate {
     prompt "SAT emulation on Cypress USB/ATA Bridge with ATACB" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
   }
   config USB_LIBUSUAL boolean {
    prompt "The shared table of common (or usual) storage devices" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_MDC800 tristate {
    prompt "USB Mustek MDC800 Digital Camera support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_MICROTEK tristate {
    prompt "Microtek X6USB scanner support" if [USB_SUPPORT && USB && SCSI]
    depends on [USB && SCSI]
    inherited [USB_SUPPORT && USB && SCSI]
   }
   config USB_USS720 tristate {
    prompt "USS720 parport driver" if [USB_SUPPORT && USB && PARPORT]
    depends on [USB && PARPORT]
    select PARPORT_NOT_PC if [USB_SUPPORT && USB && PARPORT]
    inherited [USB_SUPPORT && USB && PARPORT]
   }
   menuconfig USB_SERIAL tristate {
    prompt "USB Serial Converter support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
    if [USB_SUPPORT && USB_SERIAL] {
     config USB_SERIAL_CONSOLE boolean {
      prompt "USB Serial Console device support" if [USB_SUPPORT && USB_SERIAL="y"]
      depends on [USB_SERIAL="y"]
      inherited [USB_SUPPORT && USB_SERIAL="y"]
     }
     config USB_EZUSB boolean {
      prompt "Functions for loading firmware on EZUSB chips" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_GENERIC boolean {
      prompt "USB Generic Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_AIRCABLE tristate {
      prompt "USB AIRcable Bluetooth Dongle Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_ARK3116 tristate {
      prompt "USB ARK Micro 3116 USB Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_BELKIN tristate {
      prompt "USB Belkin and Peracom Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_CH341 tristate {
      prompt "USB Winchiphead CH341 Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_WHITEHEAT tristate {
      prompt "USB ConnectTech WhiteHEAT Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      select USB_EZUSB if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_DIGI_ACCELEPORT tristate {
      prompt "USB Digi International AccelePort USB Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_CP210X tristate {
      prompt "USB CP210x family of UART Bridge Controllers" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_CYPRESS_M8 tristate {
      prompt "USB Cypress M8 USB Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_EMPEG tristate {
      prompt "USB Empeg empeg-car Mark I/II Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_FTDI_SIO tristate {
      prompt "USB FTDI Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_FUNSOFT tristate {
      prompt "USB Fundamental Software Dongle Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_VISOR tristate {
      prompt "USB Handspring Visor / Palm m50x / Sony Clie Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_IPAQ tristate {
      prompt "USB PocketPC PDA Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_IR tristate {
      prompt "USB IR Dongle Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_EDGEPORT tristate {
      prompt "USB Inside Out Edgeport Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_EDGEPORT_TI tristate {
      prompt "USB Inside Out Edgeport Serial Driver (TI devices)" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_GARMIN tristate {
      prompt "USB Garmin GPS driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_IPW tristate {
      prompt "USB IPWireless (3G UMTS TDD) Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_IUU tristate {
      prompt "USB Infinity USB Unlimited Phoenix Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_KEYSPAN_PDA tristate {
      prompt "USB Keyspan PDA Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      select USB_EZUSB if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_KEYSPAN tristate {
      prompt "USB Keyspan USA-xxx Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      select USB_EZUSB if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
      config USB_SERIAL_KEYSPAN_MPR boolean {
       prompt "USB Keyspan MPR Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA28 boolean {
       prompt "USB Keyspan USA-28 Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA28X boolean {
       prompt "USB Keyspan USA-28X Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA28XA boolean {
       prompt "USB Keyspan USA-28XA Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA28XB boolean {
       prompt "USB Keyspan USA-28XB Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA19 boolean {
       prompt "USB Keyspan USA-19 Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA18X boolean {
       prompt "USB Keyspan USA-18X Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA19W boolean {
       prompt "USB Keyspan USA-19W Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA19QW boolean {
       prompt "USB Keyspan USA-19QW Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA19QI boolean {
       prompt "USB Keyspan USA-19QI Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA49W boolean {
       prompt "USB Keyspan USA-49W Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
      config USB_SERIAL_KEYSPAN_USA49WLC boolean {
       prompt "USB Keyspan USA-49WLC Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      }
     }
     config USB_SERIAL_KLSI tristate {
      prompt "USB KL5KUSB105 (Palmconnect) Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_KOBIL_SCT tristate {
      prompt "USB KOBIL chipcard reader" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_MCT_U232 tristate {
      prompt "USB MCT Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_MOS7720 tristate {
      prompt "USB Moschip 7720 Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_MOS7840 tristate {
      prompt "USB Moschip 7840/7820 USB Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_MOTOROLA tristate {
      prompt "USB Motorola Phone modem driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_NAVMAN tristate {
      prompt "USB Navman GPS device" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_PL2303 tristate {
      prompt "USB Prolific 2303 Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_OTI6858 tristate {
      prompt "USB Ours Technology Inc. OTi-6858 USB To RS232 Bridge Controller" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_QUALCOMM tristate {
      prompt "USB Qualcomm Serial modem" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_SPCP8X5 tristate {
      prompt "USB SPCP8x5 USB To Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_HP4X tristate {
      prompt "USB HP4x Calculators support" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_SAFE tristate {
      prompt "USB Safe Serial (Encapsulated) Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
      config USB_SERIAL_SAFE_PADDED boolean {
       prompt "USB Secure Encapsulated Driver - Padded" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_SAFE]
       depends on [USB_SERIAL_SAFE]
       inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_SAFE]
      }
     }
     config USB_SERIAL_SIEMENS_MPI tristate {
      prompt "USB Siemens MPI driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_SIERRAWIRELESS tristate {
      prompt "USB Sierra Wireless Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_SYMBOL tristate {
      prompt "USB Symbol Barcode driver (serial mode)" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_TI tristate {
      prompt "USB TI 3410/5052 Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_CYBERJACK tristate {
      prompt "USB REINER SCT cyberJack pinpad/e-com chipcard reader" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_XIRCOM tristate {
      prompt "USB Xircom / Entregra Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
      select USB_EZUSB if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_OPTION tristate {
      prompt "USB driver for GSM and CDMA modems" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_OMNINET tristate {
      prompt "USB ZyXEL omni.net LCD Plus Driver" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_OPTICON tristate {
      prompt "USB Opticon Barcode driver (serial mode)" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
     config USB_SERIAL_DEBUG tristate {
      prompt "USB Debugging Device" if [USB_SUPPORT && USB_SERIAL]
      inherited [USB_SUPPORT && USB_SERIAL]
     }
    }
   }
   config USB_EMI62 tristate {
    prompt "EMI 6|2m USB Audio interface support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_EMI26 tristate {
    prompt "EMI 2|6 USB Audio interface support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_ADUTUX tristate {
    prompt "ADU devices from Ontrak Control Systems" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_SEVSEG tristate {
    prompt "USB 7-Segment LED Display" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_RIO500 tristate {
    prompt "USB Diamond Rio500 support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_LEGOTOWER tristate {
    prompt "USB Lego Infrared Tower support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_LCD tristate {
    prompt "USB LCD driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_BERRY_CHARGE tristate {
    prompt "USB BlackBerry recharge support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_LED tristate {
    prompt "USB LED driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_CYPRESS_CY7C63 tristate {
    prompt "Cypress CY7C63xxx USB driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_CYTHERM tristate {
    prompt "Cypress USB thermometer driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_IDMOUSE tristate {
    prompt "Siemens ID USB Mouse Fingerprint sensor support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_FTDI_ELAN tristate {
    prompt "Elan PCMCIA CardBus Adapter USB Client" if [USB_SUPPORT && USB]
    depends on [USB]
    default [M] if [USB_SUPPORT && USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_APPLEDISPLAY tristate {
    prompt "Apple Cinema Display support" if [USB_SUPPORT && USB]
    depends on [USB]
    select BACKLIGHT_LCD_SUPPORT if [USB_SUPPORT && USB]
    select BACKLIGHT_CLASS_DEVICE if [USB_SUPPORT && USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_SISUSBVGA tristate {
    prompt "USB 2.0 SVGA dongle support (Net2280/SiS315)" if [USB_SUPPORT && USB && (USB_MUSB_HDRC || USB_EHCI_HCD)]
    depends on [USB && (USB_MUSB_HDRC || USB_EHCI_HCD)]
    inherited [USB_SUPPORT && USB && (USB_MUSB_HDRC || USB_EHCI_HCD)]
    config USB_SISUSBVGA_CON boolean {
     prompt "Text console and mode switching support" if [USB_SUPPORT && VT && USB_SISUSBVGA]
     depends on [VT]
     select FONT_8x16 if [USB_SUPPORT && VT]
     inherited [USB_SUPPORT && VT]
    }
   }
   config USB_LD tristate {
    prompt "USB LD driver" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_TRANCEVIBRATOR tristate {
    prompt "PlayStation 2 Trance Vibrator driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_IOWARRIOR tristate {
    prompt "IO Warrior driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_TEST tristate {
    prompt "USB testing driver" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_ISIGHTFW tristate {
    prompt "iSight firmware loading support" if [USB_SUPPORT && USB]
    depends on [USB]
    select FW_LOADER if [USB_SUPPORT && USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_VST tristate {
    prompt "USB VST driver" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   menuconfig USB_ATM tristate {
    prompt "USB DSL modem support" if [USB_SUPPORT && USB && ATM]
    depends on [USB && ATM]
    select CRC32 if [USB_SUPPORT && USB && ATM]
    default [n] if [USB_SUPPORT && USB && ATM]
    inherited [USB_SUPPORT && USB && ATM]
    if [USB_SUPPORT && USB_ATM] {
     config USB_SPEEDTOUCH tristate {
      prompt "Speedtouch USB support" if [USB_SUPPORT && USB_ATM]
      select FW_LOADER if [USB_SUPPORT && USB_ATM]
      inherited [USB_SUPPORT && USB_ATM]
     }
     config USB_CXACRU tristate {
      prompt "Conexant AccessRunner USB support" if [USB_SUPPORT && USB_ATM]
      select FW_LOADER if [USB_SUPPORT && USB_ATM]
      inherited [USB_SUPPORT && USB_ATM]
     }
     config USB_UEAGLEATM tristate {
      prompt "ADI 930 and eagle USB DSL modem" if [USB_SUPPORT && USB_ATM]
      select FW_LOADER if [USB_SUPPORT && USB_ATM]
      inherited [USB_SUPPORT && USB_ATM]
     }
     config USB_XUSBATM tristate {
      prompt "Other USB DSL modem support" if [USB_SUPPORT && USB_ATM]
      inherited [USB_SUPPORT && USB_ATM]
     }
    }
   }
   menuconfig USB_GADGET tristate {
    prompt "USB Gadget Support" if [USB_SUPPORT]
    inherited [USB_SUPPORT]
    if [USB_SUPPORT && USB_GADGET] {
     config USB_GADGET_DEBUG boolean {
      prompt "Debugging messages (DEVELOPMENT)" if [USB_SUPPORT && USB_GADGET && DEBUG_KERNEL]
      depends on [DEBUG_KERNEL]
      inherited [USB_SUPPORT && USB_GADGET && DEBUG_KERNEL]
     }
     config USB_GADGET_DEBUG_FILES boolean {
      prompt "Debugging information files (DEVELOPMENT)" if [USB_SUPPORT && USB_GADGET && PROC_FS]
      depends on [PROC_FS]
      inherited [USB_SUPPORT && USB_GADGET && PROC_FS]
     }
     config USB_GADGET_DEBUG_FS boolean {
      prompt "Debugging information files in debugfs (DEVELOPMENT)" if [USB_SUPPORT && USB_GADGET && DEBUG_FS]
      depends on [DEBUG_FS]
      inherited [USB_SUPPORT && USB_GADGET && DEBUG_FS]
     }
     config USB_GADGET_VBUS_DRAW integer {
      prompt "Maximum VBUS Power usage (2-500 mA)" if [USB_SUPPORT && USB_GADGET]
      range [2 500] if [USB_SUPPORT && USB_GADGET]
      default [2] if [USB_SUPPORT && USB_GADGET]
      inherited [USB_SUPPORT && USB_GADGET]
     }
     config USB_GADGET_SELECTED boolean {
      inherited [USB_SUPPORT && USB_GADGET]
     }
     choice boolean {
      prompt "USB Peripheral Controller" if [USB_SUPPORT && USB_GADGET]
      depends on [USB_GADGET]
      config USB_GADGET_AT91 boolean {
       prompt "Atmel AT91 USB Device Port" if [<choice> && ARCH_AT91 && !ARCH_AT91SAM9RL && !ARCH_AT91CAP9 && !ARCH_AT91SAM9G45]
       depends on [ARCH_AT91 && !ARCH_AT91SAM9RL && !ARCH_AT91CAP9 && !ARCH_AT91SAM9G45]
       select USB_GADGET_SELECTED if [<choice> && ARCH_AT91 && !ARCH_AT91SAM9RL && !ARCH_AT91CAP9 && !ARCH_AT91SAM9G45]
       inherited [<choice> && ARCH_AT91 && !ARCH_AT91SAM9RL && !ARCH_AT91CAP9 && !ARCH_AT91SAM9G45]
       config USB_AT91 tristate {
        depends on [USB_GADGET_AT91]
        default [USB_GADGET] if [<choice> && USB_GADGET_AT91]
        inherited [<choice> && USB_GADGET_AT91]
       }
      }
      config USB_GADGET_ATMEL_USBA boolean {
       prompt "Atmel USBA" if [<choice> && (AVR32 || ARCH_AT91CAP9 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45)]
       select USB_GADGET_DUALSPEED if [<choice> && (AVR32 || ARCH_AT91CAP9 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45)]
       depends on [AVR32 || ARCH_AT91CAP9 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45]
       inherited [<choice> && (AVR32 || ARCH_AT91CAP9 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45)]
       config USB_ATMEL_USBA tristate {
        depends on [USB_GADGET_ATMEL_USBA]
        default [USB_GADGET] if [<choice> && USB_GADGET_ATMEL_USBA]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_ATMEL_USBA]
        inherited [<choice> && USB_GADGET_ATMEL_USBA]
       }
      }
      config USB_GADGET_FSL_USB2 boolean {
       prompt "Freescale Highspeed USB DR Peripheral Controller" if [<choice> && (FSL_SOC || ARCH_MXC)]
       depends on [FSL_SOC || ARCH_MXC]
       select USB_GADGET_DUALSPEED if [<choice> && (FSL_SOC || ARCH_MXC)]
       inherited [<choice> && (FSL_SOC || ARCH_MXC)]
       config USB_FSL_USB2 tristate {
        depends on [USB_GADGET_FSL_USB2]
        default [USB_GADGET] if [<choice> && USB_GADGET_FSL_USB2]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_FSL_USB2]
        inherited [<choice> && USB_GADGET_FSL_USB2]
       }
      }
      config USB_GADGET_LH7A40X boolean {
       prompt "LH7A40X" if [<choice> && ARCH_LH7A40X]
       depends on [ARCH_LH7A40X]
       inherited [<choice> && ARCH_LH7A40X]
       config USB_LH7A40X tristate {
        depends on [USB_GADGET_LH7A40X]
        default [USB_GADGET] if [<choice> && USB_GADGET_LH7A40X]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_LH7A40X]
        inherited [<choice> && USB_GADGET_LH7A40X]
       }
      }
      config USB_GADGET_OMAP boolean {
       prompt "OMAP USB Device Controller" if [<choice> && ARCH_OMAP]
       depends on [ARCH_OMAP]
       select ISP1301_OMAP if [<choice> && ARCH_OMAP && (MACH_OMAP_H2 || MACH_OMAP_H3 || MACH_OMAP_H4_OTG)]
       select USB_OTG_UTILS if [<choice> && ARCH_OMAP]
       inherited [<choice> && ARCH_OMAP]
       config USB_OMAP tristate {
        depends on [USB_GADGET_OMAP]
        default [USB_GADGET] if [<choice> && USB_GADGET_OMAP]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_OMAP]
        inherited [<choice> && USB_GADGET_OMAP]
       }
       config USB_OTG boolean {
        depends on [USB && EXPERIMENTAL]
        select USB_SUSPEND if [USB_SUPPORT && USB && EXPERIMENTAL]
        default [n] if [USB_SUPPORT && USB && EXPERIMENTAL]
        prompt "OTG Support" if [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
        depends on [USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
        inherited [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
       }
      }
      config USB_GADGET_PXA25X boolean {
       prompt "PXA 25x or IXP 4xx" if [<choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)]
       depends on [ARCH_PXA && PXA25x || ARCH_IXP4XX]
       select USB_OTG_UTILS if [<choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)]
       inherited [<choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)]
       config USB_PXA25X tristate {
        depends on [USB_GADGET_PXA25X]
        default [USB_GADGET] if [<choice> && USB_GADGET_PXA25X]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_PXA25X]
        inherited [<choice> && USB_GADGET_PXA25X]
       }
       config USB_PXA25X_SMALL boolean {
        depends on [USB_GADGET_PXA25X]
        default [n] if [<choice> && USB_GADGET_PXA25X && USB_ETH_RNDIS]
        default [y] if [<choice> && USB_GADGET_PXA25X && USB_ZERO]
        default [y] if [<choice> && USB_GADGET_PXA25X && USB_ETH]
        default [y] if [<choice> && USB_GADGET_PXA25X && USB_G_SERIAL]
        inherited [<choice> && USB_GADGET_PXA25X]
       }
      }
      config USB_GADGET_R8A66597 boolean {
       prompt "Renesas R8A66597 USB Peripheral Controller" if [<choice>]
       select USB_GADGET_DUALSPEED if [<choice>]
       inherited [<choice>]
       config USB_R8A66597 tristate {
        depends on [USB_GADGET_R8A66597]
        default [USB_GADGET] if [<choice> && USB_GADGET_R8A66597]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_R8A66597]
        inherited [<choice> && USB_GADGET_R8A66597]
       }
      }
      config USB_GADGET_PXA27X boolean {
       prompt "PXA 27x" if [<choice> && ARCH_PXA && (PXA27x || PXA3xx)]
       depends on [ARCH_PXA && (PXA27x || PXA3xx)]
       select USB_OTG_UTILS if [<choice> && ARCH_PXA && (PXA27x || PXA3xx)]
       inherited [<choice> && ARCH_PXA && (PXA27x || PXA3xx)]
       config USB_PXA27X tristate {
        depends on [USB_GADGET_PXA27X]
        default [USB_GADGET] if [<choice> && USB_GADGET_PXA27X]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_PXA27X]
        inherited [<choice> && USB_GADGET_PXA27X]
       }
      }
      config USB_GADGET_S3C_HSOTG boolean {
       prompt "S3C HS/OtG USB Device controller" if [<choice> && S3C_DEV_USB_HSOTG]
       depends on [S3C_DEV_USB_HSOTG]
       select USB_GADGET_S3C_HSOTG_PIO if [<choice> && S3C_DEV_USB_HSOTG]
       inherited [<choice> && S3C_DEV_USB_HSOTG]
       config USB_S3C_HSOTG tristate {
        depends on [USB_GADGET_S3C_HSOTG]
        default [USB_GADGET] if [<choice> && USB_GADGET_S3C_HSOTG]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_S3C_HSOTG]
        inherited [<choice> && USB_GADGET_S3C_HSOTG]
       }
      }
      config USB_GADGET_IMX boolean {
       prompt "Freescale IMX USB Peripheral Controller" if [<choice> && ARCH_MX1]
       depends on [ARCH_MX1]
       inherited [<choice> && ARCH_MX1]
       config USB_IMX tristate {
        depends on [USB_GADGET_IMX]
        default [USB_GADGET] if [<choice> && USB_GADGET_IMX]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_IMX]
        inherited [<choice> && USB_GADGET_IMX]
       }
      }
      config USB_GADGET_S3C2410 boolean {
       prompt "S3C2410 USB Device Controller" if [<choice> && ARCH_S3C2410]
       depends on [ARCH_S3C2410]
       inherited [<choice> && ARCH_S3C2410]
       config USB_S3C2410 tristate {
        depends on [USB_GADGET_S3C2410]
        default [USB_GADGET] if [<choice> && USB_GADGET_S3C2410]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_S3C2410]
        inherited [<choice> && USB_GADGET_S3C2410]
       }
       config USB_S3C2410_DEBUG boolean {
        prompt "S3C2410 udc debug messages" if [<choice> && USB_GADGET_S3C2410]
        depends on [USB_GADGET_S3C2410]
        inherited [<choice> && USB_GADGET_S3C2410]
       }
      }
      config USB_GADGET_MUSB_HDRC boolean {
       depends on [USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
       prompt "Inventra HDRC USB Peripheral (TI, ADI, ...)" if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
       depends on [USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
       select USB_GADGET_DUALSPEED if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
       select USB_GADGET_SELECTED if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
       inherited [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
      }
      config USB_GADGET_M66592 boolean {
       prompt "Renesas M66592 USB Peripheral Controller" if [<choice>]
       select USB_GADGET_DUALSPEED if [<choice>]
       inherited [<choice>]
       config USB_M66592 tristate {
        depends on [USB_GADGET_M66592]
        default [USB_GADGET] if [<choice> && USB_GADGET_M66592]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_M66592]
        inherited [<choice> && USB_GADGET_M66592]
       }
      }
      config USB_GADGET_AMD5536UDC boolean {
       prompt "AMD5536 UDC" if [<choice> && PCI]
       depends on [PCI]
       select USB_GADGET_DUALSPEED if [<choice> && PCI]
       inherited [<choice> && PCI]
       config USB_AMD5536UDC tristate {
        depends on [USB_GADGET_AMD5536UDC]
        default [USB_GADGET] if [<choice> && USB_GADGET_AMD5536UDC]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_AMD5536UDC]
        inherited [<choice> && USB_GADGET_AMD5536UDC]
       }
      }
      config USB_GADGET_FSL_QE boolean {
       prompt "Freescale QE/CPM USB Device Controller" if [<choice> && FSL_SOC && (QUICC_ENGINE || CPM)]
       depends on [FSL_SOC && (QUICC_ENGINE || CPM)]
       inherited [<choice> && FSL_SOC && (QUICC_ENGINE || CPM)]
       config USB_FSL_QE tristate {
        depends on [USB_GADGET_FSL_QE]
        default [USB_GADGET] if [<choice> && USB_GADGET_FSL_QE]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_FSL_QE]
        inherited [<choice> && USB_GADGET_FSL_QE]
       }
      }
      config USB_GADGET_CI13XXX boolean {
       prompt "MIPS USB CI13xxx" if [<choice> && PCI]
       depends on [PCI]
       select USB_GADGET_DUALSPEED if [<choice> && PCI]
       inherited [<choice> && PCI]
       config USB_CI13XXX tristate {
        depends on [USB_GADGET_CI13XXX]
        default [USB_GADGET] if [<choice> && USB_GADGET_CI13XXX]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_CI13XXX]
        inherited [<choice> && USB_GADGET_CI13XXX]
       }
      }
      config USB_GADGET_NET2280 boolean {
       prompt "NetChip 228x" if [<choice> && PCI]
       depends on [PCI]
       select USB_GADGET_DUALSPEED if [<choice> && PCI]
       inherited [<choice> && PCI]
       config USB_NET2280 tristate {
        depends on [USB_GADGET_NET2280]
        default [USB_GADGET] if [<choice> && USB_GADGET_NET2280]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_NET2280]
        inherited [<choice> && USB_GADGET_NET2280]
       }
      }
      config USB_GADGET_GOKU boolean {
       prompt "Toshiba TC86C001 'Goku-S'" if [<choice> && PCI]
       depends on [PCI]
       inherited [<choice> && PCI]
       config USB_GOKU tristate {
        depends on [USB_GADGET_GOKU]
        default [USB_GADGET] if [<choice> && USB_GADGET_GOKU]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_GOKU]
        inherited [<choice> && USB_GADGET_GOKU]
       }
      }
      config USB_GADGET_LANGWELL boolean {
       prompt "Intel Langwell USB Device Controller" if [<choice> && PCI]
       depends on [PCI]
       select USB_GADGET_DUALSPEED if [<choice> && PCI]
       inherited [<choice> && PCI]
       config USB_LANGWELL tristate {
        depends on [USB_GADGET_LANGWELL]
        default [USB_GADGET] if [<choice> && USB_GADGET_LANGWELL]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_LANGWELL]
        inherited [<choice> && USB_GADGET_LANGWELL]
       }
      }
      config USB_GADGET_DUMMY_HCD boolean {
       prompt "Dummy HCD (DEVELOPMENT)" if [<choice> && (USB="y" || USB="m" && USB_GADGET="m")]
       depends on [USB="y" || USB="m" && USB_GADGET="m"]
       select USB_GADGET_DUALSPEED if [<choice> && (USB="y" || USB="m" && USB_GADGET="m")]
       inherited [<choice> && (USB="y" || USB="m" && USB_GADGET="m")]
       config USB_DUMMY_HCD tristate {
        depends on [USB_GADGET_DUMMY_HCD]
        default [USB_GADGET] if [<choice> && USB_GADGET_DUMMY_HCD]
        select USB_GADGET_SELECTED if [<choice> && USB_GADGET_DUMMY_HCD]
        inherited [<choice> && USB_GADGET_DUMMY_HCD]
       }
      }
     }
     config USB_GADGET_DUALSPEED boolean {
      depends on [USB_GADGET]
      default [n] if [USB_SUPPORT && USB_GADGET]
      inherited [USB_SUPPORT && USB_GADGET]
     }
     choice tristate {
      prompt "USB Gadget Drivers" if [USB_SUPPORT && USB_GADGET && USB_GADGET_SELECTED]
      depends on [USB_GADGET && USB_GADGET_SELECTED]
      default [USB_ETH] if [USB_SUPPORT && USB_GADGET && USB_GADGET_SELECTED]
      config USB_ZERO tristate {
       prompt "Gadget Zero (DEVELOPMENT)" if [<choice>]
       inherited [<choice>]
       config USB_ZERO_HNPTEST boolean {
        prompt "HNP Test Device" if [<choice> && USB_ZERO && USB_OTG]
        depends on [USB_ZERO && USB_OTG]
        inherited [<choice> && USB_ZERO && USB_OTG]
       }
      }
      config USB_AUDIO tristate {
       prompt "Audio Gadget (EXPERIMENTAL)" if [<choice> && SND]
       depends on [SND]
       select SND_PCM if [<choice> && SND]
       inherited [<choice> && SND]
      }
      config USB_ETH tristate {
       prompt "Ethernet Gadget (with CDC Ethernet support)" if [<choice> && NET]
       depends on [NET]
       select CRC32 if [<choice> && NET]
       inherited [<choice> && NET]
       config USB_ETH_RNDIS boolean {
        prompt "RNDIS support" if [<choice> && USB_ETH]
        depends on [USB_ETH]
        default [y] if [<choice> && USB_ETH]
        inherited [<choice> && USB_ETH]
       }
       config USB_ETH_EEM boolean {
        prompt "Ethernet Emulation Model (EEM) support" if [<choice> && USB_ETH]
        depends on [USB_ETH]
        default [n] if [<choice> && USB_ETH]
        inherited [<choice> && USB_ETH]
       }
      }
      config USB_GADGETFS tristate {
       prompt "Gadget Filesystem (EXPERIMENTAL)" if [<choice> && EXPERIMENTAL]
       depends on [EXPERIMENTAL]
       inherited [<choice> && EXPERIMENTAL]
      }
      config USB_FILE_STORAGE tristate {
       prompt "File-backed Storage Gadget" if [<choice> && BLOCK]
       depends on [BLOCK]
       inherited [<choice> && BLOCK]
       config USB_FILE_STORAGE_TEST boolean {
        prompt "File-backed Storage Gadget testing version" if [<choice> && USB_FILE_STORAGE]
        depends on [USB_FILE_STORAGE]
        default [n] if [<choice> && USB_FILE_STORAGE]
        inherited [<choice> && USB_FILE_STORAGE]
       }
      }
      config USB_G_SERIAL tristate {
       prompt "Serial Gadget (with CDC ACM and CDC OBEX support)" if [<choice>]
       inherited [<choice>]
      }
      config USB_MIDI_GADGET tristate {
       prompt "MIDI Gadget (EXPERIMENTAL)" if [<choice> && SND && EXPERIMENTAL]
       depends on [SND && EXPERIMENTAL]
       select SND_RAWMIDI if [<choice> && SND && EXPERIMENTAL]
       inherited [<choice> && SND && EXPERIMENTAL]
      }
      config USB_G_PRINTER tristate {
       prompt "Printer Gadget" if [<choice>]
       inherited [<choice>]
      }
      config USB_CDC_COMPOSITE tristate {
       prompt "CDC Composite Device (Ethernet and ACM)" if [<choice> && NET]
       depends on [NET]
       inherited [<choice> && NET]
      }
     }
    }
   }
   config USB_OTG_UTILS boolean {
    inherited [USB_SUPPORT]
   }
   if [USB_SUPPORT && (USB || USB_GADGET)] {
    config USB_GPIO_VBUS tristate {
     prompt "GPIO based peripheral-only VBUS sensing 'transceiver'" if [USB_SUPPORT && (USB || USB_GADGET) && GENERIC_GPIO]
     depends on [GENERIC_GPIO]
     select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET) && GENERIC_GPIO]
     inherited [USB_SUPPORT && (USB || USB_GADGET) && GENERIC_GPIO]
    }
    config ISP1301_OMAP tristate {
     prompt "Philips ISP1301 with OMAP OTG" if [USB_SUPPORT && (USB || USB_GADGET) && I2C && ARCH_OMAP_OTG]
     depends on [I2C && ARCH_OMAP_OTG]
     select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET) && I2C && ARCH_OMAP_OTG]
     inherited [USB_SUPPORT && (USB || USB_GADGET) && I2C && ARCH_OMAP_OTG]
    }
    config TWL4030_USB tristate {
     prompt "TWL4030 USB Transceiver Driver" if [USB_SUPPORT && (USB || USB_GADGET) && TWL4030_CORE && REGULATOR_TWL4030]
     depends on [TWL4030_CORE && REGULATOR_TWL4030]
     select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET) && TWL4030_CORE && REGULATOR_TWL4030]
     inherited [USB_SUPPORT && (USB || USB_GADGET) && TWL4030_CORE && REGULATOR_TWL4030]
    }
    config NOP_USB_XCEIV tristate {
     prompt "NOP USB Transceiver Driver" if [USB_SUPPORT && (USB || USB_GADGET)]
     select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET)]
     inherited [USB_SUPPORT && (USB || USB_GADGET)]
    }
   }
  }
 }
 menuconfig UWB tristate {
  prompt "Ultra Wideband devices (EXPERIMENTAL)" if [EXPERIMENTAL && PCI]
  depends on [EXPERIMENTAL]
  depends on [PCI]
  default [n] if [EXPERIMENTAL && PCI]
  inherited [EXPERIMENTAL && PCI]
  if [UWB] {
   config UWB_HWA tristate {
    prompt "UWB Radio Control driver for WUSB-compliant USB dongles (HWA)" if [UWB && USB]
    depends on [USB]
    inherited [UWB && USB]
   }
   config UWB_WHCI tristate {
    prompt "UWB Radio Control driver for WHCI-compliant cards" if [UWB && PCI]
    depends on [PCI]
    inherited [UWB && PCI]
   }
   config UWB_WLP tristate {
    prompt "Support WiMedia Link Protocol (Ethernet/IP over UWB)" if [UWB && NET]
    depends on [UWB && NET]
    inherited [UWB && NET]
   }
   config UWB_I1480U tristate {
    prompt "Support for Intel Wireless UWB Link 1480 HWA" if [UWB && UWB_HWA]
    depends on [UWB_HWA]
    select FW_LOADER if [UWB && UWB_HWA]
    inherited [UWB && UWB_HWA]
    config UWB_I1480U_WLP tristate {
     prompt "Support for Intel Wireless UWB Link 1480 HWA's WLP interface" if [UWB && UWB_I1480U && UWB_WLP && NET]
     depends on [UWB_I1480U && UWB_WLP && NET]
     inherited [UWB && UWB_I1480U && UWB_WLP && NET]
    }
   }
  }
 }
 menuconfig MMC tristate {
  prompt "MMC/SD/SDIO card support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  config MMC_DEBUG boolean {
   prompt "MMC debugging" if [MMC]
   depends on [MMC]
   inherited [MMC]
  }
  if [MMC] {
   config MMC_UNSAFE_RESUME boolean {
    prompt "Allow unsafe resume (DANGEROUS)" if [MMC]
    inherited [MMC]
   }
   config MMC_BLOCK tristate {
    prompt "MMC block device driver" if [MMC && BLOCK]
    depends on [BLOCK]
    default [y] if [MMC && BLOCK]
    inherited [MMC && BLOCK]
    config MMC_BLOCK_BOUNCE boolean {
     prompt "Use bounce buffer for simple hosts" if [MMC && MMC_BLOCK]
     depends on [MMC_BLOCK]
     default [y] if [MMC && MMC_BLOCK]
     inherited [MMC && MMC_BLOCK]
    }
   }
   config SDIO_UART tristate {
    prompt "SDIO UART/GPS class support" if [MMC]
    inherited [MMC]
   }
   config MMC_TEST tristate {
    prompt "MMC host test driver" if [MMC]
    default [n] if [MMC]
    inherited [MMC]
   }
   config MMC_ARMMMCI tristate {
    prompt "ARM AMBA Multimedia Card Interface support" if [MMC && ARM_AMBA]
    depends on [ARM_AMBA]
    inherited [MMC && ARM_AMBA]
   }
   config MMC_PXA tristate {
    prompt "Intel PXA25x/26x/27x Multimedia Card Interface support" if [MMC && ARCH_PXA]
    depends on [ARCH_PXA]
    inherited [MMC && ARCH_PXA]
   }
   config MMC_SDHCI tristate {
    prompt "Secure Digital Host Controller Interface support" if [MMC && HAS_DMA]
    depends on [HAS_DMA]
    inherited [MMC && HAS_DMA]
    config MMC_SDHCI_IO_ACCESSORS boolean {
     depends on [MMC_SDHCI]
     inherited [MMC && MMC_SDHCI]
    }
    config MMC_SDHCI_PCI tristate {
     prompt "SDHCI support on PCI bus" if [MMC && MMC_SDHCI && PCI]
     depends on [MMC_SDHCI && PCI]
     inherited [MMC && MMC_SDHCI && PCI]
     config MMC_RICOH_MMC tristate {
      prompt "Ricoh MMC Controller Disabler  (EXPERIMENTAL)" if [MMC && MMC_SDHCI_PCI]
      depends on [MMC_SDHCI_PCI]
      inherited [MMC && MMC_SDHCI_PCI]
     }
    }
    config MMC_SDHCI_OF tristate {
     prompt "SDHCI support on OpenFirmware platforms" if [MMC && MMC_SDHCI && PPC_OF]
     depends on [MMC_SDHCI && PPC_OF]
     select MMC_SDHCI_IO_ACCESSORS if [MMC && MMC_SDHCI && PPC_OF]
     inherited [MMC && MMC_SDHCI && PPC_OF]
    }
    config MMC_SDHCI_PLTFM tristate {
     prompt "SDHCI support on the platform specific bus" if [MMC && MMC_SDHCI]
     depends on [MMC_SDHCI]
     inherited [MMC && MMC_SDHCI]
    }
    config MMC_SDHCI_S3C tristate {
     prompt "SDHCI support on Samsung S3C SoC" if [MMC && MMC_SDHCI && (PLAT_S3C24XX || PLAT_S3C64XX)]
     depends on [MMC_SDHCI && (PLAT_S3C24XX || PLAT_S3C64XX)]
     inherited [MMC && MMC_SDHCI && (PLAT_S3C24XX || PLAT_S3C64XX)]
     config MMC_SDHCI_S3C_DMA boolean {
      prompt "DMA support on S3C SDHCI" if [MMC && MMC_SDHCI_S3C && EXPERIMENTAL]
      depends on [MMC_SDHCI_S3C && EXPERIMENTAL]
      inherited [MMC && MMC_SDHCI_S3C && EXPERIMENTAL]
     }
    }
   }
   config MMC_OMAP tristate {
    prompt "TI OMAP Multimedia Card Interface support" if [MMC && ARCH_OMAP]
    depends on [ARCH_OMAP]
    select TPS65010 if [MMC && ARCH_OMAP && MACH_OMAP_H2]
    inherited [MMC && ARCH_OMAP]
   }
   config MMC_OMAP_HS tristate {
    prompt "TI OMAP High Speed Multimedia Card Interface support" if [MMC && (ARCH_OMAP2430 || ARCH_OMAP3 || ARCH_OMAP4)]
    depends on [ARCH_OMAP2430 || ARCH_OMAP3 || ARCH_OMAP4]
    inherited [MMC && (ARCH_OMAP2430 || ARCH_OMAP3 || ARCH_OMAP4)]
   }
   config MMC_WBSD tristate {
    prompt "Winbond W83L51xD SD/MMC Card Interface support" if [MMC && ISA_DMA_API]
    depends on [ISA_DMA_API]
    inherited [MMC && ISA_DMA_API]
   }
   config MMC_AU1X tristate {
    prompt "Alchemy AU1XX0 MMC Card Interface support" if [MMC && SOC_AU1200]
    depends on [SOC_AU1200]
    inherited [MMC && SOC_AU1200]
   }
   choice tristate {
    prompt "Atmel SD/MMC Driver" if [MMC]
    default [MMC_ATMELMCI] if [MMC && AVR32]
    config MMC_AT91 tristate {
     prompt "AT91 SD/MMC Card Interface support" if [<choice> && ARCH_AT91]
     depends on [ARCH_AT91]
     inherited [<choice> && ARCH_AT91]
    }
    config MMC_ATMELMCI tristate {
     prompt "Atmel Multimedia Card Interface support" if [<choice> && (AVR32 || ARCH_AT91)]
     depends on [AVR32 || ARCH_AT91]
     inherited [<choice> && (AVR32 || ARCH_AT91)]
    }
   }
   config MMC_ATMELMCI_DMA boolean {
    prompt "Atmel MCI DMA support (EXPERIMENTAL)" if [MMC && MMC_ATMELMCI && AVR32 && DMA_ENGINE && EXPERIMENTAL]
    depends on [MMC_ATMELMCI && AVR32 && DMA_ENGINE && EXPERIMENTAL]
    inherited [MMC && MMC_ATMELMCI && AVR32 && DMA_ENGINE && EXPERIMENTAL]
   }
   config MMC_IMX tristate {
    prompt "Motorola i.MX Multimedia Card Interface support" if [MMC && ARCH_MX1]
    depends on [ARCH_MX1]
    inherited [MMC && ARCH_MX1]
   }
   config MMC_MSM7X00A tristate {
    prompt "Qualcomm MSM 7X00A SDCC Controller Support" if [MMC && ARCH_MSM]
    depends on [MMC && ARCH_MSM]
    inherited [MMC && ARCH_MSM]
   }
   config MMC_MXC tristate {
    prompt "Freescale i.MX2/3 Multimedia Card Interface support" if [MMC && ARCH_MXC]
    depends on [ARCH_MXC]
    inherited [MMC && ARCH_MXC]
   }
   config MMC_TIFM_SD tristate {
    prompt "TI Flash Media MMC/SD Interface support  (EXPERIMENTAL)" if [MMC && EXPERIMENTAL && PCI]
    depends on [EXPERIMENTAL && PCI]
    select TIFM_CORE if [MMC && EXPERIMENTAL && PCI]
    inherited [MMC && EXPERIMENTAL && PCI]
   }
   config MMC_MVSDIO tristate {
    prompt "Marvell MMC/SD/SDIO host driver" if [MMC && PLAT_ORION]
    depends on [PLAT_ORION]
    inherited [MMC && PLAT_ORION]
   }
   config MMC_SPI tristate {
    prompt "MMC/SD/SDIO over SPI" if [MMC && SPI_MASTER && !HIGHMEM && HAS_DMA]
    depends on [SPI_MASTER && !HIGHMEM && HAS_DMA]
    select CRC7 if [MMC && SPI_MASTER && !HIGHMEM && HAS_DMA]
    select CRC_ITU_T if [MMC && SPI_MASTER && !HIGHMEM && HAS_DMA]
    inherited [MMC && SPI_MASTER && !HIGHMEM && HAS_DMA]
   }
   config MMC_S3C tristate {
    prompt "Samsung S3C SD/MMC Card Interface support" if [MMC && ARCH_S3C2410]
    depends on [ARCH_S3C2410]
    inherited [MMC && ARCH_S3C2410]
    config MMC_S3C_HW_SDIO_IRQ boolean {
     prompt "Hardware support for SDIO IRQ" if [MMC && MMC_S3C]
     depends on [MMC_S3C]
     inherited [MMC && MMC_S3C]
    }
    choice boolean {
     prompt "Samsung S3C SD/MMC transfer code" if [MMC && MMC_S3C]
     depends on [MMC_S3C]
     config MMC_S3C_PIO boolean {
      prompt "Use PIO transfers only" if [<choice>]
      inherited [<choice>]
     }
     config MMC_S3C_DMA boolean {
      prompt "Use DMA transfers only (EXPERIMENTAL)" if [<choice> && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      inherited [<choice> && EXPERIMENTAL]
     }
     config MMC_S3C_PIODMA boolean {
      prompt "Support for both PIO and DMA (EXPERIMENTAL)" if [<choice>]
      inherited [<choice>]
     }
    }
   }
   config MMC_SDRICOH_CS tristate {
    prompt "MMC/SD driver for Ricoh Bay1Controllers (EXPERIMENTAL)" if [MMC && EXPERIMENTAL && PCI && PCMCIA]
    depends on [EXPERIMENTAL && PCI && PCMCIA]
    inherited [MMC && EXPERIMENTAL && PCI && PCMCIA]
   }
   config MMC_TMIO tristate {
    prompt "Toshiba Mobile IO Controller (TMIO) MMC/SD function support" if [MMC && (MFD_TMIO || MFD_ASIC3)]
    depends on [MFD_TMIO || MFD_ASIC3]
    inherited [MMC && (MFD_TMIO || MFD_ASIC3)]
   }
   config MMC_CB710 tristate {
    prompt "ENE CB710 MMC/SD Interface support" if [MMC && PCI]
    depends on [PCI]
    select CB710_CORE if [MMC && PCI]
    inherited [MMC && PCI]
   }
   config MMC_VIA_SDMMC tristate {
    prompt "VIA SD/MMC Card Reader Driver" if [MMC && PCI]
    depends on [PCI]
    inherited [MMC && PCI]
   }
  }
 }
 menuconfig MEMSTICK tristate {
  prompt "Sony MemoryStick card support (EXPERIMENTAL)" if []
  if [MEMSTICK] {
   config MEMSTICK_DEBUG boolean {
    prompt "MemoryStick debugging" if [MEMSTICK]
    inherited [MEMSTICK]
   }
   config MEMSTICK_UNSAFE_RESUME boolean {
    prompt "Allow unsafe resume (DANGEROUS)" if [MEMSTICK]
    inherited [MEMSTICK]
   }
   config MSPRO_BLOCK tristate {
    prompt "MemoryStick Pro block device driver" if [MEMSTICK && BLOCK]
    depends on [BLOCK]
    inherited [MEMSTICK && BLOCK]
   }
   config MEMSTICK_TIFM_MS tristate {
    prompt "TI Flash Media MemoryStick Interface support  (EXPERIMENTAL)" if [MEMSTICK && EXPERIMENTAL && PCI]
    depends on [EXPERIMENTAL && PCI]
    select TIFM_CORE if [MEMSTICK && EXPERIMENTAL && PCI]
    inherited [MEMSTICK && EXPERIMENTAL && PCI]
   }
   config MEMSTICK_JMICRON_38X tristate {
    prompt "JMicron JMB38X MemoryStick interface support (EXPERIMENTAL)" if [MEMSTICK && EXPERIMENTAL && PCI]
    depends on [EXPERIMENTAL && PCI]
    inherited [MEMSTICK && EXPERIMENTAL && PCI]
   }
  }
 }
 menuconfig NEW_LEDS boolean {
  prompt "LED Support" if []
  if [NEW_LEDS] {
   config LEDS_CLASS tristate {
    prompt "LED Class Support" if [NEW_LEDS]
    inherited [NEW_LEDS]
   }
   config LEDS_ATMEL_PWM tristate {
    prompt "LED Support using Atmel PWM outputs" if [NEW_LEDS && LEDS_CLASS && ATMEL_PWM]
    depends on [LEDS_CLASS && ATMEL_PWM]
    inherited [NEW_LEDS && LEDS_CLASS && ATMEL_PWM]
   }
   config LEDS_LOCOMO tristate {
    prompt "LED Support for Locomo device" if [NEW_LEDS && LEDS_CLASS && SHARP_LOCOMO]
    depends on [LEDS_CLASS && SHARP_LOCOMO]
    inherited [NEW_LEDS && LEDS_CLASS && SHARP_LOCOMO]
   }
   config LEDS_MIKROTIK_RB532 tristate {
    prompt "LED Support for Mikrotik Routerboard 532" if [NEW_LEDS && LEDS_CLASS && MIKROTIK_RB532]
    depends on [LEDS_CLASS && MIKROTIK_RB532]
    inherited [NEW_LEDS && LEDS_CLASS && MIKROTIK_RB532]
   }
   config LEDS_S3C24XX tristate {
    prompt "LED Support for Samsung S3C24XX GPIO LEDs" if [NEW_LEDS && LEDS_CLASS && ARCH_S3C2410]
    depends on [LEDS_CLASS && ARCH_S3C2410]
    inherited [NEW_LEDS && LEDS_CLASS && ARCH_S3C2410]
   }
   config LEDS_AMS_DELTA tristate {
    prompt "LED Support for the Amstrad Delta (E3)" if [NEW_LEDS && LEDS_CLASS && MACH_AMS_DELTA]
    depends on [LEDS_CLASS && MACH_AMS_DELTA]
    inherited [NEW_LEDS && LEDS_CLASS && MACH_AMS_DELTA]
   }
   config LEDS_NET48XX tristate {
    prompt "LED Support for Soekris net48xx series Error LED" if [NEW_LEDS && LEDS_CLASS && SCx200_GPIO]
    depends on [LEDS_CLASS && SCx200_GPIO]
    inherited [NEW_LEDS && LEDS_CLASS && SCx200_GPIO]
   }
   config LEDS_FSG tristate {
    prompt "LED Support for the Freecom FSG-3" if [NEW_LEDS && LEDS_CLASS && MACH_FSG]
    depends on [LEDS_CLASS && MACH_FSG]
    inherited [NEW_LEDS && LEDS_CLASS && MACH_FSG]
   }
   config LEDS_WRAP tristate {
    prompt "LED Support for the WRAP series LEDs" if [NEW_LEDS && LEDS_CLASS && SCx200_GPIO]
    depends on [LEDS_CLASS && SCx200_GPIO]
    inherited [NEW_LEDS && LEDS_CLASS && SCx200_GPIO]
   }
   config LEDS_ALIX2 tristate {
    prompt "LED Support for ALIX.2 and ALIX.3 series" if [NEW_LEDS && LEDS_CLASS && X86 && EXPERIMENTAL]
    depends on [LEDS_CLASS && X86 && EXPERIMENTAL]
    inherited [NEW_LEDS && LEDS_CLASS && X86 && EXPERIMENTAL]
   }
   config LEDS_H1940 tristate {
    prompt "LED Support for iPAQ H1940 device" if [NEW_LEDS && LEDS_CLASS && ARCH_H1940]
    depends on [LEDS_CLASS && ARCH_H1940]
    inherited [NEW_LEDS && LEDS_CLASS && ARCH_H1940]
   }
   config LEDS_COBALT_QUBE tristate {
    prompt "LED Support for the Cobalt Qube series front LED" if [NEW_LEDS && LEDS_CLASS && MIPS_COBALT]
    depends on [LEDS_CLASS && MIPS_COBALT]
    inherited [NEW_LEDS && LEDS_CLASS && MIPS_COBALT]
   }
   config LEDS_COBALT_RAQ boolean {
    prompt "LED Support for the Cobalt Raq series" if [NEW_LEDS && LEDS_CLASS="y" && MIPS_COBALT]
    depends on [LEDS_CLASS="y" && MIPS_COBALT]
    select LEDS_TRIGGERS if [NEW_LEDS && LEDS_CLASS="y" && MIPS_COBALT]
    inherited [NEW_LEDS && LEDS_CLASS="y" && MIPS_COBALT]
   }
   config LEDS_SUNFIRE tristate {
    prompt "LED support for SunFire servers." if [NEW_LEDS && LEDS_CLASS && SPARC64]
    depends on [LEDS_CLASS && SPARC64]
    select LEDS_TRIGGERS if [NEW_LEDS && LEDS_CLASS && SPARC64]
    inherited [NEW_LEDS && LEDS_CLASS && SPARC64]
   }
   config LEDS_HP6XX tristate {
    prompt "LED Support for the HP Jornada 6xx" if [NEW_LEDS && LEDS_CLASS && SH_HP6XX]
    depends on [LEDS_CLASS && SH_HP6XX]
    inherited [NEW_LEDS && LEDS_CLASS && SH_HP6XX]
   }
   config LEDS_PCA9532 tristate {
    prompt "LED driver for PCA9532 dimmer" if [NEW_LEDS && LEDS_CLASS && I2C && INPUT && EXPERIMENTAL]
    depends on [LEDS_CLASS && I2C && INPUT && EXPERIMENTAL]
    inherited [NEW_LEDS && LEDS_CLASS && I2C && INPUT && EXPERIMENTAL]
   }
   config LEDS_GPIO tristate {
    prompt "LED Support for GPIO connected LEDs" if [NEW_LEDS && LEDS_CLASS && GENERIC_GPIO]
    depends on [LEDS_CLASS && GENERIC_GPIO]
    inherited [NEW_LEDS && LEDS_CLASS && GENERIC_GPIO]
    config LEDS_GPIO_PLATFORM boolean {
     prompt "Platform device bindings for GPIO LEDs" if [NEW_LEDS && LEDS_GPIO]
     depends on [LEDS_GPIO]
     default [y] if [NEW_LEDS && LEDS_GPIO]
     inherited [NEW_LEDS && LEDS_GPIO]
    }
    config LEDS_GPIO_OF boolean {
     prompt "OpenFirmware platform device bindings for GPIO LEDs" if [NEW_LEDS && LEDS_GPIO && OF_DEVICE]
     depends on [LEDS_GPIO && OF_DEVICE]
     default [y] if [NEW_LEDS && LEDS_GPIO && OF_DEVICE]
     inherited [NEW_LEDS && LEDS_GPIO && OF_DEVICE]
    }
   }
   config LEDS_LP3944 tristate {
    prompt "LED Support for N.S. LP3944 (Fun Light) I2C chip" if [NEW_LEDS && LEDS_CLASS && I2C]
    depends on [LEDS_CLASS && I2C]
    inherited [NEW_LEDS && LEDS_CLASS && I2C]
   }
   config LEDS_CLEVO_MAIL tristate {
    prompt "Mail LED on Clevo notebook" if [NEW_LEDS && LEDS_CLASS && X86 && SERIO_I8042 && DMI]
    depends on [LEDS_CLASS && X86 && SERIO_I8042 && DMI]
    inherited [NEW_LEDS && LEDS_CLASS && X86 && SERIO_I8042 && DMI]
   }
   config LEDS_PCA955X tristate {
    prompt "LED Support for PCA955x I2C chips" if [NEW_LEDS && LEDS_CLASS && I2C]
    depends on [LEDS_CLASS && I2C]
    inherited [NEW_LEDS && LEDS_CLASS && I2C]
   }
   config LEDS_WM831X_STATUS tristate {
    prompt "LED support for status LEDs on WM831x PMICs" if [NEW_LEDS && LEDS_CLASS && MFD_WM831X]
    depends on [LEDS_CLASS && MFD_WM831X]
    inherited [NEW_LEDS && LEDS_CLASS && MFD_WM831X]
   }
   config LEDS_WM8350 tristate {
    prompt "LED Support for WM8350 AudioPlus PMIC" if [NEW_LEDS && LEDS_CLASS && MFD_WM8350]
    depends on [LEDS_CLASS && MFD_WM8350]
    inherited [NEW_LEDS && LEDS_CLASS && MFD_WM8350]
   }
   config LEDS_DA903X tristate {
    prompt "LED Support for DA9030/DA9034 PMIC" if [NEW_LEDS && LEDS_CLASS && PMIC_DA903X]
    depends on [LEDS_CLASS && PMIC_DA903X]
    inherited [NEW_LEDS && LEDS_CLASS && PMIC_DA903X]
   }
   config LEDS_DAC124S085 tristate {
    prompt "LED Support for DAC124S085 SPI DAC" if [NEW_LEDS && LEDS_CLASS && SPI]
    depends on [LEDS_CLASS && SPI]
    inherited [NEW_LEDS && LEDS_CLASS && SPI]
   }
   config LEDS_PWM tristate {
    prompt "PWM driven LED Support" if [NEW_LEDS && LEDS_CLASS && HAVE_PWM]
    depends on [LEDS_CLASS && HAVE_PWM]
    inherited [NEW_LEDS && LEDS_CLASS && HAVE_PWM]
   }
   config LEDS_BD2802 tristate {
    prompt "LED driver for BD2802 RGB LED" if [NEW_LEDS && LEDS_CLASS && I2C]
    depends on [LEDS_CLASS && I2C]
    inherited [NEW_LEDS && LEDS_CLASS && I2C]
   }
   config LEDS_TRIGGERS boolean {
    prompt "LED Trigger support" if [NEW_LEDS]
    inherited [NEW_LEDS]
    config LEDS_TRIGGER_TIMER tristate {
     prompt "LED Timer Trigger" if [NEW_LEDS && LEDS_TRIGGERS]
     depends on [LEDS_TRIGGERS]
     inherited [NEW_LEDS && LEDS_TRIGGERS]
    }
    config LEDS_TRIGGER_IDE_DISK boolean {
     prompt "LED IDE Disk Trigger" if [NEW_LEDS && LEDS_TRIGGERS && IDE_GD_ATA]
     depends on [LEDS_TRIGGERS && IDE_GD_ATA]
     inherited [NEW_LEDS && LEDS_TRIGGERS && IDE_GD_ATA]
    }
    config LEDS_TRIGGER_HEARTBEAT tristate {
     prompt "LED Heartbeat Trigger" if [NEW_LEDS && LEDS_TRIGGERS]
     depends on [LEDS_TRIGGERS]
     inherited [NEW_LEDS && LEDS_TRIGGERS]
    }
    config LEDS_TRIGGER_BACKLIGHT tristate {
     prompt "LED backlight Trigger" if [NEW_LEDS && LEDS_TRIGGERS]
     depends on [LEDS_TRIGGERS]
     inherited [NEW_LEDS && LEDS_TRIGGERS]
    }
    config LEDS_TRIGGER_GPIO tristate {
     prompt "LED GPIO Trigger" if [NEW_LEDS && LEDS_TRIGGERS && GPIOLIB]
     depends on [LEDS_TRIGGERS]
     depends on [GPIOLIB]
     inherited [NEW_LEDS && LEDS_TRIGGERS && GPIOLIB]
    }
    config LEDS_TRIGGER_DEFAULT_ON tristate {
     prompt "LED Default ON Trigger" if [NEW_LEDS && LEDS_TRIGGERS]
     depends on [LEDS_TRIGGERS]
     inherited [NEW_LEDS && LEDS_TRIGGERS]
    }
   }
  }
 }
 menuconfig ACCESSIBILITY boolean {
  prompt "Accessibility support" if []
  if [ACCESSIBILITY] {
   config A11Y_BRAILLE_CONSOLE boolean {
    prompt "Console on braille device" if [ACCESSIBILITY && VT && SERIAL_CORE_CONSOLE]
    depends on [VT]
    depends on [SERIAL_CORE_CONSOLE]
    inherited [ACCESSIBILITY && VT && SERIAL_CORE_CONSOLE]
   }
  }
 }
 menuconfig INFINIBAND tristate {
  prompt "InfiniBand support" if [(PCI || BROKEN) && HAS_IOMEM]
  depends on [PCI || BROKEN]
  depends on [HAS_IOMEM]
  inherited [(PCI || BROKEN) && HAS_IOMEM]
  if [INFINIBAND] {
   config INFINIBAND_USER_MAD tristate {
    prompt "InfiniBand userspace MAD support" if [INFINIBAND]
    depends on [INFINIBAND]
    inherited [INFINIBAND]
   }
   config INFINIBAND_USER_ACCESS tristate {
    prompt "InfiniBand userspace access (verbs and CM)" if [INFINIBAND]
    inherited [INFINIBAND]
    config INFINIBAND_USER_MEM boolean {
     depends on [INFINIBAND_USER_ACCESS]
     default [y] if [INFINIBAND && INFINIBAND_USER_ACCESS]
     inherited [INFINIBAND && INFINIBAND_USER_ACCESS]
    }
   }
   config INFINIBAND_ADDR_TRANS boolean {
    depends on [INET]
    depends on [!(INFINIBAND="y" && IPV6="m")]
    default [y] if [INFINIBAND && INET && (INFINIBAND!="y" || IPV6!="m")]
    inherited [INFINIBAND && INET && (INFINIBAND!="y" || IPV6!="m")]
   }
   config INFINIBAND_MTHCA tristate {
    prompt "Mellanox HCA support" if [INFINIBAND && PCI]
    depends on [PCI]
    inherited [INFINIBAND && PCI]
    config INFINIBAND_MTHCA_DEBUG boolean {
     prompt "Verbose debugging output" if [INFINIBAND && INFINIBAND_MTHCA && EMBEDDED]
     depends on [INFINIBAND_MTHCA]
     default [y] if [INFINIBAND && INFINIBAND_MTHCA]
     inherited [INFINIBAND && INFINIBAND_MTHCA]
    }
   }
   config INFINIBAND_IPATH tristate {
    prompt "QLogic InfiniPath Driver" if [INFINIBAND && 64BIT && NET]
    depends on [64BIT && NET]
    inherited [INFINIBAND && 64BIT && NET]
   }
   config INFINIBAND_EHCA tristate {
    prompt "eHCA support" if [INFINIBAND && IBMEBUS]
    depends on [IBMEBUS]
    inherited [INFINIBAND && IBMEBUS]
   }
   config INFINIBAND_AMSO1100 tristate {
    prompt "Ammasso 1100 HCA support" if [INFINIBAND && PCI && INET]
    depends on [PCI && INET]
    inherited [INFINIBAND && PCI && INET]
    config INFINIBAND_AMSO1100_DEBUG boolean {
     prompt "Verbose debugging output" if [INFINIBAND && INFINIBAND_AMSO1100]
     depends on [INFINIBAND_AMSO1100]
     default [n] if [INFINIBAND && INFINIBAND_AMSO1100]
     inherited [INFINIBAND && INFINIBAND_AMSO1100]
    }
   }
   config INFINIBAND_CXGB3 tristate {
    prompt "Chelsio RDMA Driver" if [INFINIBAND && CHELSIO_T3 && INET]
    depends on [CHELSIO_T3 && INET]
    select GENERIC_ALLOCATOR if [INFINIBAND && CHELSIO_T3 && INET]
    inherited [INFINIBAND && CHELSIO_T3 && INET]
    config INFINIBAND_CXGB3_DEBUG boolean {
     prompt "Verbose debugging output" if [INFINIBAND && INFINIBAND_CXGB3]
     depends on [INFINIBAND_CXGB3]
     default [n] if [INFINIBAND && INFINIBAND_CXGB3]
     inherited [INFINIBAND && INFINIBAND_CXGB3]
    }
   }
   config MLX4_INFINIBAND tristate {
    prompt "Mellanox ConnectX HCA support" if [INFINIBAND]
    select MLX4_CORE if [INFINIBAND]
    inherited [INFINIBAND]
   }
   config INFINIBAND_NES tristate {
    prompt "NetEffect RNIC Driver" if [PCI && INET && INFINIBAND]
    depends on [PCI && INET && INFINIBAND]
    select LIBCRC32C if [PCI && INET && INFINIBAND]
    select INET_LRO if [PCI && INET && INFINIBAND]
    inherited [PCI && INET && INFINIBAND]
    config INFINIBAND_NES_DEBUG boolean {
     prompt "Verbose debugging output" if [INFINIBAND && INFINIBAND_NES]
     depends on [INFINIBAND_NES]
     default [n] if [INFINIBAND && INFINIBAND_NES]
     inherited [INFINIBAND && INFINIBAND_NES]
    }
   }
   config INFINIBAND_IPOIB tristate {
    prompt "IP-over-InfiniBand" if [INFINIBAND && NETDEVICES && INET && (IPV6 || IPV6="n")]
    depends on [NETDEVICES && INET && (IPV6 || IPV6="n")]
    select INET_LRO if [INFINIBAND && NETDEVICES && INET && (IPV6 || IPV6="n")]
    inherited [INFINIBAND && NETDEVICES && INET && (IPV6 || IPV6="n")]
    config INFINIBAND_IPOIB_CM boolean {
     prompt "IP-over-InfiniBand Connected Mode support" if [INFINIBAND && INFINIBAND_IPOIB]
     depends on [INFINIBAND_IPOIB]
     default [n] if [INFINIBAND && INFINIBAND_IPOIB]
     inherited [INFINIBAND && INFINIBAND_IPOIB]
    }
    config INFINIBAND_IPOIB_DEBUG boolean {
     prompt "IP-over-InfiniBand debugging" if [INFINIBAND && INFINIBAND_IPOIB && EMBEDDED]
     depends on [INFINIBAND_IPOIB]
     default [y] if [INFINIBAND && INFINIBAND_IPOIB]
     inherited [INFINIBAND && INFINIBAND_IPOIB]
     config INFINIBAND_IPOIB_DEBUG_DATA boolean {
      prompt "IP-over-InfiniBand data path debugging" if [INFINIBAND && INFINIBAND_IPOIB_DEBUG]
      depends on [INFINIBAND_IPOIB_DEBUG]
      inherited [INFINIBAND && INFINIBAND_IPOIB_DEBUG]
     }
    }
   }
   config INFINIBAND_SRP tristate {
    prompt "InfiniBand SCSI RDMA Protocol" if [INFINIBAND && SCSI]
    depends on [SCSI]
    select SCSI_SRP_ATTRS if [INFINIBAND && SCSI]
    inherited [INFINIBAND && SCSI]
   }
   config INFINIBAND_ISER tristate {
    prompt "iSCSI Extensions for RDMA (iSER)" if [INFINIBAND && SCSI && INET && INFINIBAND_ADDR_TRANS]
    depends on [SCSI && INET && INFINIBAND_ADDR_TRANS]
    select SCSI_ISCSI_ATTRS if [INFINIBAND && SCSI && INET && INFINIBAND_ADDR_TRANS]
    inherited [INFINIBAND && SCSI && INET && INFINIBAND_ADDR_TRANS]
   }
  }
 }
 menuconfig EDAC boolean {
  prompt "EDAC (Error Detection And Correction) reporting" if [HAS_IOMEM && (X86 || PPC)]
  depends on [HAS_IOMEM]
  depends on [X86 || PPC]
  inherited [HAS_IOMEM && (X86 || PPC)]
  if [EDAC] {
   config EDAC_DEBUG boolean {
    prompt "Debugging" if [EDAC]
    inherited [EDAC]
    config EDAC_DEBUG_VERBOSE boolean {
     prompt "More verbose debugging" if [EDAC && EDAC_DEBUG]
     depends on [EDAC_DEBUG]
     inherited [EDAC && EDAC_DEBUG]
    }
   }
   config EDAC_DECODE_MCE tristate {
    prompt "Decode MCEs in human-readable form (only on AMD for now)" if [EDAC && CPU_SUP_AMD && X86_MCE]
    depends on [CPU_SUP_AMD && X86_MCE]
    default [y] if [EDAC && CPU_SUP_AMD && X86_MCE]
    inherited [EDAC && CPU_SUP_AMD && X86_MCE]
   }
   config EDAC_MM_EDAC tristate {
    prompt "Main Memory EDAC (Error Detection And Correction) reporting" if [EDAC]
    inherited [EDAC]
    config EDAC_AMD64 tristate {
     prompt "AMD64 (Opteron, Athlon64) K8, F10h, F11h" if [EDAC && EDAC_MM_EDAC && K8_NB && X86_64 && PCI && EDAC_DECODE_MCE]
     depends on [EDAC_MM_EDAC && K8_NB && X86_64 && PCI && EDAC_DECODE_MCE]
     inherited [EDAC && EDAC_MM_EDAC && K8_NB && X86_64 && PCI && EDAC_DECODE_MCE]
     config EDAC_AMD64_ERROR_INJECTION boolean {
      prompt "Sysfs Error Injection facilities" if [EDAC && EDAC_AMD64]
      depends on [EDAC_AMD64]
      inherited [EDAC && EDAC_AMD64]
     }
    }
    config EDAC_AMD76X tristate {
     prompt "AMD 76x (760, 762, 768)" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_E7XXX tristate {
     prompt "Intel e7xxx (e7205, e7500, e7501, e7505)" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_E752X tristate {
     prompt "Intel e752x (e7520, e7525, e7320) and 3100" if [EDAC && EDAC_MM_EDAC && PCI && X86 && HOTPLUG]
     depends on [EDAC_MM_EDAC && PCI && X86 && HOTPLUG]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86 && HOTPLUG]
    }
    config EDAC_I82443BXGX tristate {
     prompt "Intel 82443BX/GX (440BX/GX)" if [EDAC && EDAC_MM_EDAC && PCI && X86_32 && BROKEN]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     depends on [BROKEN]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32 && BROKEN]
    }
    config EDAC_I82875P tristate {
     prompt "Intel 82875p (D82875P, E7210)" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_I82975X tristate {
     prompt "Intel 82975x (D82975x)" if [EDAC && EDAC_MM_EDAC && PCI && X86]
     depends on [EDAC_MM_EDAC && PCI && X86]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86]
    }
    config EDAC_I3000 tristate {
     prompt "Intel 3000/3010" if [EDAC && EDAC_MM_EDAC && PCI && X86]
     depends on [EDAC_MM_EDAC && PCI && X86]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86]
    }
    config EDAC_I3200 tristate {
     prompt "Intel 3200" if [EDAC && EDAC_MM_EDAC && PCI && X86 && EXPERIMENTAL]
     depends on [EDAC_MM_EDAC && PCI && X86 && EXPERIMENTAL]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86 && EXPERIMENTAL]
    }
    config EDAC_X38 tristate {
     prompt "Intel X38" if [EDAC && EDAC_MM_EDAC && PCI && X86]
     depends on [EDAC_MM_EDAC && PCI && X86]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86]
    }
    config EDAC_I5400 tristate {
     prompt "Intel 5400 (Seaburg) chipsets" if [EDAC && EDAC_MM_EDAC && PCI && X86]
     depends on [EDAC_MM_EDAC && PCI && X86]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86]
    }
    config EDAC_I82860 tristate {
     prompt "Intel 82860" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_R82600 tristate {
     prompt "Radisys 82600 embedded chipset" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_I5000 tristate {
     prompt "Intel Greencreek/Blackford chipset" if [EDAC && EDAC_MM_EDAC && X86 && PCI]
     depends on [EDAC_MM_EDAC && X86 && PCI]
     inherited [EDAC && EDAC_MM_EDAC && X86 && PCI]
    }
    config EDAC_I5100 tristate {
     prompt "Intel San Clemente MCH" if [EDAC && EDAC_MM_EDAC && X86 && PCI]
     depends on [EDAC_MM_EDAC && X86 && PCI]
     inherited [EDAC && EDAC_MM_EDAC && X86 && PCI]
    }
    config EDAC_MPC85XX tristate {
     prompt "Freescale MPC83xx / MPC85xx" if [EDAC && EDAC_MM_EDAC && FSL_SOC && (PPC_83xx || MPC85xx)]
     depends on [EDAC_MM_EDAC && FSL_SOC && (PPC_83xx || MPC85xx)]
     inherited [EDAC && EDAC_MM_EDAC && FSL_SOC && (PPC_83xx || MPC85xx)]
    }
    config EDAC_MV64X60 tristate {
     prompt "Marvell MV64x60" if [EDAC && EDAC_MM_EDAC && MV64X60]
     depends on [EDAC_MM_EDAC && MV64X60]
     inherited [EDAC && EDAC_MM_EDAC && MV64X60]
    }
    config EDAC_PASEMI tristate {
     prompt "PA Semi PWRficient" if [EDAC && EDAC_MM_EDAC && PCI && PPC_PASEMI]
     depends on [EDAC_MM_EDAC && PCI]
     depends on [PPC_PASEMI]
     inherited [EDAC && EDAC_MM_EDAC && PCI && PPC_PASEMI]
    }
    config EDAC_CELL tristate {
     prompt "Cell Broadband Engine memory controller" if [EDAC && EDAC_MM_EDAC && PPC_CELL_COMMON]
     depends on [EDAC_MM_EDAC && PPC_CELL_COMMON]
     inherited [EDAC && EDAC_MM_EDAC && PPC_CELL_COMMON]
    }
    config EDAC_PPC4XX tristate {
     prompt "PPC4xx IBM DDR2 Memory Controller" if [EDAC && EDAC_MM_EDAC && 4xx]
     depends on [EDAC_MM_EDAC && 4xx]
     inherited [EDAC && EDAC_MM_EDAC && 4xx]
    }
    config EDAC_AMD8131 tristate {
     prompt "AMD8131 HyperTransport PCI-X Tunnel" if [EDAC && EDAC_MM_EDAC && PCI && PPC_MAPLE]
     depends on [EDAC_MM_EDAC && PCI && PPC_MAPLE]
     inherited [EDAC && EDAC_MM_EDAC && PCI && PPC_MAPLE]
    }
    config EDAC_AMD8111 tristate {
     prompt "AMD8111 HyperTransport I/O Hub" if [EDAC && EDAC_MM_EDAC && PCI && PPC_MAPLE]
     depends on [EDAC_MM_EDAC && PCI && PPC_MAPLE]
     inherited [EDAC && EDAC_MM_EDAC && PCI && PPC_MAPLE]
    }
    config EDAC_CPC925 tristate {
     prompt "IBM CPC925 Memory Controller (PPC970FX)" if [EDAC && EDAC_MM_EDAC && PPC64]
     depends on [EDAC_MM_EDAC && PPC64]
     inherited [EDAC && EDAC_MM_EDAC && PPC64]
    }
   }
  }
 }
 config RTC_LIB tristate {
 }
 menuconfig RTC_CLASS tristate {
  prompt "Real Time Clock" if [!S390]
  default [n] if [!S390]
  depends on [!S390]
  select RTC_LIB if [!S390]
  inherited [!S390]
  if [RTC_CLASS] {
   config RTC_HCTOSYS boolean {
    prompt "Set system time from RTC on startup and resume" if [RTC_CLASS="y"]
    depends on [RTC_CLASS="y"]
    default [y] if [RTC_CLASS="y"]
    inherited [RTC_CLASS="y"]
    config RTC_HCTOSYS_DEVICE string {
     prompt "RTC used to set the system time" if [RTC_CLASS && RTC_HCTOSYS]
     depends on [RTC_HCTOSYS="y"]
     default ["rtc0"] if [RTC_CLASS && RTC_HCTOSYS]
     inherited [RTC_CLASS && RTC_HCTOSYS]
    }
   }
   config RTC_DEBUG boolean {
    prompt "RTC debug support" if [RTC_CLASS="y"]
    depends on [RTC_CLASS="y"]
    inherited [RTC_CLASS="y"]
   }
   config RTC_INTF_SYSFS boolean {
    prompt "/sys/class/rtc/rtcN (sysfs)" if [RTC_CLASS && SYSFS]
    depends on [SYSFS]
    default [RTC_CLASS] if [RTC_CLASS && SYSFS]
    inherited [RTC_CLASS && SYSFS]
   }
   config RTC_INTF_PROC boolean {
    prompt "/proc/driver/rtc (procfs for rtc0)" if [RTC_CLASS && PROC_FS]
    depends on [PROC_FS]
    default [RTC_CLASS] if [RTC_CLASS && PROC_FS]
    inherited [RTC_CLASS && PROC_FS]
   }
   config RTC_INTF_DEV boolean {
    prompt "/dev/rtcN (character devices)" if [RTC_CLASS]
    default [RTC_CLASS] if [RTC_CLASS]
    inherited [RTC_CLASS]
    config RTC_INTF_DEV_UIE_EMUL boolean {
     prompt "RTC UIE emulation on dev interface" if [RTC_CLASS && RTC_INTF_DEV]
     depends on [RTC_INTF_DEV]
     inherited [RTC_CLASS && RTC_INTF_DEV]
    }
   }
   config RTC_DRV_TEST tristate {
    prompt "Test driver/device" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   if [RTC_CLASS && I2C] {
    config RTC_DRV_DS1307 tristate {
     prompt "Dallas/Maxim DS1307/37/38/39/40, ST M41T00, EPSON RX-8025" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_DS1374 tristate {
     prompt "Dallas/Maxim DS1374" if [RTC_CLASS && I2C]
     depends on [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_DS1672 tristate {
     prompt "Dallas/Maxim DS1672" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_MAX6900 tristate {
     prompt "Maxim MAX6900" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_RS5C372 tristate {
     prompt "Ricoh R2025S/D, RS5C372A/B, RV5C386, RV5C387A" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_ISL1208 tristate {
     prompt "Intersil ISL1208" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_X1205 tristate {
     prompt "Xicor/Intersil X1205" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_PCF8563 tristate {
     prompt "Philips PCF8563/Epson RTC8564" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_PCF8583 tristate {
     prompt "Philips PCF8583" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_M41T80 tristate {
     prompt "ST M41T62/65/M41T80/81/82/83/84/85/87" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
     config RTC_DRV_M41T80_WDT boolean {
      prompt "ST M41T65/M41T80 series RTC watchdog timer" if [RTC_CLASS && I2C && RTC_DRV_M41T80]
      depends on [RTC_DRV_M41T80]
      inherited [RTC_CLASS && I2C && RTC_DRV_M41T80]
     }
    }
    config RTC_DRV_DM355EVM tristate {
     prompt "TI DaVinci DM355 EVM RTC" if [RTC_CLASS && I2C && MFD_DM355EVM_MSP]
     depends on [MFD_DM355EVM_MSP]
     inherited [RTC_CLASS && I2C && MFD_DM355EVM_MSP]
    }
    config RTC_DRV_TWL92330 boolean {
     prompt "TI TWL92330/Menelaus" if [RTC_CLASS && I2C && MENELAUS]
     depends on [MENELAUS]
     inherited [RTC_CLASS && I2C && MENELAUS]
    }
    config RTC_DRV_TWL4030 tristate {
     prompt "TI TWL4030/TWL5030/TPS659x0" if [I2C && RTC_CLASS && TWL4030_CORE]
     depends on [RTC_CLASS && TWL4030_CORE]
     inherited [I2C && RTC_CLASS && TWL4030_CORE]
    }
    config RTC_DRV_S35390A tristate {
     prompt "Seiko Instruments S-35390A" if [RTC_CLASS && I2C]
     select BITREVERSE if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_FM3130 tristate {
     prompt "Ramtron FM3130" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_RX8581 tristate {
     prompt "Epson RX-8581" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_RX8025 tristate {
     prompt "Epson RX-8025SA/NB" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
   }
   if [RTC_CLASS && SPI_MASTER] {
    config RTC_DRV_M41T94 tristate {
     prompt "ST M41T94" if [RTC_CLASS && SPI_MASTER]
     inherited [RTC_CLASS && SPI_MASTER]
    }
    config RTC_DRV_DS1305 tristate {
     prompt "Dallas/Maxim DS1305/DS1306" if [RTC_CLASS && SPI_MASTER]
     inherited [RTC_CLASS && SPI_MASTER]
    }
    config RTC_DRV_DS1390 tristate {
     prompt "Dallas/Maxim DS1390/93/94" if [RTC_CLASS && SPI_MASTER]
     inherited [RTC_CLASS && SPI_MASTER]
    }
    config RTC_DRV_MAX6902 tristate {
     prompt "Maxim MAX6902" if [RTC_CLASS && SPI_MASTER]
     inherited [RTC_CLASS && SPI_MASTER]
    }
    config RTC_DRV_R9701 tristate {
     prompt "Epson RTC-9701JE" if [RTC_CLASS && SPI_MASTER]
     inherited [RTC_CLASS && SPI_MASTER]
    }
    config RTC_DRV_RS5C348 tristate {
     prompt "Ricoh RS5C348A/B" if [RTC_CLASS && SPI_MASTER]
     inherited [RTC_CLASS && SPI_MASTER]
    }
    config RTC_DRV_DS3234 tristate {
     prompt "Maxim/Dallas DS3234" if [RTC_CLASS && SPI_MASTER]
     inherited [RTC_CLASS && SPI_MASTER]
    }
    config RTC_DRV_PCF2123 tristate {
     prompt "NXP PCF2123" if [RTC_CLASS && SPI_MASTER]
     inherited [RTC_CLASS && SPI_MASTER]
    }
   }
   config RTC_DRV_CMOS tristate {
    prompt "PC-style 'CMOS'" if [RTC_CLASS && (X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS || SPARC64)]
    depends on [X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS || SPARC64]
    default [y] if [RTC_CLASS && (X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS || SPARC64) && X86]
    inherited [RTC_CLASS && (X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS || SPARC64)]
   }
   config RTC_DRV_DS1216 tristate {
    prompt "Dallas DS1216" if [RTC_CLASS && SNI_RM]
    depends on [SNI_RM]
    inherited [RTC_CLASS && SNI_RM]
   }
   config RTC_DRV_DS1286 tristate {
    prompt "Dallas DS1286" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_DS1302 tristate {
    prompt "Dallas DS1302" if [RTC_CLASS && SH_SECUREEDGE5410]
    depends on [SH_SECUREEDGE5410]
    inherited [RTC_CLASS && SH_SECUREEDGE5410]
   }
   config RTC_DRV_DS1511 tristate {
    prompt "Dallas DS1511" if [RTC_CLASS]
    depends on [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_DS1553 tristate {
    prompt "Maxim/Dallas DS1553" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_DS1742 tristate {
    prompt "Maxim/Dallas DS1742/1743" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_EFI tristate {
    prompt "EFI RTC" if [RTC_CLASS && IA64]
    depends on [IA64]
    inherited [RTC_CLASS && IA64]
   }
   config RTC_DRV_STK17TA8 tristate {
    prompt "Simtek STK17TA8" if [RTC_CLASS]
    depends on [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_M48T86 tristate {
    prompt "ST M48T86/Dallas DS12887" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_M48T35 tristate {
    prompt "ST M48T35" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_M48T59 tristate {
    prompt "ST M48T59/M48T08/M48T02" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_MXC tristate {
    prompt "Freescale MXC Real Time Clock" if [ARCH_MXC && RTC_CLASS]
    depends on [ARCH_MXC]
    depends on [RTC_CLASS]
    inherited [ARCH_MXC && RTC_CLASS]
   }
   config RTC_DRV_BQ4802 tristate {
    prompt "TI BQ4802" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_V3020 tristate {
    prompt "EM Microelectronic V3020" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_WM831X tristate {
    prompt "Wolfson Microelectronics WM831x RTC" if [RTC_CLASS && MFD_WM831X]
    depends on [MFD_WM831X]
    inherited [RTC_CLASS && MFD_WM831X]
   }
   config RTC_DRV_WM8350 tristate {
    prompt "Wolfson Microelectronics WM8350 RTC" if [RTC_CLASS && MFD_WM8350]
    depends on [MFD_WM8350]
    inherited [RTC_CLASS && MFD_WM8350]
   }
   config RTC_DRV_PCF50633 tristate {
    depends on [MFD_PCF50633]
    prompt "NXP PCF50633 RTC" if [RTC_CLASS && MFD_PCF50633]
    inherited [RTC_CLASS && MFD_PCF50633]
   }
   config RTC_DRV_AB3100 tristate {
    prompt "ST-Ericsson AB3100 RTC" if [RTC_CLASS && AB3100_CORE]
    depends on [AB3100_CORE]
    default [y] if [RTC_CLASS && AB3100_CORE]
    inherited [RTC_CLASS && AB3100_CORE]
   }
   config RTC_DRV_OMAP tristate {
    prompt "TI OMAP1" if [RTC_CLASS && (ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730)]
    depends on [ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730]
    inherited [RTC_CLASS && (ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730)]
   }
   config RTC_DRV_S3C tristate {
    prompt "Samsung S3C series SoC RTC" if [RTC_CLASS && ARCH_S3C2410]
    depends on [ARCH_S3C2410]
    inherited [RTC_CLASS && ARCH_S3C2410]
   }
   config RTC_DRV_EP93XX tristate {
    prompt "Cirrus Logic EP93XX" if [RTC_CLASS && ARCH_EP93XX]
    depends on [ARCH_EP93XX]
    inherited [RTC_CLASS && ARCH_EP93XX]
   }
   config RTC_DRV_SA1100 tristate {
    prompt "SA11x0/PXA2xx" if [RTC_CLASS && (ARCH_SA1100 || ARCH_PXA)]
    depends on [ARCH_SA1100 || ARCH_PXA]
    inherited [RTC_CLASS && (ARCH_SA1100 || ARCH_PXA)]
   }
   config RTC_DRV_SH tristate {
    prompt "SuperH On-Chip RTC" if [RTC_CLASS && SUPERH && HAVE_CLK]
    depends on [RTC_CLASS && SUPERH && HAVE_CLK]
    inherited [RTC_CLASS && SUPERH && HAVE_CLK]
   }
   config RTC_DRV_VR41XX tristate {
    prompt "NEC VR41XX" if [RTC_CLASS && CPU_VR41XX]
    depends on [CPU_VR41XX]
    inherited [RTC_CLASS && CPU_VR41XX]
   }
   config RTC_DRV_PL030 tristate {
    prompt "ARM AMBA PL030 RTC" if [RTC_CLASS && ARM_AMBA]
    depends on [ARM_AMBA]
    inherited [RTC_CLASS && ARM_AMBA]
   }
   config RTC_DRV_PL031 tristate {
    prompt "ARM AMBA PL031 RTC" if [RTC_CLASS && ARM_AMBA]
    depends on [ARM_AMBA]
    inherited [RTC_CLASS && ARM_AMBA]
   }
   config RTC_DRV_AT32AP700X tristate {
    prompt "AT32AP700X series RTC" if [RTC_CLASS && PLATFORM_AT32AP]
    depends on [PLATFORM_AT32AP]
    inherited [RTC_CLASS && PLATFORM_AT32AP]
   }
   config RTC_DRV_AT91RM9200 tristate {
    prompt "AT91RM9200 or AT91SAM9RL" if [RTC_CLASS && (ARCH_AT91RM9200 || ARCH_AT91SAM9RL)]
    depends on [ARCH_AT91RM9200 || ARCH_AT91SAM9RL]
    inherited [RTC_CLASS && (ARCH_AT91RM9200 || ARCH_AT91SAM9RL)]
   }
   config RTC_DRV_AT91SAM9 tristate {
    prompt "AT91SAM9x/AT91CAP9" if [RTC_CLASS && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
    depends on [ARCH_AT91 && !(ARCH_AT91RM9200 || ARCH_AT91X40)]
    inherited [RTC_CLASS && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
    config RTC_DRV_AT91SAM9_RTT integer {
     range [0 1] if [RTC_CLASS && RTC_DRV_AT91SAM9]
     default [0] if [RTC_CLASS && RTC_DRV_AT91SAM9]
     prompt "RTT module Number" if [RTC_CLASS && RTC_DRV_AT91SAM9 && ARCH_AT91SAM9263]
     depends on [RTC_DRV_AT91SAM9]
     inherited [RTC_CLASS && RTC_DRV_AT91SAM9]
    }
    config RTC_DRV_AT91SAM9_GPBR integer {
     range [0 3] if [RTC_CLASS && RTC_DRV_AT91SAM9 && !ARCH_AT91SAM9263]
     range [0 15] if [RTC_CLASS && RTC_DRV_AT91SAM9 && ARCH_AT91SAM9263]
     default [0] if [RTC_CLASS && RTC_DRV_AT91SAM9]
     prompt "Backup Register Number" if [RTC_CLASS && RTC_DRV_AT91SAM9]
     depends on [RTC_DRV_AT91SAM9]
     inherited [RTC_CLASS && RTC_DRV_AT91SAM9]
    }
   }
   config RTC_DRV_AU1XXX tristate {
    prompt "Au1xxx Counter0 RTC support" if [RTC_CLASS && SOC_AU1X00]
    depends on [SOC_AU1X00]
    inherited [RTC_CLASS && SOC_AU1X00]
   }
   config RTC_DRV_BFIN tristate {
    prompt "Blackfin On-Chip RTC" if [RTC_CLASS && BLACKFIN && !BF561]
    depends on [BLACKFIN && !BF561]
    inherited [RTC_CLASS && BLACKFIN && !BF561]
   }
   config RTC_DRV_RS5C313 tristate {
    prompt "Ricoh RS5C313" if [RTC_CLASS && SH_LANDISK]
    depends on [SH_LANDISK]
    inherited [RTC_CLASS && SH_LANDISK]
   }
   config RTC_DRV_GENERIC tristate {
    prompt "Generic RTC support" if [RTC_CLASS && (PARISC || M68K || PPC || SUPERH32)]
    depends on [PARISC || M68K || PPC || SUPERH32]
    inherited [RTC_CLASS && (PARISC || M68K || PPC || SUPERH32)]
   }
   config RTC_DRV_PXA tristate {
    prompt "PXA27x/PXA3xx" if [RTC_CLASS && ARCH_PXA]
    depends on [ARCH_PXA]
    inherited [RTC_CLASS && ARCH_PXA]
   }
   config RTC_DRV_SUN4V boolean {
    prompt "SUN4V Hypervisor RTC" if [RTC_CLASS && SPARC64]
    depends on [SPARC64]
    inherited [RTC_CLASS && SPARC64]
   }
   config RTC_DRV_STARFIRE boolean {
    prompt "Starfire RTC" if [RTC_CLASS && SPARC64]
    depends on [SPARC64]
    inherited [RTC_CLASS && SPARC64]
   }
   config RTC_DRV_TX4939 tristate {
    prompt "TX4939 SoC" if [RTC_CLASS && SOC_TX4939]
    depends on [SOC_TX4939]
    inherited [RTC_CLASS && SOC_TX4939]
   }
   config RTC_DRV_MV tristate {
    prompt "Marvell SoC RTC" if [RTC_CLASS && ARCH_KIRKWOOD]
    depends on [ARCH_KIRKWOOD]
    inherited [RTC_CLASS && ARCH_KIRKWOOD]
   }
   config RTC_DRV_PS3 tristate {
    prompt "PS3 RTC" if [RTC_CLASS && PPC_PS3]
    depends on [PPC_PS3]
    inherited [RTC_CLASS && PPC_PS3]
   }
   config RTC_DRV_COH901331 tristate {
    prompt "ST-Ericsson COH 901 331 RTC" if [RTC_CLASS && ARCH_U300]
    depends on [ARCH_U300]
    inherited [RTC_CLASS && ARCH_U300]
   }
   config RTC_DRV_STMP tristate {
    prompt "Freescale STMP3xxx RTC" if [RTC_CLASS && ARCH_STMP3XXX]
    depends on [ARCH_STMP3XXX]
    inherited [RTC_CLASS && ARCH_STMP3XXX]
   }
   config RTC_DRV_PCAP tristate {
    prompt "PCAP RTC" if [RTC_CLASS && EZX_PCAP]
    depends on [EZX_PCAP]
    inherited [RTC_CLASS && EZX_PCAP]
   }
  }
 }
 menuconfig DMADEVICES boolean {
  prompt "DMA Engine support" if [HAS_DMA]
  depends on [HAS_DMA]
  inherited [HAS_DMA]
  if [DMADEVICES] {
   config ASYNC_TX_DISABLE_CHANNEL_SWITCH boolean {
    inherited [DMADEVICES]
   }
   config INTEL_IOATDMA tristate {
    prompt "Intel I/OAT DMA support" if [DMADEVICES && PCI && X86]
    depends on [PCI && X86]
    select DMA_ENGINE if [DMADEVICES && PCI && X86]
    select DCA if [DMADEVICES && PCI && X86]
    select ASYNC_TX_DISABLE_CHANNEL_SWITCH if [DMADEVICES && PCI && X86]
    select ASYNC_TX_DISABLE_PQ_VAL_DMA if [DMADEVICES && PCI && X86]
    select ASYNC_TX_DISABLE_XOR_VAL_DMA if [DMADEVICES && PCI && X86]
    inherited [DMADEVICES && PCI && X86]
   }
   config INTEL_IOP_ADMA tristate {
    prompt "Intel IOP ADMA support" if [DMADEVICES && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX)]
    depends on [ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX]
    select DMA_ENGINE if [DMADEVICES && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX)]
    inherited [DMADEVICES && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX)]
   }
   config DW_DMAC tristate {
    prompt "Synopsys DesignWare AHB DMA support" if [DMADEVICES && AVR32]
    depends on [AVR32]
    select DMA_ENGINE if [DMADEVICES && AVR32]
    default [y] if [DMADEVICES && AVR32 && CPU_AT32AP7000]
    inherited [DMADEVICES && AVR32]
   }
   config AT_HDMAC tristate {
    prompt "Atmel AHB DMA support" if [DMADEVICES && ARCH_AT91SAM9RL]
    depends on [ARCH_AT91SAM9RL]
    select DMA_ENGINE if [DMADEVICES && ARCH_AT91SAM9RL]
    inherited [DMADEVICES && ARCH_AT91SAM9RL]
   }
   config FSL_DMA tristate {
    prompt "Freescale Elo and Elo Plus DMA support" if [DMADEVICES && FSL_SOC]
    depends on [FSL_SOC]
    select DMA_ENGINE if [DMADEVICES && FSL_SOC]
    inherited [DMADEVICES && FSL_SOC]
   }
   config MV_XOR boolean {
    prompt "Marvell XOR engine support" if [DMADEVICES && PLAT_ORION]
    depends on [PLAT_ORION]
    select DMA_ENGINE if [DMADEVICES && PLAT_ORION]
    inherited [DMADEVICES && PLAT_ORION]
   }
   config MX3_IPU boolean {
    prompt "MX3x Image Processing Unit support" if [DMADEVICES && ARCH_MX3]
    depends on [ARCH_MX3]
    select DMA_ENGINE if [DMADEVICES && ARCH_MX3]
    default [y] if [DMADEVICES && ARCH_MX3]
    inherited [DMADEVICES && ARCH_MX3]
    config MX3_IPU_IRQS integer {
     prompt "Number of dynamically mapped interrupts for IPU" if [DMADEVICES && MX3_IPU]
     depends on [MX3_IPU]
     range [2 137] if [DMADEVICES && MX3_IPU]
     default [4] if [DMADEVICES && MX3_IPU]
     inherited [DMADEVICES && MX3_IPU]
    }
   }
   config TXX9_DMAC tristate {
    prompt "Toshiba TXx9 SoC DMA support" if [DMADEVICES && (MACH_TX49XX || MACH_TX39XX)]
    depends on [MACH_TX49XX || MACH_TX39XX]
    select DMA_ENGINE if [DMADEVICES && (MACH_TX49XX || MACH_TX39XX)]
    inherited [DMADEVICES && (MACH_TX49XX || MACH_TX39XX)]
   }
   config SH_DMAE tristate {
    prompt "Renesas SuperH DMAC support" if [DMADEVICES && SUPERH && SH_DMA && !SH_DMA_API]
    depends on [SUPERH && SH_DMA]
    depends on [!SH_DMA_API]
    select DMA_ENGINE if [DMADEVICES && SUPERH && SH_DMA && !SH_DMA_API]
    inherited [DMADEVICES && SUPERH && SH_DMA && !SH_DMA_API]
   }
   config DMA_ENGINE boolean {
    inherited [DMADEVICES]
   }
   config NET_DMA boolean {
    prompt "Network: TCP receive copy offload" if [DMADEVICES && DMA_ENGINE && NET]
    depends on [DMA_ENGINE && NET]
    default [INTEL_IOATDMA || FSL_DMA] if [DMADEVICES && DMA_ENGINE && NET]
    inherited [DMADEVICES && DMA_ENGINE && NET]
   }
   config ASYNC_TX_DMA boolean {
    prompt "Async_tx: Offload support for the async_tx api" if [DMADEVICES && DMA_ENGINE]
    depends on [DMA_ENGINE]
    inherited [DMADEVICES && DMA_ENGINE]
   }
   config DMATEST tristate {
    prompt "DMA Test client" if [DMADEVICES && DMA_ENGINE]
    depends on [DMA_ENGINE]
    inherited [DMADEVICES && DMA_ENGINE]
   }
  }
 }
 config DCA tristate {
 }
 menuconfig AUXDISPLAY boolean {
  prompt "Auxiliary Display support" if []
  if [AUXDISPLAY] {
   config KS0108 tristate {
    prompt "KS0108 LCD Controller" if [AUXDISPLAY && PARPORT_PC]
    depends on [PARPORT_PC]
    default [n] if [AUXDISPLAY && PARPORT_PC]
    inherited [AUXDISPLAY && PARPORT_PC]
    config KS0108_PORT hex {
     prompt "Parallel port where the LCD is connected" if [AUXDISPLAY && KS0108]
     depends on [KS0108]
     default [0x378] if [AUXDISPLAY && KS0108]
     inherited [AUXDISPLAY && KS0108]
    }
    config KS0108_DELAY integer {
     prompt "Delay between each control writing (microseconds)" if [AUXDISPLAY && KS0108]
     depends on [KS0108]
     default [2] if [AUXDISPLAY && KS0108]
     inherited [AUXDISPLAY && KS0108]
    }
    config CFAG12864B tristate {
     prompt "CFAG12864B LCD" if [AUXDISPLAY && X86 && FB && KS0108]
     depends on [X86]
     depends on [FB]
     depends on [KS0108]
     select FB_SYS_FILLRECT if [AUXDISPLAY && X86 && FB && KS0108]
     select FB_SYS_COPYAREA if [AUXDISPLAY && X86 && FB && KS0108]
     select FB_SYS_IMAGEBLIT if [AUXDISPLAY && X86 && FB && KS0108]
     select FB_SYS_FOPS if [AUXDISPLAY && X86 && FB && KS0108]
     default [n] if [AUXDISPLAY && X86 && FB && KS0108]
     inherited [AUXDISPLAY && X86 && FB && KS0108]
     config CFAG12864B_RATE integer {
      prompt "Refresh rate (hertz)" if [AUXDISPLAY && CFAG12864B]
      depends on [CFAG12864B]
      default [20] if [AUXDISPLAY && CFAG12864B]
      inherited [AUXDISPLAY && CFAG12864B]
     }
    }
   }
  }
 }
 menuconfig UIO tristate {
  prompt "Userspace I/O drivers" if [!S390]
  depends on [!S390]
  inherited [!S390]
  if [UIO] {
   config UIO_CIF tristate {
    prompt "generic Hilscher CIF Card driver" if [UIO && PCI]
    depends on [PCI]
    inherited [UIO && PCI]
   }
   config UIO_PDRV tristate {
    prompt "Userspace I/O platform driver" if [UIO]
    inherited [UIO]
   }
   config UIO_PDRV_GENIRQ tristate {
    prompt "Userspace I/O platform driver with generic IRQ handling" if [UIO]
    inherited [UIO]
   }
   config UIO_SMX tristate {
    prompt "SMX cryptengine UIO interface" if [UIO]
    inherited [UIO]
   }
   config UIO_AEC tristate {
    prompt "AEC video timestamp device" if [UIO && PCI]
    depends on [PCI]
    inherited [UIO && PCI]
   }
   config UIO_SERCOS3 tristate {
    prompt "Automata Sercos III PCI card driver" if [UIO]
    inherited [UIO]
   }
   config UIO_PCI_GENERIC tristate {
    prompt "Generic driver for PCI 2.3 and PCI Express cards" if [UIO && PCI]
    depends on [PCI]
    default [n] if [UIO && PCI]
    inherited [UIO && PCI]
   }
  }
 }
 menu "TI VLYNQ" {
  config VLYNQ boolean {
   prompt "TI VLYNQ bus support" if [AR7 && EXPERIMENTAL]
   depends on [AR7 && EXPERIMENTAL]
   inherited [AR7 && EXPERIMENTAL]
   config VLYNQ_DEBUG boolean {
    prompt "VLYNQ bus debug" if [VLYNQ && DEBUG_KERNEL]
    depends on [VLYNQ && DEBUG_KERNEL]
    inherited [VLYNQ && DEBUG_KERNEL]
   }
  }
 }
 config XEN_BALLOON boolean {
  prompt "Xen memory balloon driver" if [XEN]
  depends on [XEN]
  default [y] if [XEN]
  inherited [XEN]
  config XEN_SCRUB_PAGES boolean {
   prompt "Scrub pages before returning them to system" if [XEN_BALLOON]
   depends on [XEN_BALLOON]
   default [y] if [XEN_BALLOON]
   inherited [XEN_BALLOON]
  }
 }
 config XEN_DEV_EVTCHN tristate {
  prompt "Xen /dev/xen/evtchn device" if [XEN]
  depends on [XEN]
  default [y] if [XEN]
  inherited [XEN]
 }
 config XENFS tristate {
  prompt "Xen filesystem" if [XEN]
  depends on [XEN]
  default [y] if [XEN]
  inherited [XEN]
  config XEN_COMPAT_XENFS boolean {
   prompt "Create compatibility mount point /proc/xen" if [XENFS]
   depends on [XENFS]
   default [y] if [XENFS]
   inherited [XENFS]
  }
 }
 config XEN_SYS_HYPERVISOR boolean {
  prompt "Create xen entries under /sys/hypervisor" if [XEN && SYSFS]
  depends on [XEN && SYSFS]
  select SYS_HYPERVISOR if [XEN && SYSFS]
  default [y] if [XEN && SYSFS]
  inherited [XEN && SYSFS]
 }
 menuconfig STAGING boolean {
  prompt "Staging drivers" if []
  default [n] if []
  if [STAGING] {
   config STAGING_EXCLUDE_BUILD boolean {
    prompt "Exclude Staging drivers from being built" if [STAGING]
    default [y] if [STAGING]
    inherited [STAGING]
    if [STAGING && !STAGING_EXCLUDE_BUILD] {
     config ET131X tristate {
      prompt "Agere ET-1310 Gigabit Ethernet support" if [STAGING && !STAGING_EXCLUDE_BUILD && NETDEV_1000 && PCI]
      depends on [NETDEV_1000 && PCI]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && NETDEV_1000 && PCI]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && NETDEV_1000 && PCI]
      config ET131X_DEBUG boolean {
       prompt "Enable et131x debugging" if [STAGING && !STAGING_EXCLUDE_BUILD && ET131X]
       depends on [ET131X]
       default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && ET131X]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && ET131X]
      }
     }
     config SLICOSS tristate {
      prompt "Alacritech Gigabit IS-NIC support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && NETDEV_1000]
      depends on [PCI && X86 && NETDEV_1000]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && NETDEV_1000]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && NETDEV_1000]
     }
     config VIDEO_GO7007 tristate {
      prompt "WIS GO7007 MPEG encoder support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
      depends on [VIDEO_DEV && PCI && I2C && INPUT]
      depends on [SND]
      select VIDEOBUF_DMA_SG if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
      select VIDEO_IR if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
      select VIDEO_TUNER if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
      select VIDEO_TVEEPROM if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
      select SND_PCM if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
      select CRC32 if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
      config VIDEO_GO7007_USB tristate {
       prompt "WIS GO7007 USB support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007 && USB]
       depends on [VIDEO_GO7007 && USB]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007 && USB]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007 && USB]
       config VIDEO_GO7007_USB_S2250_BOARD tristate {
        prompt "Sensoray 2250/2251 support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007_USB && DVB_USB]
        depends on [VIDEO_GO7007_USB && DVB_USB]
        default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007_USB && DVB_USB]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007_USB && DVB_USB]
       }
      }
      config VIDEO_GO7007_OV7640 tristate {
       prompt "OV7640 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       depends on [VIDEO_GO7007]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      }
      config VIDEO_GO7007_SAA7113 tristate {
       prompt "SAA7113 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       depends on [VIDEO_GO7007]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      }
      config VIDEO_GO7007_SAA7115 tristate {
       prompt "SAA7115 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       depends on [VIDEO_GO7007]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      }
      config VIDEO_GO7007_TW9903 tristate {
       prompt "TW9903 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       depends on [VIDEO_GO7007]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      }
      config VIDEO_GO7007_UDA1342 tristate {
       prompt "UDA1342 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       depends on [VIDEO_GO7007]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      }
      config VIDEO_GO7007_SONY_TUNER tristate {
       prompt "Sony tuner subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       depends on [VIDEO_GO7007]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      }
      config VIDEO_GO7007_TW2804 tristate {
       prompt "TW2804 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       depends on [VIDEO_GO7007]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      }
     }
     config VIDEO_CX25821 tristate {
      prompt "Conexant cx25821 support" if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      depends on [DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select I2C_ALGOBIT if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_BTCX if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TVEEPROM if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_IR if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEOBUF_DVB if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEOBUF_DMA_SG if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_CX25840 if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_CX2341X if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      config VIDEO_CX25821_ALSA tristate {
       prompt "Conexant 25821 DMA audio support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_CX25821 && SND && EXPERIMENTAL]
       depends on [VIDEO_CX25821 && SND && EXPERIMENTAL]
       select SND_PCM if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_CX25821 && SND && EXPERIMENTAL]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_CX25821 && SND && EXPERIMENTAL]
      }
     }
     config USB_IP_COMMON tristate {
      prompt "USB IP support (EXPERIMENTAL)" if [STAGING && !STAGING_EXCLUDE_BUILD && USB && NET && EXPERIMENTAL]
      depends on [USB && NET && EXPERIMENTAL]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB && NET && EXPERIMENTAL]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB && NET && EXPERIMENTAL]
      config USB_IP_VHCI_HCD tristate {
       prompt "USB IP client driver" if [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
       depends on [USB_IP_COMMON]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
      }
      config USB_IP_HOST tristate {
       prompt "USB IP host driver" if [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
       depends on [USB_IP_COMMON]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
      }
     }
     config W35UND tristate {
      prompt "IS89C35 WLAN USB driver" if [STAGING && !STAGING_EXCLUDE_BUILD && MAC80211 && WLAN && USB && EXPERIMENTAL]
      depends on [MAC80211 && WLAN && USB && EXPERIMENTAL]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && MAC80211 && WLAN && USB && EXPERIMENTAL]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && MAC80211 && WLAN && USB && EXPERIMENTAL]
     }
     config PRISM2_USB tristate {
      prompt "Prism2.5/3 USB driver" if [STAGING && !STAGING_EXCLUDE_BUILD && WLAN && USB && WIRELESS_EXT]
      depends on [WLAN && USB && WIRELESS_EXT]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && WLAN && USB && WIRELESS_EXT]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && WLAN && USB && WIRELESS_EXT]
     }
     config ECHO tristate {
      prompt "Line Echo Canceller support" if [STAGING && !STAGING_EXCLUDE_BUILD]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD]
     }
     config POCH tristate {
      prompt "Redrapids Pocket Change CardBus support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && UIO]
      depends on [PCI && UIO]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && UIO]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && UIO]
     }
     config OTUS tristate {
      prompt "Atheros OTUS 802.11n USB wireless support" if [STAGING && !STAGING_EXCLUDE_BUILD && USB && WLAN && MAC80211]
      depends on [USB && WLAN && MAC80211]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB && WLAN && MAC80211]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB && WLAN && MAC80211]
     }
     config RT2860 tristate {
      prompt "Ralink 2860 wireless support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && WLAN]
      depends on [PCI && X86 && WLAN]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && WLAN]
     }
     config RT2870 tristate {
      prompt "Ralink 2870/3070 wireless support" if [STAGING && !STAGING_EXCLUDE_BUILD && USB && X86 && WLAN]
      depends on [USB && X86 && WLAN]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB && X86 && WLAN]
     }
     config RT3090 tristate {
      prompt "Ralink 3090 wireless support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && WLAN]
      depends on [PCI && X86 && WLAN]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && WLAN]
     }
     config COMEDI tristate {
      prompt "Data acquisition support (comedi)" if [STAGING && !STAGING_EXCLUDE_BUILD && m && <choice> && (PCI || PCMCIA || PCCARD || USB)]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && m && <choice> && (PCI || PCMCIA || PCCARD || USB)]
      depends on [m && (PCI || PCMCIA || PCCARD || USB)]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && m && <choice> && (PCI || PCMCIA || PCCARD || USB)]
      config COMEDI_DEBUG boolean {
       prompt "Comedi debugging" if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI]
       depends on [COMEDI]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI]
      }
      config COMEDI_PCI_DRIVERS tristate {
       prompt "Comedi PCI drivers" if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCI]
       depends on [COMEDI && PCI]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCI]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCI]
      }
      config COMEDI_PCMCIA_DRIVERS tristate {
       prompt "Comedi PCMCIA drivers" if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCMCIA && PCCARD]
       depends on [COMEDI && PCMCIA && PCCARD]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCMCIA && PCCARD]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCMCIA && PCCARD]
      }
      config COMEDI_USB_DRIVERS tristate {
       prompt "Comedi USB drivers" if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && USB]
       depends on [COMEDI && USB]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && USB]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && USB]
      }
     }
     config ASUS_OLED tristate {
      prompt "Asus OLED driver" if [STAGING && !STAGING_EXCLUDE_BUILD && USB]
      depends on [USB]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB]
     }
     config PANEL tristate {
      prompt "Parallel port LCD/Keypad Panel support" if [STAGING && !STAGING_EXCLUDE_BUILD && PARPORT]
      depends on [PARPORT]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PARPORT]
      config PANEL_PARPORT integer {
       prompt "Default parallel port number (0=LPT1)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
       depends on [PANEL]
       range [0 255] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
       default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      }
      config PANEL_PROFILE integer {
       prompt "Default panel profile (0-5, 0=custom)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
       depends on [PANEL]
       range [0 5] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
       default [5] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
       config PANEL_KEYPAD integer {
        depends on [PANEL && PANEL_PROFILE="0"]
        prompt "Keypad type (0=none, 1=old 6 keys, 2=new 6 keys, 3=Nexcom 4 keys)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
        range [0 4] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
        default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
       }
       config PANEL_LCD integer {
        depends on [PANEL && PANEL_PROFILE="0"]
        prompt "LCD type (0=none, 1=custom, 2=old //, 3=ks0074, 4=hantronix, 5=Nexcom)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
        range [0 5] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
        default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
        config PANEL_LCD_HEIGHT integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         prompt "Number of lines on the LCD (1-2)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         range [1 2] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         default [2] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        }
        config PANEL_LCD_WIDTH integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         prompt "Number of characters per line on the LCD (1-40)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         range [1 40] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         default [40] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        }
        config PANEL_LCD_BWIDTH integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         prompt "Internal LCD line width (1-40, 40 by default)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         range [1 40] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         default [40] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        }
        config PANEL_LCD_HWIDTH integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         prompt "Hardware LCD line width (1-64, 64 by default)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         range [1 64] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         default [64] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        }
        config PANEL_LCD_CHARSET integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         prompt "LCD character set (0=normal, 1=KS0074)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         range [0 1] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        }
        config PANEL_LCD_PROTO integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         prompt "LCD communication mode (0=parallel 8 bits, 1=serial)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         range [0 1] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         config PANEL_LCD_PIN_E integer {
          depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          prompt "Parallel port pin number & polarity connected to the LCD E signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          default [14] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         }
         config PANEL_LCD_PIN_RS integer {
          depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          prompt "Parallel port pin number & polarity connected to the LCD RS signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          default [17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         }
         config PANEL_LCD_PIN_RW integer {
          depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          prompt "Parallel port pin number & polarity connected to the LCD RW signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          default [16] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
          inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         }
         config PANEL_LCD_PIN_SCL integer {
          depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
          prompt "Parallel port pin number & polarity connected to the LCD SCL signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
          range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
          default [1] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
          inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
         }
         config PANEL_LCD_PIN_SDA integer {
          depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
          prompt "Parallel port pin number & polarity connected to the LCD SDA signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
          range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
          default [2] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
          inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
         }
        }
        config PANEL_LCD_PIN_BL integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         prompt "Parallel port pin number & polarity connected to the LCD backlight signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        }
       }
      }
      config PANEL_CHANGE_MESSAGE boolean {
       depends on [PANEL]
       prompt "Change LCD initialization message ?" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
       default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
       config PANEL_BOOT_MESSAGE string {
        depends on [PANEL && PANEL_CHANGE_MESSAGE="y"]
        prompt "New initialization message" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_CHANGE_MESSAGE]
        default [""] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_CHANGE_MESSAGE]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_CHANGE_MESSAGE]
       }
      }
     }
     config ALTERA_PCIE_CHDMA tristate {
      prompt "Altera PCI Express Chaining DMA driver" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
      depends on [PCI]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
     }
     config RTL8187SE tristate {
      prompt "RealTek RTL8187SE Wireless LAN NIC driver" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && WIRELESS_EXT]
      depends on [PCI && WLAN]
      depends on [WIRELESS_EXT]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && WIRELESS_EXT]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && WIRELESS_EXT]
     }
     config RTL8192SU tristate {
      prompt "RealTek RTL8192SU Wireless LAN NIC driver" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && WIRELESS_EXT]
      depends on [PCI && WLAN]
      depends on [WIRELESS_EXT]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && WIRELESS_EXT]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && WIRELESS_EXT]
     }
     config RTL8192E tristate {
      prompt "RealTek RTL8192E Wireless LAN NIC driver" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && WIRELESS_EXT]
      depends on [PCI && WLAN]
      depends on [WIRELESS_EXT]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && WIRELESS_EXT]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && WIRELESS_EXT]
     }
     config INPUT_MIMIO tristate {
      prompt "Mimio Xi interactive whiteboard support" if [STAGING && !STAGING_EXCLUDE_BUILD && USB && INPUT]
      depends on [USB && INPUT]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB && INPUT]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB && INPUT]
     }
     config TRANZPORT tristate {
      prompt "Frontier Tranzport and Alphatrack support" if [STAGING && !STAGING_EXCLUDE_BUILD && USB]
      depends on [USB]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB]
     }
     menu "Android" {
      depends on [STAGING && !STAGING_EXCLUDE_BUILD]
      config ANDROID boolean {
       prompt "Android Drivers" if [STAGING && !STAGING_EXCLUDE_BUILD && BROKEN]
       depends on [BROKEN]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && BROKEN]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && BROKEN]
       if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID] {
        config ANDROID_BINDER_IPC boolean {
         prompt "Android Binder IPC Driver" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
        }
        config ANDROID_LOGGER tristate {
         prompt "Android log driver" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
        }
        config ANDROID_RAM_CONSOLE boolean {
         prompt "Android RAM buffer console" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         config ANDROID_RAM_CONSOLE_ENABLE_VERBOSE boolean {
          prompt "Enable verbose console messages on Android RAM console" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE]
          default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE]
          depends on [ANDROID_RAM_CONSOLE]
          inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE]
         }
         menuconfig ANDROID_RAM_CONSOLE_ERROR_CORRECTION boolean {
          prompt "Android RAM Console Enable error correction" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE && !ANDROID_RAM_CONSOLE_EARLY_INIT]
          default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE && !ANDROID_RAM_CONSOLE_EARLY_INIT]
          depends on [ANDROID_RAM_CONSOLE]
          depends on [!ANDROID_RAM_CONSOLE_EARLY_INIT]
          select REED_SOLOMON if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE && !ANDROID_RAM_CONSOLE_EARLY_INIT]
          select REED_SOLOMON_ENC8 if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE && !ANDROID_RAM_CONSOLE_EARLY_INIT]
          select REED_SOLOMON_DEC8 if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE && !ANDROID_RAM_CONSOLE_EARLY_INIT]
          inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE && !ANDROID_RAM_CONSOLE_EARLY_INIT]
          if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION] {
           config ANDROID_RAM_CONSOLE_ERROR_CORRECTION_DATA_SIZE integer {
            prompt "Android RAM Console Data data size" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
            default [128] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
            inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
           }
           config ANDROID_RAM_CONSOLE_ERROR_CORRECTION_ECC_SIZE integer {
            prompt "Android RAM Console ECC size" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
            default [16] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
            inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
           }
           config ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE integer {
            prompt "Android RAM Console Symbol size" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
            default [8] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
            inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
           }
           config ANDROID_RAM_CONSOLE_ERROR_CORRECTION_POLYNOMIAL hex {
            prompt "Android RAM Console Polynomial" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
            default [0x19] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION && ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE="4"]
            default [0x29] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION && ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE="5"]
            default [0x61] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION && ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE="6"]
            default [0x89] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION && ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE="7"]
            default [0x11d] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION && ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE="8"]
            inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION]
           }
          }
         }
         config ANDROID_RAM_CONSOLE_EARLY_INIT boolean {
          prompt "Start Android RAM console early" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE]
          default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE]
          depends on [ANDROID_RAM_CONSOLE]
          inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE]
          config ANDROID_RAM_CONSOLE_EARLY_ADDR hex {
           prompt "Android RAM console virtual address" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_EARLY_INIT]
           default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_EARLY_INIT]
           depends on [ANDROID_RAM_CONSOLE_EARLY_INIT]
           inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_EARLY_INIT]
          }
          config ANDROID_RAM_CONSOLE_EARLY_SIZE hex {
           prompt "Android RAM console buffer size" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_EARLY_INIT]
           default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_EARLY_INIT]
           depends on [ANDROID_RAM_CONSOLE_EARLY_INIT]
           inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && ANDROID_RAM_CONSOLE_EARLY_INIT]
          }
         }
        }
        config ANDROID_TIMED_OUTPUT boolean {
         prompt "Timed output class driver" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         config ANDROID_TIMED_GPIO tristate {
          prompt "Android timed gpio driver" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && GENERIC_GPIO && ANDROID_TIMED_OUTPUT]
          depends on [GENERIC_GPIO && ANDROID_TIMED_OUTPUT]
          default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && GENERIC_GPIO && ANDROID_TIMED_OUTPUT]
          inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID && GENERIC_GPIO && ANDROID_TIMED_OUTPUT]
         }
        }
        config ANDROID_LOW_MEMORY_KILLER boolean {
         prompt "Android Low Memory Killer" if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && ANDROID]
        }
       }
      }
     }
     config MSM_SMD boolean {
      depends on [ARCH_MSM]
      default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && ARCH_MSM]
      prompt "MSM Shared Memory Driver (SMD)" if [STAGING && !STAGING_EXCLUDE_BUILD && ARCH_MSM]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && ARCH_MSM]
      config MSM_ONCRPCROUTER boolean {
       depends on [MSM_SMD]
       default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_SMD]
       prompt "MSM ONCRPC router support" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_SMD]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_SMD]
       config MSM_RPCSERVERS boolean {
        depends on [MSM_ONCRPCROUTER]
        default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_ONCRPCROUTER]
        prompt "Kernel side RPC server bundle" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_ONCRPCROUTER]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_ONCRPCROUTER]
       }
      }
     }
     menuconfig MSM_CAMERA boolean {
      prompt "Qualcomm MSM camera and video capture support" if [STAGING && !STAGING_EXCLUDE_BUILD && ARCH_MSM && VIDEO_V4L2_COMMON]
      depends on [ARCH_MSM && VIDEO_V4L2_COMMON]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && ARCH_MSM && VIDEO_V4L2_COMMON]
      config MSM_CAMERA_DEBUG boolean {
       prompt "Qualcomm MSM camera debugging with printk" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
       depends on [MSM_CAMERA]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
      }
      config MSM_CAMERA_FLASH boolean {
       prompt "Qualcomm MSM camera flash support" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
       depends on [MSM_CAMERA]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
      }
     }
     config MT9T013 boolean {
      prompt "Sensor mt9t013 (BAYER 3M)" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
      depends on [MSM_CAMERA]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
     }
     config MT9D112 boolean {
      prompt "Sensor mt9d112 (YUV 2M)" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
      depends on [MSM_CAMERA]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
     }
     config MT9P012 boolean {
      prompt "Sensor mt9p012 (BAYER 5M)" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
      depends on [MSM_CAMERA]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
     }
     config S5K3E2FX boolean {
      prompt "Sensor s5k3e2fx (Samsung 5M)" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
      depends on [MSM_CAMERA]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
     }
     config INPUT_GPIO tristate {
      prompt "GPIO driver support" if [STAGING && !STAGING_EXCLUDE_BUILD]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD]
     }
     config DST tristate {
      prompt "Distributed storage" if [STAGING && !STAGING_EXCLUDE_BUILD && NET && CRYPTO && SYSFS && BLK_DEV]
      depends on [NET && CRYPTO && SYSFS && BLK_DEV]
      select CONNECTOR if [STAGING && !STAGING_EXCLUDE_BUILD && NET && CRYPTO && SYSFS && BLK_DEV]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && NET && CRYPTO && SYSFS && BLK_DEV]
      config DST_DEBUG boolean {
       prompt "DST debug" if [STAGING && !STAGING_EXCLUDE_BUILD && DST]
       depends on [DST]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && DST]
      }
     }
     config POHMELFS tristate {
      prompt "POHMELFS filesystem support" if [STAGING && !STAGING_EXCLUDE_BUILD && NET]
      depends on [NET]
      select CONNECTOR if [STAGING && !STAGING_EXCLUDE_BUILD && NET]
      select CRYPTO if [STAGING && !STAGING_EXCLUDE_BUILD && NET]
      select CRYPTO_BLKCIPHER if [STAGING && !STAGING_EXCLUDE_BUILD && NET]
      select CRYPTO_HMAC if [STAGING && !STAGING_EXCLUDE_BUILD && NET]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && NET]
      config POHMELFS_DEBUG boolean {
       prompt "POHMELFS debugging" if [STAGING && !STAGING_EXCLUDE_BUILD && POHMELFS]
       depends on [POHMELFS]
       default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && POHMELFS]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && POHMELFS]
      }
      config POHMELFS_CRYPTO boolean {
       prompt "POHMELFS crypto support" if [STAGING && !STAGING_EXCLUDE_BUILD && POHMELFS]
       depends on [POHMELFS]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && POHMELFS]
      }
     }
     config B3DFG tristate {
      prompt "Brontes 3d Frame Framegrabber" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
      depends on [PCI]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
     }
     config IDE_PHISON tristate {
      prompt "PCIE ATA PS5000 IDE support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && ATA && ATA_SFF]
      depends on [PCI && ATA && ATA_SFF]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && ATA && ATA_SFF]
     }
     config PLAN9AUTH tristate {
      prompt "Plan 9 style capability device implementation" if [STAGING && !STAGING_EXCLUDE_BUILD && CRYPTO]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && CRYPTO]
      depends on [CRYPTO]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && CRYPTO]
     }
     config LINE6_USB tristate {
      prompt "Line6 USB support" if [STAGING && !STAGING_EXCLUDE_BUILD && USB && SND]
      depends on [USB && SND]
      select SND_RAWMIDI if [STAGING && !STAGING_EXCLUDE_BUILD && USB && SND]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB && SND]
     }
     config DRM_RADEON_KMS boolean {
      prompt "Enable modesetting on radeon by default" if [STAGING && !STAGING_EXCLUDE_BUILD && DRM_RADEON]
      depends on [DRM_RADEON]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && DRM_RADEON]
     }
     config OCTEON_ETHERNET tristate {
      prompt "Cavium Networks Octeon Ethernet support" if [STAGING && !STAGING_EXCLUDE_BUILD && CPU_CAVIUM_OCTEON]
      depends on [CPU_CAVIUM_OCTEON]
      select MII if [STAGING && !STAGING_EXCLUDE_BUILD && CPU_CAVIUM_OCTEON]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && CPU_CAVIUM_OCTEON]
     }
     config USB_SERIAL_QUATECH2 tristate {
      prompt "USB Quatech ESU-100 8 Port Serial Driver" if [STAGING && !STAGING_EXCLUDE_BUILD && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB_SERIAL]
     }
     config USB_SERIAL_QUATECH_USB2 tristate {
      prompt "USB Quatech xSU2-[14]00 USB Serial Driver" if [STAGING && !STAGING_EXCLUDE_BUILD && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB_SERIAL]
     }
     config VT6655 tristate {
      prompt "VIA Technologies VT6655 support" if [STAGING && !STAGING_EXCLUDE_BUILD && WIRELESS_EXT && PCI]
      depends on [WIRELESS_EXT && PCI]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && WIRELESS_EXT && PCI]
     }
     config VT6656 tristate {
      prompt "VIA Technologies VT6656 support" if [STAGING && !STAGING_EXCLUDE_BUILD && WIRELESS_EXT && USB]
      depends on [WIRELESS_EXT && USB]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && WIRELESS_EXT && USB]
     }
     config FB_UDL tristate {
      prompt "Displaylink USB Framebuffer support" if [STAGING && !STAGING_EXCLUDE_BUILD && FB && USB]
      depends on [FB && USB]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && FB && USB]
     }
     config HYPERV tristate {
      prompt "Microsoft Hyper-V client drivers" if [STAGING && !STAGING_EXCLUDE_BUILD && X86 && m && <choice>]
      depends on [X86 && m]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && X86 && m && <choice>]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && X86 && m && <choice>]
      if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV] {
       config HYPERV_STORAGE tristate {
        prompt "Microsoft Hyper-V virtual storage driver" if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && SCSI]
        depends on [SCSI]
        default [HYPERV] if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && SCSI]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && SCSI]
       }
       config HYPERV_BLOCK tristate {
        prompt "Microsoft Hyper-V virtual block driver" if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && BLOCK && SCSI]
        depends on [BLOCK && SCSI]
        default [HYPERV] if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && BLOCK && SCSI]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && BLOCK && SCSI]
       }
       config HYPERV_NET tristate {
        prompt "Microsoft Hyper-V virtual network driver" if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && NET]
        depends on [NET]
        default [HYPERV] if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && NET]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && NET]
       }
      }
     }
     menuconfig VME_BUS tristate {
      prompt "VME bridge support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
      depends on [PCI]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
      if [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS] {
       config VME_CA91CX42 tristate {
        prompt "Universe II" if [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
       }
       config VME_TSI148 tristate {
        prompt "Tempe" if [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
       }
       config VME_USER tristate {
        prompt "VME user space access driver" if [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
       }
      }
     }
     menu "RAR Register Driver" {
      depends on [STAGING && !STAGING_EXCLUDE_BUILD]
      config RAR_REGISTER tristate {
       prompt "Restricted Access Region Register Driver" if [STAGING && !STAGING_EXCLUDE_BUILD]
       default [n] if [STAGING && !STAGING_EXCLUDE_BUILD]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD]
      }
     }
     config DX_SEP tristate {
      prompt "Discretix SEP driver" if [STAGING && !STAGING_EXCLUDE_BUILD && RAR_REGISTER && PCI]
      depends on [RAR_REGISTER && PCI]
      default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && RAR_REGISTER && PCI]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && RAR_REGISTER && PCI]
     }
     menuconfig IIO tristate {
      prompt "Industrial I/O support" if [STAGING && !STAGING_EXCLUDE_BUILD && !S390]
      depends on [!S390]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && !S390]
      if [STAGING && !STAGING_EXCLUDE_BUILD && IIO] {
       config IIO_RING_BUFFER boolean {
        prompt "Enable ring buffer support within IIO" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO]
        if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_RING_BUFFER] {
         config IIO_SW_RING tristate {
          prompt "Industrial I/O lock free software ring" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_RING_BUFFER]
          inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_RING_BUFFER]
         }
        }
       }
       config IIO_TRIGGER boolean {
        prompt "Enable triggered sampling support" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO]
       }
       config KXSD9 tristate {
        prompt "Kionix KXSD9 Accelerometer Driver" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && SPI]
        depends on [SPI]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && SPI]
       }
       config LIS3L02DQ tristate {
        prompt "ST Microelectronics LIS3L02DQ Accelerometer Driver" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && SPI]
        depends on [SPI]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && SPI]
       }
       config SCA3000 tristate {
        depends on [IIO_RING_BUFFER]
        depends on [SPI]
        prompt "VTI SCA3000 series accelerometers" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_RING_BUFFER && SPI]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_RING_BUFFER && SPI]
       }
       config MAX1363 tristate {
        prompt "MAXIM max1363 ADC driver" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && I2C]
        depends on [I2C]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && I2C]
       }
       config TSL2561 tristate {
        prompt "TAOS TSL2561 light-to-digital convertor" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && I2C]
        depends on [I2C]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && I2C]
       }
       if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_TRIGGER] {
        config IIO_PERIODIC_RTC_TRIGGER tristate {
         prompt "Periodic RTC triggers" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_TRIGGER && RTC_CLASS]
         depends on [RTC_CLASS]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_TRIGGER && RTC_CLASS]
        }
        config IIO_GPIO_TRIGGER tristate {
         prompt "GPIO trigger" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_TRIGGER && GENERIC_GPIO]
         depends on [GENERIC_GPIO]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_TRIGGER && GENERIC_GPIO]
        }
       }
      }
     }
    }
   }
  }
 }
 if [X86] {
  menuconfig X86_PLATFORM_DEVICES boolean {
   prompt "X86 Platform Specific Device Drivers" if [X86]
   default [y] if [X86]
   inherited [X86]
   if [X86 && X86_PLATFORM_DEVICES] {
    config ACER_WMI tristate {
     prompt "Acer WMI Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && ACPI && LEDS_CLASS && NEW_LEDS && BACKLIGHT_CLASS_DEVICE && SERIO_I8042 && (RFKILL || RFKILL="n")]
     depends on [ACPI]
     depends on [LEDS_CLASS]
     depends on [NEW_LEDS]
     depends on [BACKLIGHT_CLASS_DEVICE]
     depends on [SERIO_I8042]
     depends on [RFKILL || RFKILL="n"]
     select ACPI_WMI if [X86 && X86_PLATFORM_DEVICES && ACPI && LEDS_CLASS && NEW_LEDS && BACKLIGHT_CLASS_DEVICE && SERIO_I8042 && (RFKILL || RFKILL="n")]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI && LEDS_CLASS && NEW_LEDS && BACKLIGHT_CLASS_DEVICE && SERIO_I8042 && (RFKILL || RFKILL="n")]
    }
    config ACERHDF tristate {
     prompt "Acer Aspire One temperature and fan driver" if [X86 && X86_PLATFORM_DEVICES && THERMAL && THERMAL_HWMON && ACPI]
     depends on [THERMAL && THERMAL_HWMON && ACPI]
     inherited [X86 && X86_PLATFORM_DEVICES && THERMAL && THERMAL_HWMON && ACPI]
    }
    config ASUS_LAPTOP tristate {
     prompt "Asus Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && ACPI && !ACPI_ASUS && INPUT]
     depends on [ACPI]
     depends on [!ACPI_ASUS]
     select LEDS_CLASS if [X86 && X86_PLATFORM_DEVICES && ACPI && !ACPI_ASUS && INPUT]
     select NEW_LEDS if [X86 && X86_PLATFORM_DEVICES && ACPI && !ACPI_ASUS && INPUT]
     select BACKLIGHT_CLASS_DEVICE if [X86 && X86_PLATFORM_DEVICES && ACPI && !ACPI_ASUS && INPUT]
     depends on [INPUT]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI && !ACPI_ASUS && INPUT]
    }
    config DELL_LAPTOP tristate {
     prompt "Dell Laptop Extras (EXPERIMENTAL)" if [MISC_DEVICES && X86 && DCDBAS && EXPERIMENTAL && BACKLIGHT_CLASS_DEVICE && RFKILL && POWER_SUPPLY]
     depends on [X86]
     depends on [DCDBAS]
     depends on [EXPERIMENTAL]
     depends on [BACKLIGHT_CLASS_DEVICE]
     depends on [RFKILL]
     depends on [POWER_SUPPLY]
     default [n] if [MISC_DEVICES && X86 && DCDBAS && EXPERIMENTAL && BACKLIGHT_CLASS_DEVICE && RFKILL && POWER_SUPPLY]
     prompt "Dell Laptop Extras (EXPERIMENTAL)" if [X86_PLATFORM_DEVICES && X86 && DCDBAS && EXPERIMENTAL && BACKLIGHT_CLASS_DEVICE && (RFKILL || RFKILL="n") && POWER_SUPPLY]
     depends on [X86]
     depends on [DCDBAS]
     depends on [EXPERIMENTAL]
     depends on [BACKLIGHT_CLASS_DEVICE]
     depends on [RFKILL || RFKILL="n"]
     depends on [POWER_SUPPLY]
     default [n] if [X86_PLATFORM_DEVICES && X86 && DCDBAS && EXPERIMENTAL && BACKLIGHT_CLASS_DEVICE && (RFKILL || RFKILL="n") && POWER_SUPPLY]
     inherited [X86_PLATFORM_DEVICES && X86 && DCDBAS && EXPERIMENTAL && BACKLIGHT_CLASS_DEVICE && (RFKILL || RFKILL="n") && POWER_SUPPLY]
    }
    config DELL_WMI tristate {
     prompt "Dell WMI extras" if [X86 && X86_PLATFORM_DEVICES && ACPI_WMI && INPUT]
     depends on [ACPI_WMI]
     depends on [INPUT]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI_WMI && INPUT]
    }
    config FUJITSU_LAPTOP tristate {
     prompt "Fujitsu Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && BACKLIGHT_CLASS_DEVICE && (LEDS_CLASS || LEDS_CLASS="n")]
     depends on [ACPI]
     depends on [INPUT]
     depends on [BACKLIGHT_CLASS_DEVICE]
     depends on [LEDS_CLASS || LEDS_CLASS="n"]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && BACKLIGHT_CLASS_DEVICE && (LEDS_CLASS || LEDS_CLASS="n")]
     config FUJITSU_LAPTOP_DEBUG boolean {
      prompt "Verbose debug mode for Fujitsu Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && FUJITSU_LAPTOP]
      depends on [FUJITSU_LAPTOP]
      default [n] if [X86 && X86_PLATFORM_DEVICES && FUJITSU_LAPTOP]
      inherited [X86 && X86_PLATFORM_DEVICES && FUJITSU_LAPTOP]
     }
    }
    config TC1100_WMI tristate {
     prompt "HP Compaq TC1100 Tablet WMI Extras (EXPERIMENTAL)" if [X86 && X86_PLATFORM_DEVICES && !X86_64 && EXPERIMENTAL && ACPI]
     depends on [!X86_64]
     depends on [EXPERIMENTAL]
     depends on [ACPI]
     select ACPI_WMI if [X86 && X86_PLATFORM_DEVICES && !X86_64 && EXPERIMENTAL && ACPI]
     inherited [X86 && X86_PLATFORM_DEVICES && !X86_64 && EXPERIMENTAL && ACPI]
    }
    config HP_WMI tristate {
     prompt "HP WMI extras" if [X86 && X86_PLATFORM_DEVICES && ACPI_WMI && INPUT && (RFKILL || RFKILL="n")]
     depends on [ACPI_WMI]
     depends on [INPUT]
     depends on [RFKILL || RFKILL="n"]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI_WMI && INPUT && (RFKILL || RFKILL="n")]
    }
    config MSI_LAPTOP tristate {
     prompt "MSI Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && ACPI && BACKLIGHT_CLASS_DEVICE]
     depends on [ACPI]
     depends on [BACKLIGHT_CLASS_DEVICE]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI && BACKLIGHT_CLASS_DEVICE]
    }
    config PANASONIC_LAPTOP tristate {
     prompt "Panasonic Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && INPUT && ACPI && BACKLIGHT_CLASS_DEVICE]
     depends on [INPUT && ACPI]
     depends on [BACKLIGHT_CLASS_DEVICE]
     inherited [X86 && X86_PLATFORM_DEVICES && INPUT && ACPI && BACKLIGHT_CLASS_DEVICE]
    }
    config COMPAL_LAPTOP tristate {
     prompt "Compal Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && ACPI && BACKLIGHT_CLASS_DEVICE]
     depends on [ACPI]
     depends on [BACKLIGHT_CLASS_DEVICE]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI && BACKLIGHT_CLASS_DEVICE]
    }
    config SONY_LAPTOP tristate {
     prompt "Sony Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && RFKILL]
     depends on [ACPI]
     select BACKLIGHT_CLASS_DEVICE if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && RFKILL]
     depends on [INPUT]
     depends on [RFKILL]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && RFKILL]
     config SONYPI_COMPAT boolean {
      prompt "Sonypi compatibility" if [X86 && X86_PLATFORM_DEVICES && SONY_LAPTOP]
      depends on [SONY_LAPTOP]
      inherited [X86 && X86_PLATFORM_DEVICES && SONY_LAPTOP]
     }
    }
    config THINKPAD_ACPI tristate {
     prompt "ThinkPad ACPI Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     depends on [ACPI]
     depends on [INPUT]
     depends on [RFKILL || RFKILL="n"]
     select BACKLIGHT_LCD_SUPPORT if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     select BACKLIGHT_CLASS_DEVICE if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     select HWMON if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     select NVRAM if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     select NEW_LEDS if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     select LEDS_CLASS if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     config THINKPAD_ACPI_DEBUGFACILITIES boolean {
      prompt "Maintainer debug facilities" if [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
      depends on [THINKPAD_ACPI]
      default [n] if [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
      inherited [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
     }
     config THINKPAD_ACPI_DEBUG boolean {
      prompt "Verbose debug mode" if [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
      depends on [THINKPAD_ACPI]
      default [n] if [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
      inherited [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
     }
     config THINKPAD_ACPI_UNSAFE_LEDS boolean {
      prompt "Allow control of important LEDs (unsafe)" if [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
      depends on [THINKPAD_ACPI]
      default [n] if [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
      inherited [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
     }
     config THINKPAD_ACPI_VIDEO boolean {
      prompt "Video output control support" if [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
      depends on [THINKPAD_ACPI]
      default [y] if [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
      inherited [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
     }
     config THINKPAD_ACPI_HOTKEY_POLL boolean {
      prompt "Support NVRAM polling for hot keys" if [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
      depends on [THINKPAD_ACPI]
      default [y] if [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
      inherited [X86 && X86_PLATFORM_DEVICES && THINKPAD_ACPI]
     }
    }
    config INTEL_MENLOW tristate {
     prompt "Thermal Management driver for Intel menlow platform" if [X86 && X86_PLATFORM_DEVICES && ACPI_THERMAL]
     depends on [ACPI_THERMAL]
     select THERMAL if [X86 && X86_PLATFORM_DEVICES && ACPI_THERMAL]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI_THERMAL]
    }
    config EEEPC_LAPTOP tristate {
     prompt "Eee PC Hotkey Driver (EXPERIMENTAL)" if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && EXPERIMENTAL && (RFKILL || RFKILL="n") && HOTPLUG_PCI]
     depends on [ACPI]
     depends on [INPUT]
     depends on [EXPERIMENTAL]
     depends on [RFKILL || RFKILL="n"]
     depends on [HOTPLUG_PCI]
     select BACKLIGHT_CLASS_DEVICE if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && EXPERIMENTAL && (RFKILL || RFKILL="n") && HOTPLUG_PCI]
     select HWMON if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && EXPERIMENTAL && (RFKILL || RFKILL="n") && HOTPLUG_PCI]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && EXPERIMENTAL && (RFKILL || RFKILL="n") && HOTPLUG_PCI]
    }
    config ACPI_WMI tristate {
     prompt "WMI" if [X86 && X86_PLATFORM_DEVICES && ACPI]
     depends on [ACPI]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI]
    }
    config ACPI_ASUS tristate {
     prompt "ASUS/Medion Laptop Extras (DEPRECATED)" if [X86 && X86_PLATFORM_DEVICES && ACPI]
     depends on [ACPI]
     select BACKLIGHT_CLASS_DEVICE if [X86 && X86_PLATFORM_DEVICES && ACPI]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI]
    }
    config TOPSTAR_LAPTOP tristate {
     prompt "Topstar Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT]
     depends on [ACPI]
     depends on [INPUT]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT]
    }
    config ACPI_TOSHIBA tristate {
     prompt "Toshiba Laptop Extras" if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     depends on [ACPI]
     depends on [INPUT]
     depends on [RFKILL || RFKILL="n"]
     select INPUT_POLLDEV if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     select BACKLIGHT_CLASS_DEVICE if [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
     inherited [X86 && X86_PLATFORM_DEVICES && ACPI && INPUT && (RFKILL || RFKILL="n")]
    }
   }
  }
 }
}
menu "Firmware Drivers" {
 config EDD tristate {
  prompt "BIOS Enhanced Disk Drive calls determine boot disk" if [!IA64]
  depends on [!IA64]
  inherited [!IA64]
  config EDD_OFF boolean {
   prompt "Sets default behavior for EDD detection to off" if [EDD]
   depends on [EDD]
   default [n] if [EDD]
   inherited [EDD]
  }
 }
 config FIRMWARE_MEMMAP boolean {
  prompt "Add firmware-provided memory map to sysfs" if [EMBEDDED]
  default [X86_64 || X86_32] if []
 }
 config EFI_VARS tristate {
  prompt "EFI Variable Support via sysfs" if [EFI]
  depends on [EFI]
  default [n] if [EFI]
  inherited [EFI]
 }
 config EFI_PCDP boolean {
  prompt "Console device selection via EFI PCDP or HCDP table" if [ACPI && EFI && IA64]
  depends on [ACPI && EFI && IA64]
  default [y] if [ACPI && EFI && IA64]
  inherited [ACPI && EFI && IA64]
 }
 config DELL_RBU tristate {
  prompt "BIOS update support for DELL systems via sysfs" if [X86]
  depends on [X86]
  select FW_LOADER if [X86]
  inherited [X86]
 }
 config DCDBAS tristate {
  prompt "Dell Systems Management Base Driver" if [X86]
  depends on [X86]
  inherited [X86]
 }
 config DMIID boolean {
  prompt "Export DMI identification via sysfs to userspace" if [DMI]
  depends on [DMI]
  default [y] if [DMI]
  inherited [DMI]
 }
 config ISCSI_IBFT_FIND boolean {
  prompt "iSCSI Boot Firmware Table Attributes" if [X86]
  depends on [X86]
  default [n] if [X86]
  inherited [X86]
  config ISCSI_IBFT tristate {
   prompt "iSCSI Boot Firmware Table Attributes module" if [ISCSI_IBFT_FIND]
   depends on [ISCSI_IBFT_FIND]
   default [n] if [ISCSI_IBFT_FIND]
   inherited [ISCSI_IBFT_FIND]
  }
 }
}
menu "File systems" {
 if [BLOCK] {
  config EXT2_FS tristate {
   prompt "Second extended fs support" if [BLOCK]
   inherited [BLOCK]
   config EXT2_FS_XATTR boolean {
    prompt "Ext2 extended attributes" if [BLOCK && EXT2_FS]
    depends on [EXT2_FS]
    inherited [BLOCK && EXT2_FS]
    config EXT2_FS_POSIX_ACL boolean {
     prompt "Ext2 POSIX Access Control Lists" if [BLOCK && EXT2_FS_XATTR]
     depends on [EXT2_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT2_FS_XATTR]
     inherited [BLOCK && EXT2_FS_XATTR]
    }
    config EXT2_FS_SECURITY boolean {
     prompt "Ext2 Security Labels" if [BLOCK && EXT2_FS_XATTR]
     depends on [EXT2_FS_XATTR]
     inherited [BLOCK && EXT2_FS_XATTR]
    }
   }
   config EXT2_FS_XIP boolean {
    prompt "Ext2 execute in place support" if [BLOCK && EXT2_FS && MMU]
    depends on [EXT2_FS && MMU]
    inherited [BLOCK && EXT2_FS && MMU]
   }
  }
  config EXT3_FS tristate {
   prompt "Ext3 journalling file system support" if [BLOCK]
   select JBD if [BLOCK]
   inherited [BLOCK]
   config EXT3_DEFAULTS_TO_ORDERED boolean {
    prompt "Default to 'data=ordered' in ext3" if [BLOCK && EXT3_FS]
    depends on [EXT3_FS]
    inherited [BLOCK && EXT3_FS]
   }
   config EXT3_FS_XATTR boolean {
    prompt "Ext3 extended attributes" if [BLOCK && EXT3_FS]
    depends on [EXT3_FS]
    default [y] if [BLOCK && EXT3_FS]
    inherited [BLOCK && EXT3_FS]
    config EXT3_FS_POSIX_ACL boolean {
     prompt "Ext3 POSIX Access Control Lists" if [BLOCK && EXT3_FS_XATTR]
     depends on [EXT3_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT3_FS_XATTR]
     inherited [BLOCK && EXT3_FS_XATTR]
    }
    config EXT3_FS_SECURITY boolean {
     prompt "Ext3 Security Labels" if [BLOCK && EXT3_FS_XATTR]
     depends on [EXT3_FS_XATTR]
     inherited [BLOCK && EXT3_FS_XATTR]
    }
   }
  }
  config EXT4_FS tristate {
   prompt "The Extended 4 (ext4) filesystem" if [BLOCK]
   select JBD2 if [BLOCK]
   select CRC16 if [BLOCK]
   inherited [BLOCK]
   config EXT4_FS_XATTR boolean {
    prompt "Ext4 extended attributes" if [BLOCK && EXT4_FS]
    depends on [EXT4_FS]
    default [y] if [BLOCK && EXT4_FS]
    inherited [BLOCK && EXT4_FS]
    config EXT4_FS_POSIX_ACL boolean {
     prompt "Ext4 POSIX Access Control Lists" if [BLOCK && EXT4_FS_XATTR]
     depends on [EXT4_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT4_FS_XATTR]
     inherited [BLOCK && EXT4_FS_XATTR]
    }
    config EXT4_FS_SECURITY boolean {
     prompt "Ext4 Security Labels" if [BLOCK && EXT4_FS_XATTR]
     depends on [EXT4_FS_XATTR]
     inherited [BLOCK && EXT4_FS_XATTR]
    }
   }
   config EXT4_DEBUG boolean {
    prompt "EXT4 debugging support" if [BLOCK && EXT4_FS]
    depends on [EXT4_FS]
    inherited [BLOCK && EXT4_FS]
   }
  }
  config FS_XIP boolean {
   depends on [EXT2_FS_XIP]
   default [y] if [BLOCK && EXT2_FS_XIP]
   inherited [BLOCK && EXT2_FS_XIP]
  }
  config JBD tristate {
   inherited [BLOCK]
  }
  config JBD_DEBUG boolean {
   prompt "JBD (ext3) debugging support" if [BLOCK && JBD && DEBUG_FS]
   depends on [JBD && DEBUG_FS]
   inherited [BLOCK && JBD && DEBUG_FS]
  }
  config JBD2 tristate {
   select CRC32 if [BLOCK]
   inherited [BLOCK]
  }
  config JBD2_DEBUG boolean {
   prompt "JBD2 (ext4) debugging support" if [BLOCK && JBD2 && DEBUG_FS]
   depends on [JBD2 && DEBUG_FS]
   inherited [BLOCK && JBD2 && DEBUG_FS]
  }
  config FS_MBCACHE tristate {
   default [y] if [BLOCK && EXT2_FS="y" && EXT2_FS_XATTR]
   default [y] if [BLOCK && EXT3_FS="y" && EXT3_FS_XATTR]
   default [y] if [BLOCK && EXT4_FS="y" && EXT4_FS_XATTR]
   default [m] if [BLOCK && (EXT2_FS_XATTR || EXT3_FS_XATTR || EXT4_FS_XATTR)]
   inherited [BLOCK]
  }
  config REISERFS_FS tristate {
   prompt "Reiserfs support" if [BLOCK]
   select CRC32 if [BLOCK]
   inherited [BLOCK]
   config REISERFS_CHECK boolean {
    prompt "Enable reiserfs debug mode" if [BLOCK && REISERFS_FS]
    depends on [REISERFS_FS]
    inherited [BLOCK && REISERFS_FS]
   }
   config REISERFS_PROC_INFO boolean {
    prompt "Stats in /proc/fs/reiserfs" if [BLOCK && REISERFS_FS && PROC_FS]
    depends on [REISERFS_FS && PROC_FS]
    inherited [BLOCK && REISERFS_FS && PROC_FS]
   }
   config REISERFS_FS_XATTR boolean {
    prompt "ReiserFS extended attributes" if [BLOCK && REISERFS_FS]
    depends on [REISERFS_FS]
    inherited [BLOCK && REISERFS_FS]
    config REISERFS_FS_POSIX_ACL boolean {
     prompt "ReiserFS POSIX Access Control Lists" if [BLOCK && REISERFS_FS_XATTR]
     depends on [REISERFS_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && REISERFS_FS_XATTR]
     inherited [BLOCK && REISERFS_FS_XATTR]
    }
    config REISERFS_FS_SECURITY boolean {
     prompt "ReiserFS Security Labels" if [BLOCK && REISERFS_FS_XATTR]
     depends on [REISERFS_FS_XATTR]
     inherited [BLOCK && REISERFS_FS_XATTR]
    }
   }
  }
  config JFS_FS tristate {
   prompt "JFS filesystem support" if [BLOCK]
   select NLS if [BLOCK]
   select CRC32 if [BLOCK]
   inherited [BLOCK]
   config JFS_POSIX_ACL boolean {
    prompt "JFS POSIX Access Control Lists" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    select FS_POSIX_ACL if [BLOCK && JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_SECURITY boolean {
    prompt "JFS Security Labels" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_DEBUG boolean {
    prompt "JFS debugging" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_STATISTICS boolean {
    prompt "JFS statistics" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
  }
  config FS_POSIX_ACL boolean {
   default [n] if [BLOCK]
   inherited [BLOCK]
  }
  config XFS_FS tristate {
   prompt "XFS filesystem support" if [BLOCK]
   depends on [BLOCK]
   select EXPORTFS if [BLOCK]
   inherited [BLOCK]
   config XFS_QUOTA boolean {
    prompt "XFS Quota support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_POSIX_ACL boolean {
    prompt "XFS POSIX ACL support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    select FS_POSIX_ACL if [BLOCK && XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_RT boolean {
    prompt "XFS Realtime subvolume support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_DEBUG boolean {
    prompt "XFS Debugging support (EXPERIMENTAL)" if [BLOCK && XFS_FS && EXPERIMENTAL]
    depends on [XFS_FS && EXPERIMENTAL]
    inherited [BLOCK && XFS_FS && EXPERIMENTAL]
   }
  }
  config GFS2_FS tristate {
   prompt "GFS2 file system support" if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   depends on [EXPERIMENTAL && (64BIT || LBDAF)]
   select DLM if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF) && GFS2_FS_LOCKING_DLM]
   select CONFIGFS_FS if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF) && GFS2_FS_LOCKING_DLM]
   select SYSFS if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF) && GFS2_FS_LOCKING_DLM]
   select IP_SCTP if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF) && DLM_SCTP]
   select FS_POSIX_ACL if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   select CRC32 if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   select SLOW_WORK if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   inherited [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   config GFS2_FS_LOCKING_DLM boolean {
    prompt "GFS2 DLM locking" if [BLOCK && GFS2_FS && NET && INET && (IPV6 || IPV6="n") && HOTPLUG]
    depends on [GFS2_FS && NET && INET && (IPV6 || IPV6="n") && HOTPLUG]
    inherited [BLOCK && GFS2_FS && NET && INET && (IPV6 || IPV6="n") && HOTPLUG]
   }
  }
  config OCFS2_FS tristate {
   prompt "OCFS2 file system support" if [BLOCK && NET && SYSFS]
   depends on [NET && SYSFS]
   select CONFIGFS_FS if [BLOCK && NET && SYSFS]
   select JBD2 if [BLOCK && NET && SYSFS]
   select CRC32 if [BLOCK && NET && SYSFS]
   select QUOTA if [BLOCK && NET && SYSFS]
   select QUOTA_TREE if [BLOCK && NET && SYSFS]
   inherited [BLOCK && NET && SYSFS]
   config OCFS2_FS_O2CB tristate {
    prompt "O2CB Kernelspace Clustering" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [y] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
   config OCFS2_FS_USERSPACE_CLUSTER tristate {
    prompt "OCFS2 Userspace Clustering" if [BLOCK && OCFS2_FS && DLM]
    depends on [OCFS2_FS && DLM]
    default [y] if [BLOCK && OCFS2_FS && DLM]
    inherited [BLOCK && OCFS2_FS && DLM]
   }
   config OCFS2_FS_STATS boolean {
    prompt "OCFS2 statistics" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [y] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
   config OCFS2_DEBUG_MASKLOG boolean {
    prompt "OCFS2 logging support" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [y] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
   config OCFS2_DEBUG_FS boolean {
    prompt "OCFS2 expensive checks" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [n] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
   config OCFS2_FS_POSIX_ACL boolean {
    prompt "OCFS2 POSIX Access Control Lists" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    select FS_POSIX_ACL if [BLOCK && OCFS2_FS]
    default [n] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
  }
  config BTRFS_FS tristate {
   prompt "Btrfs filesystem (EXPERIMENTAL) Unstable disk format" if [BLOCK && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select LIBCRC32C if [BLOCK && EXPERIMENTAL]
   select ZLIB_INFLATE if [BLOCK && EXPERIMENTAL]
   select ZLIB_DEFLATE if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
   config BTRFS_FS_POSIX_ACL boolean {
    prompt "Btrfs POSIX Access Control Lists" if [BLOCK && BTRFS_FS]
    depends on [BTRFS_FS]
    select FS_POSIX_ACL if [BLOCK && BTRFS_FS]
    inherited [BLOCK && BTRFS_FS]
   }
  }
  config NILFS2_FS tristate {
   prompt "NILFS2 file system support (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRC32 if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
 }
 config FILE_LOCKING boolean {
  prompt "Enable POSIX file locking API" if [EMBEDDED]
  default [y] if []
 }
 config FSNOTIFY boolean {
  default [n] if []
 }
 config DNOTIFY boolean {
  prompt "Dnotify support" if []
  select FSNOTIFY if []
  default [y] if []
 }
 config INOTIFY boolean {
  prompt "Inotify file change notification support" if []
  default [n] if []
 }
 config INOTIFY_USER boolean {
  prompt "Inotify support for userspace" if []
  select FSNOTIFY if []
  default [y] if []
 }
 config QUOTA boolean {
  prompt "Quota support" if []
  config QUOTA_NETLINK_INTERFACE boolean {
   prompt "Report quota messages through netlink interface" if [QUOTA && NET]
   depends on [QUOTA && NET]
   inherited [QUOTA && NET]
  }
  config PRINT_QUOTA_WARNING boolean {
   prompt "Print quota warnings to console (OBSOLETE)" if [QUOTA]
   depends on [QUOTA]
   default [y] if [QUOTA]
   inherited [QUOTA]
  }
 }
 config QUOTA_TREE tristate {
 }
 config QFMT_V1 tristate {
  prompt "Old quota format support" if [QUOTA]
  depends on [QUOTA]
  inherited [QUOTA]
 }
 config QFMT_V2 tristate {
  prompt "Quota format v2 support" if [QUOTA]
  depends on [QUOTA]
  select QUOTA_TREE if [QUOTA]
  inherited [QUOTA]
 }
 config QUOTACTL boolean {
  depends on [XFS_QUOTA || QUOTA]
  default [y] if [XFS_QUOTA || QUOTA]
  inherited [XFS_QUOTA || QUOTA]
 }
 config AUTOFS_FS tristate {
  prompt "Kernel automounter support" if []
 }
 config AUTOFS4_FS tristate {
  prompt "Kernel automounter version 4 support (also supports v3)" if []
 }
 config FUSE_FS tristate {
  prompt "FUSE (Filesystem in Userspace) support" if []
  config CUSE tristate {
   prompt "Character device in Userpace support" if [FUSE_FS]
   depends on [FUSE_FS]
   inherited [FUSE_FS]
  }
 }
 config GENERIC_ACL boolean {
  select FS_POSIX_ACL if []
 }
 menu "Caches" {
  config FSCACHE tristate {
   prompt "General filesystem local caching manager" if [EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select SLOW_WORK if [EXPERIMENTAL]
   inherited [EXPERIMENTAL]
   config FSCACHE_STATS boolean {
    prompt "Gather statistical information on local caching" if [FSCACHE && PROC_FS]
    depends on [FSCACHE && PROC_FS]
    inherited [FSCACHE && PROC_FS]
   }
   config FSCACHE_HISTOGRAM boolean {
    prompt "Gather latency information on local caching" if [FSCACHE && PROC_FS]
    depends on [FSCACHE && PROC_FS]
    inherited [FSCACHE && PROC_FS]
   }
   config FSCACHE_DEBUG boolean {
    prompt "Debug FS-Cache" if [FSCACHE]
    depends on [FSCACHE]
    inherited [FSCACHE]
   }
   config FSCACHE_OBJECT_LIST boolean {
    prompt "Maintain global object list for debugging purposes" if [FSCACHE && PROC_FS]
    depends on [FSCACHE && PROC_FS]
    inherited [FSCACHE && PROC_FS]
   }
   config CACHEFILES tristate {
    prompt "Filesystem caching on files" if [FSCACHE && BLOCK]
    depends on [FSCACHE && BLOCK]
    inherited [FSCACHE && BLOCK]
    config CACHEFILES_DEBUG boolean {
     prompt "Debug CacheFiles" if [CACHEFILES]
     depends on [CACHEFILES]
     inherited [CACHEFILES]
    }
    config CACHEFILES_HISTOGRAM boolean {
     prompt "Gather latency information on CacheFiles" if [CACHEFILES && PROC_FS]
     depends on [CACHEFILES && PROC_FS]
     inherited [CACHEFILES && PROC_FS]
    }
   }
  }
 }
 if [BLOCK] {
  menu "CD-ROM/DVD Filesystems" {
   depends on [BLOCK]
   config ISO9660_FS tristate {
    prompt "ISO 9660 CDROM file system support" if [BLOCK]
    inherited [BLOCK]
    config JOLIET boolean {
     prompt "Microsoft Joliet CDROM extensions" if [BLOCK && ISO9660_FS]
     depends on [ISO9660_FS]
     select NLS if [BLOCK && ISO9660_FS]
     inherited [BLOCK && ISO9660_FS]
    }
    config ZISOFS boolean {
     prompt "Transparent decompression extension" if [BLOCK && ISO9660_FS]
     depends on [ISO9660_FS]
     select ZLIB_INFLATE if [BLOCK && ISO9660_FS]
     inherited [BLOCK && ISO9660_FS]
    }
   }
   config UDF_FS tristate {
    prompt "UDF file system support" if [BLOCK]
    select CRC_ITU_T if [BLOCK]
    inherited [BLOCK]
    config UDF_NLS boolean {
     default [y] if [BLOCK && (UDF_FS="m" && NLS || UDF_FS="y" && NLS="y")]
     depends on [UDF_FS="m" && NLS || UDF_FS="y" && NLS="y"]
     inherited [BLOCK && (UDF_FS="m" && NLS || UDF_FS="y" && NLS="y")]
    }
   }
  }
 }
 if [BLOCK] {
  menu "DOS/FAT/NT Filesystems" {
   depends on [BLOCK]
   config FAT_FS tristate {
    select NLS if [BLOCK]
    inherited [BLOCK]
   }
   config MSDOS_FS tristate {
    prompt "MSDOS fs support" if [BLOCK]
    select FAT_FS if [BLOCK]
    inherited [BLOCK]
   }
   config VFAT_FS tristate {
    prompt "VFAT (Windows-95) fs support" if [BLOCK]
    select FAT_FS if [BLOCK]
    inherited [BLOCK]
    config FAT_DEFAULT_CODEPAGE integer {
     prompt "Default codepage for FAT" if [BLOCK && (MSDOS_FS || VFAT_FS)]
     depends on [MSDOS_FS || VFAT_FS]
     default [437] if [BLOCK && (MSDOS_FS || VFAT_FS)]
     inherited [BLOCK && (MSDOS_FS || VFAT_FS)]
    }
    config FAT_DEFAULT_IOCHARSET string {
     prompt "Default iocharset for FAT" if [BLOCK && VFAT_FS]
     depends on [VFAT_FS]
     default ["iso8859-1"] if [BLOCK && VFAT_FS]
     inherited [BLOCK && VFAT_FS]
    }
   }
   config NTFS_FS tristate {
    prompt "NTFS file system support" if [BLOCK]
    select NLS if [BLOCK]
    inherited [BLOCK]
    config NTFS_DEBUG boolean {
     prompt "NTFS debugging support" if [BLOCK && NTFS_FS]
     depends on [NTFS_FS]
     inherited [BLOCK && NTFS_FS]
    }
    config NTFS_RW boolean {
     prompt "NTFS write support" if [BLOCK && NTFS_FS]
     depends on [NTFS_FS]
     inherited [BLOCK && NTFS_FS]
    }
   }
  }
 }
 menu "Pseudo filesystems" {
  config PROC_FS boolean {
   prompt "/proc file system support" if [EMBEDDED]
   default [y] if []
   config PROC_KCORE boolean {
    prompt "/proc/kcore support" if [PROC_FS && MMU && !ARM]
    depends on [PROC_FS && MMU]
    inherited [PROC_FS && MMU]
   }
   config PROC_VMCORE boolean {
    prompt "/proc/vmcore support (EXPERIMENTAL)" if [PROC_FS && CRASH_DUMP]
    depends on [PROC_FS && CRASH_DUMP]
    default [y] if [PROC_FS && CRASH_DUMP]
    inherited [PROC_FS && CRASH_DUMP]
   }
   config PROC_SYSCTL boolean {
    prompt "Sysctl support (/proc/sys)" if [PROC_FS && EMBEDDED]
    depends on [PROC_FS]
    select SYSCTL if [PROC_FS]
    default [y] if [PROC_FS]
    inherited [PROC_FS]
   }
   config PROC_PAGE_MONITOR boolean {
    default [y] if [PROC_FS && MMU]
    depends on [PROC_FS && MMU]
    prompt "Enable /proc page monitoring" if [PROC_FS && MMU && EMBEDDED]
    inherited [PROC_FS && MMU]
   }
  }
  config SYSFS boolean {
   prompt "sysfs file system support" if [EMBEDDED]
   default [y] if []
  }
  config TMPFS boolean {
   prompt "Virtual memory file system support (former shm fs)" if [SHMEM]
   depends on [SHMEM]
   inherited [SHMEM]
   config TMPFS_POSIX_ACL boolean {
    prompt "Tmpfs POSIX Access Control Lists" if [TMPFS]
    depends on [TMPFS]
    select GENERIC_ACL if [TMPFS]
    inherited [TMPFS]
   }
  }
  config HUGETLBFS boolean {
   prompt "HugeTLB file system support" if [X86 || IA64 || SPARC64 || S390 && 64BIT || SYS_SUPPORTS_HUGETLBFS || BROKEN]
   depends on [X86 || IA64 || SPARC64 || S390 && 64BIT || SYS_SUPPORTS_HUGETLBFS || BROKEN]
   inherited [X86 || IA64 || SPARC64 || S390 && 64BIT || SYS_SUPPORTS_HUGETLBFS || BROKEN]
  }
  config HUGETLB_PAGE boolean {
   default [HUGETLBFS] if []
  }
  config CONFIGFS_FS tristate {
   prompt "Userspace-driven configuration filesystem" if [SYSFS]
   depends on [SYSFS]
   inherited [SYSFS]
  }
 }
 menuconfig MISC_FILESYSTEMS boolean {
  prompt "Miscellaneous filesystems" if []
  default [y] if []
  if [MISC_FILESYSTEMS] {
   config ADFS_FS tristate {
    prompt "ADFS file system support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    config ADFS_FS_RW boolean {
     prompt "ADFS write support (DANGEROUS)" if [MISC_FILESYSTEMS && ADFS_FS]
     depends on [ADFS_FS]
     inherited [MISC_FILESYSTEMS && ADFS_FS]
    }
   }
   config AFFS_FS tristate {
    prompt "Amiga FFS file system support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
   }
   config ECRYPT_FS tristate {
    prompt "eCrypt filesystem layer support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && EXPERIMENTAL && KEYS && CRYPTO]
    depends on [EXPERIMENTAL && KEYS && CRYPTO]
    select CRYPTO_ECB if [MISC_FILESYSTEMS && EXPERIMENTAL && KEYS && CRYPTO]
    select CRYPTO_CBC if [MISC_FILESYSTEMS && EXPERIMENTAL && KEYS && CRYPTO]
    select CRYPTO_MD5 if [MISC_FILESYSTEMS && EXPERIMENTAL && KEYS && CRYPTO]
    inherited [MISC_FILESYSTEMS && EXPERIMENTAL && KEYS && CRYPTO]
   }
   config HFS_FS tristate {
    prompt "Apple Macintosh file system support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    select NLS if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
   }
   config HFSPLUS_FS tristate {
    prompt "Apple Extended HFS file system support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    select NLS if [MISC_FILESYSTEMS && BLOCK]
    select NLS_UTF8 if [MISC_FILESYSTEMS && BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config BEFS_FS tristate {
    prompt "BeOS file system (BeFS) support (read only) (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    select NLS if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    config BEFS_DEBUG boolean {
     prompt "Debug BeFS" if [MISC_FILESYSTEMS && BEFS_FS]
     depends on [BEFS_FS]
     inherited [MISC_FILESYSTEMS && BEFS_FS]
    }
   }
   config BFS_FS tristate {
    prompt "BFS file system support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
   }
   config EFS_FS tristate {
    prompt "EFS file system support (read only) (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
   }
   config JFFS2_FS tristate {
    prompt "Journalling Flash File System v2 (JFFS2) support" if [MISC_FILESYSTEMS && MTD]
    select CRC32 if [MISC_FILESYSTEMS && MTD]
    depends on [MTD]
    inherited [MISC_FILESYSTEMS && MTD]
    config JFFS2_FS_DEBUG integer {
     prompt "JFFS2 debugging verbosity (0 = quiet, 2 = noisy)" if [MISC_FILESYSTEMS && JFFS2_FS]
     depends on [JFFS2_FS]
     default [0] if [MISC_FILESYSTEMS && JFFS2_FS]
     inherited [MISC_FILESYSTEMS && JFFS2_FS]
    }
    config JFFS2_FS_WRITEBUFFER boolean {
     prompt "JFFS2 write-buffering support" if [MISC_FILESYSTEMS && JFFS2_FS]
     depends on [JFFS2_FS]
     default [y] if [MISC_FILESYSTEMS && JFFS2_FS]
     inherited [MISC_FILESYSTEMS && JFFS2_FS]
     config JFFS2_FS_WBUF_VERIFY boolean {
      prompt "Verify JFFS2 write-buffer reads" if [MISC_FILESYSTEMS && JFFS2_FS_WRITEBUFFER]
      depends on [JFFS2_FS_WRITEBUFFER]
      default [n] if [MISC_FILESYSTEMS && JFFS2_FS_WRITEBUFFER]
      inherited [MISC_FILESYSTEMS && JFFS2_FS_WRITEBUFFER]
     }
    }
    config JFFS2_SUMMARY boolean {
     prompt "JFFS2 summary support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
     depends on [JFFS2_FS && EXPERIMENTAL]
     default [n] if [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
     inherited [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
    }
    config JFFS2_FS_XATTR boolean {
     prompt "JFFS2 XATTR support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
     depends on [JFFS2_FS && EXPERIMENTAL]
     default [n] if [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
     inherited [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
     config JFFS2_FS_POSIX_ACL boolean {
      prompt "JFFS2 POSIX Access Control Lists" if [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
      depends on [JFFS2_FS_XATTR]
      default [y] if [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
      select FS_POSIX_ACL if [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
      inherited [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
     }
     config JFFS2_FS_SECURITY boolean {
      prompt "JFFS2 Security Labels" if [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
      depends on [JFFS2_FS_XATTR]
      default [y] if [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
      inherited [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
     }
    }
    config JFFS2_COMPRESSION_OPTIONS boolean {
     prompt "Advanced compression options for JFFS2" if [MISC_FILESYSTEMS && JFFS2_FS]
     depends on [JFFS2_FS]
     default [n] if [MISC_FILESYSTEMS && JFFS2_FS]
     inherited [MISC_FILESYSTEMS && JFFS2_FS]
     config JFFS2_ZLIB boolean {
      prompt "JFFS2 ZLIB compression support" if [MISC_FILESYSTEMS && JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
      select ZLIB_INFLATE if [MISC_FILESYSTEMS && JFFS2_FS]
      select ZLIB_DEFLATE if [MISC_FILESYSTEMS && JFFS2_FS]
      depends on [JFFS2_FS]
      default [y] if [MISC_FILESYSTEMS && JFFS2_FS]
      inherited [MISC_FILESYSTEMS && JFFS2_FS]
     }
     config JFFS2_LZO boolean {
      prompt "JFFS2 LZO compression support" if [MISC_FILESYSTEMS && JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
      select LZO_COMPRESS if [MISC_FILESYSTEMS && JFFS2_FS]
      select LZO_DECOMPRESS if [MISC_FILESYSTEMS && JFFS2_FS]
      depends on [JFFS2_FS]
      default [n] if [MISC_FILESYSTEMS && JFFS2_FS]
      inherited [MISC_FILESYSTEMS && JFFS2_FS]
     }
     config JFFS2_RTIME boolean {
      prompt "JFFS2 RTIME compression support" if [MISC_FILESYSTEMS && JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
      depends on [JFFS2_FS]
      default [y] if [MISC_FILESYSTEMS && JFFS2_FS]
      inherited [MISC_FILESYSTEMS && JFFS2_FS]
     }
     config JFFS2_RUBIN boolean {
      prompt "JFFS2 RUBIN compression support" if [MISC_FILESYSTEMS && JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
      depends on [JFFS2_FS]
      default [n] if [MISC_FILESYSTEMS && JFFS2_FS]
      inherited [MISC_FILESYSTEMS && JFFS2_FS]
     }
     choice boolean {
      prompt "JFFS2 default compression mode" if [MISC_FILESYSTEMS && JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
      default [JFFS2_CMODE_PRIORITY] if [MISC_FILESYSTEMS && JFFS2_FS]
      depends on [JFFS2_FS]
      config JFFS2_CMODE_NONE boolean {
       prompt "no compression" if [<choice>]
       inherited [<choice>]
      }
      config JFFS2_CMODE_PRIORITY boolean {
       prompt "priority" if [<choice>]
       inherited [<choice>]
      }
      config JFFS2_CMODE_SIZE boolean {
       prompt "size (EXPERIMENTAL)" if [<choice>]
       inherited [<choice>]
      }
      config JFFS2_CMODE_FAVOURLZO boolean {
       prompt "Favour LZO" if [<choice>]
       inherited [<choice>]
      }
     }
    }
   }
   config UBIFS_FS tristate {
    prompt "UBIFS file system support" if [MISC_FILESYSTEMS && MTD_UBI]
    select CRC16 if [MISC_FILESYSTEMS && MTD_UBI]
    select CRC32 if [MISC_FILESYSTEMS && MTD_UBI]
    select CRYPTO if [MISC_FILESYSTEMS && MTD_UBI && UBIFS_FS_ADVANCED_COMPR]
    select CRYPTO if [MISC_FILESYSTEMS && MTD_UBI && UBIFS_FS_LZO]
    select CRYPTO if [MISC_FILESYSTEMS && MTD_UBI && UBIFS_FS_ZLIB]
    select CRYPTO_LZO if [MISC_FILESYSTEMS && MTD_UBI && UBIFS_FS_LZO]
    select CRYPTO_DEFLATE if [MISC_FILESYSTEMS && MTD_UBI && UBIFS_FS_ZLIB]
    depends on [MTD_UBI]
    inherited [MISC_FILESYSTEMS && MTD_UBI]
    config UBIFS_FS_XATTR boolean {
     prompt "Extended attributes support" if [MISC_FILESYSTEMS && UBIFS_FS]
     depends on [UBIFS_FS]
     inherited [MISC_FILESYSTEMS && UBIFS_FS]
    }
    config UBIFS_FS_ADVANCED_COMPR boolean {
     prompt "Advanced compression options" if [MISC_FILESYSTEMS && UBIFS_FS]
     depends on [UBIFS_FS]
     inherited [MISC_FILESYSTEMS && UBIFS_FS]
     config UBIFS_FS_LZO boolean {
      prompt "LZO compression support" if [MISC_FILESYSTEMS && UBIFS_FS && UBIFS_FS_ADVANCED_COMPR]
      depends on [UBIFS_FS]
      default [y] if [MISC_FILESYSTEMS && UBIFS_FS]
      inherited [MISC_FILESYSTEMS && UBIFS_FS]
     }
     config UBIFS_FS_ZLIB boolean {
      prompt "ZLIB compression support" if [MISC_FILESYSTEMS && UBIFS_FS && UBIFS_FS_ADVANCED_COMPR]
      depends on [UBIFS_FS]
      default [y] if [MISC_FILESYSTEMS && UBIFS_FS]
      inherited [MISC_FILESYSTEMS && UBIFS_FS]
     }
    }
    config UBIFS_FS_DEBUG boolean {
     prompt "Enable debugging" if [MISC_FILESYSTEMS && UBIFS_FS]
     depends on [UBIFS_FS]
     select DEBUG_FS if [MISC_FILESYSTEMS && UBIFS_FS]
     select KALLSYMS_ALL if [MISC_FILESYSTEMS && UBIFS_FS]
     inherited [MISC_FILESYSTEMS && UBIFS_FS]
     config UBIFS_FS_DEBUG_MSG_LVL integer {
      prompt "Default message level (0 = no extra messages, 3 = lots)" if [MISC_FILESYSTEMS && UBIFS_FS_DEBUG]
      depends on [UBIFS_FS_DEBUG]
      default [0] if [MISC_FILESYSTEMS && UBIFS_FS_DEBUG]
      inherited [MISC_FILESYSTEMS && UBIFS_FS_DEBUG]
     }
     config UBIFS_FS_DEBUG_CHKS boolean {
      prompt "Enable extra checks" if [MISC_FILESYSTEMS && UBIFS_FS_DEBUG]
      depends on [UBIFS_FS_DEBUG]
      inherited [MISC_FILESYSTEMS && UBIFS_FS_DEBUG]
     }
    }
   }
   config CRAMFS tristate {
    prompt "Compressed ROM file system support (cramfs)" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    select ZLIB_INFLATE if [MISC_FILESYSTEMS && BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config SQUASHFS tristate {
    prompt "SquashFS 4.0 - Squashed file system support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    select ZLIB_INFLATE if [MISC_FILESYSTEMS && BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
    config SQUASHFS_EMBEDDED boolean {
     prompt "Additional option for memory-constrained systems" if [MISC_FILESYSTEMS && SQUASHFS]
     depends on [SQUASHFS]
     default [n] if [MISC_FILESYSTEMS && SQUASHFS]
     inherited [MISC_FILESYSTEMS && SQUASHFS]
     config SQUASHFS_FRAGMENT_CACHE_SIZE integer {
      prompt "Number of fragments cached" if [MISC_FILESYSTEMS && SQUASHFS && SQUASHFS_EMBEDDED]
      depends on [SQUASHFS]
      default [3] if [MISC_FILESYSTEMS && SQUASHFS]
      inherited [MISC_FILESYSTEMS && SQUASHFS]
     }
    }
   }
   config VXFS_FS tristate {
    prompt "FreeVxFS file system support (VERITAS VxFS(TM) compatible)" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config MINIX_FS tristate {
    prompt "Minix file system support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config OMFS_FS tristate {
    prompt "SonicBlue Optimized MPEG File System support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    select CRC_ITU_T if [MISC_FILESYSTEMS && BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config HPFS_FS tristate {
    prompt "OS/2 HPFS file system support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config QNX4FS_FS tristate {
    prompt "QNX4 file system support (read only)" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config ROMFS_FS tristate {
    prompt "ROM file system support" if [MISC_FILESYSTEMS && (BLOCK || MTD)]
    depends on [BLOCK || MTD]
    inherited [MISC_FILESYSTEMS && (BLOCK || MTD)]
    choice boolean {
     prompt "RomFS backing stores" if [MISC_FILESYSTEMS && ROMFS_FS]
     depends on [ROMFS_FS]
     default [ROMFS_BACKED_BY_BLOCK] if [MISC_FILESYSTEMS && ROMFS_FS]
     config ROMFS_BACKED_BY_BLOCK boolean {
      prompt "Block device-backed ROM file system support" if [<choice> && BLOCK]
      depends on [BLOCK]
      inherited [<choice> && BLOCK]
     }
     config ROMFS_BACKED_BY_MTD boolean {
      prompt "MTD-backed ROM file system support" if [<choice> && (MTD="y" || ROMFS_FS="m" && MTD)]
      depends on [MTD="y" || ROMFS_FS="m" && MTD]
      inherited [<choice> && (MTD="y" || ROMFS_FS="m" && MTD)]
     }
     config ROMFS_BACKED_BY_BOTH boolean {
      prompt "Both the above" if [<choice> && BLOCK && (MTD="y" || ROMFS_FS="m" && MTD)]
      depends on [BLOCK && (MTD="y" || ROMFS_FS="m" && MTD)]
      inherited [<choice> && BLOCK && (MTD="y" || ROMFS_FS="m" && MTD)]
     }
    }
   }
   config ROMFS_ON_BLOCK boolean {
    default [y] if [MISC_FILESYSTEMS && (ROMFS_BACKED_BY_BLOCK || ROMFS_BACKED_BY_BOTH)]
    inherited [MISC_FILESYSTEMS]
   }
   config ROMFS_ON_MTD boolean {
    default [y] if [MISC_FILESYSTEMS && (ROMFS_BACKED_BY_MTD || ROMFS_BACKED_BY_BOTH)]
    inherited [MISC_FILESYSTEMS]
   }
   config SYSV_FS tristate {
    prompt "System V/Xenix/V7/Coherent file system support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config UFS_FS tristate {
    prompt "UFS file system support (read only)" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
    config UFS_FS_WRITE boolean {
     prompt "UFS file system write support (DANGEROUS)" if [MISC_FILESYSTEMS && UFS_FS && EXPERIMENTAL]
     depends on [UFS_FS && EXPERIMENTAL]
     inherited [MISC_FILESYSTEMS && UFS_FS && EXPERIMENTAL]
    }
    config UFS_DEBUG boolean {
     prompt "UFS debugging" if [MISC_FILESYSTEMS && UFS_FS]
     depends on [UFS_FS]
     inherited [MISC_FILESYSTEMS && UFS_FS]
    }
   }
   config EXOFS_FS tristate {
    prompt "exofs: OSD based file system support" if [MISC_FILESYSTEMS && SCSI_OSD_ULD]
    depends on [SCSI_OSD_ULD]
    inherited [MISC_FILESYSTEMS && SCSI_OSD_ULD]
    config EXOFS_DEBUG boolean {
     prompt "Enable debugging" if [MISC_FILESYSTEMS && EXOFS_FS]
     depends on [EXOFS_FS]
     inherited [MISC_FILESYSTEMS && EXOFS_FS]
    }
   }
  }
 }
 menuconfig NETWORK_FILESYSTEMS boolean {
  prompt "Network File Systems" if [NET]
  default [y] if [NET]
  depends on [NET]
  inherited [NET]
  if [NETWORK_FILESYSTEMS] {
   config NFS_FS tristate {
    prompt "NFS client support" if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    depends on [INET && FILE_LOCKING]
    select LOCKD if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    select SUNRPC if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    select NFS_ACL_SUPPORT if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING && NFS_V3_ACL]
    inherited [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    config NFS_V3 boolean {
     prompt "NFS client support for NFS version 3" if [NETWORK_FILESYSTEMS && NFS_FS]
     depends on [NFS_FS]
     inherited [NETWORK_FILESYSTEMS && NFS_FS]
     config NFS_V3_ACL boolean {
      prompt "NFS client support for the NFSv3 ACL protocol extension" if [NETWORK_FILESYSTEMS && NFS_V3]
      depends on [NFS_V3]
      inherited [NETWORK_FILESYSTEMS && NFS_V3]
     }
    }
    config NFS_V4 boolean {
     prompt "NFS client support for NFS version 4 (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && NFS_FS && EXPERIMENTAL]
     depends on [NFS_FS && EXPERIMENTAL]
     select RPCSEC_GSS_KRB5 if [NETWORK_FILESYSTEMS && NFS_FS && EXPERIMENTAL]
     inherited [NETWORK_FILESYSTEMS && NFS_FS && EXPERIMENTAL]
     config NFS_V4_1 boolean {
      prompt "NFS client support for NFSv4.1 (DEVELOPER ONLY)" if [NETWORK_FILESYSTEMS && NFS_V4 && EXPERIMENTAL]
      depends on [NFS_V4 && EXPERIMENTAL]
      inherited [NETWORK_FILESYSTEMS && NFS_V4 && EXPERIMENTAL]
     }
    }
    config ROOT_NFS boolean {
     prompt "Root file system on NFS" if [NETWORK_FILESYSTEMS && NFS_FS="y" && IP_PNP]
     depends on [NFS_FS="y" && IP_PNP]
     inherited [NETWORK_FILESYSTEMS && NFS_FS="y" && IP_PNP]
    }
   }
   config NFS_FSCACHE boolean {
    prompt "Provide NFS client caching support (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && EXPERIMENTAL && (NFS_FS="m" && FSCACHE || NFS_FS="y" && FSCACHE="y")]
    depends on [EXPERIMENTAL]
    depends on [NFS_FS="m" && FSCACHE || NFS_FS="y" && FSCACHE="y"]
    inherited [NETWORK_FILESYSTEMS && EXPERIMENTAL && (NFS_FS="m" && FSCACHE || NFS_FS="y" && FSCACHE="y")]
   }
   config NFSD tristate {
    prompt "NFS server support" if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    depends on [INET]
    depends on [FILE_LOCKING]
    select LOCKD if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    select SUNRPC if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    select EXPORTFS if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    select NFS_ACL_SUPPORT if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING && NFSD_V2_ACL]
    inherited [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    config NFSD_V2_ACL boolean {
     depends on [NFSD]
     inherited [NETWORK_FILESYSTEMS && NFSD]
    }
    config NFSD_V3 boolean {
     prompt "NFS server support for NFS version 3" if [NETWORK_FILESYSTEMS && NFSD]
     depends on [NFSD]
     inherited [NETWORK_FILESYSTEMS && NFSD]
     config NFSD_V3_ACL boolean {
      prompt "NFS server support for the NFSv3 ACL protocol extension" if [NETWORK_FILESYSTEMS && NFSD_V3]
      depends on [NFSD_V3]
      select NFSD_V2_ACL if [NETWORK_FILESYSTEMS && NFSD_V3]
      inherited [NETWORK_FILESYSTEMS && NFSD_V3]
     }
    }
    config NFSD_V4 boolean {
     prompt "NFS server support for NFS version 4 (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && NFSD && PROC_FS && EXPERIMENTAL]
     depends on [NFSD && PROC_FS && EXPERIMENTAL]
     select NFSD_V3 if [NETWORK_FILESYSTEMS && NFSD && PROC_FS && EXPERIMENTAL]
     select FS_POSIX_ACL if [NETWORK_FILESYSTEMS && NFSD && PROC_FS && EXPERIMENTAL]
     select RPCSEC_GSS_KRB5 if [NETWORK_FILESYSTEMS && NFSD && PROC_FS && EXPERIMENTAL]
     inherited [NETWORK_FILESYSTEMS && NFSD && PROC_FS && EXPERIMENTAL]
    }
   }
   config LOCKD tristate {
    depends on [FILE_LOCKING]
    inherited [NETWORK_FILESYSTEMS && FILE_LOCKING]
   }
   config LOCKD_V4 boolean {
    depends on [NFSD_V3 || NFS_V3]
    depends on [FILE_LOCKING]
    default [y] if [NETWORK_FILESYSTEMS && (NFSD_V3 || NFS_V3) && FILE_LOCKING]
    inherited [NETWORK_FILESYSTEMS && (NFSD_V3 || NFS_V3) && FILE_LOCKING]
   }
   config EXPORTFS tristate {
    inherited [NETWORK_FILESYSTEMS]
   }
   config NFS_ACL_SUPPORT tristate {
    select FS_POSIX_ACL if [NETWORK_FILESYSTEMS]
    inherited [NETWORK_FILESYSTEMS]
   }
   config NFS_COMMON boolean {
    depends on [NFSD || NFS_FS]
    default [y] if [NETWORK_FILESYSTEMS && (NFSD || NFS_FS)]
    inherited [NETWORK_FILESYSTEMS && (NFSD || NFS_FS)]
   }
   config SUNRPC tristate {
    inherited [NETWORK_FILESYSTEMS]
   }
   config SUNRPC_GSS tristate {
    inherited [NETWORK_FILESYSTEMS]
   }
   config SUNRPC_XPRT_RDMA tristate {
    depends on [SUNRPC && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
    default [SUNRPC && INFINIBAND] if [NETWORK_FILESYSTEMS && SUNRPC && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && SUNRPC && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
   }
   config RPCSEC_GSS_KRB5 tristate {
    prompt "Secure RPC: Kerberos V mechanism (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    depends on [SUNRPC && EXPERIMENTAL]
    select SUNRPC_GSS if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_MD5 if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_DES if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_CBC if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
   }
   config RPCSEC_GSS_SPKM3 tristate {
    prompt "Secure RPC: SPKM3 mechanism (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    depends on [SUNRPC && EXPERIMENTAL]
    select SUNRPC_GSS if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_MD5 if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_DES if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_CAST5 if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_CBC if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
   }
   config SMB_FS tristate {
    prompt "SMB file system support (OBSOLETE, please use CIFS)" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    select NLS if [NETWORK_FILESYSTEMS && INET]
    inherited [NETWORK_FILESYSTEMS && INET]
    config SMB_NLS_DEFAULT boolean {
     prompt "Use a default NLS" if [NETWORK_FILESYSTEMS && SMB_FS]
     depends on [SMB_FS]
     inherited [NETWORK_FILESYSTEMS && SMB_FS]
     config SMB_NLS_REMOTE string {
      prompt "Default Remote NLS Option" if [NETWORK_FILESYSTEMS && SMB_NLS_DEFAULT]
      depends on [SMB_NLS_DEFAULT]
      default ["cp437"] if [NETWORK_FILESYSTEMS && SMB_NLS_DEFAULT]
      inherited [NETWORK_FILESYSTEMS && SMB_NLS_DEFAULT]
     }
    }
   }
   config CIFS tristate {
    prompt "CIFS support (advanced network filesystem, SMBFS successor)" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    select NLS if [NETWORK_FILESYSTEMS && INET]
    select SLOW_WORK if [NETWORK_FILESYSTEMS && INET]
    inherited [NETWORK_FILESYSTEMS && INET]
    config CIFS_STATS boolean {
     prompt "CIFS statistics" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
     config CIFS_STATS2 boolean {
      prompt "Extended statistics" if [NETWORK_FILESYSTEMS && CIFS_STATS]
      depends on [CIFS_STATS]
      inherited [NETWORK_FILESYSTEMS && CIFS_STATS]
     }
    }
    config CIFS_WEAK_PW_HASH boolean {
     prompt "Support legacy servers which use weaker LANMAN security" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
    }
    config CIFS_UPCALL boolean {
     prompt "Kerberos/SPNEGO advanced session setup" if [NETWORK_FILESYSTEMS && CIFS && KEYS]
     depends on [CIFS && KEYS]
     inherited [NETWORK_FILESYSTEMS && CIFS && KEYS]
    }
    config CIFS_XATTR boolean {
     prompt "CIFS extended attributes" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
     config CIFS_POSIX boolean {
      prompt "CIFS POSIX Extensions" if [NETWORK_FILESYSTEMS && CIFS_XATTR]
      depends on [CIFS_XATTR]
      inherited [NETWORK_FILESYSTEMS && CIFS_XATTR]
     }
    }
    config CIFS_DEBUG2 boolean {
     prompt "Enable additional CIFS debugging routines" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
    }
    config CIFS_DFS_UPCALL boolean {
     prompt "DFS feature support" if [NETWORK_FILESYSTEMS && CIFS && KEYS]
     depends on [CIFS && KEYS]
     inherited [NETWORK_FILESYSTEMS && CIFS && KEYS]
    }
    config CIFS_EXPERIMENTAL boolean {
     prompt "CIFS Experimental Features (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && CIFS && EXPERIMENTAL]
     depends on [CIFS && EXPERIMENTAL]
     inherited [NETWORK_FILESYSTEMS && CIFS && EXPERIMENTAL]
    }
   }
   config NCP_FS tristate {
    prompt "NCP file system support (to mount NetWare volumes)" if [NETWORK_FILESYSTEMS && (IPX!="n" || INET)]
    depends on [IPX!="n" || INET]
    inherited [NETWORK_FILESYSTEMS && (IPX!="n" || INET)]
    config NCPFS_PACKET_SIGNING boolean {
     prompt "Packet signatures" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_IOCTL_LOCKING boolean {
     prompt "Proprietary file locking" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_STRONG boolean {
     prompt "Clear remove/delete inhibit when needed" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_NFS_NS boolean {
     prompt "Use NFS namespace if available" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_OS2_NS boolean {
     prompt "Use LONG (OS/2) namespace if available" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_SMALLDOS boolean {
     prompt "Lowercase DOS filenames" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_NLS boolean {
     prompt "Use Native Language Support" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     select NLS if [NETWORK_FILESYSTEMS && NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_EXTRAS boolean {
     prompt "Enable symbolic links and execute flags" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
   }
   config CODA_FS tristate {
    prompt "Coda file system support (advanced network fs)" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    inherited [NETWORK_FILESYSTEMS && INET]
   }
   config AFS_FS tristate {
    prompt "Andrew File System support (AFS) (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && INET && EXPERIMENTAL]
    depends on [INET && EXPERIMENTAL]
    select AF_RXRPC if [NETWORK_FILESYSTEMS && INET && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && INET && EXPERIMENTAL]
    config AFS_DEBUG boolean {
     prompt "AFS dynamic debugging" if [NETWORK_FILESYSTEMS && AFS_FS]
     depends on [AFS_FS]
     inherited [NETWORK_FILESYSTEMS && AFS_FS]
    }
   }
   config AFS_FSCACHE boolean {
    prompt "Provide AFS client caching support (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && EXPERIMENTAL && (AFS_FS="m" && FSCACHE || AFS_FS="y" && FSCACHE="y")]
    depends on [EXPERIMENTAL]
    depends on [AFS_FS="m" && FSCACHE || AFS_FS="y" && FSCACHE="y"]
    inherited [NETWORK_FILESYSTEMS && EXPERIMENTAL && (AFS_FS="m" && FSCACHE || AFS_FS="y" && FSCACHE="y")]
   }
   config 9P_FS tristate {
    prompt "Plan 9 Resource Sharing Support (9P2000) (Experimental)" if [NETWORK_FILESYSTEMS && INET && NET_9P && EXPERIMENTAL]
    depends on [INET && NET_9P && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && INET && NET_9P && EXPERIMENTAL]
   }
   config 9P_FSCACHE boolean {
    prompt "Enable 9P client caching support (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && EXPERIMENTAL && (9P_FS="m" && FSCACHE || 9P_FS="y" && FSCACHE="y")]
    depends on [EXPERIMENTAL]
    depends on [9P_FS="m" && FSCACHE || 9P_FS="y" && FSCACHE="y"]
    inherited [NETWORK_FILESYSTEMS && EXPERIMENTAL && (9P_FS="m" && FSCACHE || 9P_FS="y" && FSCACHE="y")]
   }
  }
 }
 if [BLOCK] {
  menu "Partition Types" {
   depends on [BLOCK]
   config PARTITION_ADVANCED boolean {
    prompt "Advanced partition selection" if [BLOCK]
    inherited [BLOCK]
    config ACORN_PARTITION boolean {
     prompt "Acorn partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ARCH_ACORN]
     inherited [BLOCK]
     config ACORN_PARTITION_CUMANA boolean {
      prompt "Cumana partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_EESOX boolean {
      prompt "EESOX partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_ICS boolean {
      prompt "ICS partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_ADFS boolean {
      prompt "Native filecore partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_POWERTEC boolean {
      prompt "PowerTec partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_RISCIX boolean {
      prompt "RISCiX partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
    }
    config OSF_PARTITION boolean {
     prompt "Alpha OSF partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ALPHA]
     inherited [BLOCK]
    }
    config AMIGA_PARTITION boolean {
     prompt "Amiga partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (AMIGA || AFFS_FS="y")]
     inherited [BLOCK]
    }
    config ATARI_PARTITION boolean {
     prompt "Atari partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ATARI]
     inherited [BLOCK]
    }
    config IBM_PARTITION boolean {
     prompt "IBM disk label and partition support" if [BLOCK && PARTITION_ADVANCED && S390]
     depends on [PARTITION_ADVANCED && S390]
     inherited [BLOCK && PARTITION_ADVANCED && S390]
    }
    config MAC_PARTITION boolean {
     prompt "Macintosh partition map support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (MAC || PPC_PMAC)]
     inherited [BLOCK]
    }
    config MSDOS_PARTITION boolean {
     prompt "PC BIOS (MSDOS partition tables) support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK]
     inherited [BLOCK]
     config BSD_DISKLABEL boolean {
      prompt "BSD disklabel (FreeBSD partition tables) support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config MINIX_SUBPARTITION boolean {
      prompt "Minix subpartition support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config SOLARIS_X86_PARTITION boolean {
      prompt "Solaris (x86) partition table support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config UNIXWARE_DISKLABEL boolean {
      prompt "Unixware slices support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
    }
    config LDM_PARTITION boolean {
     prompt "Windows Logical Disk Manager (Dynamic Disk) support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
     config LDM_DEBUG boolean {
      prompt "Windows LDM extra logging" if [BLOCK && LDM_PARTITION]
      depends on [LDM_PARTITION]
      inherited [BLOCK && LDM_PARTITION]
     }
    }
    config SGI_PARTITION boolean {
     prompt "SGI partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && DEFAULT_SGI_PARTITION]
     inherited [BLOCK]
    }
    config ULTRIX_PARTITION boolean {
     prompt "Ultrix partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && MACH_DECSTATION]
     inherited [BLOCK]
    }
    config SUN_PARTITION boolean {
     prompt "Sun partition tables support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (SPARC || SUN3 || SUN3X)]
     inherited [BLOCK]
    }
    config KARMA_PARTITION boolean {
     prompt "Karma Partition support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
    }
    config EFI_PARTITION boolean {
     prompt "EFI GUID Partition support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     select CRC32 if [BLOCK && PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
    }
    config SYSV68_PARTITION boolean {
     prompt "SYSV68 partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && VME]
     inherited [BLOCK]
    }
   }
  }
 }
 menuconfig NLS tristate {
  prompt "Native language support" if []
  if [NLS] {
   config NLS_DEFAULT string {
    prompt "Default NLS Option" if [NLS]
    default ["iso8859-1"] if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_437 tristate {
    prompt "Codepage 437 (United States, Canada)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_737 tristate {
    prompt "Codepage 737 (Greek)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_775 tristate {
    prompt "Codepage 775 (Baltic Rim)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_850 tristate {
    prompt "Codepage 850 (Europe)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_852 tristate {
    prompt "Codepage 852 (Central/Eastern Europe)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_855 tristate {
    prompt "Codepage 855 (Cyrillic)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_857 tristate {
    prompt "Codepage 857 (Turkish)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_860 tristate {
    prompt "Codepage 860 (Portuguese)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_861 tristate {
    prompt "Codepage 861 (Icelandic)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_862 tristate {
    prompt "Codepage 862 (Hebrew)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_863 tristate {
    prompt "Codepage 863 (Canadian French)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_864 tristate {
    prompt "Codepage 864 (Arabic)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_865 tristate {
    prompt "Codepage 865 (Norwegian, Danish)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_866 tristate {
    prompt "Codepage 866 (Cyrillic/Russian)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_869 tristate {
    prompt "Codepage 869 (Greek)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_936 tristate {
    prompt "Simplified Chinese charset (CP936, GB2312)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_950 tristate {
    prompt "Traditional Chinese charset (Big5)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_932 tristate {
    prompt "Japanese charsets (Shift-JIS, EUC-JP)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_949 tristate {
    prompt "Korean charset (CP949, EUC-KR)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_874 tristate {
    prompt "Thai charset (CP874, TIS-620)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_8 tristate {
    prompt "Hebrew charsets (ISO-8859-8, CP1255)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_1250 tristate {
    prompt "Windows CP1250 (Slavic/Central European Languages)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_1251 tristate {
    prompt "Windows CP1251 (Bulgarian, Belarusian)" if [NLS]
    inherited [NLS]
   }
   config NLS_ASCII tristate {
    prompt "ASCII (United States)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_1 tristate {
    prompt "NLS ISO 8859-1  (Latin 1; Western European Languages)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_2 tristate {
    prompt "NLS ISO 8859-2  (Latin 2; Slavic/Central European Languages)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_3 tristate {
    prompt "NLS ISO 8859-3  (Latin 3; Esperanto, Galician, Maltese, Turkish)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_4 tristate {
    prompt "NLS ISO 8859-4  (Latin 4; old Baltic charset)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_5 tristate {
    prompt "NLS ISO 8859-5  (Cyrillic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_6 tristate {
    prompt "NLS ISO 8859-6  (Arabic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_7 tristate {
    prompt "NLS ISO 8859-7  (Modern Greek)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_9 tristate {
    prompt "NLS ISO 8859-9  (Latin 5; Turkish)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_13 tristate {
    prompt "NLS ISO 8859-13 (Latin 7; Baltic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_14 tristate {
    prompt "NLS ISO 8859-14 (Latin 8; Celtic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_15 tristate {
    prompt "NLS ISO 8859-15 (Latin 9; Western European Languages with Euro)" if [NLS]
    inherited [NLS]
   }
   config NLS_KOI8_R tristate {
    prompt "NLS KOI8-R (Russian)" if [NLS]
    inherited [NLS]
   }
   config NLS_KOI8_U tristate {
    prompt "NLS KOI8-U/RU (Ukrainian, Belarusian)" if [NLS]
    inherited [NLS]
   }
   config NLS_UTF8 tristate {
    prompt "NLS UTF-8" if [NLS]
    inherited [NLS]
   }
  }
 }
 menuconfig DLM tristate {
  prompt "Distributed Lock Manager (DLM)" if [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  depends on [EXPERIMENTAL && INET]
  depends on [SYSFS && (IPV6 || IPV6="n")]
  select CONFIGFS_FS if [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  select IP_SCTP if [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  inherited [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  config DLM_DEBUG boolean {
   prompt "DLM debugging" if [DLM]
   depends on [DLM]
   inherited [DLM]
  }
 }
}
menu "Kernel hacking" {
 config TRACE_IRQFLAGS_SUPPORT boolean {
  default [y] if []
 }
 config PRINTK_TIME boolean {
  prompt "Show timing information on printks" if [PRINTK]
  depends on [PRINTK]
  inherited [PRINTK]
 }
 config ENABLE_WARN_DEPRECATED boolean {
  prompt "Enable __deprecated logic" if []
  default [y] if []
 }
 config ENABLE_MUST_CHECK boolean {
  prompt "Enable __must_check logic" if []
  default [y] if []
 }
 config FRAME_WARN integer {
  prompt "Warn for stack frames larger than (needs gcc 4.4)" if []
  range [0 8192] if []
  default [1024] if [!64BIT]
  default [2048] if [64BIT]
 }
 config MAGIC_SYSRQ boolean {
  prompt "Magic SysRq key" if [!UML]
  depends on [!UML]
  inherited [!UML]
 }
 config STRIP_ASM_SYMS boolean {
  prompt "Strip assembler-generated symbols during link" if []
  default [n] if []
 }
 config UNUSED_SYMBOLS boolean {
  prompt "Enable unused/obsolete exported symbols" if []
  default [y] if [X86]
 }
 config DEBUG_FS boolean {
  prompt "Debug Filesystem" if [SYSFS]
  depends on [SYSFS]
  inherited [SYSFS]
 }
 config HEADERS_CHECK boolean {
  prompt "Run 'make headers_check' when building vmlinux" if [!UML]
  depends on [!UML]
  inherited [!UML]
 }
 config DEBUG_SECTION_MISMATCH boolean {
  prompt "Enable full Section mismatch analysis" if [UNDEFINED]
  depends on [UNDEFINED]
  inherited [UNDEFINED]
 }
 config DEBUG_KERNEL boolean {
  prompt "Kernel debugging" if []
  config DEBUG_SHIRQ boolean {
   prompt "Debug shared IRQ handlers" if [DEBUG_KERNEL && GENERIC_HARDIRQS]
   depends on [DEBUG_KERNEL && GENERIC_HARDIRQS]
   inherited [DEBUG_KERNEL && GENERIC_HARDIRQS]
  }
  config DETECT_SOFTLOCKUP boolean {
   prompt "Detect Soft Lockups" if [DEBUG_KERNEL && !S390]
   depends on [DEBUG_KERNEL && !S390]
   default [y] if [DEBUG_KERNEL && !S390]
   inherited [DEBUG_KERNEL && !S390]
   config BOOTPARAM_SOFTLOCKUP_PANIC boolean {
    prompt "Panic (Reboot) On Soft Lockups" if [DETECT_SOFTLOCKUP]
    depends on [DETECT_SOFTLOCKUP]
    inherited [DETECT_SOFTLOCKUP]
   }
   config BOOTPARAM_SOFTLOCKUP_PANIC_VALUE integer {
    depends on [DETECT_SOFTLOCKUP]
    range [0 1] if [DETECT_SOFTLOCKUP]
    default [0] if [DETECT_SOFTLOCKUP && !BOOTPARAM_SOFTLOCKUP_PANIC]
    default [1] if [DETECT_SOFTLOCKUP && BOOTPARAM_SOFTLOCKUP_PANIC]
    inherited [DETECT_SOFTLOCKUP]
   }
  }
  config DETECT_HUNG_TASK boolean {
   prompt "Detect Hung Tasks" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   default [DETECT_SOFTLOCKUP] if [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
   config BOOTPARAM_HUNG_TASK_PANIC boolean {
    prompt "Panic (Reboot) On Hung Tasks" if [DETECT_HUNG_TASK]
    depends on [DETECT_HUNG_TASK]
    inherited [DETECT_HUNG_TASK]
   }
   config BOOTPARAM_HUNG_TASK_PANIC_VALUE integer {
    depends on [DETECT_HUNG_TASK]
    range [0 1] if [DETECT_HUNG_TASK]
    default [0] if [DETECT_HUNG_TASK && !BOOTPARAM_HUNG_TASK_PANIC]
    default [1] if [DETECT_HUNG_TASK && BOOTPARAM_HUNG_TASK_PANIC]
    inherited [DETECT_HUNG_TASK]
   }
  }
  config SCHED_DEBUG boolean {
   prompt "Collect scheduler debugging info" if [DEBUG_KERNEL && PROC_FS]
   depends on [DEBUG_KERNEL && PROC_FS]
   default [y] if [DEBUG_KERNEL && PROC_FS]
   inherited [DEBUG_KERNEL && PROC_FS]
  }
  config SCHEDSTATS boolean {
   prompt "Collect scheduler statistics" if [DEBUG_KERNEL && PROC_FS]
   depends on [DEBUG_KERNEL && PROC_FS]
   inherited [DEBUG_KERNEL && PROC_FS]
  }
  config TIMER_STATS boolean {
   prompt "Collect kernel timers statistics" if [DEBUG_KERNEL && PROC_FS]
   depends on [DEBUG_KERNEL && PROC_FS]
   inherited [DEBUG_KERNEL && PROC_FS]
  }
  config DEBUG_OBJECTS boolean {
   prompt "Debug object operations" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
   config DEBUG_OBJECTS_SELFTEST boolean {
    prompt "Debug objects selftest" if [DEBUG_OBJECTS]
    depends on [DEBUG_OBJECTS]
    inherited [DEBUG_OBJECTS]
   }
   config DEBUG_OBJECTS_FREE boolean {
    prompt "Debug objects in freed memory" if [DEBUG_OBJECTS]
    depends on [DEBUG_OBJECTS]
    inherited [DEBUG_OBJECTS]
   }
   config DEBUG_OBJECTS_TIMERS boolean {
    prompt "Debug timer objects" if [DEBUG_OBJECTS]
    depends on [DEBUG_OBJECTS]
    inherited [DEBUG_OBJECTS]
   }
   config DEBUG_OBJECTS_ENABLE_DEFAULT integer {
    prompt "debug_objects bootup default value (0-1)" if [DEBUG_OBJECTS]
    range [0 1] if [DEBUG_OBJECTS]
    default [1] if [DEBUG_OBJECTS]
    depends on [DEBUG_OBJECTS]
    inherited [DEBUG_OBJECTS]
   }
  }
  config DEBUG_SLAB boolean {
   prompt "Debug slab memory allocations" if [DEBUG_KERNEL && SLAB && !KMEMCHECK]
   depends on [DEBUG_KERNEL && SLAB && !KMEMCHECK]
   inherited [DEBUG_KERNEL && SLAB && !KMEMCHECK]
   config DEBUG_SLAB_LEAK boolean {
    prompt "Memory leak debugging" if [DEBUG_SLAB]
    depends on [DEBUG_SLAB]
    inherited [DEBUG_SLAB]
   }
  }
 }
 config SLUB_DEBUG_ON boolean {
  prompt "SLUB debugging on by default" if [SLUB && SLUB_DEBUG && !KMEMCHECK]
  depends on [SLUB && SLUB_DEBUG && !KMEMCHECK]
  default [n] if [SLUB && SLUB_DEBUG && !KMEMCHECK]
  inherited [SLUB && SLUB_DEBUG && !KMEMCHECK]
 }
 config SLUB_STATS boolean {
  default [n] if [SLUB && SLUB_DEBUG && SYSFS]
  prompt "Enable SLUB performance statistics" if [SLUB && SLUB_DEBUG && SYSFS]
  depends on [SLUB && SLUB_DEBUG && SYSFS]
  inherited [SLUB && SLUB_DEBUG && SYSFS]
 }
 config DEBUG_KMEMLEAK boolean {
  prompt "Kernel memory leak detector" if [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390)]
  depends on [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390)]
  select DEBUG_FS if [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390) && SYSFS]
  select STACKTRACE if [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390) && STACKTRACE_SUPPORT]
  select KALLSYMS if [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390)]
  inherited [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390)]
  config DEBUG_KMEMLEAK_EARLY_LOG_SIZE integer {
   prompt "Maximum kmemleak early log entries" if [DEBUG_KMEMLEAK]
   depends on [DEBUG_KMEMLEAK]
   range [200 40000] if [DEBUG_KMEMLEAK]
   default [400] if [DEBUG_KMEMLEAK]
   inherited [DEBUG_KMEMLEAK]
  }
  config DEBUG_KMEMLEAK_TEST tristate {
   prompt "Simple test for the kernel memory leak detector" if [DEBUG_KMEMLEAK]
   depends on [DEBUG_KMEMLEAK]
   inherited [DEBUG_KMEMLEAK]
  }
 }
 config DEBUG_PREEMPT boolean {
  prompt "Debug preemptible kernel" if [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
  depends on [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
  default [y] if [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
  inherited [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
 }
 config DEBUG_RT_MUTEXES boolean {
  prompt "RT Mutex debugging, deadlock detection" if [DEBUG_KERNEL && RT_MUTEXES]
  depends on [DEBUG_KERNEL && RT_MUTEXES]
  inherited [DEBUG_KERNEL && RT_MUTEXES]
  config DEBUG_PI_LIST boolean {
   default [y] if [DEBUG_RT_MUTEXES]
   depends on [DEBUG_RT_MUTEXES]
   inherited [DEBUG_RT_MUTEXES]
  }
 }
 config RT_MUTEX_TESTER boolean {
  prompt "Built-in scriptable tester for rt-mutexes" if [DEBUG_KERNEL && RT_MUTEXES]
  depends on [DEBUG_KERNEL && RT_MUTEXES]
  inherited [DEBUG_KERNEL && RT_MUTEXES]
 }
 config DEBUG_SPINLOCK boolean {
  prompt "Spinlock and rw-lock debugging: basic checks" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_MUTEXES boolean {
  prompt "Mutex debugging: basic checks" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_LOCK_ALLOC boolean {
  prompt "Lock debugging: detect incorrect freeing of live locks" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config PROVE_LOCKING boolean {
  prompt "Lock debugging: prove locking correctness" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_LOCK_ALLOC if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  default [n] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config LOCKDEP boolean {
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select STACKTRACE if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select FRAME_POINTER if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT && !MIPS && !PPC && !ARM_UNWIND && !S390]
  select KALLSYMS if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select KALLSYMS_ALL if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config LOCK_STAT boolean {
  prompt "Lock usage statistics" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_LOCK_ALLOC if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  default [n] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config DEBUG_LOCKDEP boolean {
  prompt "Lock dependency engine debugging" if [DEBUG_KERNEL && LOCKDEP]
  depends on [DEBUG_KERNEL && LOCKDEP]
  inherited [DEBUG_KERNEL && LOCKDEP]
 }
 config TRACE_IRQFLAGS boolean {
  depends on [DEBUG_KERNEL]
  default [y] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && PROVE_LOCKING]
  depends on [TRACE_IRQFLAGS_SUPPORT]
  depends on [PROVE_LOCKING]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && PROVE_LOCKING]
 }
 config DEBUG_SPINLOCK_SLEEP boolean {
  prompt "Spinlock debugging: sleep-inside-spinlock checking" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_LOCKING_API_SELFTESTS boolean {
  prompt "Locking API boot-time self-tests" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config STACKTRACE boolean {
  depends on [STACKTRACE_SUPPORT]
  inherited [STACKTRACE_SUPPORT]
 }
 config DEBUG_KOBJECT boolean {
  prompt "kobject debugging" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_HIGHMEM boolean {
  prompt "Highmem debugging" if [DEBUG_KERNEL && HIGHMEM]
  depends on [DEBUG_KERNEL && HIGHMEM]
  inherited [DEBUG_KERNEL && HIGHMEM]
 }
 config DEBUG_BUGVERBOSE boolean {
  prompt "Verbose BUG() reporting (adds 70K)" if [BUG && (ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN || MN10300) && DEBUG_KERNEL && EMBEDDED]
  depends on [BUG]
  depends on [ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN || MN10300]
  default [!EMBEDDED] if [BUG && (ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN || MN10300)]
  inherited [BUG && (ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN || MN10300)]
 }
 config DEBUG_INFO boolean {
  prompt "Compile the kernel with debug info" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_VM boolean {
  prompt "Debug VM" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_VIRTUAL boolean {
  prompt "Debug VM translations" if [DEBUG_KERNEL && X86]
  depends on [DEBUG_KERNEL && X86]
  inherited [DEBUG_KERNEL && X86]
 }
 config DEBUG_NOMMU_REGIONS boolean {
  prompt "Debug the global anon/private NOMMU mapping region tree" if [DEBUG_KERNEL && !MMU]
  depends on [DEBUG_KERNEL && !MMU]
  inherited [DEBUG_KERNEL && !MMU]
 }
 config DEBUG_WRITECOUNT boolean {
  prompt "Debug filesystem writers count" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_MEMORY_INIT boolean {
  prompt "Debug memory initialisation" if [EMBEDDED]
  default [!EMBEDDED] if []
 }
 config DEBUG_LIST boolean {
  prompt "Debug linked list manipulation" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_SG boolean {
  prompt "Debug SG table operations" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_NOTIFIERS boolean {
  prompt "Debug notifier call chains" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_CREDENTIALS boolean {
  prompt "Debug credential management" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config ARCH_WANT_FRAME_POINTERS boolean {
 }
 config FRAME_POINTER boolean {
  prompt "Compile the kernel with frame pointers" if [DEBUG_KERNEL && (CRIS || M68K || M68KNOMMU || FRV || UML || AVR32 || SUPERH || BLACKFIN || MN10300) || ARCH_WANT_FRAME_POINTERS]
  depends on [DEBUG_KERNEL && (CRIS || M68K || M68KNOMMU || FRV || UML || AVR32 || SUPERH || BLACKFIN || MN10300) || ARCH_WANT_FRAME_POINTERS]
  default [y] if [(DEBUG_KERNEL && (CRIS || M68K || M68KNOMMU || FRV || UML || AVR32 || SUPERH || BLACKFIN || MN10300) || ARCH_WANT_FRAME_POINTERS) && (DEBUG_INFO && UML || ARCH_WANT_FRAME_POINTERS)]
  inherited [DEBUG_KERNEL && (CRIS || M68K || M68KNOMMU || FRV || UML || AVR32 || SUPERH || BLACKFIN || MN10300) || ARCH_WANT_FRAME_POINTERS]
 }
 config BOOT_PRINTK_DELAY boolean {
  prompt "Delay each boot printk message by N milliseconds" if [DEBUG_KERNEL && PRINTK && GENERIC_CALIBRATE_DELAY]
  depends on [DEBUG_KERNEL && PRINTK && GENERIC_CALIBRATE_DELAY]
  inherited [DEBUG_KERNEL && PRINTK && GENERIC_CALIBRATE_DELAY]
 }
 config RCU_TORTURE_TEST tristate {
  prompt "torture tests for RCU" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  default [n] if [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
  config RCU_TORTURE_TEST_RUNNABLE boolean {
   prompt "torture tests for RCU runnable by default" if [RCU_TORTURE_TEST="y"]
   depends on [RCU_TORTURE_TEST="y"]
   default [n] if [RCU_TORTURE_TEST="y"]
   inherited [RCU_TORTURE_TEST="y"]
  }
 }
 config RCU_CPU_STALL_DETECTOR boolean {
  prompt "Check for stalled CPUs delaying RCU grace periods" if [TREE_RCU || TREE_PREEMPT_RCU]
  depends on [TREE_RCU || TREE_PREEMPT_RCU]
  default [n] if [TREE_RCU || TREE_PREEMPT_RCU]
  inherited [TREE_RCU || TREE_PREEMPT_RCU]
 }
 config KPROBES_SANITY_TEST boolean {
  prompt "Kprobes sanity tests" if [DEBUG_KERNEL && KPROBES]
  depends on [DEBUG_KERNEL]
  depends on [KPROBES]
  default [n] if [DEBUG_KERNEL && KPROBES]
  inherited [DEBUG_KERNEL && KPROBES]
 }
 config BACKTRACE_SELF_TEST tristate {
  prompt "Self test for the backtrace code" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  default [n] if [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_BLOCK_EXT_DEVT boolean {
  prompt "Force extended block device numbers and spread them" if [DEBUG_KERNEL && BLOCK]
  depends on [DEBUG_KERNEL]
  depends on [BLOCK]
  default [n] if [DEBUG_KERNEL && BLOCK]
  inherited [DEBUG_KERNEL && BLOCK]
 }
 config DEBUG_FORCE_WEAK_PER_CPU boolean {
  prompt "Force weak per-cpu definitions" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config LKDTM tristate {
  prompt "Linux Kernel Dump Test Tool Module" if [DEBUG_KERNEL && KPROBES && BLOCK]
  depends on [DEBUG_KERNEL]
  depends on [KPROBES]
  depends on [BLOCK]
  default [n] if [DEBUG_KERNEL && KPROBES && BLOCK]
  inherited [DEBUG_KERNEL && KPROBES && BLOCK]
 }
 config FAULT_INJECTION boolean {
  prompt "Fault-injection framework" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
  config FAILSLAB boolean {
   prompt "Fault-injection capability for kmalloc" if [FAULT_INJECTION && (SLAB || SLUB)]
   depends on [FAULT_INJECTION]
   depends on [SLAB || SLUB]
   inherited [FAULT_INJECTION && (SLAB || SLUB)]
  }
  config FAIL_PAGE_ALLOC boolean {
   prompt "Fault-injection capabilitiy for alloc_pages()" if [FAULT_INJECTION]
   depends on [FAULT_INJECTION]
   inherited [FAULT_INJECTION]
  }
  config FAIL_MAKE_REQUEST boolean {
   prompt "Fault-injection capability for disk IO" if [FAULT_INJECTION && BLOCK]
   depends on [FAULT_INJECTION && BLOCK]
   inherited [FAULT_INJECTION && BLOCK]
  }
  config FAIL_IO_TIMEOUT boolean {
   prompt "Faul-injection capability for faking disk interrupts" if [FAULT_INJECTION && BLOCK]
   depends on [FAULT_INJECTION && BLOCK]
   inherited [FAULT_INJECTION && BLOCK]
  }
  config FAULT_INJECTION_DEBUG_FS boolean {
   prompt "Debugfs entries for fault-injection capabilities" if [FAULT_INJECTION && SYSFS && DEBUG_FS]
   depends on [FAULT_INJECTION && SYSFS && DEBUG_FS]
   inherited [FAULT_INJECTION && SYSFS && DEBUG_FS]
   config FAULT_INJECTION_STACKTRACE_FILTER boolean {
    prompt "stacktrace filter for fault-injection capabilities" if [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64]
    depends on [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT]
    depends on [!X86_64]
    select STACKTRACE if [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64]
    select FRAME_POINTER if [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64 && !PPC && !S390]
    inherited [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64]
   }
  }
 }
 config LATENCYTOP boolean {
  prompt "Latency measuring infrastructure" if [HAVE_LATENCYTOP_SUPPORT]
  select FRAME_POINTER if [HAVE_LATENCYTOP_SUPPORT && !MIPS && !PPC && !S390]
  select KALLSYMS if [HAVE_LATENCYTOP_SUPPORT]
  select KALLSYMS_ALL if [HAVE_LATENCYTOP_SUPPORT]
  select STACKTRACE if [HAVE_LATENCYTOP_SUPPORT]
  select SCHEDSTATS if [HAVE_LATENCYTOP_SUPPORT]
  select SCHED_DEBUG if [HAVE_LATENCYTOP_SUPPORT]
  depends on [HAVE_LATENCYTOP_SUPPORT]
  inherited [HAVE_LATENCYTOP_SUPPORT]
 }
 config SYSCTL_SYSCALL_CHECK boolean {
  prompt "Sysctl checks" if [SYSCTL_SYSCALL]
  depends on [SYSCTL_SYSCALL]
  inherited [SYSCTL_SYSCALL]
 }
 config DEBUG_PAGEALLOC boolean {
  prompt "Debug page memory allocations" if [DEBUG_KERNEL && ARCH_SUPPORTS_DEBUG_PAGEALLOC && (!HIBERNATION || !PPC && !SPARC) && !KMEMCHECK]
  depends on [DEBUG_KERNEL && ARCH_SUPPORTS_DEBUG_PAGEALLOC]
  depends on [!HIBERNATION || !PPC && !SPARC]
  depends on [!KMEMCHECK]
  inherited [DEBUG_KERNEL && ARCH_SUPPORTS_DEBUG_PAGEALLOC && (!HIBERNATION || !PPC && !SPARC) && !KMEMCHECK]
 }
 config WANT_PAGE_DEBUG_FLAGS boolean {
 }
 config PAGE_POISONING boolean {
  prompt "Debug page memory allocations" if [DEBUG_KERNEL && !ARCH_SUPPORTS_DEBUG_PAGEALLOC && !HIBERNATION]
  depends on [DEBUG_KERNEL && !ARCH_SUPPORTS_DEBUG_PAGEALLOC]
  depends on [!HIBERNATION]
  select DEBUG_PAGEALLOC if [DEBUG_KERNEL && !ARCH_SUPPORTS_DEBUG_PAGEALLOC && !HIBERNATION]
  select WANT_PAGE_DEBUG_FLAGS if [DEBUG_KERNEL && !ARCH_SUPPORTS_DEBUG_PAGEALLOC && !HIBERNATION]
  inherited [DEBUG_KERNEL && !ARCH_SUPPORTS_DEBUG_PAGEALLOC && !HIBERNATION]
 }
 config USER_STACKTRACE_SUPPORT boolean {
 }
 config NOP_TRACER boolean {
 }
 config HAVE_FTRACE_NMI_ENTER boolean {
 }
 config HAVE_FUNCTION_TRACER boolean {
 }
 config HAVE_FUNCTION_GRAPH_TRACER boolean {
 }
 config HAVE_FUNCTION_GRAPH_FP_TEST boolean {
 }
 config HAVE_FUNCTION_TRACE_MCOUNT_TEST boolean {
 }
 config HAVE_DYNAMIC_FTRACE boolean {
 }
 config HAVE_FTRACE_MCOUNT_RECORD boolean {
 }
 config HAVE_HW_BRANCH_TRACER boolean {
 }
 config HAVE_SYSCALL_TRACEPOINTS boolean {
 }
 config TRACER_MAX_TRACE boolean {
 }
 config RING_BUFFER boolean {
 }
 config FTRACE_NMI_ENTER boolean {
  depends on [HAVE_FTRACE_NMI_ENTER]
  default [y] if [HAVE_FTRACE_NMI_ENTER]
  inherited [HAVE_FTRACE_NMI_ENTER]
 }
 config EVENT_TRACING boolean {
  select CONTEXT_SWITCH_TRACER if []
 }
 config CONTEXT_SWITCH_TRACER boolean {
 }
 config RING_BUFFER_ALLOW_SWAP boolean {
 }
 config TRACING boolean {
  select DEBUG_FS if []
  select RING_BUFFER if []
  select STACKTRACE if [STACKTRACE_SUPPORT]
  select TRACEPOINTS if []
  select NOP_TRACER if []
  select BINARY_PRINTF if []
  select EVENT_TRACING if []
 }
 config GENERIC_TRACER boolean {
  select TRACING if []
 }
 config TRACING_SUPPORT boolean {
  depends on [TRACE_IRQFLAGS_SUPPORT || PPC32]
  depends on [STACKTRACE_SUPPORT]
  default [y] if [(TRACE_IRQFLAGS_SUPPORT || PPC32) && STACKTRACE_SUPPORT]
  inherited [(TRACE_IRQFLAGS_SUPPORT || PPC32) && STACKTRACE_SUPPORT]
 }
 if [TRACING_SUPPORT] {
  menuconfig FTRACE boolean {
   prompt "Tracers" if [TRACING_SUPPORT]
   default [y] if [TRACING_SUPPORT && DEBUG_KERNEL]
   inherited [TRACING_SUPPORT]
   if [TRACING_SUPPORT && FTRACE] {
    config FUNCTION_TRACER boolean {
     prompt "Kernel Function Tracer" if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     depends on [HAVE_FUNCTION_TRACER]
     select FRAME_POINTER if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     select KALLSYMS if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     select CONTEXT_SWITCH_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     config FUNCTION_GRAPH_TRACER boolean {
      prompt "Kernel Function Graph Tracer" if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_GRAPH_TRACER && FUNCTION_TRACER && (!X86_32 || !CC_OPTIMIZE_FOR_SIZE)]
      depends on [HAVE_FUNCTION_GRAPH_TRACER]
      depends on [FUNCTION_TRACER]
      depends on [!X86_32 || !CC_OPTIMIZE_FOR_SIZE]
      default [y] if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_GRAPH_TRACER && FUNCTION_TRACER && (!X86_32 || !CC_OPTIMIZE_FOR_SIZE)]
      inherited [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_GRAPH_TRACER && FUNCTION_TRACER && (!X86_32 || !CC_OPTIMIZE_FOR_SIZE)]
     }
    }
    config IRQSOFF_TRACER boolean {
     prompt "Interrupts-off Latency Tracer" if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     default [n] if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     depends on [TRACE_IRQFLAGS_SUPPORT]
     depends on [GENERIC_TIME]
     select TRACE_IRQFLAGS if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     select TRACER_MAX_TRACE if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     select RING_BUFFER_ALLOW_SWAP if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     inherited [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
    }
    config PREEMPT_TRACER boolean {
     prompt "Preemption-off Latency Tracer" if [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
     default [n] if [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
     depends on [GENERIC_TIME]
     depends on [PREEMPT]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
     select TRACER_MAX_TRACE if [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
     select RING_BUFFER_ALLOW_SWAP if [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
     inherited [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
    }
    config SYSPROF_TRACER boolean {
     prompt "Sysprof Tracer" if [TRACING_SUPPORT && FTRACE && X86]
     depends on [X86]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && X86]
     select CONTEXT_SWITCH_TRACER if [TRACING_SUPPORT && FTRACE && X86]
     inherited [TRACING_SUPPORT && FTRACE && X86]
    }
    config SCHED_TRACER boolean {
     prompt "Scheduling Latency Tracer" if [TRACING_SUPPORT && FTRACE]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE]
     select CONTEXT_SWITCH_TRACER if [TRACING_SUPPORT && FTRACE]
     select TRACER_MAX_TRACE if [TRACING_SUPPORT && FTRACE]
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config ENABLE_DEFAULT_TRACERS boolean {
     prompt "Trace process context switches and events" if [TRACING_SUPPORT && FTRACE && !GENERIC_TRACER]
     depends on [!GENERIC_TRACER]
     select TRACING if [TRACING_SUPPORT && FTRACE && !GENERIC_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && !GENERIC_TRACER]
    }
    config FTRACE_SYSCALLS boolean {
     prompt "Trace syscalls" if [TRACING_SUPPORT && FTRACE && HAVE_SYSCALL_TRACEPOINTS]
     depends on [HAVE_SYSCALL_TRACEPOINTS]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_SYSCALL_TRACEPOINTS]
     select KALLSYMS if [TRACING_SUPPORT && FTRACE && HAVE_SYSCALL_TRACEPOINTS]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_SYSCALL_TRACEPOINTS]
    }
    config BOOT_TRACER boolean {
     prompt "Trace boot initcalls" if [TRACING_SUPPORT && FTRACE]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE]
     select CONTEXT_SWITCH_TRACER if [TRACING_SUPPORT && FTRACE]
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config TRACE_BRANCH_PROFILING boolean {
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE]
     inherited [TRACING_SUPPORT && FTRACE]
    }
    choice boolean {
     prompt "Branch Profiling" if [TRACING_SUPPORT && FTRACE]
     default [BRANCH_PROFILE_NONE] if [TRACING_SUPPORT && FTRACE]
     config BRANCH_PROFILE_NONE boolean {
      prompt "No branch profiling" if [<choice>]
      inherited [<choice>]
     }
     config PROFILE_ANNOTATED_BRANCHES boolean {
      prompt "Trace likely/unlikely profiler" if [<choice>]
      select TRACE_BRANCH_PROFILING if [<choice>]
      inherited [<choice>]
     }
     config PROFILE_ALL_BRANCHES boolean {
      prompt "Profile all if conditionals" if [<choice>]
      select TRACE_BRANCH_PROFILING if [<choice>]
      inherited [<choice>]
     }
    }
    config TRACING_BRANCHES boolean {
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config BRANCH_TRACER boolean {
     prompt "Trace likely/unlikely instances" if [TRACING_SUPPORT && FTRACE && TRACE_BRANCH_PROFILING]
     depends on [TRACE_BRANCH_PROFILING]
     select TRACING_BRANCHES if [TRACING_SUPPORT && FTRACE && TRACE_BRANCH_PROFILING]
     inherited [TRACING_SUPPORT && FTRACE && TRACE_BRANCH_PROFILING]
    }
    config POWER_TRACER boolean {
     prompt "Trace power consumption behavior" if [TRACING_SUPPORT && FTRACE && X86]
     depends on [X86]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && X86]
     inherited [TRACING_SUPPORT && FTRACE && X86]
    }
    config STACK_TRACER boolean {
     prompt "Trace max stack" if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     depends on [HAVE_FUNCTION_TRACER]
     select FUNCTION_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     select STACKTRACE if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     select KALLSYMS if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
    }
    config HW_BRANCH_TRACER boolean {
     depends on [HAVE_HW_BRANCH_TRACER]
     prompt "Trace hw branches" if [TRACING_SUPPORT && FTRACE && HAVE_HW_BRANCH_TRACER]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_HW_BRANCH_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_HW_BRANCH_TRACER]
    }
    config KMEMTRACE boolean {
     prompt "Trace SLAB allocations" if [TRACING_SUPPORT && FTRACE]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE]
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config WORKQUEUE_TRACER boolean {
     prompt "Trace workqueues" if [TRACING_SUPPORT && FTRACE]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE]
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config BLK_DEV_IO_TRACE boolean {
     prompt "Support for tracing block io actions" if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     depends on [SYSFS]
     depends on [BLOCK]
     select RELAY if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     select DEBUG_FS if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     select TRACEPOINTS if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     select STACKTRACE if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     inherited [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
    }
    config DYNAMIC_FTRACE boolean {
     prompt "enable/disable ftrace tracepoints dynamically" if [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER && HAVE_DYNAMIC_FTRACE]
     depends on [FUNCTION_TRACER]
     depends on [HAVE_DYNAMIC_FTRACE]
     default [y] if [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER && HAVE_DYNAMIC_FTRACE]
     inherited [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER && HAVE_DYNAMIC_FTRACE]
    }
    config FUNCTION_PROFILER boolean {
     prompt "Kernel function profiler" if [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER]
     depends on [FUNCTION_TRACER]
     default [n] if [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER]
    }
    config FTRACE_MCOUNT_RECORD boolean {
     default [y] if [TRACING_SUPPORT && FTRACE && DYNAMIC_FTRACE && HAVE_FTRACE_MCOUNT_RECORD]
     depends on [DYNAMIC_FTRACE]
     depends on [HAVE_FTRACE_MCOUNT_RECORD]
     inherited [TRACING_SUPPORT && FTRACE && DYNAMIC_FTRACE && HAVE_FTRACE_MCOUNT_RECORD]
    }
    config FTRACE_SELFTEST boolean {
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config FTRACE_STARTUP_TEST boolean {
     prompt "Perform a startup test on ftrace" if [TRACING_SUPPORT && FTRACE && GENERIC_TRACER]
     depends on [GENERIC_TRACER]
     select FTRACE_SELFTEST if [TRACING_SUPPORT && FTRACE && GENERIC_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && GENERIC_TRACER]
     config EVENT_TRACE_TEST_SYSCALLS boolean {
      prompt "Run selftest on syscall events" if [TRACING_SUPPORT && FTRACE && FTRACE_STARTUP_TEST]
      depends on [FTRACE_STARTUP_TEST]
      inherited [TRACING_SUPPORT && FTRACE && FTRACE_STARTUP_TEST]
     }
    }
    config MMIOTRACE boolean {
     prompt "Memory mapped IO tracing" if [TRACING_SUPPORT && FTRACE && HAVE_MMIOTRACE_SUPPORT && PCI]
     depends on [HAVE_MMIOTRACE_SUPPORT && PCI]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_MMIOTRACE_SUPPORT && PCI]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_MMIOTRACE_SUPPORT && PCI]
     config MMIOTRACE_TEST tristate {
      prompt "Test module for mmiotrace" if [TRACING_SUPPORT && FTRACE && MMIOTRACE && m && <choice>]
      depends on [MMIOTRACE && m]
      inherited [TRACING_SUPPORT && FTRACE && MMIOTRACE && m && <choice>]
     }
    }
    config RING_BUFFER_BENCHMARK tristate {
     prompt "Ring buffer benchmark stress tester" if [TRACING_SUPPORT && FTRACE && RING_BUFFER]
     depends on [RING_BUFFER]
     inherited [TRACING_SUPPORT && FTRACE && RING_BUFFER]
    }
   }
  }
 }
 config PROVIDE_OHCI1394_DMA_INIT boolean {
  prompt "Remote debugging over FireWire early on boot" if [PCI && X86]
  depends on [PCI && X86]
  inherited [PCI && X86]
 }
 config FIREWIRE_OHCI_REMOTE_DMA boolean {
  prompt "Remote debugging over FireWire with firewire-ohci" if [FIREWIRE_OHCI]
  depends on [FIREWIRE_OHCI]
  inherited [FIREWIRE_OHCI]
 }
 config BUILD_DOCSRC boolean {
  prompt "Build targets in Documentation/ tree" if [HEADERS_CHECK]
  depends on [HEADERS_CHECK]
  inherited [HEADERS_CHECK]
 }
 config DYNAMIC_DEBUG boolean {
  prompt "Enable dynamic printk() support" if [PRINTK && DEBUG_FS]
  default [n] if [PRINTK && DEBUG_FS]
  depends on [PRINTK]
  depends on [DEBUG_FS]
  inherited [PRINTK && DEBUG_FS]
 }
 config DMA_API_DEBUG boolean {
  prompt "Enable debugging of DMA-API usage" if [HAVE_DMA_API_DEBUG]
  depends on [HAVE_DMA_API_DEBUG]
  inherited [HAVE_DMA_API_DEBUG]
 }
 menuconfig SAMPLES boolean {
  prompt "Sample kernel code" if []
  if [SAMPLES] {
   config SAMPLE_TRACEPOINTS tristate {
    prompt "Build tracepoints examples -- loadable modules only" if [SAMPLES && TRACEPOINTS && m && <choice>]
    depends on [TRACEPOINTS && m]
    inherited [SAMPLES && TRACEPOINTS && m && <choice>]
   }
   config SAMPLE_TRACE_EVENTS tristate {
    prompt "Build trace_events examples -- loadable modules only" if [SAMPLES && EVENT_TRACING && m && <choice>]
    depends on [EVENT_TRACING && m]
    inherited [SAMPLES && EVENT_TRACING && m && <choice>]
   }
   config SAMPLE_KOBJECT tristate {
    prompt "Build kobject examples -- loadable modules only" if [SAMPLES && m && <choice>]
    depends on [m]
    inherited [SAMPLES && m && <choice>]
   }
   config SAMPLE_KPROBES tristate {
    prompt "Build kprobes examples -- loadable modules only" if [SAMPLES && KPROBES && m && <choice>]
    depends on [KPROBES && m]
    inherited [SAMPLES && KPROBES && m && <choice>]
    config SAMPLE_KRETPROBES tristate {
     prompt "Build kretprobes example -- loadable modules only" if [SAMPLES && SAMPLE_KPROBES && KRETPROBES]
     default [m] if [SAMPLES && SAMPLE_KPROBES && KRETPROBES]
     depends on [SAMPLE_KPROBES && KRETPROBES]
     inherited [SAMPLES && SAMPLE_KPROBES && KRETPROBES]
    }
   }
  }
 }
 config HAVE_ARCH_KGDB boolean {
 }
 menuconfig KGDB boolean {
  prompt "KGDB: kernel debugging with remote gdb" if [HAVE_ARCH_KGDB && DEBUG_KERNEL && EXPERIMENTAL]
  depends on [HAVE_ARCH_KGDB]
  depends on [DEBUG_KERNEL && EXPERIMENTAL]
  inherited [HAVE_ARCH_KGDB && DEBUG_KERNEL && EXPERIMENTAL]
  if [KGDB] {
   config KGDB_SERIAL_CONSOLE tristate {
    prompt "KGDB: use kgdb over the serial console" if [KGDB]
    select CONSOLE_POLL if [KGDB]
    select MAGIC_SYSRQ if [KGDB]
    default [y] if [KGDB]
    inherited [KGDB]
   }
   config KGDB_TESTS boolean {
    prompt "KGDB: internal test suite" if [KGDB]
    default [n] if [KGDB]
    inherited [KGDB]
    config KGDB_TESTS_ON_BOOT boolean {
     prompt "KGDB: Run tests on boot" if [KGDB && KGDB_TESTS]
     depends on [KGDB_TESTS]
     default [n] if [KGDB && KGDB_TESTS]
     inherited [KGDB && KGDB_TESTS]
     config KGDB_TESTS_BOOT_STRING string {
      prompt "KGDB: which internal kgdb tests to run" if [KGDB && KGDB_TESTS_ON_BOOT]
      depends on [KGDB_TESTS_ON_BOOT]
      default ["V1F100"] if [KGDB && KGDB_TESTS_ON_BOOT]
      inherited [KGDB && KGDB_TESTS_ON_BOOT]
     }
    }
   }
  }
 }
 config HAVE_ARCH_KMEMCHECK boolean {
 }
 if [HAVE_ARCH_KMEMCHECK] {
  menuconfig KMEMCHECK boolean {
   prompt "kmemcheck: trap use of uninitialized memory" if [HAVE_ARCH_KMEMCHECK && DEBUG_KERNEL && !X86_USE_3DNOW && (SLUB || SLAB) && !CC_OPTIMIZE_FOR_SIZE && !FUNCTION_TRACER]
   depends on [DEBUG_KERNEL]
   depends on [!X86_USE_3DNOW]
   depends on [SLUB || SLAB]
   depends on [!CC_OPTIMIZE_FOR_SIZE]
   depends on [!FUNCTION_TRACER]
   select FRAME_POINTER if [HAVE_ARCH_KMEMCHECK && DEBUG_KERNEL && !X86_USE_3DNOW && (SLUB || SLAB) && !CC_OPTIMIZE_FOR_SIZE && !FUNCTION_TRACER]
   select STACKTRACE if [HAVE_ARCH_KMEMCHECK && DEBUG_KERNEL && !X86_USE_3DNOW && (SLUB || SLAB) && !CC_OPTIMIZE_FOR_SIZE && !FUNCTION_TRACER]
   default [n] if [HAVE_ARCH_KMEMCHECK && DEBUG_KERNEL && !X86_USE_3DNOW && (SLUB || SLAB) && !CC_OPTIMIZE_FOR_SIZE && !FUNCTION_TRACER]
   inherited [HAVE_ARCH_KMEMCHECK && DEBUG_KERNEL && !X86_USE_3DNOW && (SLUB || SLAB) && !CC_OPTIMIZE_FOR_SIZE && !FUNCTION_TRACER]
   choice boolean {
    prompt "kmemcheck: default mode at boot" if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    depends on [KMEMCHECK]
    default [KMEMCHECK_ONESHOT_BY_DEFAULT] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    config KMEMCHECK_DISABLED_BY_DEFAULT boolean {
     prompt "disabled" if [<choice> && KMEMCHECK]
     depends on [KMEMCHECK]
     inherited [<choice> && KMEMCHECK]
    }
    config KMEMCHECK_ENABLED_BY_DEFAULT boolean {
     prompt "enabled" if [<choice> && KMEMCHECK]
     depends on [KMEMCHECK]
     inherited [<choice> && KMEMCHECK]
    }
    config KMEMCHECK_ONESHOT_BY_DEFAULT boolean {
     prompt "one-shot" if [<choice> && KMEMCHECK]
     depends on [KMEMCHECK]
     inherited [<choice> && KMEMCHECK]
    }
   }
   config KMEMCHECK_QUEUE_SIZE integer {
    prompt "kmemcheck: error queue size" if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    depends on [KMEMCHECK]
    default [64] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    inherited [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
   }
   config KMEMCHECK_SHADOW_COPY_SHIFT integer {
    prompt "kmemcheck: shadow copy size (5 => 32 bytes, 6 => 64 bytes)" if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    depends on [KMEMCHECK]
    range [2 8] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    default [5] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    inherited [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
   }
   config KMEMCHECK_PARTIAL_OK boolean {
    prompt "kmemcheck: allow partially uninitialized memory" if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    depends on [KMEMCHECK]
    default [y] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    inherited [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
   }
   config KMEMCHECK_BITOPS_OK boolean {
    prompt "kmemcheck: allow bit-field manipulation" if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    depends on [KMEMCHECK]
    default [n] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    inherited [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
   }
  }
 }
 config STRICT_DEVMEM boolean {
  prompt "Filter access to /dev/mem" if []
 }
 config X86_VERBOSE_BOOTUP boolean {
  prompt "Enable verbose x86 bootup info messages" if []
  default [y] if []
 }
 config EARLY_PRINTK boolean {
  prompt "Early printk" if [EMBEDDED]
  default [y] if []
  config EARLY_PRINTK_DBGP boolean {
   prompt "Early printk via EHCI debug port" if [EARLY_PRINTK && PCI]
   default [n] if [EARLY_PRINTK && PCI]
   depends on [EARLY_PRINTK && PCI]
   inherited [EARLY_PRINTK && PCI]
  }
 }
 config DEBUG_STACKOVERFLOW boolean {
  prompt "Check for stack overflows" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_STACK_USAGE boolean {
  prompt "Stack utilization instrumentation" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_PER_CPU_MAPS boolean {
  prompt "Debug access to per_cpu maps" if [DEBUG_KERNEL && SMP]
  depends on [DEBUG_KERNEL]
  depends on [SMP]
  default [n] if [DEBUG_KERNEL && SMP]
  inherited [DEBUG_KERNEL && SMP]
 }
 config X86_PTDUMP boolean {
  prompt "Export kernel pagetable layout to userspace via debugfs" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  select DEBUG_FS if [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_RODATA boolean {
  prompt "Write protect kernel read-only data structures" if [DEBUG_KERNEL]
  default [y] if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
  config DEBUG_RODATA_TEST boolean {
   prompt "Testcase for the DEBUG_RODATA feature" if [DEBUG_RODATA]
   depends on [DEBUG_RODATA]
   default [y] if [DEBUG_RODATA]
   inherited [DEBUG_RODATA]
  }
 }
 config DEBUG_NX_TEST tristate {
  prompt "Testcase for the NX non-executable stack feature" if [DEBUG_KERNEL && m && <choice>]
  depends on [DEBUG_KERNEL && m]
  inherited [DEBUG_KERNEL && m && <choice>]
 }
 config 4KSTACKS boolean {
  prompt "Use 4Kb for kernel stacks instead of 8Kb" if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config DOUBLEFAULT boolean {
  default [y] if [X86_32]
  prompt "Enable doublefault exception handler" if [X86_32 && EMBEDDED]
  depends on [X86_32]
  inherited [X86_32]
 }
 config IOMMU_DEBUG boolean {
  prompt "Enable IOMMU debugging" if [GART_IOMMU && DEBUG_KERNEL && X86_64]
  depends on [GART_IOMMU && DEBUG_KERNEL]
  depends on [X86_64]
  inherited [GART_IOMMU && DEBUG_KERNEL && X86_64]
 }
 config IOMMU_STRESS boolean {
  prompt "Enable IOMMU stress-test mode" if []
 }
 config IOMMU_LEAK boolean {
  prompt "IOMMU leak tracing" if [IOMMU_DEBUG && DMA_API_DEBUG]
  depends on [IOMMU_DEBUG && DMA_API_DEBUG]
  inherited [IOMMU_DEBUG && DMA_API_DEBUG]
 }
 config X86_DS_SELFTEST boolean {
  prompt "DS selftest" if [DEBUG_KERNEL && X86_DS]
  default [y] if [DEBUG_KERNEL && X86_DS]
  depends on [DEBUG_KERNEL]
  depends on [X86_DS]
  inherited [DEBUG_KERNEL && X86_DS]
 }
 config HAVE_MMIOTRACE_SUPPORT boolean {
  default [y] if []
 }
 config IO_DELAY_TYPE_0X80 integer {
  default [0] if []
 }
 config IO_DELAY_TYPE_0XED integer {
  default [1] if []
 }
 config IO_DELAY_TYPE_UDELAY integer {
  default [2] if []
 }
 config IO_DELAY_TYPE_NONE integer {
  default [3] if []
 }
 choice boolean {
  prompt "IO delay type" if []
  default [IO_DELAY_0X80] if []
  config IO_DELAY_0X80 boolean {
   prompt "port 0x80 based port-IO delay [recommended]" if [<choice>]
   inherited [<choice>]
  }
  config IO_DELAY_0XED boolean {
   prompt "port 0xed based port-IO delay" if [<choice>]
   inherited [<choice>]
  }
  config IO_DELAY_UDELAY boolean {
   prompt "udelay based port-IO delay" if [<choice>]
   inherited [<choice>]
  }
  config IO_DELAY_NONE boolean {
   prompt "no port-IO delay" if [<choice>]
   inherited [<choice>]
  }
 }
 if [IO_DELAY_0X80] {
  config DEFAULT_IO_DELAY_TYPE integer {
   default [IO_DELAY_TYPE_0X80] if [IO_DELAY_0X80]
   default [IO_DELAY_TYPE_0XED] if [IO_DELAY_0XED]
   default [IO_DELAY_TYPE_UDELAY] if [IO_DELAY_UDELAY]
   default [IO_DELAY_TYPE_NONE] if [IO_DELAY_NONE]
   inherited [IO_DELAY_0X80]
  }
 }
 if [IO_DELAY_0XED] {
  config DEFAULT_IO_DELAY_TYPE integer {
   default [IO_DELAY_TYPE_0X80] if [IO_DELAY_0X80]
   default [IO_DELAY_TYPE_0XED] if [IO_DELAY_0XED]
   default [IO_DELAY_TYPE_UDELAY] if [IO_DELAY_UDELAY]
   default [IO_DELAY_TYPE_NONE] if [IO_DELAY_NONE]
   inherited [IO_DELAY_0XED]
  }
 }
 if [IO_DELAY_UDELAY] {
  config DEFAULT_IO_DELAY_TYPE integer {
   default [IO_DELAY_TYPE_0X80] if [IO_DELAY_0X80]
   default [IO_DELAY_TYPE_0XED] if [IO_DELAY_0XED]
   default [IO_DELAY_TYPE_UDELAY] if [IO_DELAY_UDELAY]
   default [IO_DELAY_TYPE_NONE] if [IO_DELAY_NONE]
   inherited [IO_DELAY_UDELAY]
  }
 }
 if [IO_DELAY_NONE] {
  config DEFAULT_IO_DELAY_TYPE integer {
   default [IO_DELAY_TYPE_0X80] if [IO_DELAY_0X80]
   default [IO_DELAY_TYPE_0XED] if [IO_DELAY_0XED]
   default [IO_DELAY_TYPE_UDELAY] if [IO_DELAY_UDELAY]
   default [IO_DELAY_TYPE_NONE] if [IO_DELAY_NONE]
   inherited [IO_DELAY_NONE]
  }
 }
 config DEBUG_BOOT_PARAMS boolean {
  prompt "Debug boot parameters" if [DEBUG_KERNEL && DEBUG_FS]
  depends on [DEBUG_KERNEL]
  depends on [DEBUG_FS]
  inherited [DEBUG_KERNEL && DEBUG_FS]
 }
 config CPA_DEBUG boolean {
  prompt "CPA self-test code" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config OPTIMIZE_INLINING boolean {
  prompt "Allow gcc to uninline functions marked 'inline'" if []
 }
}
menu "Security options" {
 config KEYS boolean {
  prompt "Enable access key retention support" if []
  config KEYS_DEBUG_PROC_KEYS boolean {
   prompt "Enable the /proc/keys file by which keys may be viewed" if [KEYS]
   depends on [KEYS]
   inherited [KEYS]
  }
 }
 config SECURITY boolean {
  prompt "Enable different security models" if [SYSFS]
  depends on [SYSFS]
  inherited [SYSFS]
 }
 config SECURITYFS boolean {
  prompt "Enable the securityfs filesystem" if []
 }
 config SECURITY_NETWORK boolean {
  prompt "Socket and Networking Security Hooks" if [SECURITY]
  depends on [SECURITY]
  inherited [SECURITY]
  config SECURITY_NETWORK_XFRM boolean {
   prompt "XFRM (IPSec) Networking Security Hooks" if [XFRM && SECURITY_NETWORK]
   depends on [XFRM && SECURITY_NETWORK]
   inherited [XFRM && SECURITY_NETWORK]
  }
 }
 config SECURITY_PATH boolean {
  prompt "Security hooks for pathname based access control" if [SECURITY]
  depends on [SECURITY]
  inherited [SECURITY]
 }
 config SECURITY_FILE_CAPABILITIES boolean {
  prompt "File POSIX Capabilities" if []
  default [n] if []
 }
 config SECURITY_ROOTPLUG boolean {
  prompt "Root Plug Support" if [USB="y" && SECURITY]
  depends on [USB="y" && SECURITY]
  inherited [USB="y" && SECURITY]
 }
 config INTEL_TXT boolean {
  prompt "Enable Intel(R) Trusted Execution Technology (Intel(R) TXT)" if [HAVE_INTEL_TXT]
  depends on [HAVE_INTEL_TXT]
  inherited [HAVE_INTEL_TXT]
 }
 config LSM_MMAP_MIN_ADDR integer {
  prompt "Low address space for LSM to protect from user allocation" if [SECURITY && SECURITY_SELINUX]
  depends on [SECURITY && SECURITY_SELINUX]
  default [65536] if [SECURITY && SECURITY_SELINUX]
  inherited [SECURITY && SECURITY_SELINUX]
 }
 config SECURITY_SELINUX boolean {
  prompt "NSA SELinux Support" if [SECURITY_NETWORK && AUDIT && NET && INET]
  depends on [SECURITY_NETWORK && AUDIT && NET && INET]
  select NETWORK_SECMARK if [SECURITY_NETWORK && AUDIT && NET && INET]
  default [n] if [SECURITY_NETWORK && AUDIT && NET && INET]
  inherited [SECURITY_NETWORK && AUDIT && NET && INET]
  config SECURITY_SELINUX_BOOTPARAM boolean {
   prompt "NSA SELinux boot parameter" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
   config SECURITY_SELINUX_BOOTPARAM_VALUE integer {
    prompt "NSA SELinux boot parameter default value" if [SECURITY_SELINUX_BOOTPARAM]
    depends on [SECURITY_SELINUX_BOOTPARAM]
    range [0 1] if [SECURITY_SELINUX_BOOTPARAM]
    default [1] if [SECURITY_SELINUX_BOOTPARAM]
    inherited [SECURITY_SELINUX_BOOTPARAM]
   }
  }
  config SECURITY_SELINUX_DISABLE boolean {
   prompt "NSA SELinux runtime disable" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_DEVELOP boolean {
   prompt "NSA SELinux Development Support" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [y] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_AVC_STATS boolean {
   prompt "NSA SELinux AVC Statistics" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [y] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_CHECKREQPROT_VALUE integer {
   prompt "NSA SELinux checkreqprot default value" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   range [0 1] if [SECURITY_SELINUX]
   default [1] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_POLICYDB_VERSION_MAX boolean {
   prompt "NSA SELinux maximum supported policy format version" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
   config SECURITY_SELINUX_POLICYDB_VERSION_MAX_VALUE integer {
    prompt "NSA SELinux maximum supported policy format version value" if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    depends on [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    range [15 23] if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    default [19] if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    inherited [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
   }
  }
 }
 config SECURITY_SMACK boolean {
  prompt "Simplified Mandatory Access Control Kernel Support" if [NETLABEL && SECURITY_NETWORK]
  depends on [NETLABEL && SECURITY_NETWORK]
  default [n] if [NETLABEL && SECURITY_NETWORK]
  inherited [NETLABEL && SECURITY_NETWORK]
 }
 config SECURITY_TOMOYO boolean {
  prompt "TOMOYO Linux Support" if [SECURITY]
  depends on [SECURITY]
  select SECURITYFS if [SECURITY]
  select SECURITY_PATH if [SECURITY]
  default [n] if [SECURITY]
  inherited [SECURITY]
 }
 config IMA boolean {
  prompt "Integrity Measurement Architecture(IMA)" if [ACPI]
  depends on [ACPI]
  select SECURITYFS if [ACPI]
  select CRYPTO if [ACPI]
  select CRYPTO_HMAC if [ACPI]
  select CRYPTO_MD5 if [ACPI]
  select CRYPTO_SHA1 if [ACPI]
  select TCG_TPM if [ACPI]
  select TCG_TIS if [ACPI]
  inherited [ACPI]
  config IMA_MEASURE_PCR_IDX integer {
   depends on [IMA]
   range [8 14] if [IMA]
   default [10] if [IMA]
   inherited [IMA]
  }
  config IMA_AUDIT boolean {
   depends on [IMA]
   default [y] if [IMA]
   inherited [IMA]
  }
  config IMA_LSM_RULES boolean {
   depends on [IMA && AUDIT && (SECURITY_SELINUX || SECURITY_SMACK)]
   default [y] if [IMA && AUDIT && (SECURITY_SELINUX || SECURITY_SMACK)]
   inherited [IMA && AUDIT && (SECURITY_SELINUX || SECURITY_SMACK)]
  }
 }
}
config XOR_BLOCKS tristate {
}
config ASYNC_CORE tristate {
}
config ASYNC_MEMCPY tristate {
 select ASYNC_CORE if []
}
config ASYNC_XOR tristate {
 select ASYNC_CORE if []
 select XOR_BLOCKS if []
}
config ASYNC_MEMSET tristate {
 select ASYNC_CORE if []
}
config ASYNC_PQ tristate {
 select ASYNC_CORE if []
}
config ASYNC_RAID6_RECOV tristate {
 select ASYNC_CORE if []
 select ASYNC_PQ if []
}
config ASYNC_TX_DISABLE_PQ_VAL_DMA boolean {
}
config ASYNC_TX_DISABLE_XOR_VAL_DMA boolean {
}
menuconfig CRYPTO tristate {
 prompt "Cryptographic API" if []
 if [CRYPTO] {
  config CRYPTO_FIPS boolean {
   prompt "FIPS 200 compliance" if [CRYPTO && CRYPTO_ANSI_CPRNG]
   depends on [CRYPTO_ANSI_CPRNG]
   inherited [CRYPTO && CRYPTO_ANSI_CPRNG]
  }
  config CRYPTO_ALGAPI tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ALGAPI2 tristate {
   inherited [CRYPTO]
  }
  config CRYPTO_AEAD tristate {
   select CRYPTO_AEAD2 if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_AEAD2 tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_BLKCIPHER tristate {
   select CRYPTO_BLKCIPHER2 if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_BLKCIPHER2 tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   select CRYPTO_RNG2 if [CRYPTO]
   select CRYPTO_WORKQUEUE if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_HASH tristate {
   select CRYPTO_HASH2 if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_HASH2 tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RNG tristate {
   select CRYPTO_RNG2 if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RNG2 tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_PCOMP tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MANAGER tristate {
   prompt "Cryptographic algorithm manager" if [CRYPTO]
   select CRYPTO_MANAGER2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MANAGER2 tristate {
   default [CRYPTO_MANAGER || CRYPTO_MANAGER!="n" && CRYPTO_ALGAPI="y"] if [CRYPTO]
   select CRYPTO_AEAD2 if [CRYPTO]
   select CRYPTO_HASH2 if [CRYPTO]
   select CRYPTO_BLKCIPHER2 if [CRYPTO]
   select CRYPTO_PCOMP if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_GF128MUL tristate {
   prompt "GF(2^128) multiplication functions (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_NULL tristate {
   prompt "Null algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_WORKQUEUE tristate {
   inherited [CRYPTO]
  }
  config CRYPTO_CRYPTD tristate {
   prompt "Software async crypto daemon" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   select CRYPTO_WORKQUEUE if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_AUTHENC tristate {
   prompt "Authenc support" if [CRYPTO]
   select CRYPTO_AEAD if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TEST tristate {
   prompt "Testing module" if [CRYPTO && m && <choice>]
   depends on [m]
   select CRYPTO_MANAGER if [CRYPTO && m && <choice>]
   inherited [CRYPTO && m && <choice>]
  }
  config CRYPTO_CCM tristate {
   prompt "CCM support" if [CRYPTO]
   select CRYPTO_CTR if [CRYPTO]
   select CRYPTO_AEAD if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_GCM tristate {
   prompt "GCM/GMAC support" if [CRYPTO]
   select CRYPTO_CTR if [CRYPTO]
   select CRYPTO_AEAD if [CRYPTO]
   select CRYPTO_GHASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SEQIV tristate {
   prompt "Sequence Number IV Generator" if [CRYPTO]
   select CRYPTO_AEAD if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_RNG if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CBC tristate {
   prompt "CBC support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CTR tristate {
   prompt "CTR support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_SEQIV if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CTS tristate {
   prompt "CTS support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ECB tristate {
   prompt "ECB support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_LRW tristate {
   prompt "LRW support (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_GF128MUL if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_PCBC tristate {
   prompt "PCBC support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_XTS tristate {
   prompt "XTS support (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_GF128MUL if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_FPU tristate {
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_HMAC tristate {
   prompt "HMAC support" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_XCBC tristate {
   prompt "XCBC support" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_HASH if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_VMAC tristate {
   prompt "VMAC support" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_HASH if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_CRC32C tristate {
   prompt "CRC32c CRC algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CRC32C_INTEL tristate {
   prompt "CRC32c INTEL hardware acceleration" if [CRYPTO && X86]
   depends on [X86]
   select CRYPTO_HASH if [CRYPTO && X86]
   inherited [CRYPTO && X86]
  }
  config CRYPTO_GHASH tristate {
   prompt "GHASH digest algorithm" if [CRYPTO]
   select CRYPTO_SHASH if [CRYPTO]
   select CRYPTO_GF128MUL if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MD4 tristate {
   prompt "MD4 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MD5 tristate {
   prompt "MD5 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MICHAEL_MIC tristate {
   prompt "Michael MIC keyed digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RMD128 tristate {
   prompt "RIPEMD-128 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RMD160 tristate {
   prompt "RIPEMD-160 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RMD256 tristate {
   prompt "RIPEMD-256 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RMD320 tristate {
   prompt "RIPEMD-320 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SHA1 tristate {
   prompt "SHA1 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SHA256 tristate {
   prompt "SHA224 and SHA256 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SHA512 tristate {
   prompt "SHA384 and SHA512 digest algorithms" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TGR192 tristate {
   prompt "Tiger digest algorithms" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_WP512 tristate {
   prompt "Whirlpool digest algorithms" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_AES tristate {
   prompt "AES cipher algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_AES_586 tristate {
   prompt "AES cipher algorithms (i586)" if [CRYPTO && (X86 || UML_X86) && !64BIT]
   depends on [(X86 || UML_X86) && !64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && !64BIT]
   select CRYPTO_AES if [CRYPTO && (X86 || UML_X86) && !64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && !64BIT]
  }
  config CRYPTO_AES_X86_64 tristate {
   prompt "AES cipher algorithms (x86_64)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
   depends on [(X86 || UML_X86) && 64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_AES if [CRYPTO && (X86 || UML_X86) && 64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
  }
  config CRYPTO_AES_NI_INTEL tristate {
   prompt "AES cipher algorithms (AES-NI)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
   depends on [(X86 || UML_X86) && 64BIT]
   select CRYPTO_AES_X86_64 if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_CRYPTD if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_FPU if [CRYPTO && (X86 || UML_X86) && 64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
  }
  config CRYPTO_ANUBIS tristate {
   prompt "Anubis cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ARC4 tristate {
   prompt "ARC4 cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_BLOWFISH tristate {
   prompt "Blowfish cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CAMELLIA tristate {
   prompt "Camellia cipher algorithms" if [CRYPTO]
   depends on [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CAST5 tristate {
   prompt "CAST5 (CAST-128) cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CAST6 tristate {
   prompt "CAST6 (CAST-256) cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_DES tristate {
   prompt "DES and Triple DES EDE cipher algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_FCRYPT tristate {
   prompt "FCrypt cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_KHAZAD tristate {
   prompt "Khazad cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SALSA20 tristate {
   prompt "Salsa20 stream cipher algorithm (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_SALSA20_586 tristate {
   prompt "Salsa20 stream cipher algorithm (i586) (EXPERIMENTAL)" if [CRYPTO && (X86 || UML_X86) && !64BIT && EXPERIMENTAL]
   depends on [(X86 || UML_X86) && !64BIT]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && (X86 || UML_X86) && !64BIT && EXPERIMENTAL]
   inherited [CRYPTO && (X86 || UML_X86) && !64BIT && EXPERIMENTAL]
  }
  config CRYPTO_SALSA20_X86_64 tristate {
   prompt "Salsa20 stream cipher algorithm (x86_64) (EXPERIMENTAL)" if [CRYPTO && (X86 || UML_X86) && 64BIT && EXPERIMENTAL]
   depends on [(X86 || UML_X86) && 64BIT]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && (X86 || UML_X86) && 64BIT && EXPERIMENTAL]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT && EXPERIMENTAL]
  }
  config CRYPTO_SEED tristate {
   prompt "SEED cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SERPENT tristate {
   prompt "Serpent cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TEA tristate {
   prompt "TEA, XTEA and XETA cipher algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TWOFISH tristate {
   prompt "Twofish cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select CRYPTO_TWOFISH_COMMON if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TWOFISH_COMMON tristate {
   inherited [CRYPTO]
  }
  config CRYPTO_TWOFISH_586 tristate {
   prompt "Twofish cipher algorithms (i586)" if [CRYPTO && (X86 || UML_X86) && !64BIT]
   depends on [(X86 || UML_X86) && !64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && !64BIT]
   select CRYPTO_TWOFISH_COMMON if [CRYPTO && (X86 || UML_X86) && !64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && !64BIT]
  }
  config CRYPTO_TWOFISH_X86_64 tristate {
   prompt "Twofish cipher algorithm (x86_64)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
   depends on [(X86 || UML_X86) && 64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_TWOFISH_COMMON if [CRYPTO && (X86 || UML_X86) && 64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
  }
  config CRYPTO_DEFLATE tristate {
   prompt "Deflate compression algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select ZLIB_INFLATE if [CRYPTO]
   select ZLIB_DEFLATE if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ZLIB tristate {
   prompt "Zlib compression algorithm" if [CRYPTO]
   select CRYPTO_PCOMP if [CRYPTO]
   select ZLIB_INFLATE if [CRYPTO]
   select ZLIB_DEFLATE if [CRYPTO]
   select NLATTR if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_LZO tristate {
   prompt "LZO compression algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select LZO_COMPRESS if [CRYPTO]
   select LZO_DECOMPRESS if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ANSI_CPRNG tristate {
   prompt "Pseudo Random Number Generation for Cryptographic modules" if [CRYPTO]
   default [m] if [CRYPTO]
   select CRYPTO_AES if [CRYPTO]
   select CRYPTO_RNG if [CRYPTO]
   inherited [CRYPTO]
  }
  menuconfig CRYPTO_HW boolean {
   prompt "Hardware crypto devices" if [CRYPTO]
   default [y] if [CRYPTO]
   inherited [CRYPTO]
   if [CRYPTO && CRYPTO_HW] {
    config CRYPTO_DEV_PADLOCK tristate {
     prompt "Support for VIA PadLock ACE" if [CRYPTO && CRYPTO_HW && X86 && !UML]
     depends on [X86 && !UML]
     inherited [CRYPTO && CRYPTO_HW && X86 && !UML]
     config CRYPTO_DEV_PADLOCK_AES tristate {
      prompt "PadLock driver for AES algorithm" if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      depends on [CRYPTO_DEV_PADLOCK]
      select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      select CRYPTO_AES if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      inherited [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
     }
     config CRYPTO_DEV_PADLOCK_SHA tristate {
      prompt "PadLock driver for SHA1 and SHA256 algorithms" if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      depends on [CRYPTO_DEV_PADLOCK]
      select CRYPTO_HASH if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      select CRYPTO_SHA1 if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      select CRYPTO_SHA256 if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      inherited [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
     }
    }
    config CRYPTO_DEV_GEODE tristate {
     prompt "Support for the Geode LX AES engine" if [CRYPTO && CRYPTO_HW && X86_32 && PCI]
     depends on [X86_32 && PCI]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && X86_32 && PCI]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && X86_32 && PCI]
     inherited [CRYPTO && CRYPTO_HW && X86_32 && PCI]
    }
    config ZCRYPT tristate {
     prompt "Support for PCI-attached cryptographic adapters" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select ZCRYPT_MONOLITHIC if [CRYPTO && CRYPTO_HW && S390 && ZCRYPT="y"]
     select HW_RANDOM if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
     config ZCRYPT_MONOLITHIC boolean {
      prompt "Monolithic zcrypt module" if [CRYPTO && CRYPTO_HW && ZCRYPT="m"]
      depends on [ZCRYPT="m"]
      inherited [CRYPTO && CRYPTO_HW && ZCRYPT="m"]
     }
    }
    config CRYPTO_SHA1_S390 tristate {
     prompt "SHA1 digest algorithm" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_HASH if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_SHA256_S390 tristate {
     prompt "SHA256 digest algorithm" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_HASH if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_SHA512_S390 tristate {
     prompt "SHA384 and SHA512 digest algorithm" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_HASH if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_DES_S390 tristate {
     prompt "DES and Triple DES cipher algorithms" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && S390]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_AES_S390 tristate {
     prompt "AES cipher algorithms" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && S390]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config S390_PRNG tristate {
     prompt "Pseudo random number generator device driver" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     default [m] if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_DEV_MV_CESA tristate {
     prompt "Marvell's Cryptographic Engine" if [CRYPTO && CRYPTO_HW && PLAT_ORION]
     depends on [PLAT_ORION]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && PLAT_ORION]
     select CRYPTO_AES if [CRYPTO && CRYPTO_HW && PLAT_ORION]
     select CRYPTO_BLKCIPHER2 if [CRYPTO && CRYPTO_HW && PLAT_ORION]
     inherited [CRYPTO && CRYPTO_HW && PLAT_ORION]
    }
    config CRYPTO_DEV_HIFN_795X tristate {
     prompt "Driver HIFN 795x crypto accelerator chips" if [CRYPTO && CRYPTO_HW && PCI]
     select CRYPTO_DES if [CRYPTO && CRYPTO_HW && PCI]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && PCI]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && PCI]
     select HW_RANDOM if [CRYPTO && CRYPTO_HW && PCI && CRYPTO_DEV_HIFN_795X_RNG]
     depends on [PCI]
     inherited [CRYPTO && CRYPTO_HW && PCI]
     config CRYPTO_DEV_HIFN_795X_RNG boolean {
      prompt "HIFN 795x random number generator" if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_HIFN_795X]
      depends on [CRYPTO_DEV_HIFN_795X]
      inherited [CRYPTO && CRYPTO_HW && CRYPTO_DEV_HIFN_795X]
     }
    }
    config CRYPTO_DEV_TALITOS tristate {
     prompt "Talitos Freescale Security Engine (SEC)" if [CRYPTO && CRYPTO_HW && FSL_SOC]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && FSL_SOC]
     select CRYPTO_AUTHENC if [CRYPTO && CRYPTO_HW && FSL_SOC]
     select HW_RANDOM if [CRYPTO && CRYPTO_HW && FSL_SOC]
     depends on [FSL_SOC]
     inherited [CRYPTO && CRYPTO_HW && FSL_SOC]
    }
    config CRYPTO_DEV_IXP4XX tristate {
     prompt "Driver for IXP4xx crypto hardware acceleration" if [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
     depends on [ARCH_IXP4XX]
     select CRYPTO_DES if [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
     select CRYPTO_AUTHENC if [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
     inherited [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
    }
    config CRYPTO_DEV_PPC4XX tristate {
     prompt "Driver AMCC PPC4xx crypto accelerator" if [CRYPTO && CRYPTO_HW && PPC && 4xx]
     depends on [PPC && 4xx]
     select CRYPTO_HASH if [CRYPTO && CRYPTO_HW && PPC && 4xx]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && PPC && 4xx]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && PPC && 4xx]
     inherited [CRYPTO && CRYPTO_HW && PPC && 4xx]
    }
   }
  }
 }
}
config HAVE_KVM boolean {
}
config HAVE_KVM_IRQCHIP boolean {
}
config HAVE_KVM_EVENTFD boolean {
 select EVENTFD if []
}
config KVM_APIC_ARCHITECTURE boolean {
}
menuconfig VIRTUALIZATION boolean {
 prompt "Virtualization" if [HAVE_KVM || X86]
 depends on [HAVE_KVM || X86]
 default [y] if [HAVE_KVM || X86]
 inherited [HAVE_KVM || X86]
 if [VIRTUALIZATION] {
  config KVM tristate {
   prompt "Kernel-based Virtual Machine (KVM) support" if [VIRTUALIZATION && HAVE_KVM && PCI]
   depends on [HAVE_KVM]
   depends on [PCI]
   select PREEMPT_NOTIFIERS if [VIRTUALIZATION && HAVE_KVM && PCI]
   select MMU_NOTIFIER if [VIRTUALIZATION && HAVE_KVM && PCI]
   select ANON_INODES if [VIRTUALIZATION && HAVE_KVM && PCI]
   select HAVE_KVM_IRQCHIP if [VIRTUALIZATION && HAVE_KVM && PCI]
   select HAVE_KVM_EVENTFD if [VIRTUALIZATION && HAVE_KVM && PCI]
   select KVM_APIC_ARCHITECTURE if [VIRTUALIZATION && HAVE_KVM && PCI]
   inherited [VIRTUALIZATION && HAVE_KVM && PCI]
   config KVM_INTEL tristate {
    prompt "KVM for Intel processors support" if [VIRTUALIZATION && KVM]
    depends on [KVM]
    inherited [VIRTUALIZATION && KVM]
   }
   config KVM_AMD tristate {
    prompt "KVM for AMD processors support" if [VIRTUALIZATION && KVM]
    depends on [KVM]
    inherited [VIRTUALIZATION && KVM]
   }
  }
  config LGUEST tristate {
   prompt "Linux hypervisor example code" if [VIRTUALIZATION && X86_32 && EXPERIMENTAL && EVENTFD]
   depends on [X86_32 && EXPERIMENTAL && EVENTFD]
   select HVC_DRIVER if [VIRTUALIZATION && X86_32 && EXPERIMENTAL && EVENTFD]
   inherited [VIRTUALIZATION && X86_32 && EXPERIMENTAL && EVENTFD]
  }
  config VIRTIO tristate {
   inherited [VIRTUALIZATION]
  }
  config VIRTIO_RING tristate {
   depends on [VIRTIO]
   inherited [VIRTUALIZATION && VIRTIO]
  }
  config VIRTIO_PCI tristate {
   prompt "PCI driver for virtio devices (EXPERIMENTAL)" if [VIRTUALIZATION && PCI && EXPERIMENTAL]
   depends on [PCI && EXPERIMENTAL]
   select VIRTIO if [VIRTUALIZATION && PCI && EXPERIMENTAL]
   select VIRTIO_RING if [VIRTUALIZATION && PCI && EXPERIMENTAL]
   inherited [VIRTUALIZATION && PCI && EXPERIMENTAL]
  }
  config VIRTIO_BALLOON tristate {
   prompt "Virtio balloon driver (EXPERIMENTAL)" if [VIRTUALIZATION]
   select VIRTIO if [VIRTUALIZATION]
   select VIRTIO_RING if [VIRTUALIZATION]
   inherited [VIRTUALIZATION]
  }
 }
}
config BINARY_PRINTF boolean {
 default [n] if []
}
menu "Library routines" {
 config BITREVERSE tristate {
 }
 config RATIONAL boolean {
 }
 config GENERIC_FIND_FIRST_BIT boolean {
 }
 config GENERIC_FIND_NEXT_BIT boolean {
 }
 config GENERIC_FIND_LAST_BIT boolean {
  default [y] if []
 }
 config CRC_CCITT tristate {
  prompt "CRC-CCITT functions" if []
 }
 config CRC16 tristate {
  prompt "CRC16 functions" if []
 }
 config CRC_T10DIF tristate {
  prompt "CRC calculation for the T10 Data Integrity Field" if []
 }
 config CRC_ITU_T tristate {
  prompt "CRC ITU-T V.41 functions" if []
 }
 config CRC32 tristate {
  prompt "CRC32 functions" if []
  default [y] if []
  select BITREVERSE if []
 }
 config CRC7 tristate {
  prompt "CRC7 functions" if []
 }
 config LIBCRC32C tristate {
  prompt "CRC32c (Castagnoli, et al) Cyclic Redundancy-Check" if []
  select CRYPTO if []
  select CRYPTO_CRC32C if []
 }
 config AUDIT_GENERIC boolean {
  depends on [AUDIT && !AUDIT_ARCH]
  default [y] if [AUDIT && !AUDIT_ARCH]
  inherited [AUDIT && !AUDIT_ARCH]
 }
 config ZLIB_INFLATE tristate {
 }
 config ZLIB_DEFLATE tristate {
 }
 config LZO_COMPRESS tristate {
 }
 config LZO_DECOMPRESS tristate {
 }
 config DECOMPRESS_GZIP tristate {
  select ZLIB_INFLATE if []
 }
 config DECOMPRESS_BZIP2 tristate {
 }
 config DECOMPRESS_LZMA tristate {
 }
 config GENERIC_ALLOCATOR boolean {
 }
 config REED_SOLOMON tristate {
 }
 config REED_SOLOMON_ENC8 boolean {
 }
 config REED_SOLOMON_DEC8 boolean {
 }
 config REED_SOLOMON_ENC16 boolean {
 }
 config REED_SOLOMON_DEC16 boolean {
 }
 config TEXTSEARCH boolean {
 }
 config TEXTSEARCH_KMP tristate {
 }
 config TEXTSEARCH_BM tristate {
 }
 config TEXTSEARCH_FSM tristate {
 }
 config HAS_IOMEM boolean {
  depends on [!NO_IOMEM]
  default [y] if [!NO_IOMEM]
  inherited [!NO_IOMEM]
 }
 config HAS_IOPORT boolean {
  depends on [HAS_IOMEM && !NO_IOPORT]
  default [y] if [HAS_IOMEM && !NO_IOPORT]
  inherited [HAS_IOMEM && !NO_IOPORT]
 }
 config HAS_DMA boolean {
  depends on [!NO_DMA]
  default [y] if [!NO_DMA]
  inherited [!NO_DMA]
 }
 config CHECK_SIGNATURE boolean {
 }
 config HAVE_LMB boolean {
 }
 config CPUMASK_OFFSTACK boolean {
  prompt "Force CPU masks off stack" if [DEBUG_PER_CPU_MAPS]
 }
 config DISABLE_OBSOLETE_CPUMASK_FUNCTIONS boolean {
  prompt "Disable obsolete cpumask functions" if [EXPERIMENTAL && BROKEN && DEBUG_PER_CPU_MAPS]
  depends on [EXPERIMENTAL && BROKEN]
  inherited [EXPERIMENTAL && BROKEN]
 }
 config NLATTR boolean {
 }
 config GENERIC_ATOMIC64 boolean {
 }
}
