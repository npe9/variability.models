config DISTVERSION string {
 default ["4.0"] if []
}
menu "Library Configuration" {
 config LIB_BITVECTOR boolean {
  prompt "Build bit vector" if []
  default [n] if []
 }
 config LIB_FLEX boolean {
  prompt "Build flex" if []
  default [n] if []
 }
 config LIB_BFD boolean {
  prompt "Build libbfd" if []
  default [n] if []
 }
 config LIB_LIBIBERTY boolean {
  prompt "Build libiberty" if []
  default [n] if []
 }
 config LIB_POPT boolean {
  prompt "Build libpopt" if []
  default [n] if []
 }
 config LIB_LIBSSL boolean {
  prompt "Build libSSL" if []
  default [n] if []
 }
 config LIB_LIBGMP boolean {
  prompt "Build libGMP" if []
  default [n] if []
 }
 config LIB_LIBG boolean {
  prompt "Build libG" if []
  default [n] if []
 }
 config LIB_LIBKRB5 boolean {
  prompt "Build MIT Kerberos Library" if []
  default [n] if []
 }
 config LIB_CYRUSSASL boolean {
  prompt "Cyrus SASL library" if []
  select LIB_LIBKRB5 if []
  default [n] if []
 }
 config LIB_LIBLDAP boolean {
  prompt "Build libldap" if []
  select LIB_CYRUSSASL if []
  default [n] if []
 }
 config LIB_LIBLZMA boolean {
  prompt "Build liblzma" if []
  default [n] if []
 }
 config LIB_LIBLZO boolean {
  prompt "Build liblzo" if []
  default [n] if []
 }
 config LIB_LIBNET boolean {
  prompt "Build libnet" if []
  default [n] if []
 }
 config LIB_LIBNETOLD boolean {
  prompt "Build really old libnet" if []
  default [n] if []
 }
 config LIB_LIBPAM boolean {
  prompt "Build libPAM" if []
  default [n] if []
  config USER_PAM_LDAP boolean {
   prompt "PAM LDAP" if [LIB_LIBPAM]
   depends on [LIB_LIBPAM]
   select LIB_LIBLDAP if [LIB_LIBPAM]
   inherited [LIB_LIBPAM]
  }
  config USER_PAM_RADIUS boolean {
   prompt "PAM RADIUS" if [LIB_LIBPAM]
   depends on [LIB_LIBPAM]
   inherited [LIB_LIBPAM]
  }
  config USER_PAM_SMB boolean {
   prompt "PAM SMB" if [LIB_LIBPAM]
   depends on [LIB_LIBPAM]
   inherited [LIB_LIBPAM]
  }
  config USER_PAM_TACACS boolean {
   prompt "PAM TACACS+" if [LIB_LIBPAM]
   depends on [LIB_LIBPAM]
   inherited [LIB_LIBPAM]
  }
  config USER_PAM_KRB5 boolean {
   prompt "PAM Kerberos 5" if [LIB_LIBPAM]
   depends on [LIB_LIBPAM]
   select LIB_LIBKRB5 if [LIB_LIBPAM]
   inherited [LIB_LIBPAM]
  }
 }
 config LIB_LIBPCAP boolean {
  prompt "Build libPCAP" if []
  default [n] if []
 }
 config LIB_LIBPCRE boolean {
  prompt "Build libPCRE" if []
  default [n] if []
 }
 config LIB_ZLIB boolean {
  prompt "Build libZ" if []
  default [n] if []
 }
 config LIB_LIBBZ2 boolean {
  prompt "Build libBZIP2" if []
  default [n] if []
 }
 config LIB_LIBATM boolean {
  prompt "Build libATM" if []
  default [n] if []
 }
 config LIB_LIBPNG boolean {
  prompt "Build libpng" if []
  select LIB_ZLIB if []
  default [n] if []
 }
 config LIB_LIBJPEG boolean {
  prompt "Build libjpeg" if []
  default [n] if []
 }
 config LIB_LIBUPNP boolean {
  prompt "Build libupnp" if []
  default [n] if []
 }
 config LIB_LIBSYSFS boolean {
  prompt "Build libsysfs" if []
  default [n] if []
 }
 config LIB_NCURSES boolean {
  prompt "Build ncurses" if []
  default [n] if []
 }
 config LIB_TERMCAP boolean {
  prompt "Build termcap" if []
  default [n] if []
 }
 config LIB_LIBEFENCE boolean {
  prompt "Build libefence" if []
  default [n] if []
 }
 config LIB_EXPAT boolean {
  prompt "Build expat" if []
  default [n] if []
 }
 config LIB_ADNS boolean {
  prompt "Build adns" if []
  default [n] if []
 }
 config LIB_ARES boolean {
  prompt "Build libares" if []
  default [n] if []
 }
 config LIB_LIBIDN boolean {
  prompt "Build libidn" if []
  default [n] if []
 }
 config LIB_LIBNL boolean {
  prompt "Build libnl" if []
  default [n] if []
  config LIB_LIBNL_COMPONENTS boolean {
   prompt "Select libnl components" if [LIB_LIBNL]
   depends on [LIB_LIBNL]
   default [n] if [LIB_LIBNL]
   inherited [LIB_LIBNL]
   config LIB_LIBNL_RTNL boolean {
    prompt "Include libnl rtnl support" if [LIB_LIBNL_COMPONENTS]
    depends on [LIB_LIBNL_COMPONENTS]
    default [n] if [LIB_LIBNL_COMPONENTS]
    inherited [LIB_LIBNL_COMPONENTS]
    config LIB_LIBNL_ROUTE_ADDR boolean {
     prompt "Include libnl addr support" if [LIB_LIBNL_RTNL]
     depends on [LIB_LIBNL_RTNL]
     default [n] if [LIB_LIBNL_RTNL]
     inherited [LIB_LIBNL_RTNL]
    }
    config LIB_LIBNL_ROUTE_LINK boolean {
     prompt "Include libnl link support" if [LIB_LIBNL_RTNL]
     depends on [LIB_LIBNL_RTNL]
     default [n] if [LIB_LIBNL_RTNL]
     inherited [LIB_LIBNL_RTNL]
    }
    config LIB_LIBNL_ROUTE_NEIGH boolean {
     prompt "Include libnl neigh support" if [LIB_LIBNL_RTNL]
     depends on [LIB_LIBNL_RTNL]
     default [n] if [LIB_LIBNL_RTNL]
     inherited [LIB_LIBNL_RTNL]
    }
    config LIB_LIBNL_ROUTE_ROUTE boolean {
     prompt "Include libnl route support" if [LIB_LIBNL_RTNL]
     depends on [LIB_LIBNL_RTNL]
     default [n] if [LIB_LIBNL_RTNL]
     inherited [LIB_LIBNL_RTNL]
    }
    config LIB_LIBNL_ROUTE_RULE boolean {
     prompt "Include libnl rule support" if [LIB_LIBNL_RTNL]
     depends on [LIB_LIBNL_RTNL]
     default [n] if [LIB_LIBNL_RTNL]
     inherited [LIB_LIBNL_RTNL]
    }
    config LIB_LIBNL_ROUTE_TC boolean {
     prompt "Include libnl tc support" if [LIB_LIBNL_RTNL]
     depends on [LIB_LIBNL_RTNL]
     default [n] if [LIB_LIBNL_RTNL]
     inherited [LIB_LIBNL_RTNL]
    }
   }
   config LIB_LIBNL_GENERIC boolean {
    prompt "Include libnl generic support" if [LIB_LIBNL_COMPONENTS]
    depends on [LIB_LIBNL_COMPONENTS]
    default [n] if [LIB_LIBNL_COMPONENTS]
    inherited [LIB_LIBNL_COMPONENTS]
   }
   config LIB_LIBNL_FIB boolean {
    prompt "Include libnl fib support" if [LIB_LIBNL_COMPONENTS]
    depends on [LIB_LIBNL_COMPONENTS]
    default [n] if [LIB_LIBNL_COMPONENTS]
    inherited [LIB_LIBNL_COMPONENTS]
   }
   config LIB_LIBNL_NETFILTER boolean {
    prompt "Include libnl netfilter support" if [LIB_LIBNL_COMPONENTS]
    depends on [LIB_LIBNL_COMPONENTS]
    default [n] if [LIB_LIBNL_COMPONENTS]
    inherited [LIB_LIBNL_COMPONENTS]
    config LIB_LIBNL_NETFILTER_CT boolean {
     prompt "Include libnl netfilter conntrack support" if [LIB_LIBNL_NETFILTER]
     depends on [LIB_LIBNL_NETFILTER]
     default [n] if [LIB_LIBNL_NETFILTER]
     inherited [LIB_LIBNL_NETFILTER]
    }
    config LIB_LIBNL_NETFILTER_LOG boolean {
     prompt "Include libnl netfilter log support" if [LIB_LIBNL_NETFILTER]
     depends on [LIB_LIBNL_NETFILTER]
     default [n] if [LIB_LIBNL_NETFILTER]
     inherited [LIB_LIBNL_NETFILTER]
    }
    config LIB_LIBNL_NETFILTER_QUEUE boolean {
     prompt "Include libnl netfilter queue support" if [LIB_LIBNL_NETFILTER]
     depends on [LIB_LIBNL_NETFILTER]
     default [n] if [LIB_LIBNL_NETFILTER]
     inherited [LIB_LIBNL_NETFILTER]
    }
   }
  }
 }
 config LIB_NFNETLINK boolean {
  prompt "Build libnfnetlink" if []
  default [n] if []
 }
 config LIB_NETFILTER_CONNTRACK boolean {
  prompt "Build libnetfilter_conntrack" if []
  select LIB_NFNETLINK if []
  default [n] if []
 }
 config LIB_NETFILTER_LOG boolean {
  prompt "Build libnetfilter_log" if []
  select LIB_NFNETLINK if []
  default [n] if []
 }
 config LIB_OSIP2 boolean {
  prompt "Build libosip2" if []
  default [n] if []
 }
 config LIB_LIBCURL boolean {
  prompt "Build curl" if []
  select LIB_LIBIDN if []
  select LIB_ZLIB if []
  select LIB_LIBBZ2 if []
  select LIB_LIBSSL if []
  default [n] if []
 }
 config LIB_LIBCRYPT_OLD boolean {
  prompt "Build libcrypt_old" if []
  default [n] if []
 }
 config LIB_PWLIB boolean {
  prompt "Build pwlib" if []
  select LIB_STLPORT if []
 }
 config LIB_LIBOPENH323 boolean {
  prompt "Build libopenh323" if []
  select LIB_PWLIB if []
  select LIB_STLPORT if []
 }
 config LIB_LIBJUDY boolean {
  prompt "Build libjudy" if []
  default [n] if []
  config LIB_LIBJUDY_TESTS boolean {
   prompt "Build libjudy tests" if [LIB_LIBJUDY]
   depends on [LIB_LIBJUDY]
   default [n] if [LIB_LIBJUDY]
   inherited [LIB_LIBJUDY]
  }
 }
 config LIB_CLASSPATH boolean {
  prompt "Build classpath" if []
  default [n] if []
 }
 config LIB_LIBFFI boolean {
  prompt "Build libffi" if []
  default [n] if []
 }
 config LIB_LIBXML2 boolean {
  prompt "Build libxml2" if []
  default [n] if []
  prompt "libxml2" if []
 }
 config LIB_UC_LIBC_TIMEZONE boolean {
  prompt "Support time zones" if []
  config LIB_UC_LIBC_TZ_FROM_FILE boolean {
   prompt "Always load from file" if [LIB_UC_LIBC_TIMEZONE]
   depends on [LIB_UC_LIBC_TIMEZONE]
   inherited [LIB_UC_LIBC_TIMEZONE]
  }
 }
}
menu "Automake Libraries" {
 config LIB_STLPORT boolean {
  prompt "Build STLport" if []
  default [n] if []
  config LIB_STLPORT_SHARED boolean {
   prompt "Build STLport as shared" if [LIB_STLPORT]
   depends on [LIB_STLPORT]
   inherited [LIB_STLPORT]
  }
 }
 config LIB_BOOST boolean {
  prompt "boost" if []
 }
 config LIB_LIBXML2 boolean {
  prompt "Build libxml2" if []
  default [n] if []
  prompt "libxml2" if []
 }
}
menu "Core Applications" {
 config USER_INIT_INIT boolean {
  prompt "init" if []
 }
 config USER_INIT_CONSOLE_SH boolean {
  prompt "enable console shell" if []
 }
 config USER_INIT_RUN_FIREWALL boolean {
  prompt "execute firewall rules" if []
 }
 config USER_INIT_CONF boolean {
  prompt "process init.conf" if []
 }
 choice boolean {
  prompt "Shell Program" if []
  default [USER_SASH_SH] if []
  config USER_SASH_SH boolean {
   prompt "sash" if [<choice>]
   inherited [<choice>]
  }
  config USER_SH_SH boolean {
   prompt "minix-shell" if [<choice>]
   inherited [<choice>]
  }
  config USER_NWSH_SH boolean {
   prompt "nwsh" if [<choice>]
   inherited [<choice>]
  }
  config USER_BASH_BASH boolean {
   prompt "bash" if [<choice>]
   inherited [<choice>]
  }
  config USER_MSH_SH boolean {
   prompt "msh" if [<choice>]
   inherited [<choice>]
  }
  config USER_OTHER_SH boolean {
   prompt "other" if [<choice>]
   inherited [<choice>]
  }
 }
 config USER_SASH_HISTORY boolean {
  prompt "simple (sash) history" if [USER_SASH_SH]
  depends on [USER_SASH_SH]
  default [n] if [USER_SASH_SH]
  inherited [USER_SASH_SH]
 }
 config USER_SASH_PS boolean {
  prompt "sash ps" if [USER_SASH_SH]
  depends on [USER_SASH_SH]
  default [y] if [USER_SASH_SH]
  inherited [USER_SASH_SH]
 }
 config USER_SASH_REBOOT boolean {
  prompt "reboot (sash)" if []
  config USER_SASH_REBOOT_SNAPGEAR boolean {
   prompt "SnapGear reboot script" if [USER_BUSYBOX_BUSYBOX && USER_SASH_REBOOT]
   depends on [USER_BUSYBOX_BUSYBOX && USER_SASH_REBOOT]
   select USER_BUSYBOX_KILLALL if [USER_BUSYBOX_BUSYBOX && USER_SASH_REBOOT]
   inherited [USER_BUSYBOX_BUSYBOX && USER_SASH_REBOOT]
  }
 }
 config USER_SASH_SHUTDOWN boolean {
  prompt "shutdown (sash)" if []
 }
 config USER_INIT_EXPAND boolean {
  prompt "expand" if []
  config USER_INIT_EXPAND_NOZEROES boolean {
   prompt "expand should not write zeroes" if [USER_INIT_EXPAND]
   depends on [USER_INIT_EXPAND]
   inherited [USER_INIT_EXPAND]
  }
 }
 config USER_VERSION_VERSION boolean {
  prompt "version" if []
 }
 config USER_LOGIN_LOGIN boolean {
  prompt "login" if []
 }
 config USER_OLD_PASSWORDS boolean {
  prompt "old passwords" if []
  select LIB_LIBCRYPT_OLD if []
 }
 config USER_ONLY_ROOT boolean {
  prompt "only allow root login" if []
 }
 config USER_AGETTY_AGETTY boolean {
  prompt "agetty" if []
 }
 config USER_GETTYD_GETTYD boolean {
  prompt "gettyd" if []
 }
 config USER_MGETTY_MGETTY boolean {
  prompt "mgetty" if []
 }
 config USER_LOGIN_PASSWD boolean {
  prompt "passwd" if []
 }
 config USER_CRON_CRON boolean {
  prompt "cron" if []
 }
 config USER_HWCLOCK_HWCLOCK boolean {
  prompt "hwclock" if []
 }
 config USER_RTC_M41T11 boolean {
  prompt "rtc m41t11" if []
 }
 config USER_RTC_DS1302 boolean {
  prompt "rtc ds1302" if []
 }
 config USER_USBHUBCTRL_USBHUBCTRL boolean {
  prompt "usb hub ctrl" if []
 }
 config USER_VIXIECRON_CRON boolean {
  prompt "cron" if []
 }
 config USER_VIXIECRON_CRONTAB boolean {
  prompt "crontab" if []
 }
 config USER_AT_AT boolean {
  prompt "at" if []
 }
 config USER_AT_ATD boolean {
  prompt "atd" if []
 }
 config USER_AT_ATRUN boolean {
  prompt "atrun" if []
 }
 config USER_NOOOM_NOOOM boolean {
  prompt "Build no_oom" if []
  config USER_NOOOM_BINARIES string {
   prompt "disable OOM killer for these binaries" if [USER_NOOOM_NOOOM]
   depends on [USER_NOOOM_NOOOM]
   default [""] if [USER_NOOOM_NOOOM]
   inherited [USER_NOOOM_NOOOM]
  }
 }
}
menu "Flash Tools" {
 config USER_FLASHW_FLASHW boolean {
  prompt "flashw" if []
 }
 config USER_SETMAC_SETMAC boolean {
  prompt "setmac" if []
 }
 config USER_FCONFIG_FCONFIG boolean {
  prompt "fconfig" if []
 }
 config USER_NETFLASH_NETFLASH boolean {
  prompt "netflash" if []
  config USER_NETFLASH_WITH_FTP boolean {
   prompt "netflash uses FTP" if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   depends on [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   inherited [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
  }
  config USER_NETFLASH_WITH_CGI boolean {
   prompt "netflash can run as cgi-bin" if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   depends on [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   inherited [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
  }
  config USER_NETFLASH_WITH_FILE boolean {
   prompt "netflash defaults to writing out ordinary file" if [USER_NETFLASH_NETFLASH]
   depends on [USER_NETFLASH_NETFLASH]
   inherited [USER_NETFLASH_NETFLASH]
  }
  config USER_NETFLASH_VERSION boolean {
   prompt "netflash recognises version" if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   depends on [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   inherited [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   config USER_NETFLASH_VERSION_ALLOW_CURRENT boolean {
    prompt "netflash accepts same version" if [USER_NETFLASH_VERSION]
    depends on [USER_NETFLASH_VERSION]
    inherited [USER_NETFLASH_VERSION]
   }
   config USER_NETFLASH_VERSION_ALLOW_OLDER boolean {
    prompt "netflash accepts older version" if [USER_NETFLASH_VERSION]
    depends on [USER_NETFLASH_VERSION]
    inherited [USER_NETFLASH_VERSION]
   }
  }
  config USER_NETFLASH_DECOMPRESS boolean {
   prompt "netflash can decompress" if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   depends on [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   inherited [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   config USER_NETFLASH_AUTODECOMPRESS boolean {
    prompt "netflash auto-decompresses" if [USER_NETFLASH_DECOMPRESS]
    depends on [USER_NETFLASH_DECOMPRESS]
    inherited [USER_NETFLASH_DECOMPRESS]
   }
  }
  config USER_NETFLASH_HMACMD5 boolean {
   prompt "netflash uses HMAC-MD5 signature" if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   depends on [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   inherited [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   config USER_NETFLASH_HMACMD5_KEY string {
    prompt "netflash HMAC-MD5 key" if [USER_NETFLASH_HMACMD5]
    depends on [USER_NETFLASH_HMACMD5]
    default ["HMAC-MD5 key"] if [USER_NETFLASH_HMACMD5]
    inherited [USER_NETFLASH_HMACMD5]
   }
  }
  config USER_NETFLASH_SHA256 boolean {
   prompt "netflash uses SHA256 as checksum" if [USER_NETFLASH_NETFLASH && !USER_NETFLASH_CRYPTO_V2]
   depends on [USER_NETFLASH_NETFLASH]
   depends on [!USER_NETFLASH_CRYPTO_V2]
   inherited [USER_NETFLASH_NETFLASH && !USER_NETFLASH_CRYPTO_V2]
  }
  config USER_RECOVER_BIOS boolean {
   prompt "recover bios only" if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   depends on [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   inherited [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
  }
  config USER_NETFLASH_CRYPTO boolean {
   prompt "netflash needs public key encryption" if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   depends on [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   select LIB_LIBSSL if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   inherited [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
  }
  config USER_NETFLASH_CRYPTO_V2 boolean {
   prompt "netflash supports public key encryption using SHA256 checksum" if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   depends on [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   select LIB_LIBSSL if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   select USER_NETFLASH_CRYPTO if [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
   inherited [USER_NETFLASH_NETFLASH || USER_RECOVER_RECOVER]
  }
 }
 config USER_NETFLASH_CRYPTO_OPTIONAL boolean {
  prompt "netflash optional public key encryption" if [USER_NETFLASH_CRYPTO]
  depends on [USER_NETFLASH_CRYPTO]
  inherited [USER_NETFLASH_CRYPTO]
 }
 config USER_RECOVER_STATIC_TFTP boolean {
  prompt "bootloader uses server config from flash" if []
 }
 config USER_RECOVER_RECOVER boolean {
  prompt "recover" if []
  config USER_RECOVER_ETHERNET_INTERFACE string {
   prompt "recover ethernet interface" if [USER_RECOVER_RECOVER]
   depends on [USER_RECOVER_RECOVER]
   default ["eth0"] if [USER_RECOVER_RECOVER]
   inherited [USER_RECOVER_RECOVER]
  }
 }
 config USER_RECOVER_USE_STATIC_SERVER boolean {
  prompt "recover uses static server" if [!USER_RECOVER_STATIC_TFTP]
  depends on [!USER_RECOVER_STATIC_TFTP]
  inherited [!USER_RECOVER_STATIC_TFTP]
  config USER_RECOVER_STATIC_SERVER string {
   prompt "recover static server" if [USER_RECOVER_USE_STATIC_SERVER]
   depends on [USER_RECOVER_USE_STATIC_SERVER]
   default ["0.0.0.0"] if [USER_RECOVER_USE_STATIC_SERVER]
   inherited [USER_RECOVER_USE_STATIC_SERVER]
  }
 }
 config USER_RECOVER_PRESERVE_CONFIG_FS boolean {
  prompt "recover preserves existing config" if [USER_RECOVER_RECOVER]
  depends on [USER_RECOVER_RECOVER]
  inherited [USER_RECOVER_RECOVER]
 }
 config USER_BOOTTOOLS_LOADER boolean {
  prompt "flashloader / ramloader" if []
 }
 config USER_BOOTTOOLS_HIMEMLOADER boolean {
  prompt "himemloader" if []
 }
 config USER_BOOTTOOLS_PRINTBENV boolean {
  prompt "printbenv" if []
 }
 config USER_BOOTTOOLS_SETBENV boolean {
  prompt "setbenv" if []
 }
 config USER_BOOTTOOLS_RESET boolean {
  prompt "reset" if []
 }
 config USER_BOOTTOOLS_MD5SUM boolean {
  prompt "md5sum" if []
 }
 config LIB_LIBBSC boolean {
  prompt "libbsc" if []
 }
 config USER_MTDUTILS boolean {
  prompt "mtd-utils" if []
  select LIB_ZLIB if []
  config USER_MTDUTILS_ERASE boolean {
   prompt "erase" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_ERASEALL boolean {
   prompt "eraseall" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_LOCK boolean {
   prompt "lock" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_UNLOCK boolean {
   prompt "unlock" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_FTL_CHECK boolean {
   prompt "ftl_check" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_FTL_FORMAT boolean {
   prompt "ftl_format" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_MKFSJFFS boolean {
   prompt "mkfs.jffs" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_MKFSJFFS2 boolean {
   prompt "mkfs.jffs2" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_NFTLDUMP boolean {
   prompt "nftldump" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_NFTL_FORMAT boolean {
   prompt "nftl_format" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_NANDDUMP boolean {
   prompt "nanddump" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_NANDTEST boolean {
   prompt "nandtest" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_NANDWRITE boolean {
   prompt "nandwrite" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_DOC_LOADBIOS boolean {
   prompt "doc_loadbios" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
  config USER_MTDUTILS_DOC_LOADIPL boolean {
   prompt "doc_loadipl" if [USER_MTDUTILS]
   depends on [USER_MTDUTILS]
   inherited [USER_MTDUTILS]
  }
 }
}
menu "Filesystem Applications" {
 config USER_FLATFSD_FLATFSD boolean {
  prompt "flatfsd" if []
  choice boolean {
   prompt "flatfsd storage type" if [USER_FLATFSD_FLATFSD]
   depends on [USER_FLATFSD_FLATFSD]
   default [USER_FLATFSD_AUTO] if [USER_FLATFSD_FLATFSD]
   config USER_FLATFSD_AUTO boolean {
    prompt "auto" if [<choice>]
    inherited [<choice>]
   }
   config USER_FLATFSD_USE_FLASH_FS boolean {
    prompt "filesystem" if [<choice>]
    inherited [<choice>]
   }
   config USER_FLATFSD_DISKLIKE boolean {
    prompt "disk like" if [<choice>]
    inherited [<choice>]
   }
   config USER_FLATFSD_CONFIG_BLOBS boolean {
    prompt "file blobs" if [<choice>]
    inherited [<choice>]
   }
  }
  config USER_FLATFSD_COMPRESSED boolean {
   prompt "Compress /etc/config to flash as required" if [USER_FLATFSD_FLATFSD]
   depends on [USER_FLATFSD_FLATFSD]
   inherited [USER_FLATFSD_FLATFSD]
  }
  config USER_FLATFSD_ENCRYPTED boolean {
   prompt "Encrypt /etc/config to flash as required" if [USER_FLATFSD_FLATFSD]
   depends on [USER_FLATFSD_FLATFSD]
   inherited [USER_FLATFSD_FLATFSD]
  }
  config USER_FLATFSD_HAS_RTC boolean {
   prompt "Device has Real Time Clock" if [USER_FLATFSD_FLATFSD]
   depends on [USER_FLATFSD_FLATFSD]
   inherited [USER_FLATFSD_FLATFSD]
  }
  config USER_FLATFSD_EXTERNAL_INIT boolean {
   prompt "External init" if [USER_FLATFSD_FLATFSD]
   depends on [USER_FLATFSD_FLATFSD]
   inherited [USER_FLATFSD_FLATFSD]
  }
 }
 config USER_MOUNT_MOUNT boolean {
  prompt "mount" if []
 }
 config USER_MOUNT_UMOUNT boolean {
  prompt "umount" if []
 }
 config USER_FDISK_FDISK boolean {
  prompt "fdisk" if []
 }
 config USER_FDISK_SFDISK boolean {
  prompt "sfdisk" if []
 }
 config USER_HDPARM_HDPARM boolean {
  prompt "hdparm" if []
 }
 config USER_E2FSPROGS_E2FSCK_E2FSCK boolean {
  prompt "e2fsck" if []
 }
 config USER_E2FSPROGS_MISC_MKE2FS boolean {
  prompt "mke2fs" if []
 }
 config USER_E2FSPROGS_MISC_BADBLOCKS boolean {
  prompt "badblocks" if []
 }
 config USER_E2FSPROGS_MISC_CHATTR boolean {
  prompt "chattr" if []
 }
 config USER_E2FSPROGS_MISC_DUMPE2FS boolean {
  prompt "dumpe2fs" if []
 }
 config USER_E2FSPROGS_MISC_E2LABEL boolean {
  prompt "e2label" if []
 }
 config USER_E2FSPROGS_MISC_FSCK boolean {
  prompt "fsck" if []
 }
 config USER_E2FSPROGS_MISC_LSATTR boolean {
  prompt "lsattr" if []
 }
 config USER_E2FSPROGS_MISC_MKLOST_FOUND boolean {
  prompt "mklost+found" if []
 }
 config USER_E2FSPROGS_MISC_TUNE2FS boolean {
  prompt "tune2fs" if []
 }
 config USER_E2FSPROGS_MISC_UUIDGEN boolean {
  prompt "uuidgen" if []
 }
 config USER_REISERFSPROGS boolean {
  prompt "reiserfsprogs" if []
 }
 config USER_REISERFSPROGS_DEBUGRESIERFS boolean {
  prompt "debugreiserfs" if []
 }
 config USER_REISERFSPROGS_MKREISERFS boolean {
  prompt "mkreiserfs" if []
 }
 config USER_REISERFSPROGS_REISERFSCK boolean {
  prompt "reiserfsck" if []
 }
 config USER_REISERFSPROGS_RESIZE_REISERFS boolean {
  prompt "resize_reiserfs" if []
 }
 config USER_REISERFSPROGS_UNPACK boolean {
  prompt "unpack" if []
 }
 config USER_SAMBA boolean {
  prompt "samba" if []
  config USER_SAMBA_SMBD boolean {
   prompt "smbd" if [USER_SAMBA]
   depends on [USER_SAMBA]
   inherited [USER_SAMBA]
  }
  config USER_SAMBA_NMBD boolean {
   prompt "nmbd" if [USER_SAMBA]
   depends on [USER_SAMBA]
   inherited [USER_SAMBA]
  }
  config USER_SAMBA_SMBMOUNT boolean {
   prompt "smbmount" if [USER_SAMBA]
   depends on [USER_SAMBA]
   inherited [USER_SAMBA]
  }
  config USER_SAMBA_SMBUMOUNT boolean {
   prompt "smbumount" if [USER_SAMBA]
   depends on [USER_SAMBA]
   inherited [USER_SAMBA]
  }
  config USER_SAMBA_MOUNT_CIFS boolean {
   prompt "mount.cifs" if [USER_SAMBA]
   depends on [USER_SAMBA]
   inherited [USER_SAMBA]
  }
  config USER_SAMBA_UMOUNT_CIFS boolean {
   prompt "umount.cifs" if [USER_SAMBA]
   depends on [USER_SAMBA]
   inherited [USER_SAMBA]
  }
  config USER_SAMBA_SHARED boolean {
   prompt "uses shared library" if [USER_SAMBA]
   depends on [USER_SAMBA]
   inherited [USER_SAMBA]
  }
 }
 config USER_SMBMOUNT_SMBMOUNT boolean {
  prompt "smbmount" if []
 }
 config USER_SMBMOUNT_SMBUMOUNT boolean {
  prompt "smbumount" if []
 }
 config USER_CRAMFS_CRAMFSCK boolean {
  prompt "cramfsck" if []
  select LIB_ZLIB if []
  config USER_CRAMFS_TEST boolean {
   prompt "Various extra tests on the cramfs" if [USER_CRAMFS_CRAMFSCK]
   depends on [USER_CRAMFS_CRAMFSCK]
   inherited [USER_CRAMFS_CRAMFSCK]
  }
 }
 config USER_CRAMFS_MKCRAMFS boolean {
  prompt "mkcramfs" if []
 }
 config USER_DOSFSTOOLS_MKDOSFS boolean {
  prompt "mkdosfs" if []
 }
 config USER_DOSFSTOOLS_DOSFSCK boolean {
  prompt "dosfsck" if []
 }
 config USER_DOSFSTOOLS_DOSFSLABEL boolean {
  prompt "dosfslabel" if []
 }
 config USER_SQUASHFS_MKSQUASHFS boolean {
  prompt "mksquashfs" if []
  select LIB_ZLIB if []
 }
 config USER_SQUASHFS_MKSQUASHFS7Z boolean {
  prompt "mksquashfs7z" if []
  select LIB_LIBLZMA if []
 }
}
menu "Network Applications" {
 config USER_APPWEB_APPWEB boolean {
  prompt "appWeb" if []
  config USER_APPWEB_CGI boolean {
   prompt "AppWeb supports CGI" if [USER_APPWEB_APPWEB]
   depends on [USER_APPWEB_APPWEB]
   inherited [USER_APPWEB_APPWEB]
  }
  config USER_APPWEB_SSL boolean {
   prompt "AppWeb supports SSL" if [USER_APPWEB_APPWEB]
   depends on [USER_APPWEB_APPWEB]
   select LIB_LIBSSL if [USER_APPWEB_APPWEB]
   inherited [USER_APPWEB_APPWEB]
  }
  config USER_APPWEB_MULTITHREAD boolean {
   prompt "AppWeb is multithreaded" if [USER_APPWEB_APPWEB]
   depends on [USER_APPWEB_APPWEB]
   inherited [USER_APPWEB_APPWEB]
  }
  config USER_APPWEB_DYNAMIC boolean {
   prompt "AppWeb can dynamically load AppWeb modules" if [USER_APPWEB_APPWEB]
   depends on [USER_APPWEB_APPWEB]
   inherited [USER_APPWEB_APPWEB]
  }
 }
 config USER_ASTERISK boolean {
  prompt "asterisk PBX" if []
  select LIB_PWLIB if []
  select LIB_LIBOPENH323 if []
  select LIB_STLPORT if []
  select LIB_STLPORT_SHARED if []
  select LIB_EXPAT if []
  config USER_ASTERISK_MYSQL boolean {
   prompt "asterisk MySQL module" if [USER_ASTERISK]
   depends on [USER_ASTERISK]
   select USER_MYSQL_CLIB if [USER_ASTERISK]
   inherited [USER_ASTERISK]
  }
 }
 config USER_TRUSTEDSOURCE boolean {
  prompt "antispam - trusted source" if []
  select USER_CLAMAV_CLAMSMTP if []
 }
 config USER_BIND_BIND boolean {
  prompt "bind" if []
 }
 config USER_FNORD_HTTPD boolean {
  prompt "fnord web server" if []
  config USER_FNORD_NOAUTH boolean {
   prompt "fnord does not do auth" if [USER_FNORD_HTTPD]
   depends on [USER_FNORD_HTTPD]
   inherited [USER_FNORD_HTTPD]
  }
 }
 config USER_FNORD_PAM boolean {
  prompt "fnord uses PAM for auth" if [!USER_FNORD_NOAUTH]
  depends on [!USER_FNORD_NOAUTH]
  select LIB_LIBPAM if [!USER_FNORD_NOAUTH]
  inherited [!USER_FNORD_NOAUTH]
 }
 config USER_FNORD_404_REDIR boolean {
  prompt "fnord 404 redirect" if [USER_FNORD_HTTPD]
  depends on [USER_FNORD_HTTPD]
  inherited [USER_FNORD_HTTPD]
 }
 config USER_BOA_SRC_BOA boolean {
  prompt "boa" if []
  config USER_BOA_WITH_SSL boolean {
   prompt "boa uses SSL" if [USER_BOA_SRC_BOA]
   depends on [USER_BOA_SRC_BOA]
   select LIB_LIBSSL if [USER_BOA_SRC_BOA]
   inherited [USER_BOA_SRC_BOA]
  }
  config USER_BOA_EMERG boolean {
   prompt "emergency syslog" if [USER_BOA_SRC_BOA]
   depends on [USER_BOA_SRC_BOA]
   inherited [USER_BOA_SRC_BOA]
  }
  config USER_BOA_LOGGING boolean {
   prompt "enable log files" if [USER_BOA_SRC_BOA]
   depends on [USER_BOA_SRC_BOA]
   inherited [USER_BOA_SRC_BOA]
  }
 }
 config USER_BPALOGIN_BPALOGIN boolean {
  prompt "bpalogin" if []
 }
 config USER_BR2684CTL_BR2684CTL boolean {
  prompt "br2684ctl" if []
  select LIB_LIBATM if []
 }
 config USER_BRCFG_BRCFG boolean {
  prompt "brcfg" if []
 }
 config USER_BRCTL_BRCTL boolean {
  prompt "bridge utils" if []
 }
 config USER_CLAMAV_CLAMAV boolean {
  prompt "clamav" if []
  select LIB_LIBBZ2 if []
  select LIB_ZLIB if []
  select LIB_LIBSSL if []
  config USER_CLAMAV_CLAMD boolean {
   prompt "clamd" if [USER_CLAMAV_CLAMAV]
   depends on [USER_CLAMAV_CLAMAV]
   inherited [USER_CLAMAV_CLAMAV]
  }
  config USER_CLAMAV_CLAMDSCAN boolean {
   prompt "clamdscan" if [USER_CLAMAV_CLAMAV]
   depends on [USER_CLAMAV_CLAMAV]
   inherited [USER_CLAMAV_CLAMAV]
  }
  config USER_CLAMAV_CLAMSCAN boolean {
   prompt "clamscan" if [USER_CLAMAV_CLAMAV]
   depends on [USER_CLAMAV_CLAMAV]
   inherited [USER_CLAMAV_CLAMAV]
  }
  config USER_CLAMAV_FRESHCLAM boolean {
   prompt "freshclam" if [USER_CLAMAV_CLAMAV]
   depends on [USER_CLAMAV_CLAMAV]
   inherited [USER_CLAMAV_CLAMAV]
   config USER_CLAMAV_NODB boolean {
    prompt "do not install db files" if [USER_CLAMAV_FRESHCLAM]
    depends on [USER_CLAMAV_FRESHCLAM]
    inherited [USER_CLAMAV_FRESHCLAM]
   }
  }
  config USER_CLAMAV_SIGTOOL boolean {
   prompt "sigtool" if [USER_CLAMAV_CLAMAV]
   depends on [USER_CLAMAV_CLAMAV]
   inherited [USER_CLAMAV_CLAMAV]
  }
  config USER_CLAMAV_TESTS boolean {
   prompt "clamav tests" if [USER_CLAMAV_CLAMAV]
   depends on [USER_CLAMAV_CLAMAV]
   inherited [USER_CLAMAV_CLAMAV]
  }
 }
 config USER_CLAMAV_CLAMSMTP boolean {
  prompt "clamsmtp" if []
 }
 config USER_CONNTRACK_CONNTRACK boolean {
  prompt "conntrack" if []
  select LIB_NFNETLINK if []
  select LIB_NETFILTER_CONNTRACK if []
 }
 config USER_CTORRENT_CTORRENT boolean {
  prompt "ctorrent" if []
 }
 config USER_DHCPCD_DHCPCD boolean {
  prompt "dhcpcd" if []
  config USER_DHCPCD_LLIP boolean {
   prompt "dhcpcd link-local support" if [USER_DHCPCD_DHCPCD]
   depends on [USER_DHCPCD_DHCPCD]
   inherited [USER_DHCPCD_DHCPCD]
  }
 }
 config USER_DHCPCD_NEW_DHCPCD boolean {
  prompt "dhcpcd-new (2.0/2.4)" if []
 }
 config USER_DHCPD_DHCPD boolean {
  prompt "dhcpd" if []
 }
 config USER_DHCP_ISC_SERVER_DHCPD boolean {
  prompt "dhcpd(ISC)" if []
 }
 config USER_DHCP_ISC_CLIENT_DHCLIENT boolean {
  prompt "dhclient(ISC)" if []
 }
 config USER_DHCP_ISC_RELAY_DHCRELAY boolean {
  prompt "dhcrelay (ISC)" if []
 }
 config USER_DIALD_DIALD boolean {
  prompt "diald" if []
 }
 config USER_DISCARD_DISCARD boolean {
  prompt "discard" if []
  config USER_DISCARD_NO_INSTALL boolean {
   prompt "Do not auto install discard" if [USER_DISCARD_DISCARD]
   depends on [USER_DISCARD_DISCARD]
   inherited [USER_DISCARD_DISCARD]
  }
 }
 config USER_DISCARD_INETD_ECHO boolean {
  prompt "inetd-echo" if []
  config USER_DISCARD_ECHO_NO_INSTALL boolean {
   prompt "Do not auto install echo" if [USER_DISCARD_INETD_ECHO]
   depends on [USER_DISCARD_INETD_ECHO]
   inherited [USER_DISCARD_INETD_ECHO]
  }
 }
 config USER_DNSMASQ_DNSMASQ boolean {
  prompt "dnsmasq" if []
  config USER_DNSMASQ2_DNSMASQ2 boolean {
   prompt "Build dnsmasq v2 instead of v1" if [USER_DNSMASQ_DNSMASQ]
   depends on [USER_DNSMASQ_DNSMASQ]
   inherited [USER_DNSMASQ_DNSMASQ]
   config USER_DNSMASQ2_RESOLVE_AS_SERVER boolean {
    prompt "Add 'resolve as server IP' feature" if [USER_DNSMASQ2_DNSMASQ2]
    depends on [USER_DNSMASQ2_DNSMASQ2]
    inherited [USER_DNSMASQ2_DNSMASQ2]
   }
  }
 }
 config USER_DROPBEAR_DROPBEAR boolean {
  prompt "dropbear" if [USER_INETD_INETD]
  depends on [USER_INETD_INETD]
  select LIB_ZLIB if [USER_INETD_INETD]
  inherited [USER_INETD_INETD]
 }
 config USER_ETHATTACH_ETHATTACH boolean {
  prompt "ethattach" if []
  select LIB_LIBNETOLD if []
 }
 config USER_ETHERWAKE boolean {
  prompt "etherwake" if []
 }
 config USER_ETHTOOL_ETHTOOL boolean {
  prompt "ethtool" if []
 }
 config USER_EZIPUPDATE_EZIPUPDATE boolean {
  prompt "ez-ipupdate" if []
 }
 config USER_FAKEIDENTD_IDENTD boolean {
  prompt "fakeidentd" if []
 }
 config USER_DDNS3_CLIENT_DDNS3 boolean {
  prompt "ddns3 client" if []
 }
 config USER_EBTABLES_EBTABLES boolean {
  prompt "Ethernet bridge frame table administration" if []
 }
 config USER_FERRET_FERRET boolean {
  prompt "ferret" if []
  select LIB_LIBPCAP if []
 }
 config USER_FTP_FTP_FTP boolean {
  prompt "ftp" if []
 }
 config USER_FTPD_FTPD boolean {
  prompt "ftpd" if []
 }
 config USER_FROX_FROX boolean {
  prompt "frox" if []
 }
 config USER_FREESWAN boolean {
  prompt "freeswan-apps" if []
  config USER_IPSEC_KEEPALIVE boolean {
   prompt "ipsec keep alive" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
  config USER_FREESWAN_PLUTO_PLUTO boolean {
   prompt "pluto" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   select LIB_LIBGMP if [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
  config USER_FREESWAN_PLUTO_WHACK boolean {
   prompt "whack" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
  config USER_FREESWAN_UTILS_RANBITS boolean {
   prompt "ranbits" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
  config USER_FREESWAN_UTILS_RSASIGKEY boolean {
   prompt "rsasigkey" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   select LIB_LIBGMP if [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
  config USER_FREESWAN_KLIPS_EROUTE boolean {
   prompt "eroute" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
  config USER_FREESWAN_KLIPS_KLIPSDEBUG boolean {
   prompt "klipsdebug" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
  config USER_FREESWAN_KLIPS_SPI boolean {
   prompt "spi" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
  config USER_FREESWAN_KLIPS_SPIGRP boolean {
   prompt "spigrp" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
  config USER_FREESWAN_KLIPS_TNCFG boolean {
   prompt "tncfg" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
  config USER_FSWCERT_FSWCERT boolean {
   prompt "fswcert" if [USER_FREESWAN]
   depends on [USER_FREESWAN]
   select LIB_LIBSSL if [USER_FREESWAN]
   inherited [USER_FREESWAN]
  }
 }
 config USER_OPENSWAN boolean {
  prompt "openswan-apps" if []
  config USER_OPENSWAN_PLUTO_PLUTO boolean {
   prompt "pluto" if [USER_OPENSWAN]
   depends on [USER_OPENSWAN]
   select LIB_LIBGMP if [USER_OPENSWAN]
   inherited [USER_OPENSWAN]
  }
  config USER_OPENSWAN_PLUTO_WHACK boolean {
   prompt "whack" if [USER_OPENSWAN]
   depends on [USER_OPENSWAN]
   inherited [USER_OPENSWAN]
  }
  config USER_OPENSWAN_UTILS_RANBITS boolean {
   prompt "ranbits" if [USER_OPENSWAN]
   depends on [USER_OPENSWAN]
   inherited [USER_OPENSWAN]
  }
  config USER_OPENSWAN_UTILS_RSASIGKEY boolean {
   prompt "rsasigkey" if [USER_OPENSWAN]
   depends on [USER_OPENSWAN]
   select LIB_LIBGMP if [USER_OPENSWAN]
   inherited [USER_OPENSWAN]
  }
  config USER_OPENSWAN_KLIPS_EROUTE boolean {
   prompt "eroute" if [USER_OPENSWAN]
   depends on [USER_OPENSWAN]
   inherited [USER_OPENSWAN]
  }
  config USER_OPENSWAN_KLIPS_KLIPSDEBUG boolean {
   prompt "klipsdebug" if [USER_OPENSWAN]
   depends on [USER_OPENSWAN]
   inherited [USER_OPENSWAN]
  }
  config USER_OPENSWAN_KLIPS_SPI boolean {
   prompt "spi" if [USER_OPENSWAN]
   depends on [USER_OPENSWAN]
   inherited [USER_OPENSWAN]
  }
  config USER_OPENSWAN_KLIPS_SPIGRP boolean {
   prompt "spigrp" if [USER_OPENSWAN]
   depends on [USER_OPENSWAN]
   inherited [USER_OPENSWAN]
  }
  config USER_OPENSWAN_KLIPS_TNCFG boolean {
   prompt "tncfg" if [USER_OPENSWAN]
   depends on [USER_OPENSWAN]
   inherited [USER_OPENSWAN]
  }
  config USER_OPENSWAN_PROGRAMS_LWDNSQ boolean {
   prompt "lwdnsq (required)" if [USER_OPENSWAN]
   default [y] if [USER_OPENSWAN]
   depends on [USER_OPENSWAN]
   inherited [USER_OPENSWAN]
  }
  config IPSEC_CONNECTION_LIMIT_BOOL boolean {
   prompt "Enable IPSec tunnel limit" if [USER_FREESWAN || USER_OPENSWAN]
   depends on [USER_FREESWAN || USER_OPENSWAN]
   inherited [USER_FREESWAN || USER_OPENSWAN]
   config IPSEC_CONNECTION_LIMIT integer {
    prompt "IPSec tunnel limit" if [IPSEC_CONNECTION_LIMIT_BOOL]
    depends on [IPSEC_CONNECTION_LIMIT_BOOL]
    inherited [IPSEC_CONNECTION_LIMIT_BOOL]
   }
  }
 }
 config USER_GNUGK_GNUGK boolean {
  prompt "gnugk" if []
  select LIB_PWLIB if []
  select LIB_LIBOPENH323 if []
 }
 config USER_HPING_HPING boolean {
  prompt "hping" if []
 }
 config USER_HTTPD_HTTPD boolean {
  prompt "httpd" if []
 }
 config USER_HTTPTUNNEL_CLIENT boolean {
  prompt "http tunnel client" if []
 }
 config USER_HTTPTUNNEL_SERVER boolean {
  prompt "http tunnel server" if []
 }
 config USER_IFATTACH_IFATTACH boolean {
  prompt "ifattach" if []
  select LIB_LIBNETOLD if []
 }
 config USER_INETD_INETD boolean {
  prompt "inetd" if []
 }
 config USER_IPCHAINS_IPCHAINS boolean {
  prompt "ipchains" if []
 }
 config USER_IPERF_IPERF boolean {
  prompt "iperf" if []
 }
 config USER_IPFWADM_IPFWADM boolean {
  prompt "ipfwadm" if []
 }
 config USER_IPMASQADM_IPMASQADM boolean {
  prompt "ipmasqadm" if []
 }
 config USER_IPPORTFW_IPPORTFW boolean {
  prompt "ipportfw" if []
 }
 config USER_IPREDIR_IPREDIR boolean {
  prompt "ipredir" if []
 }
 config USER_IPROUTE2 boolean {
  prompt "iproute2" if []
  config USER_IPROUTE2_TC_TC boolean {
   prompt "tc" if [USER_IPROUTE2]
   depends on [USER_IPROUTE2]
   inherited [USER_IPROUTE2]
  }
  config USER_IPROUTE2_IP_IFCFG boolean {
   prompt "ifcfg (complex scripting reqd.)" if [USER_IPROUTE2]
   depends on [USER_IPROUTE2]
   inherited [USER_IPROUTE2]
  }
  config USER_IPROUTE2_IP_IP boolean {
   prompt "ip" if [USER_IPROUTE2]
   depends on [USER_IPROUTE2]
   inherited [USER_IPROUTE2]
  }
  config USER_IPROUTE2_IP_ROUTEF boolean {
   prompt "routef" if [USER_IPROUTE2]
   depends on [USER_IPROUTE2]
   inherited [USER_IPROUTE2]
  }
  config USER_IPROUTE2_IP_ROUTEL boolean {
   prompt "routel" if [USER_IPROUTE2]
   depends on [USER_IPROUTE2]
   inherited [USER_IPROUTE2]
  }
  config USER_IPROUTE2_IP_RTACCT boolean {
   prompt "rtacct" if [USER_IPROUTE2]
   depends on [USER_IPROUTE2]
   inherited [USER_IPROUTE2]
  }
  config USER_IPROUTE2_IP_RTMON boolean {
   prompt "rtmon" if [USER_IPROUTE2]
   depends on [USER_IPROUTE2]
   inherited [USER_IPROUTE2]
  }
  config USER_IPROUTE2_IP_GENL boolean {
   prompt "genl" if [USER_IPROUTE2]
   depends on [USER_IPROUTE2]
   inherited [USER_IPROUTE2]
  }
 }
 config USER_IPROUTE2_IP_RTPR boolean {
  prompt "rtpr" if [USER_BUSYBOX_TR && USER_BASH_BASH]
  depends on [USER_BUSYBOX_TR && USER_BASH_BASH]
  inherited [USER_BUSYBOX_TR && USER_BASH_BASH]
 }
 config USER_IPSENTINEL_IPSENTINEL boolean {
  prompt "ipsentinel" if []
 }
 config USER_IPSET_IPSET boolean {
  prompt "ipset" if []
 }
 config USER_IPTABLES_IPTABLES boolean {
  prompt "iptables" if []
  config USER_LAYER7_PROTOCOLS boolean {
   prompt "layer7 protocol definitions" if [USER_IPTABLES_IPTABLES]
   depends on [USER_IPTABLES_IPTABLES]
   inherited [USER_IPTABLES_IPTABLES]
  }
 }
 config USER_IPTABLES_IP6TABLES boolean {
  prompt "ip6tables" if []
 }
 config USER_IPUTILS_IPUTILS boolean {
  prompt "iputils apps" if []
  config USER_IPUTILS_PING boolean {
   prompt "ping" if [USER_IPUTILS_IPUTILS]
   depends on [USER_IPUTILS_IPUTILS]
   inherited [USER_IPUTILS_IPUTILS]
  }
  config USER_IPUTILS_PING6 boolean {
   prompt "ping6" if [USER_IPUTILS_IPUTILS]
   depends on [USER_IPUTILS_IPUTILS]
   inherited [USER_IPUTILS_IPUTILS]
  }
  config USER_IPUTILS_TRACEROUTE6 boolean {
   prompt "traceroute6" if [USER_IPUTILS_IPUTILS]
   depends on [USER_IPUTILS_IPUTILS]
   inherited [USER_IPUTILS_IPUTILS]
  }
  config USER_IPUTILS_RDISC boolean {
   prompt "rdisc" if [USER_IPUTILS_IPUTILS]
   depends on [USER_IPUTILS_IPUTILS]
   inherited [USER_IPUTILS_IPUTILS]
  }
  config USER_IPUTILS_CLOCKDIFF boolean {
   prompt "clockdiff" if [USER_IPUTILS_IPUTILS]
   depends on [USER_IPUTILS_IPUTILS]
   inherited [USER_IPUTILS_IPUTILS]
  }
  config USER_IPUTILS_TFTPD boolean {
   prompt "tftpd" if [USER_IPUTILS_IPUTILS]
   depends on [USER_IPUTILS_IPUTILS]
   inherited [USER_IPUTILS_IPUTILS]
  }
  config USER_IPUTILS_TRACEPATH boolean {
   prompt "tracepath" if [USER_IPUTILS_IPUTILS]
   depends on [USER_IPUTILS_IPUTILS]
   inherited [USER_IPUTILS_IPUTILS]
  }
  config USER_IPUTILS_TRACEPATH6 boolean {
   prompt "tracepath6" if [USER_IPUTILS_IPUTILS]
   depends on [USER_IPUTILS_IPUTILS]
   inherited [USER_IPUTILS_IPUTILS]
  }
  config USER_IPUTILS_ARPING boolean {
   prompt "arping" if [USER_IPUTILS_IPUTILS]
   depends on [USER_IPUTILS_IPUTILS]
   inherited [USER_IPUTILS_IPUTILS]
  }
  config USER_IPUTILS_RARPD boolean {
   prompt "rarpd" if [USER_IPUTILS_IPUTILS]
   depends on [USER_IPUTILS_IPUTILS]
   inherited [USER_IPUTILS_IPUTILS]
  }
 }
 config USER_KENDIN_CONFIG boolean {
  prompt "kendin-config" if []
 }
 config USER_KLAXON_KLAXON boolean {
  prompt "klaxon" if []
  config USER_KLAXON_RFC931 boolean {
   prompt "use RFC931" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
  config USER_KLAXON_CHARGEN boolean {
   prompt "detect chargen" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
  config USER_KLAXON_DISCARD boolean {
   prompt "detect discard" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
  config USER_KLAXON_ECHO boolean {
   prompt "detect echo" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
  config USER_KLAXON_FTP boolean {
   prompt "detect ftp" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
  config USER_KLAXON_HTTP boolean {
   prompt "detect http" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
  config USER_KLAXON_SMTP boolean {
   prompt "detect smtp" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
  config USER_KLAXON_SNMP boolean {
   prompt "detect snmp" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
  config USER_KLAXON_SSH boolean {
   prompt "detect ssh" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
  config USER_KLAXON_TELNET boolean {
   prompt "detect telnet" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
  config USER_KLAXON_TFTP boolean {
   prompt "detect tftp" if [USER_KLAXON_KLAXON]
   depends on [USER_KLAXON_KLAXON]
   inherited [USER_KLAXON_KLAXON]
  }
 }
 config USER_LANBYPASS_LANBYPASS boolean {
  prompt "lanbypass" if []
 }
 config USER_L2TPD_L2TPD boolean {
  prompt "l2tpd" if []
 }
 config USER_LINUXIGD_LINUXIGD boolean {
  prompt "linux-igd" if []
  select LIB_LIBUPNP if []
  config USER_LINUXIGD_DEFAULT boolean {
   prompt "use default configuration" if [USER_LINUXIGD_LINUXIGD]
   depends on [USER_LINUXIGD_LINUXIGD]
   inherited [USER_LINUXIGD_LINUXIGD]
  }
 }
 config USER_MINIUPNPD boolean {
  prompt "miniupnpd" if []
 }
 config USER_LOATTACH_LOATTACH boolean {
  prompt "loattach" if []
  select LIB_LIBNETOLD if []
 }
 config USER_LRPSTAT_LRPSTAT boolean {
  prompt "lrpstat" if []
 }
 config USER_SMTP_SMTPCLIENT boolean {
  prompt "mail" if []
 }
 config USER_MAIL_MAIL_IP boolean {
  prompt "mail_ip" if []
 }
 config USER_MARADNS_MARADNS boolean {
  prompt "maradns" if []
 }
 config USER_MINI_HTTPD_MINI_HTTPD boolean {
  prompt "mini_httpd" if []
  config USER_MINI_HTTPD_WITH_SSL boolean {
   prompt "mini_httpd uses SSL" if [USER_MINI_HTTPD_MINI_HTTPD]
   depends on [USER_MINI_HTTPD_MINI_HTTPD]
   select LIB_LIBSSL if [USER_MINI_HTTPD_MINI_HTTPD]
   inherited [USER_MINI_HTTPD_MINI_HTTPD]
  }
 }
 config USER_MSNTP_MSNTP boolean {
  prompt "msntp" if []
 }
 config USER_NESSUS boolean {
  prompt "nessus" if []
  select USER_NESSUS_NASL if []
  select USER_NESSUS_CORE if []
  select USER_NESSUS_PLUGINS if []
 }
 config USER_NESSUS_NASL boolean {
  prompt "nasl" if []
  select USER_NESSUS_LIBRARIES if []
  select LIB_LIBPCAP if []
 }
 config USER_NESSUS_CORE boolean {
  default [n] if []
 }
 config USER_NESSUS_PLUGINS boolean {
  default [n] if []
 }
 config USER_NESSUS_LIBRARIES boolean {
  default [n] if []
 }
 config USER_NETCAT_NETCAT boolean {
  prompt "netcat" if []
 }
 config USER_NETPERF_NETPERF boolean {
  prompt "netperf" if []
 }
 config USER_NETPERF_NETSERVER boolean {
  prompt "netserver" if []
 }
 config USER_NETPIPE_NETPIPE boolean {
  prompt "netpipe" if []
 }
 config USER_NETSTAT_NAT_NETSTAT_NAT boolean {
  prompt "netstat-nat" if []
 }
 config USER_NETSNMP_SNMPD boolean {
  prompt "net-snmp" if []
  config USER_NETSNMP_SNMPD_MINI boolean {
   prompt "Build mini agent" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
  }
  config USER_NETSNMP_APPS boolean {
   prompt "Build Applications" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
   config USER_NETSNMP_APPS_BULKGET boolean {
    prompt "snmpbulkget" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_BULKWALK boolean {
    prompt "snmpbulkwalk" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_DELTA boolean {
    prompt "snmpdelta" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_DF boolean {
    prompt "snmpdf" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_GET boolean {
    prompt "snmpget" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_GETNEXT boolean {
    prompt "snmpgetnext" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_SET boolean {
    prompt "snmpset" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_STATUS boolean {
    prompt "snmpstatus" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_TABLE boolean {
    prompt "snmptable" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_TEST boolean {
    prompt "snmptest" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_TRANSLATE boolean {
    prompt "snmptranslate" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_TRAP boolean {
    prompt "snmptrap" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_TRAPD boolean {
    prompt "snmptrapd" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_USM boolean {
    prompt "snmpusm" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_VACM boolean {
    prompt "snmpvacm" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_WALK boolean {
    prompt "snmpwalk" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
   config USER_NETSNMP_APPS_NETSTAT boolean {
    prompt "snmpnetstat" if [USER_NETSNMP_APPS]
    depends on [USER_NETSNMP_APPS]
    inherited [USER_NETSNMP_APPS]
   }
  }
  config USER_NETSNMP_BUILDSTATIC boolean {
   prompt "Build static" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
  }
  config USER_NETSNMP_MANUALS boolean {
   prompt "Install manuals" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
  }
  config USER_NETSNMP_SCRIPTS boolean {
   prompt "Install scripts" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
  }
  config USER_NETSNMP_MIBS boolean {
   prompt "Install MIBs" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
   config USER_NETSNMP_MIBLOADING boolean {
    prompt "Enable MIB loading" if [USER_NETSNMP_MIBS]
    depends on [USER_NETSNMP_MIBS]
    inherited [USER_NETSNMP_MIBS]
   }
  }
  config USER_NETSNMP_NOV1 boolean {
   prompt "Disable SNMP v1" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
  }
  config USER_NETSNMP_NOV2C boolean {
   prompt "Disable SNMP v2c" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
  }
  config USER_NETSNMP_IPV6 boolean {
   prompt "IPv6 support" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
  }
  config USER_NETSNMP_NOTRANSPORTS boolean {
   prompt "Exclude transports" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
   config USER_NETSNMP_EXTRANSPORTS string {
    prompt "Exclude Transports" if [USER_NETSNMP_NOTRANSPORTS]
    depends on [USER_NETSNMP_NOTRANSPORTS]
    default ["TCP"] if [USER_NETSNMP_NOTRANSPORTS]
    inherited [USER_NETSNMP_NOTRANSPORTS]
   }
  }
  config USER_NETSNMP_OPENSSL boolean {
   prompt "With OpenSSL" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
  }
  config USER_NETSNMP_OVRDEFAULTS boolean {
   prompt "Override defaults" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
   config USER_NETSNMP_DEFVERSION string {
    prompt "Default version" if [USER_NETSNMP_OVRDEFAULTS]
    depends on [USER_NETSNMP_OVRDEFAULTS]
    default ["3"] if [USER_NETSNMP_OVRDEFAULTS]
    inherited [USER_NETSNMP_OVRDEFAULTS]
   }
   config USER_NETSNMP_DEFSYSCONTACT string {
    prompt "Default Sys Contact" if [USER_NETSNMP_OVRDEFAULTS]
    depends on [USER_NETSNMP_OVRDEFAULTS]
    default ["unknown"] if [USER_NETSNMP_OVRDEFAULTS]
    inherited [USER_NETSNMP_OVRDEFAULTS]
   }
   config USER_NETSNMP_DEFSYSLOCATION string {
    prompt "Default Sys Location" if [USER_NETSNMP_OVRDEFAULTS]
    depends on [USER_NETSNMP_OVRDEFAULTS]
    default ["unknown"] if [USER_NETSNMP_OVRDEFAULTS]
    inherited [USER_NETSNMP_OVRDEFAULTS]
   }
   config USER_NETSNMP_DEFLOGFILE string {
    prompt "Default Log file" if [USER_NETSNMP_OVRDEFAULTS]
    depends on [USER_NETSNMP_OVRDEFAULTS]
    default ["/var/log/snmp.log"] if [USER_NETSNMP_OVRDEFAULTS]
    inherited [USER_NETSNMP_OVRDEFAULTS]
   }
   config USER_NETSNMP_DEFPERSISDIR string {
    prompt "Default Persistent Directory " if [USER_NETSNMP_OVRDEFAULTS]
    depends on [USER_NETSNMP_OVRDEFAULTS]
    default ["/var/net-snmp"] if [USER_NETSNMP_OVRDEFAULTS]
    inherited [USER_NETSNMP_OVRDEFAULTS]
   }
   config USER_NETSNMP_DEFENTERPRISEOID string {
    prompt "Enterprise OID" if [USER_NETSNMP_OVRDEFAULTS]
    depends on [USER_NETSNMP_OVRDEFAULTS]
    default ["8072"] if [USER_NETSNMP_OVRDEFAULTS]
    inherited [USER_NETSNMP_OVRDEFAULTS]
   }
  }
  config USER_NETSNMP_ADDMIBS boolean {
   prompt "Additional MIBS" if [USER_NETSNMP_SNMPD]
   depends on [USER_NETSNMP_SNMPD]
   inherited [USER_NETSNMP_SNMPD]
   config USER_NETSNMP_ADDITIONALMIBS string {
    prompt "Additional MIBS" if [USER_NETSNMP_ADDMIBS]
    depends on [USER_NETSNMP_ADDMIBS]
    default [""] if [USER_NETSNMP_ADDMIBS]
    inherited [USER_NETSNMP_ADDMIBS]
   }
  }
 }
 config USER_MARADNS_ZONESERVER boolean {
  prompt "zoneserver" if []
 }
 config USER_NMAP_NMAP boolean {
  prompt "nmap" if []
  select LIB_STLPORT if []
 }
 config USER_NTPCLIENT_NTPCLIENT boolean {
  prompt "ntpclient: ntpclient" if []
 }
 config USER_NTPCLIENT_ADJTIMEX boolean {
  prompt "ntpclient: adjtimex" if []
 }
 config USER_NTPD_NTPD boolean {
  prompt "ntpd" if []
  config USER_NTPD_NTPDC boolean {
   prompt "ntpdc" if [USER_NTPD_NTPD]
   depends on [USER_NTPD_NTPD]
   inherited [USER_NTPD_NTPD]
  }
 }
 config USER_NTPD_NTPDATE boolean {
  prompt "ntpdate" if []
 }
 config USER_NTPD_NTPQ boolean {
  prompt "ntpq" if []
 }
 config USER_OPENSSL_APPS boolean {
  prompt "openssl" if []
  select LIB_LIBSSL if []
 }
 config USER_OPENVPN_OPENVPN boolean {
  prompt "openvpn" if []
  select LIB_LIBLZO if []
  select LIB_LIBSSL if []
 }
 config USER_SSCEP boolean {
  prompt "sscep" if []
  select LIB_LIBSSL if []
 }
 config USER_PING_PING boolean {
  prompt "ping" if []
 }
 config USER_PLUG_PLUG boolean {
  prompt "plugdaemon" if []
 }
 config USER_POP3PROXY_POP3PROXY boolean {
  prompt "pop3proxy" if []
 }
 config USER_PORTMAP_PORTMAP boolean {
  prompt "portmap" if []
  config USER_PORTMAP_PMAP_SET boolean {
   prompt "pmap_set" if [USER_PORTMAP_PORTMAP]
   depends on [USER_PORTMAP_PORTMAP]
   inherited [USER_PORTMAP_PORTMAP]
  }
  config USER_PORTMAP_PMAP_DUMP boolean {
   prompt "pmap_dump" if [USER_PORTMAP_PORTMAP]
   depends on [USER_PORTMAP_PORTMAP]
   inherited [USER_PORTMAP_PORTMAP]
  }
 }
 config USER_PPPD_PPPD_PPPD boolean {
  prompt "pppd" if []
  config USER_PPPD_WITH_DYNAMIC_PLUGINS boolean {
   prompt "enable dynamic plugins" if [USER_PPPD_PPPD_PPPD]
   depends on [USER_PPPD_PPPD_PPPD]
   inherited [USER_PPPD_PPPD_PPPD]
  }
  config USER_PPPD_WITH_IPV6 boolean {
   prompt "enable ipv6" if [USER_PPPD_PPPD_PPPD]
   depends on [USER_PPPD_PPPD_PPPD]
   inherited [USER_PPPD_PPPD_PPPD]
  }
  config USER_PPPD_WITH_PAM boolean {
   prompt "enable PAM" if [USER_PPPD_PPPD_PPPD]
   depends on [USER_PPPD_PPPD_PPPD]
   select LIB_LIBPAM if [USER_PPPD_PPPD_PPPD]
   inherited [USER_PPPD_PPPD_PPPD]
  }
  config USER_PPPD_WITH_MPPE boolean {
   prompt "enable MPPE" if [USER_PPPD_PPPD_PPPD]
   depends on [USER_PPPD_PPPD_PPPD]
   inherited [USER_PPPD_PPPD_PPPD]
  }
  config USER_PPPD_WITH_TACACS boolean {
   prompt "enable TACACS+" if [USER_PPPD_PPPD_PPPD]
   depends on [USER_PPPD_PPPD_PPPD]
   inherited [USER_PPPD_PPPD_PPPD]
  }
  config USER_PPPD_WITH_RADIUS boolean {
   prompt "enable RADIUS" if [USER_PPPD_PPPD_PPPD]
   depends on [USER_PPPD_PPPD_PPPD]
   inherited [USER_PPPD_PPPD_PPPD]
  }
  config USER_PPPD_WITH_PPPOE boolean {
   prompt "enable PPPOE" if [USER_PPPD_PPPD_PPPD]
   depends on [USER_PPPD_PPPD_PPPD]
   inherited [USER_PPPD_PPPD_PPPD]
  }
  config USER_PPPD_WITH_PPPOA boolean {
   prompt "enable PPPOA" if [USER_PPPD_PPPD_PPPD]
   depends on [USER_PPPD_PPPD_PPPD]
   inherited [USER_PPPD_PPPD_PPPD]
  }
 }
 config USER_PPPD_PPPOE_RETRIES integer {
  prompt "default number of PPPOE retries" if [USER_PPPD_WITH_PPPOE]
  depends on [USER_PPPD_WITH_PPPOE]
  default [6] if [USER_PPPD_WITH_PPPOE]
  inherited [USER_PPPD_WITH_PPPOE]
 }
 config USER_PPPD_NO_AT_REDIRECTION boolean {
  prompt "disable redirection of passwords starting with @" if [USER_PPPD_PPPD_PPPD]
  depends on [USER_PPPD_PPPD_PPPD]
  inherited [USER_PPPD_PPPD_PPPD]
 }
 config USER_PPPD_WITH_MINCONN boolean {
  prompt "enable minconn" if [USER_PPPD_PPPD_PPPD]
  depends on [USER_PPPD_PPPD_PPPD]
  inherited [USER_PPPD_PPPD_PPPD]
 }
 config USER_PPPD_WITH_PASSPROMPT boolean {
  prompt "enable passprompt" if [USER_PPPD_PPPD_PPPD]
  depends on [USER_PPPD_PPPD_PPPD]
  inherited [USER_PPPD_PPPD_PPPD]
 }
 config USER_PPPD_WITH_PASSWORDFD boolean {
  prompt "enable passwordfd" if [USER_PPPD_PPPD_PPPD]
  depends on [USER_PPPD_PPPD_PPPD]
  inherited [USER_PPPD_PPPD_PPPD]
 }
 config USER_PPPD_WITH_WINBIND boolean {
  prompt "enable winbind" if [USER_PPPD_PPPD_PPPD]
  depends on [USER_PPPD_PPPD_PPPD]
  inherited [USER_PPPD_PPPD_PPPD]
 }
 config USER_PPTPD_PPTPCTRL boolean {
  prompt "pptpctrl" if []
 }
 config USER_PPTPD_PPTPD boolean {
  prompt "pptpd" if []
 }
 config USER_PPTP_PPTP boolean {
  prompt "pptp" if []
 }
 config USER_PPTP_CLIENT_PPTP boolean {
  prompt "pptp client (ok for !MMU)" if []
 }
 config USER_PPTP_CLIENT_PPTP_CALLMGR boolean {
  prompt "pptp_callmgr" if []
 }
 config USER_PROFTPD_PROFTPD boolean {
  prompt "proftpd" if []
 }
 config USER_QUAGGA_ZEBRA_ZEBRA boolean {
  prompt "quagga" if []
  config USER_QUAGGA_BGPD_BGPD boolean {
   prompt "quagga-bgpd" if [USER_QUAGGA_ZEBRA_ZEBRA]
   depends on [USER_QUAGGA_ZEBRA_ZEBRA]
   inherited [USER_QUAGGA_ZEBRA_ZEBRA]
  }
  config USER_QUAGGA_OSPFD_OSPFD boolean {
   prompt "quagga-ospfd" if [USER_QUAGGA_ZEBRA_ZEBRA]
   depends on [USER_QUAGGA_ZEBRA_ZEBRA]
   inherited [USER_QUAGGA_ZEBRA_ZEBRA]
  }
  config USER_QUAGGA_OSPF6D_OSPF6D boolean {
   prompt "quagga-ospf6d" if [USER_QUAGGA_ZEBRA_ZEBRA]
   depends on [USER_QUAGGA_ZEBRA_ZEBRA]
   inherited [USER_QUAGGA_ZEBRA_ZEBRA]
  }
  config USER_QUAGGA_RIPD_RIPD boolean {
   prompt "quagga-ripd" if [USER_QUAGGA_ZEBRA_ZEBRA]
   depends on [USER_QUAGGA_ZEBRA_ZEBRA]
   inherited [USER_QUAGGA_ZEBRA_ZEBRA]
  }
  config USER_QUAGGA_RIPNGD_RIPNGD boolean {
   prompt "quagga-ripngd" if [USER_QUAGGA_ZEBRA_ZEBRA]
   depends on [USER_QUAGGA_ZEBRA_ZEBRA]
   inherited [USER_QUAGGA_ZEBRA_ZEBRA]
  }
  config USER_QUAGGA_WATCHQUAGGA_WATCHQUAGGA boolean {
   prompt "quagga-watchquagga" if [USER_QUAGGA_ZEBRA_ZEBRA]
   depends on [USER_QUAGGA_ZEBRA_ZEBRA]
   inherited [USER_QUAGGA_ZEBRA_ZEBRA]
  }
 }
 config USER_RADVD_RADVD boolean {
  prompt "radvd" if []
  select LIB_FLEX if []
 }
 config USER_RADAUTH_RADAUTH boolean {
  prompt "radauth" if []
 }
 config USER_RDATE_RDATE boolean {
  prompt "rdate" if []
 }
 config USER_ROUTED_ROUTED boolean {
  prompt "routed" if []
 }
 config USER_RP_PPPOE_PPPOE boolean {
  prompt "rp-pppoe" if []
  config USER_RP_PPPOE_PPPOE_SERVER boolean {
   prompt "rp-pppoe server" if [USER_RP_PPPOE_PPPOE]
   depends on [USER_RP_PPPOE_PPPOE]
   inherited [USER_RP_PPPOE_PPPOE]
  }
 }
 config USER_RSYNC_RSYNC boolean {
  prompt "rsync" if []
 }
 config USER_RSYSLOG_RSYSLOGD boolean {
  prompt "rsyslog" if []
 }
 config USER_RSYSLOGD_RSYSLOGD boolean {
  prompt "rsyslogd" if []
 }
 config USER_LOGROTATE_LOGROTATE boolean {
  prompt "logrotate" if []
  select LIB_POPT if []
 }
 config USER_SENDIP_SENDIP boolean {
  prompt "sendip" if []
 }
 config USER_SER_SER boolean {
  prompt "ser" if []
  config USER_SER_RTPPROXY boolean {
   prompt "rtpproxy" if [USER_SER_SER]
   depends on [USER_SER_SER]
   inherited [USER_SER_SER]
  }
 }
 config USER_SETHDLC_SETHDLC boolean {
  prompt "sethdlc" if []
 }
 config USER_SIPROXD_SIPROXD boolean {
  prompt "siproxd" if []
  select LIB_OSIP2 if []
 }
 config USER_SLATTACH_SLATTACH boolean {
  prompt "slattach" if []
  select LIB_LIBNETOLD if []
 }
 config USER_SNMPD_SNMPD boolean {
  prompt "snmpd" if []
 }
 config USER_SNORT_SNORT boolean {
  prompt "snort" if []
  select LIB_LIBPCRE if []
  select LIB_LIBNET if []
 }
 config USER_SPEEDTOUCH_MODEM_RUN boolean {
  prompt "speedtouch modem_run" if []
 }
 config USER_STUNNEL_STUNNEL boolean {
  prompt "stunnel" if []
 }
 config USER_SSLWRAP_SSLWRAP boolean {
  prompt "sslwrap" if []
 }
 config USER_SQUID_SQUID boolean {
  prompt "squid" if []
 }
 config USER_SSH_SSH boolean {
  prompt "ssh" if []
  select LIB_LIBSSL if []
 }
 config USER_SSH_SSHD boolean {
  prompt "sshd" if []
  select LIB_LIBSSL if []
  select LIB_ZLIB if []
 }
 config USER_SSH_SSHKEYGEN boolean {
  prompt "ssh-keygen" if []
  select LIB_LIBSSL if []
 }
 config USER_SSH_SCP boolean {
  prompt "scp" if [USER_SSH_SSH]
  depends on [USER_SSH_SSH]
  inherited [USER_SSH_SSH]
 }
 config USER_SSH_SFTP boolean {
  prompt "sftp" if [USER_SSH_SSH]
  depends on [USER_SSH_SSH]
  inherited [USER_SSH_SSH]
 }
 config USER_SSH_SFTP_SERVER boolean {
  prompt "sftp-server" if [USER_SSH_SSH]
  depends on [USER_SSH_SSH]
  inherited [USER_SSH_SSH]
 }
 config USER_SSH_SSH_KEYSIGN boolean {
  prompt "ssh-keysign" if [USER_SSH_SSH]
  depends on [USER_SSH_SSH]
  inherited [USER_SSH_SSH]
 }
 config USER_SSH_ONLY_RSA_V2_KEYGEN boolean {
  prompt "ssh-only-rsa-v2-keygen" if [USER_SSH_SSH]
  depends on [USER_SSH_SSH]
  inherited [USER_SSH_SSH]
 }
 config USER_STP_STP boolean {
  prompt "stp" if []
 }
 config USER_TCPWRAP_TCPD boolean {
  prompt "tcpd" if []
  config USER_TCPWRAP_MISCD boolean {
   prompt "miscd" if [USER_TCPWRAP_TCPD]
   depends on [USER_TCPWRAP_TCPD]
   inherited [USER_TCPWRAP_TCPD]
  }
  config USER_TCPWRAP_FINGER boolean {
   prompt "safe finger" if [USER_TCPWRAP_TCPD]
   depends on [USER_TCPWRAP_TCPD]
   inherited [USER_TCPWRAP_TCPD]
  }
  config USER_TCPWRAP_TCPDMATCH boolean {
   prompt "tcpd match" if [USER_TCPWRAP_TCPD]
   depends on [USER_TCPWRAP_TCPD]
   inherited [USER_TCPWRAP_TCPD]
  }
  config USER_TCPWRAP_TRYFROM boolean {
   prompt "try from" if [USER_TCPWRAP_TCPD]
   depends on [USER_TCPWRAP_TCPD]
   inherited [USER_TCPWRAP_TCPD]
  }
  config USER_TCPWRAP_TCPDCHK boolean {
   prompt "tcpdchk" if [USER_TCPWRAP_TCPD]
   depends on [USER_TCPWRAP_TCPD]
   inherited [USER_TCPWRAP_TCPD]
  }
 }
 config USER_TCPBLAST_TCPBLAST boolean {
  prompt "tcpblast" if []
 }
 config USER_TCPDUMP_TCPDUMP boolean {
  prompt "tcpdump" if []
  select LIB_LIBPCAP if []
 }
 config USER_TELNETD_TELNETD boolean {
  prompt "telnetd" if []
  config USER_TELNETD_DOES_NOT_USE_OPENPTY boolean {
   prompt "telnetd does not use openpty()" if [USER_TELNETD_TELNETD]
   depends on [USER_TELNETD_TELNETD]
   inherited [USER_TELNETD_TELNETD]
  }
 }
 config USER_TELNET_TELNET boolean {
  prompt "telnet" if []
  select LIB_LIBG if []
 }
 config USER_TFTP_TFTP boolean {
  prompt "tftp" if []
 }
 config USER_TFTPD_TFTPD boolean {
  prompt "tftpd" if []
  config USER_TFTPD_TFTPD_LOW_SEC boolean {
   prompt "Low security on tftp server" if [USER_TFTPD_TFTPD]
   depends on [USER_TFTPD_TFTPD]
   inherited [USER_TFTPD_TFTPD]
  }
 }
 config USER_THTTPD_THTTPD boolean {
  prompt "thttpd" if []
  config READ_TIMEOUT boolean {
   prompt "cgi timeout" if [USER_THTTPD_THTTPD]
   depends on [USER_THTTPD_THTTPD]
   inherited [USER_THTTPD_THTTPD]
  }
 }
 config USER_TINYPROXY_TINYPROXY boolean {
  prompt "tinyproxy" if []
 }
 config USER_TRACEROUTE_TRACEROUTE boolean {
  prompt "traceroute" if []
 }
 config USER_UDEV boolean {
  prompt "udev" if []
 }
 config USER_ULOGD_ULOGD boolean {
  prompt "ulogd" if []
 }
 config USER_ULOGD2_ULOGD boolean {
  prompt "ulogd2" if []
  select LIB_NFNETLINK if []
  select LIB_NETFILTER_LOG if []
  select LIB_NETFILTER_CONNTRACK if []
 }
 config USER_VCONFIG_VCONFIG boolean {
  prompt "vconfig" if []
 }
 config USER_VPNLED_VPNLED boolean {
  prompt "vpnled" if []
 }
 config USER_WGET boolean {
  prompt "wget" if []
 }
 config USER_XL2TPD_XL2TPD boolean {
  prompt "xl2tpd" if []
 }
 config USER_ZEBRA_ZEBRA_ZEBRA boolean {
  prompt "zebra" if []
  config USER_ZEBRA_BGPD_BGPD boolean {
   prompt "zebra-bgpd" if [USER_ZEBRA_ZEBRA_ZEBRA]
   depends on [USER_ZEBRA_ZEBRA_ZEBRA]
   inherited [USER_ZEBRA_ZEBRA_ZEBRA]
  }
  config USER_ZEBRA_OSPFD_OSPFD boolean {
   prompt "zebra-ospfd" if [USER_ZEBRA_ZEBRA_ZEBRA]
   depends on [USER_ZEBRA_ZEBRA_ZEBRA]
   inherited [USER_ZEBRA_ZEBRA_ZEBRA]
  }
  config USER_ZEBRA_RIPD_RIPD boolean {
   prompt "zebra-ripd" if [USER_ZEBRA_ZEBRA_ZEBRA]
   depends on [USER_ZEBRA_ZEBRA_ZEBRA]
   inherited [USER_ZEBRA_ZEBRA_ZEBRA]
  }
 }
 config USER_NET_TOOLS_ARP boolean {
  prompt "arp" if []
 }
 config USER_NET_TOOLS_HOSTNAME boolean {
  prompt "hostname" if []
 }
 config USER_NET_TOOLS_IFCONFIG boolean {
  prompt "ifconfig" if []
 }
 config USER_NET_TOOLS_NAMEIF boolean {
  prompt "nameif" if []
 }
 config USER_NET_TOOLS_NETSTAT boolean {
  prompt "netstat" if []
 }
 config USER_NET_TOOLS_PLIPCONFIG boolean {
  prompt "plipconfig" if []
 }
 config USER_NET_TOOLS_RARP boolean {
  prompt "rarp" if []
 }
 config USER_NET_TOOLS_ROUTE boolean {
  prompt "route" if []
 }
 config USER_NET_TOOLS_SLATTACH boolean {
  prompt "slattach" if []
 }
 config USER_NET_TOOLS_MII_TOOL boolean {
  prompt "mii-tool" if []
 }
 config USER_NET_TOOLS_MII_TOOL_FEC boolean {
  prompt "mii-tool-fec" if []
 }
 config USER_WIRELESS_TOOLS boolean {
  prompt "wireless_tools support" if []
  config USER_WIRELESS_TOOLS_IWCONFIG boolean {
   prompt "iwconfig" if [USER_WIRELESS_TOOLS]
   depends on [USER_WIRELESS_TOOLS]
   inherited [USER_WIRELESS_TOOLS]
  }
  config USER_WIRELESS_TOOLS_IWGETID boolean {
   prompt "iwgetid" if [USER_WIRELESS_TOOLS]
   depends on [USER_WIRELESS_TOOLS]
   inherited [USER_WIRELESS_TOOLS]
  }
  config USER_WIRELESS_TOOLS_IWLIST boolean {
   prompt "iwlist" if [USER_WIRELESS_TOOLS]
   depends on [USER_WIRELESS_TOOLS]
   inherited [USER_WIRELESS_TOOLS]
  }
  config USER_WIRELESS_TOOLS_IWPRIV boolean {
   prompt "iwpriv" if [USER_WIRELESS_TOOLS]
   depends on [USER_WIRELESS_TOOLS]
   inherited [USER_WIRELESS_TOOLS]
  }
  config USER_WIRELESS_TOOLS_IWSPY boolean {
   prompt "iwspy" if [USER_WIRELESS_TOOLS]
   depends on [USER_WIRELESS_TOOLS]
   inherited [USER_WIRELESS_TOOLS]
  }
 }
 config USER_HOSTAP_HOSTAP boolean {
  prompt "hostap" if []
  config USER_HOSTAP_PCI boolean {
   prompt "PCI cards" if [USER_HOSTAP_HOSTAP]
   depends on [USER_HOSTAP_HOSTAP]
   inherited [USER_HOSTAP_HOSTAP]
  }
  config USER_HOSTAP_CS boolean {
   prompt "PCMCIA cards" if [USER_HOSTAP_HOSTAP]
   depends on [USER_HOSTAP_HOSTAP]
   inherited [USER_HOSTAP_HOSTAP]
  }
  config USER_HOSTAP_HOSTAPD boolean {
   prompt "hostapd" if [USER_HOSTAP_HOSTAP]
   depends on [USER_HOSTAP_HOSTAP]
   inherited [USER_HOSTAP_HOSTAP]
  }
 }
 config USER_WLAN_NG boolean {
  prompt "wlan-ng" if []
  config USER_WLAN_NG_WLAND boolean {
   prompt "wlandl" if [USER_WLAN_NG]
   depends on [USER_WLAN_NG]
   inherited [USER_WLAN_NG]
  }
  config USER_WLAN_NG_WLANCFG boolean {
   prompt "wlancfg" if [USER_WLAN_NG]
   depends on [USER_WLAN_NG]
   inherited [USER_WLAN_NG]
  }
  config USER_WLAN_NG_WLANCTL boolean {
   prompt "wlanctl" if [USER_WLAN_NG]
   depends on [USER_WLAN_NG]
   inherited [USER_WLAN_NG]
  }
  config USER_WLAN_NG_PCMCIA boolean {
   prompt "Prism2 PCMCIA" if [USER_WLAN_NG]
   depends on [USER_WLAN_NG]
   inherited [USER_WLAN_NG]
  }
  config USER_WLAN_NG_PLX boolean {
   prompt "Prism2 PLX" if [USER_WLAN_NG]
   depends on [USER_WLAN_NG]
   inherited [USER_WLAN_NG]
  }
  config USER_WLAN_NG_PCI boolean {
   prompt "Prism2 PCI" if [USER_WLAN_NG]
   depends on [USER_WLAN_NG]
   inherited [USER_WLAN_NG]
  }
  config USER_WLAN_NG_USB boolean {
   prompt "Prism2 USB" if [USER_WLAN_NG]
   depends on [USER_WLAN_NG]
   inherited [USER_WLAN_NG]
  }
 }
}
menu "Miscellaneous Applications" {
 config USER_P7ZIP_7ZA boolean {
  prompt "7za" if []
 }
 config USER_LANG_A60 boolean {
  prompt "a60" if []
  config USER_LANG_A60_EGS boolean {
   prompt "examples" if [USER_LANG_A60]
   depends on [USER_LANG_A60]
   inherited [USER_LANG_A60]
  }
  config USER_LANG_A60_TEST boolean {
   prompt "tests" if [USER_LANG_A60]
   depends on [USER_LANG_A60]
   inherited [USER_LANG_A60]
  }
 }
 config USER_ARJ_ARJ boolean {
  prompt "arj" if []
 }
 config USER_BZIP2_BZIP2 boolean {
  prompt "bzip2" if []
  select LIB_LIBBZ2 if []
 }
 config USER_CAL_CAL boolean {
  prompt "cal" if []
 }
 config USER_CAN_EXAMPLES boolean {
  prompt "can4linux examples" if []
 }
 config USER_CHAT_CHAT boolean {
  prompt "chat" if []
  config USER_CHAT_CHAT_NETWORK boolean {
   prompt "chat network/telnet support" if [USER_CHAT_CHAT]
   depends on [USER_CHAT_CHAT]
   inherited [USER_CHAT_CHAT]
  }
 }
 config USER_CKSUM_CKSUM boolean {
  prompt "cksum" if []
 }
 config USER_CLOCK_CLOCK boolean {
  prompt "clock" if []
 }
 config USER_CPU_CPU boolean {
  prompt "cpu" if []
 }
 config USER_CRYPTO_TOOLS_CMACTEST boolean {
  prompt "cmactest" if []
 }
 config USER_CRYPTO_TOOLS_CRYPTOTEST boolean {
  prompt "cryptotest" if []
 }
 config USER_CRYPTO_TOOLS_CRYPTOKEYTEST boolean {
  prompt "cryptokeytest" if []
 }
 config USER_CAL_DATE boolean {
  prompt "date" if []
 }
 config USER_DE2TSCAL_DE2TSCAL boolean {
  prompt "de2ts-cal" if []
 }
 config USER_EXPAT_EXAMPLES boolean {
  prompt "expat-examples" if []
  select LIB_EXPAT if []
 }
 config USER_EXPECT_EXPECT boolean {
  prompt "expect" if []
  select USER_TCL_LIBTCL if []
 }
 config USER_TCL_LIBTCL boolean {
  default [n] if []
 }
 config USER_FLTHDR_FLTHDR boolean {
  prompt "flthdr" if []
 }
 config USER_FROB_LED_FROB_LED boolean {
  prompt "frob-led" if []
 }
 config USER_GDB_GDBREPLAY boolean {
  prompt "gdbreplay" if []
 }
 config USER_GDB_GDBSERVER boolean {
  prompt "gdbserver" if []
 }
 config USER_GDB_TARGET boolean {
  prompt "gdb (target)" if []
  select LIB_TERMCAP if []
 }
 config USER_GDB_HOST boolean {
  prompt "gdb (host)" if []
 }
 config USER_GDBSERVER_GDBREPLAY boolean {
  prompt "gdbreplay (old)" if []
 }
 config USER_GDBSERVER_GDBSERVER boolean {
  prompt "gdbserver (old)" if []
 }
 config USER_DEBUG_DEBUG boolean {
  prompt "debug" if []
 }
 config USER_GREP_GREP boolean {
  prompt "grep" if []
 }
 config USER_HASERL_HASERL boolean {
  prompt "haserl" if []
 }
 config USER_HD_HD boolean {
  prompt "hd" if []
 }
 config USER_LOAD_LOAD boolean {
  prompt "load" if []
 }
 config USER_CAN_HORCH boolean {
  prompt "horch" if []
 }
 config USER_JAMVM_JAMVM boolean {
  prompt "jamvm" if []
 }
 config USER_JQUERY_UI boolean {
  prompt "jquery" if []
 }
 config USER_KEXEC_KEXEC boolean {
  prompt "kexec loader" if []
 }
 config USER_SGUTOOL_SGUTOOL boolean {
  prompt "sgutool" if []
 }
 config USER_LCD_LCD boolean {
  prompt "lcd" if []
 }
 config USER_LEDCMD_LEDCMD boolean {
  prompt "ledcmd" if []
 }
 config USER_LEDCON_LEDCON boolean {
  prompt "ledcon" if []
 }
 config USER_LHA_LHA boolean {
  prompt "lha" if []
 }
 config USER_LILO_LILO boolean {
  prompt "lilo" if []
 }
 config USER_LISSA_LISSA boolean {
  prompt "lissa" if []
 }
 config USER_LPR boolean {
  prompt "lpr" if []
 }
 config USER_LSOF_LSOF boolean {
  prompt "lsof" if []
 }
 config USER_USBCBI_USBCBI boolean {
  prompt "mcf5272 cbi client" if []
 }
 config USER_USBISO_USBISO boolean {
  prompt "mcf5272 iso client" if []
 }
 config USER_MATH_TEST boolean {
  prompt "mathstests" if []
 }
 config USER_MAWK_AWK boolean {
  prompt "mawk" if []
 }
 config USER_MYSQL boolean {
  prompt "mysql" if []
  select LIB_TERMCAP if []
  config USER_MYSQL_CLIB boolean {
   prompt "client library" if [USER_MYSQL]
   depends on [USER_MYSQL]
   inherited [USER_MYSQL]
  }
 }
 config USER_NULL_NULL boolean {
  prompt "null" if []
 }
 config USER_OPROFILE boolean {
  prompt "oprofile" if []
  select LIB_BFD if []
  select LIB_LIBIBERTY if []
  select LIB_POPT if []
 }
 config USER_PALMBOT_PALMBOT boolean {
  prompt "palmbot" if []
 }
 config USER_PCMCIA_CS boolean {
  prompt "pcmcia-cs (Card Services)" if []
 }
 config USER_PERL_PERL boolean {
  prompt "perl" if []
 }
 config USER_POTRACE_POTRACE boolean {
  prompt "potrace" if []
 }
 config USER_PYTHON_PYTHON boolean {
  prompt "python" if []
 }
 config USER_READPROFILE_READPROFILE boolean {
  prompt "readprofile" if []
 }
 config USER_ROOTLOADER_ROOTLOADER boolean {
  prompt "rootloader" if []
 }
 config USER_RRDTOOL_RRDTOOL boolean {
  prompt "rrdtool" if []
 }
 config USER_SETSERIAL_SETSERIAL boolean {
  prompt "setserial" if []
 }
 config USER_SHADOW_UTILS boolean {
  prompt "shadow utilities" if []
  config USER_SHADOW_PAM boolean {
   prompt "use PAM" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   select LIB_LIBPAM if [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_SHAREDLIB boolean {
   prompt "use shared library" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_CHAGE boolean {
   prompt "chage" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_CHFN boolean {
   prompt "chfn" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_CHPASSWD boolean {
   prompt "chpasswd" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_CHSH boolean {
   prompt "chsh" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_EXPIRY boolean {
   prompt "expiry" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_FAILLOG boolean {
   prompt "faillog" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_GPASSWD boolean {
   prompt "gpasswd" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_GROUPADD boolean {
   prompt "groupadd" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_GROUPDEL boolean {
   prompt "groupdel" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_GROUPMOD boolean {
   prompt "groupmod" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_GROUPS boolean {
   prompt "groups" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_GRPCK boolean {
   prompt "grpck" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_GRPCONV boolean {
   prompt "grpconv" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_GRPUNCONV boolean {
   prompt "grpunconv" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_ID boolean {
   prompt "id" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_LASTLOG boolean {
   prompt "lastlog" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_LOGIN boolean {
   prompt "login" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_LOGOUTD boolean {
   prompt "logoutd" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_NEWGRP boolean {
   prompt "newgrp" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_NEWUSERS boolean {
   prompt "newusers" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_NOLOGIN boolean {
   prompt "nologin" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_PASSWD boolean {
   prompt "passwd" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_PWCK boolean {
   prompt "pwck" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_PWCONV boolean {
   prompt "pwconv" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_PWUNCONV boolean {
   prompt "pwunconv" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_SU boolean {
   prompt "su" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_SULOGIN boolean {
   prompt "sulogin" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_USERADD boolean {
   prompt "useradd" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_USERDEL boolean {
   prompt "userdel" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_USERMOD boolean {
   prompt "usermod" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
  config USER_SHADOW_VIPW boolean {
   prompt "vipw" if [USER_SHADOW_UTILS]
   depends on [USER_SHADOW_UTILS]
   inherited [USER_SHADOW_UTILS]
  }
 }
 config USER_TRIPWIRE_SIGGEN boolean {
  prompt "siggen" if []
 }
 config USER_STRACE_STRACE boolean {
  prompt "strace" if []
 }
 config USER_STTY_STTY boolean {
  prompt "stty" if []
 }
 config USER_TCSH_TCSH boolean {
  prompt "tcsh" if []
 }
 config USER_TINYTCL_TCLSH boolean {
  prompt "tinytcl" if []
  select LIB_TINYTCL if []
 }
 config LIB_TINYTCL boolean {
  prompt "build tinytcl library" if []
  default [n] if []
  config LIB_TINYTCL_STATIC boolean {
   prompt "build static libtcl and extensions" if [LIB_TINYTCL]
   depends on [LIB_TINYTCL]
   inherited [LIB_TINYTCL]
  }
 }
 config USER_THREADDEMOS_THREADDEMOS boolean {
  prompt "pThreads threaddemos" if []
 }
 config USER_TIP_TIP boolean {
  prompt "tip" if []
 }
 config USER_TRIPWIRE_TRIPWIRE boolean {
  prompt "tripwire" if []
 }
 config USER_UNRAR_UNRAR boolean {
  prompt "unrar" if []
 }
 config USER_UNZIP_UNZIP boolean {
  prompt "unzip" if []
  config USER_UNZIP_FUNZIP boolean {
   prompt "funzip" if [USER_UNZIP_UNZIP]
   depends on [USER_UNZIP_UNZIP]
   inherited [USER_UNZIP_UNZIP]
  }
 }
 config USER_UNZOO_UNZOO boolean {
  prompt "unzoo" if []
 }
 config USER_WATCHDOGD boolean {
  prompt "watchdogd" if []
 }
 config USER_LRZSZ_LRZSZ boolean {
  prompt "zmodem utils" if []
  config USER_LRZSZ_LRZ boolean {
   prompt "lrz" if [USER_LRZSZ_LRZSZ]
   depends on [USER_LRZSZ_LRZSZ]
   inherited [USER_LRZSZ_LRZSZ]
  }
  config USER_LRZSZ_LSZ boolean {
   prompt "lsz" if [USER_LRZSZ_LRZSZ]
   depends on [USER_LRZSZ_LRZSZ]
   inherited [USER_LRZSZ_LRZSZ]
  }
 }
 config USER_DHRYSTONE_DHRYSTONE boolean {
  prompt "dhrystone" if []
 }
 config USER_NBENCH_NBENCH boolean {
  prompt "nbench benchmark" if []
 }
 config USER_WHETSTONE_WHETSTONE boolean {
  prompt "whetstone benchmark" if []
 }
 config USER_LIRC boolean {
  prompt "Enable LIRC tools" if []
  config USER_LIRC_LIRCD boolean {
   prompt "lircd" if [USER_LIRC]
   depends on [USER_LIRC]
   inherited [USER_LIRC]
  }
  config USER_LIRC_IRRECORD boolean {
   prompt "irrecord" if [USER_LIRC]
   depends on [USER_LIRC]
   inherited [USER_LIRC]
  }
  config USER_LIRC_LIRCMD boolean {
   prompt "lircmd" if [USER_LIRC]
   depends on [USER_LIRC]
   inherited [USER_LIRC]
  }
  config USER_LIRC_IREXEC boolean {
   prompt "irexec" if [USER_LIRC]
   depends on [USER_LIRC]
   inherited [USER_LIRC]
  }
  config USER_LIRC_IRW boolean {
   prompt "irw" if [USER_LIRC]
   depends on [USER_LIRC]
   inherited [USER_LIRC]
  }
  config USER_LIRC_MODE2 boolean {
   prompt "mode2" if [USER_LIRC]
   depends on [USER_LIRC]
   inherited [USER_LIRC]
  }
 }
 config USER_LM_SENSORS boolean {
  prompt "Enable lm_sensors tools" if []
  config USER_LM_SENSORS_SENSORS boolean {
   prompt "sensors" if [USER_LM_SENSORS]
   depends on [USER_LM_SENSORS]
   select LIB_LIBSYSFS if [USER_LM_SENSORS]
   inherited [USER_LM_SENSORS]
  }
 }
 config MCF_QSPI boolean {
  prompt "Enable Coldfire QSPI test programs" if []
  config USER_QSPITEST_TEST boolean {
   prompt "qspitest" if [MCF_QSPI]
   depends on [MCF_QSPI]
   inherited [MCF_QSPI]
  }
  config USER_QSPITEST_RX boolean {
   prompt "qspirx" if [MCF_QSPI]
   depends on [MCF_QSPI]
   inherited [MCF_QSPI]
  }
 }
 config USER_LEVEE_VI boolean {
  prompt "vi (leevee)" if []
 }
 config USER_ELVISTINY_VI boolean {
  prompt "vi (elvis-tiny)" if []
 }
 config USER_MP3PLAY_MP3PLAY boolean {
  prompt "mp3play" if []
  config USER_MP3PLAY_SWAP_WD boolean {
   prompt "swap -d and -w options" if [USER_MP3PLAY_MP3PLAY]
   depends on [USER_MP3PLAY_MP3PLAY]
   inherited [USER_MP3PLAY_MP3PLAY]
  }
 }
 config USER_OGGPLAY_OGGPLAY boolean {
  prompt "oggplay" if []
 }
 config USER_OGGPLAY_EXAMPLE boolean {
  prompt "ivorbisfile_example" if []
 }
 config USER_MUSICBOX_MUSICBOX boolean {
  prompt "musicbox" if []
 }
 config USER_PLAY_PLAY boolean {
  prompt "play" if []
 }
 config USER_PLAY_TONE boolean {
  prompt "tone" if []
 }
 config USER_VPLAY_VPLAY boolean {
  prompt "vplay" if []
 }
 config USER_VPLAY_VREC boolean {
  prompt "vrec" if []
 }
 config USER_VPLAY_MIXER boolean {
  prompt "mixer" if []
 }
 config USER_PLAYRT_PLAYRT boolean {
  prompt "playrt" if []
 }
 config USER_CAMSERV boolean {
  prompt "camserv" if []
  select LIB_LIBPNG if []
  select LIB_LIBJPEG if []
 }
 config USER_JPEGVIEW_JPEGVIEW boolean {
  prompt "jpegview" if []
  select LIB_LIBPNG if []
  select LIB_LIBJPEG if []
 }
 config USER_W3CAM_VIDCAT boolean {
  prompt "vidcat" if []
 }
 config USER_W3CAM_W3CAMD boolean {
  prompt "w3camd" if []
  select LIB_LIBPNG if []
  select LIB_LIBJPEG if []
 }
 config USER_FILEUTILS_CAT boolean {
  prompt "cat" if []
 }
 config USER_FILEUTILS_CHGRP boolean {
  prompt "chgrp" if []
 }
 config USER_FILEUTILS_CHMOD boolean {
  prompt "chmod" if []
 }
 config USER_FILEUTILS_CHOWN boolean {
  prompt "chown" if []
 }
 config USER_FILEUTILS_CMP boolean {
  prompt "cmp" if []
 }
 config USER_FILEUTILS_CP boolean {
  prompt "cp" if []
 }
 config USER_FILEUTILS_DD boolean {
  prompt "dd" if []
 }
 config USER_FILEUTILS_GREP boolean {
  prompt "grep" if []
 }
 config USER_FILEUTILS_L boolean {
  prompt "l" if []
 }
 config USER_FILEUTILS_LN boolean {
  prompt "ln" if []
 }
 config USER_FILEUTILS_LS boolean {
  prompt "ls" if []
 }
 config USER_FILEUTILS_MKDIR boolean {
  prompt "mkdir" if []
 }
 config USER_FILEUTILS_MKFIFO boolean {
  prompt "mkfifo" if []
 }
 config USER_FILEUTILS_MKNOD boolean {
  prompt "mknod" if []
 }
 config USER_FILEUTILS_MORE boolean {
  prompt "more" if []
 }
 config USER_FILEUTILS_MV boolean {
  prompt "mv" if []
 }
 config USER_FILEUTILS_RM boolean {
  prompt "rm" if []
 }
 config USER_FILEUTILS_RMDIR boolean {
  prompt "rmdir" if []
 }
 config USER_FILEUTILS_SYNC boolean {
  prompt "sync" if []
 }
 config USER_FILEUTILS_TOUCH boolean {
  prompt "touch" if []
 }
 config USER_SHUTILS_BASENAME boolean {
  prompt "basename" if []
 }
 config USER_SHUTILS_DATE boolean {
  prompt "date" if []
 }
 config USER_SHUTILS_DIRNAME boolean {
  prompt "dirname" if []
 }
 config USER_SHUTILS_ECHO boolean {
  prompt "echo" if []
 }
 config USER_SHUTILS_FALSE boolean {
  prompt "false" if []
 }
 config USER_SHUTILS_LOGNAME boolean {
  prompt "logname" if []
 }
 config USER_SHUTILS_PRINTENV boolean {
  prompt "printenv" if []
 }
 config USER_SHUTILS_PWD boolean {
  prompt "pwd" if []
 }
 config USER_SHUTILS_TRUE boolean {
  prompt "true" if []
 }
 config USER_SHUTILS_UNAME boolean {
  prompt "uname" if []
 }
 config USER_SHUTILS_WHICH boolean {
  prompt "which" if []
 }
 config USER_SHUTILS_WHOAMI boolean {
  prompt "whoami" if []
 }
 config USER_SHUTILS_YES boolean {
  prompt "yes" if []
 }
 config USER_SYSUTILS_REBOOT boolean {
  prompt "reboot" if []
 }
 config USER_SYSUTILS_SHUTDOWN boolean {
  prompt "shutdown" if []
 }
 config USER_SYSUTILS_DF boolean {
  prompt "df" if []
 }
 config USER_SYSUTILS_FREE boolean {
  prompt "free" if []
 }
 config USER_SYSUTILS_HOSTNAME boolean {
  prompt "hostname" if []
 }
 config USER_SYSUTILS_KILL boolean {
  prompt "kill" if []
 }
 config USER_SYSUTILS_PS boolean {
  prompt "ps" if []
 }
 config USER_PROCPS_FREE boolean {
  prompt "free" if []
 }
 config USER_PROCPS_KILL boolean {
  prompt "kill" if []
 }
 config USER_PROCPS_PGREP boolean {
  prompt "pgrep" if []
 }
 config USER_PROCPS_PKILL boolean {
  prompt "pkill" if []
 }
 config USER_PROCPS_PS boolean {
  prompt "ps" if []
 }
 config USER_PROCPS_SNICE boolean {
  prompt "snice" if []
 }
 config USER_PROCPS_SYSCTL boolean {
  prompt "sysctl" if []
 }
 config USER_PROCPS_TLOAD boolean {
  prompt "tload" if []
 }
 config USER_PROCPS_TOP boolean {
  prompt "top" if []
  select LIB_NCURSES if []
 }
 config USER_PROCPS_UPTIME boolean {
  prompt "uptime" if []
 }
 config USER_PROCPS_VMSTAT boolean {
  prompt "vmstat" if []
 }
 config USER_PROCPS_W boolean {
  prompt "w" if []
 }
 config USER_PROCPS_WATCH boolean {
  prompt "watch" if []
 }
 config USER_PROCPS_PMAP boolean {
  prompt "pmap" if []
 }
 config USER_PROCPS_SLABTOP boolean {
  prompt "slabtop" if []
 }
 config USER_PROCPS_PWDX boolean {
  prompt "pwdx" if []
 }
 config USER_PCIUTILS_LSPCI boolean {
  prompt "lspci" if []
 }
 config USER_PCIUTILS_SETPCI boolean {
  prompt "setpci" if []
 }
 config USER_CXXTEST_CXXTEST boolean {
  prompt "C++ Test Applications" if []
  select LIB_STLPORT if []
 }
}
menu "BusyBox" {
 config USER_BUSYBOX_BUSYBOX boolean {
  prompt "BusyBox" if []
  if [USER_BUSYBOX_BUSYBOX] {
   config USER_BUSYBOX_HAVE_DOT_CONFIG boolean {
    default [y] if [USER_BUSYBOX_BUSYBOX]
    inherited [USER_BUSYBOX_BUSYBOX]
   }
   menu "Busybox Settings" {
    depends on [USER_BUSYBOX_BUSYBOX]
    menu "General Configuration" {
     depends on [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_NITPICK boolean {
      prompt "See lots more (probably unnecessary) configuration options." if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_DESKTOP boolean {
      prompt "Enable options for full-blown desktop systems" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     choice boolean {
      prompt "Buffer allocation policy" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NITPICK]
      default [USER_BUSYBOX_FEATURE_BUFFERS_USE_MALLOC] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NITPICK]
      depends on [USER_BUSYBOX_NITPICK]
      config USER_BUSYBOX_FEATURE_BUFFERS_USE_MALLOC boolean {
       prompt "Allocate with Malloc" if [<choice>]
       inherited [<choice>]
      }
      config USER_BUSYBOX_FEATURE_BUFFERS_GO_ON_STACK boolean {
       prompt "Allocate on the Stack" if [<choice>]
       inherited [<choice>]
      }
      config USER_BUSYBOX_FEATURE_BUFFERS_GO_IN_BSS boolean {
       prompt "Allocate in the .bss section" if [<choice>]
       inherited [<choice>]
      }
     }
     config USER_BUSYBOX_SHOW_USAGE boolean {
      prompt "Show terse applet usage messages" if [USER_BUSYBOX_BUSYBOX]
      default [y] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_VERBOSE_USAGE boolean {
      prompt "Show verbose applet usage messages" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      select USER_BUSYBOX_SHOW_USAGE if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_COMPRESS_USAGE boolean {
      prompt "Store applet usage messages in compressed form" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SHOW_USAGE]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SHOW_USAGE]
      depends on [USER_BUSYBOX_SHOW_USAGE]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SHOW_USAGE]
     }
     config USER_BUSYBOX_FEATURE_INSTALLER boolean {
      prompt "Support --install [-s] to install applet links at runtime" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_LOCALE_SUPPORT boolean {
      prompt "Enable locale support (system needs locale for this to work)" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_GETOPT_LONG boolean {
      prompt "Support for --long-options" if [USER_BUSYBOX_BUSYBOX]
      default [y] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_DEVPTS boolean {
      prompt "Use the devpts filesystem for Unix98 PTYs" if [USER_BUSYBOX_BUSYBOX]
      default [y] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_CLEAN_UP boolean {
      prompt "Clean up all memory before exiting (usually not needed)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NITPICK]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NITPICK]
      depends on [USER_BUSYBOX_NITPICK]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NITPICK]
     }
     config USER_BUSYBOX_FEATURE_PIDFILE boolean {
      prompt "Support writing pidfiles" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_SUID boolean {
      prompt "Support for SUID/SGID handling" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
      config USER_BUSYBOX_FEATURE_SUID_CONFIG boolean {
       prompt "Runtime SUID/SGID configuration via /etc/busybox.conf" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_SUID]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_SUID]
       depends on [USER_BUSYBOX_FEATURE_SUID]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_SUID]
       config USER_BUSYBOX_FEATURE_SUID_CONFIG_QUIET boolean {
        prompt "Suppress warning message if /etc/busybox.conf is not readable" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_SUID_CONFIG]
        default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_SUID_CONFIG]
        depends on [USER_BUSYBOX_FEATURE_SUID_CONFIG]
        inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_SUID_CONFIG]
       }
      }
     }
     config USER_BUSYBOX_SELINUX boolean {
      prompt "Support NSA Security Enhanced Linux" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_PREFER_APPLETS boolean {
      prompt "exec prefers applets" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_BUSYBOX_EXEC_PATH string {
      prompt "Path to BusyBox executable" if [USER_BUSYBOX_BUSYBOX]
      default ["/proc/self/exe"] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_SYSLOG boolean {
      prompt "Support for logging to syslog" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_HAVE_RPC boolean {
      prompt "RPC support" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
    }
    menu "Build Options" {
     depends on [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_STATIC boolean {
      prompt "Build BusyBox as a static binary (no shared libs)" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_NOMMU boolean {
      prompt "Force NOMMU build" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_BUILD_LIBBUSYBOX boolean {
      prompt "Build shared libbusybox" if [USER_BUSYBOX_BUSYBOX && !USER_BUSYBOX_FEATURE_PREFER_APPLETS]
      default [n] if [USER_BUSYBOX_BUSYBOX && !USER_BUSYBOX_FEATURE_PREFER_APPLETS]
      depends on [!USER_BUSYBOX_FEATURE_PREFER_APPLETS]
      inherited [USER_BUSYBOX_BUSYBOX && !USER_BUSYBOX_FEATURE_PREFER_APPLETS]
      config USER_BUSYBOX_FEATURE_INDIVIDUAL boolean {
       prompt "Produce a binary for each applet, linked against libbusybox" if [USER_BUSYBOX_BUSYBOX && !USER_BUSYBOX_STATIC && USER_BUSYBOX_BUILD_LIBBUSYBOX]
       default [y] if [USER_BUSYBOX_BUSYBOX && !USER_BUSYBOX_STATIC && USER_BUSYBOX_BUILD_LIBBUSYBOX]
       depends on [!USER_BUSYBOX_STATIC && USER_BUSYBOX_BUILD_LIBBUSYBOX]
       inherited [USER_BUSYBOX_BUSYBOX && !USER_BUSYBOX_STATIC && USER_BUSYBOX_BUILD_LIBBUSYBOX]
      }
      config USER_BUSYBOX_FEATURE_SHARED_BUSYBOX boolean {
       prompt "Produce additional busybox binary linked against libbusybox" if [USER_BUSYBOX_BUSYBOX && !USER_BUSYBOX_STATIC && USER_BUSYBOX_BUILD_LIBBUSYBOX]
       default [y] if [USER_BUSYBOX_BUSYBOX && !USER_BUSYBOX_STATIC && USER_BUSYBOX_BUILD_LIBBUSYBOX]
       depends on [!USER_BUSYBOX_STATIC && USER_BUSYBOX_BUILD_LIBBUSYBOX]
       inherited [USER_BUSYBOX_BUSYBOX && !USER_BUSYBOX_STATIC && USER_BUSYBOX_BUILD_LIBBUSYBOX]
      }
     }
     config USER_BUSYBOX_LFS boolean {
      prompt "Build with Large File Support (for accessing files > 2 GB)" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      select USER_BUSYBOX_FDISK_SUPPORT_LARGE_DISKS if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
    }
    menu "Debugging Options" {
     depends on [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_DEBUG boolean {
      prompt "Build BusyBox with extra Debugging symbols" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_WERROR boolean {
      prompt "Abort compilation on any warning" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     choice boolean {
      prompt "Additional debugging library" if [USER_BUSYBOX_BUSYBOX]
      default [USER_BUSYBOX_NO_DEBUG_LIB] if [USER_BUSYBOX_BUSYBOX]
      config USER_BUSYBOX_NO_DEBUG_LIB boolean {
       prompt "None" if [<choice>]
       inherited [<choice>]
      }
      config USER_BUSYBOX_DMALLOC boolean {
       prompt "Dmalloc" if [<choice>]
       inherited [<choice>]
      }
      config USER_BUSYBOX_EFENCE boolean {
       prompt "Electric-fence" if [<choice>]
       inherited [<choice>]
      }
     }
     config USER_BUSYBOX_INCLUDE_SUSv2 boolean {
      prompt "Enable obsolete features removed before SUSv3?" if [USER_BUSYBOX_BUSYBOX]
      default [y] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
    }
    menu "Installation Options" {
     depends on [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_INSTALL_NO_USR boolean {
      prompt "Don't use /usr" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     choice boolean {
      prompt "Applets links" if [USER_BUSYBOX_BUSYBOX]
      default [USER_BUSYBOX_INSTALL_APPLET_SYMLINKS] if [USER_BUSYBOX_BUSYBOX]
      config USER_BUSYBOX_INSTALL_APPLET_SYMLINKS boolean {
       prompt "as soft-links" if [<choice>]
       inherited [<choice>]
      }
      config USER_BUSYBOX_INSTALL_APPLET_HARDLINKS boolean {
       prompt "as hard-links" if [<choice>]
       inherited [<choice>]
      }
      config USER_BUSYBOX_INSTALL_APPLET_SCRIPT_WRAPPERS boolean {
       prompt "as script wrappers" if [<choice>]
       inherited [<choice>]
      }
      config USER_BUSYBOX_INSTALL_APPLET_DONT boolean {
       prompt "not installed" if [<choice> && (USER_BUSYBOX_FEATURE_INSTALLER || USER_BUSYBOX_FEATURE_SH_STANDALONE || USER_BUSYBOX_FEATURE_PREFER_APPLETS)]
       depends on [USER_BUSYBOX_FEATURE_INSTALLER || USER_BUSYBOX_FEATURE_SH_STANDALONE || USER_BUSYBOX_FEATURE_PREFER_APPLETS]
       inherited [<choice> && (USER_BUSYBOX_FEATURE_INSTALLER || USER_BUSYBOX_FEATURE_SH_STANDALONE || USER_BUSYBOX_FEATURE_PREFER_APPLETS)]
      }
     }
     choice boolean {
      prompt "/bin/sh applet link" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSTALL_APPLET_SCRIPT_WRAPPERS]
      default [USER_BUSYBOX_INSTALL_SH_APPLET_SYMLINK] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSTALL_APPLET_SCRIPT_WRAPPERS]
      depends on [USER_BUSYBOX_INSTALL_APPLET_SCRIPT_WRAPPERS]
      config USER_BUSYBOX_INSTALL_SH_APPLET_SYMLINK boolean {
       prompt "as soft-link" if [<choice>]
       inherited [<choice>]
      }
      config USER_BUSYBOX_INSTALL_SH_APPLET_HARDLINK boolean {
       prompt "as hard-link" if [<choice>]
       inherited [<choice>]
      }
      config USER_BUSYBOX_INSTALL_SH_APPLET_SCRIPT_WRAPPER boolean {
       prompt "as script wrapper" if [<choice>]
       inherited [<choice>]
      }
     }
     config USER_BUSYBOX_PREFIX string {
      prompt "BusyBox installation prefix" if [USER_BUSYBOX_BUSYBOX]
      default ["./_install"] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
    }
    menu "Busybox Library Tuning" {
     depends on [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_PASSWORD_MINLEN integer {
      prompt "Minimum password length" if [USER_BUSYBOX_BUSYBOX]
      default [6] if [USER_BUSYBOX_BUSYBOX]
      range [5 32] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_MD5_SIZE_VS_SPEED integer {
      prompt "MD5: Trade Bytes for Speed" if [USER_BUSYBOX_BUSYBOX]
      default [2] if [USER_BUSYBOX_BUSYBOX]
      range [0 3] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_FAST_TOP boolean {
      prompt "Faster /proc scanning code (+100 bytes)" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_ETC_NETWORKS boolean {
      prompt "Support for /etc/networks" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_EDITING boolean {
      prompt "Command line editing" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
      config USER_BUSYBOX_FEATURE_EDITING_MAX_LEN integer {
       prompt "Maximum length of input" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       range [128 8192] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       default [1024] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       depends on [USER_BUSYBOX_FEATURE_EDITING]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
      }
      config USER_BUSYBOX_FEATURE_EDITING_VI boolean {
       prompt "vi-style line editing commands" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       depends on [USER_BUSYBOX_FEATURE_EDITING]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
      }
      config USER_BUSYBOX_FEATURE_EDITING_HISTORY integer {
       prompt "History size" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       range [0 99999] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       default [15] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       depends on [USER_BUSYBOX_FEATURE_EDITING]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
      }
      config USER_BUSYBOX_FEATURE_EDITING_SAVEHISTORY boolean {
       prompt "History saving" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH && USER_BUSYBOX_FEATURE_EDITING]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH && USER_BUSYBOX_FEATURE_EDITING]
       depends on [USER_BUSYBOX_ASH && USER_BUSYBOX_FEATURE_EDITING]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH && USER_BUSYBOX_FEATURE_EDITING]
      }
      config USER_BUSYBOX_FEATURE_TAB_COMPLETION boolean {
       prompt "Tab completion" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       depends on [USER_BUSYBOX_FEATURE_EDITING]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       config USER_BUSYBOX_FEATURE_USERNAME_COMPLETION boolean {
        prompt "Username completion" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_TAB_COMPLETION]
        default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_TAB_COMPLETION]
        depends on [USER_BUSYBOX_FEATURE_TAB_COMPLETION]
        inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_TAB_COMPLETION]
       }
      }
      config USER_BUSYBOX_FEATURE_EDITING_FANCY_PROMPT boolean {
       prompt "Fancy shell prompts" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
       depends on [USER_BUSYBOX_FEATURE_EDITING]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_EDITING]
      }
     }
     config USER_BUSYBOX_FEATURE_VERBOSE_CP_MESSAGE boolean {
      prompt "Give more precise messages when copy fails (cp, mv etc)" if [USER_BUSYBOX_BUSYBOX]
      default [n] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_FEATURE_COPYBUF_KB integer {
      prompt "Copy buffer size, in kilobytes" if [USER_BUSYBOX_BUSYBOX]
      range [1 1024] if [USER_BUSYBOX_BUSYBOX]
      default [4] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_MONOTONIC_SYSCALL boolean {
      prompt "Use clock_gettime(CLOCK_MONOTONIC) syscall" if [USER_BUSYBOX_BUSYBOX]
      default [y] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
     config USER_BUSYBOX_IOCTL_HEX2STR_ERROR boolean {
      prompt "Use ioctl names rather than hex values in error messages" if [USER_BUSYBOX_BUSYBOX]
      default [y] if [USER_BUSYBOX_BUSYBOX]
      inherited [USER_BUSYBOX_BUSYBOX]
     }
    }
   }
   menu "Archival Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_AR boolean {
     prompt "ar" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_AR_LONG_FILENAMES boolean {
      prompt "Support for long filenames (not need for debs)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_AR]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_AR]
      depends on [USER_BUSYBOX_AR]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_AR]
     }
    }
    config USER_BUSYBOX_BUNZIP2 boolean {
     prompt "bunzip2" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_BZIP2 boolean {
     prompt "bzip2" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CPIO boolean {
     prompt "cpio" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_DPKG boolean {
     prompt "dpkg" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_DPKG_DEB boolean {
     prompt "dpkg_deb" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_DPKG_DEB_EXTRACT_ONLY boolean {
      prompt "Extract only (-x)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DPKG_DEB]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DPKG_DEB]
      depends on [USER_BUSYBOX_DPKG_DEB]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DPKG_DEB]
     }
    }
    config USER_BUSYBOX_GUNZIP boolean {
     prompt "gunzip" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_GUNZIP_UNCOMPRESS boolean {
      prompt "Uncompress support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GUNZIP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GUNZIP]
      depends on [USER_BUSYBOX_GUNZIP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GUNZIP]
     }
    }
    config USER_BUSYBOX_GZIP boolean {
     prompt "gzip" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RPM2CPIO boolean {
     prompt "rpm2cpio" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RPM boolean {
     prompt "rpm" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_RPM_BZ2 boolean {
      prompt "Enable handling of rpms with bzip2-compressed data inside" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RPM]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RPM]
      depends on [USER_BUSYBOX_RPM]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RPM]
     }
    }
    config USER_BUSYBOX_TAR boolean {
     prompt "tar" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_TAR_CREATE boolean {
      prompt "Enable archive creation" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
      depends on [USER_BUSYBOX_TAR]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     }
     config USER_BUSYBOX_FEATURE_TAR_GZIP boolean {
      prompt "Enable -z option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
      depends on [USER_BUSYBOX_TAR]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     }
     config USER_BUSYBOX_FEATURE_TAR_BZIP2 boolean {
      prompt "Enable -j option to handle .tar.bz2 files" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
      depends on [USER_BUSYBOX_TAR]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     }
     config USER_BUSYBOX_FEATURE_TAR_LZMA boolean {
      prompt "Enable -a option to handle .tar.lzma files" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
      depends on [USER_BUSYBOX_TAR]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     }
     config USER_BUSYBOX_FEATURE_TAR_COMPRESS boolean {
      prompt "Enable -Z option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
      depends on [USER_BUSYBOX_TAR]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     }
    }
    config USER_BUSYBOX_FEATURE_TAR_AUTODETECT boolean {
     prompt "Let tar autodetect gz/bz2 compresses tarballs" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_FEATURE_TAR_GZIP || USER_BUSYBOX_FEATURE_TAR_BZIP2)]
     default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_FEATURE_TAR_GZIP || USER_BUSYBOX_FEATURE_TAR_BZIP2)]
     depends on [USER_BUSYBOX_FEATURE_TAR_GZIP || USER_BUSYBOX_FEATURE_TAR_BZIP2]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_FEATURE_TAR_GZIP || USER_BUSYBOX_FEATURE_TAR_BZIP2)]
    }
    config USER_BUSYBOX_FEATURE_TAR_FROM boolean {
     prompt "Enable -X (exclude from) and -T (include from) options)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     depends on [USER_BUSYBOX_TAR]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
    }
    config USER_BUSYBOX_FEATURE_TAR_OLDGNU_COMPATIBILITY boolean {
     prompt "Support for old tar header format" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     default [N] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     depends on [USER_BUSYBOX_TAR]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
    }
    config USER_BUSYBOX_FEATURE_TAR_OLDSUN_COMPATIBILITY boolean {
     prompt "Enable untarring of tarballs with checksums produced by buggy Sun tar" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     default [N] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     depends on [USER_BUSYBOX_TAR]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
    }
    config USER_BUSYBOX_FEATURE_TAR_GNU_EXTENSIONS boolean {
     prompt "Support for GNU tar extensions (long filenames)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     depends on [USER_BUSYBOX_TAR]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
    }
    config USER_BUSYBOX_FEATURE_TAR_LONG_OPTIONS boolean {
     prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR && USER_BUSYBOX_GETOPT_LONG]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR && USER_BUSYBOX_GETOPT_LONG]
     depends on [USER_BUSYBOX_TAR && USER_BUSYBOX_GETOPT_LONG]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR && USER_BUSYBOX_GETOPT_LONG]
    }
    config USER_BUSYBOX_FEATURE_TAR_UNAME_GNAME boolean {
     prompt "Enable use of user and group names" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
     depends on [USER_BUSYBOX_TAR]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAR]
    }
    config USER_BUSYBOX_UNCOMPRESS boolean {
     prompt "uncompress" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_UNLZMA boolean {
     prompt "unlzma" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_LZMA_FAST boolean {
      prompt "Optimze unlzma for speed" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_UNLZMA]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_UNLZMA]
      depends on [USER_BUSYBOX_UNLZMA]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_UNLZMA]
     }
    }
    config USER_BUSYBOX_UNZIP boolean {
     prompt "unzip" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FEATURE_UNARCHIVE_TAPE boolean {
     prompt "Enable tape drive support" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_CPIO || USER_BUSYBOX_TAR)]
     default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_CPIO || USER_BUSYBOX_TAR)]
     depends on [USER_BUSYBOX_CPIO || USER_BUSYBOX_TAR]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_CPIO || USER_BUSYBOX_TAR)]
    }
    config USER_BUSYBOX_FEATURE_DEB_TAR_GZ boolean {
     prompt "gzip debian packages (normal)" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB)]
     default [y] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB) && (DPKG || DPKG_DEB)]
     depends on [USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB)]
    }
    config USER_BUSYBOX_FEATURE_DEB_TAR_BZ2 boolean {
     prompt "bzip2 debian packages" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB)]
     default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB)]
     depends on [USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB)]
    }
    config USER_BUSYBOX_FEATURE_DEB_TAR_LZMA boolean {
     prompt "lzma debian packages" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB)]
     default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB)]
     depends on [USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DPKG || USER_BUSYBOX_DPKG_DEB)]
    }
   }
   menu "Coreutils" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_BASENAME boolean {
     prompt "basename" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CAL boolean {
     prompt "cal" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CAT boolean {
     prompt "cat" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CATV boolean {
     prompt "catv" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CHGRP boolean {
     prompt "chgrp" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CHMOD boolean {
     prompt "chmod" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CHOWN boolean {
     prompt "chown" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CHROOT boolean {
     prompt "chroot" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CKSUM boolean {
     prompt "cksum" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_COMM boolean {
     prompt "comm" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CP boolean {
     prompt "cp" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CUT boolean {
     prompt "cut" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_DATE boolean {
     prompt "date" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_DATE_ISOFMT boolean {
      prompt "Enable ISO date format output (-I)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DATE]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DATE]
      depends on [USER_BUSYBOX_DATE]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DATE]
     }
    }
    config USER_BUSYBOX_DD boolean {
     prompt "dd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_DD_SIGNAL_HANDLING boolean {
      prompt "Enable DD signal handling for status reporting" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DD]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DD]
      depends on [USER_BUSYBOX_DD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DD]
     }
     config USER_BUSYBOX_FEATURE_DD_IBS_OBS boolean {
      prompt "Enable ibs, obs and conv options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DD]
      depends on [USER_BUSYBOX_DD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DD]
     }
    }
    config USER_BUSYBOX_DF boolean {
     prompt "df" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_DF_INODE boolean {
      prompt "Enable -i (inode information)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DF]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DF]
      depends on [USER_BUSYBOX_DF]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DF]
     }
    }
    config USER_BUSYBOX_DIRNAME boolean {
     prompt "dirname" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_DOS2UNIX boolean {
     prompt "dos2unix/unix2dos" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_UNIX2DOS boolean {
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DOS2UNIX]
      depends on [USER_BUSYBOX_DOS2UNIX]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DOS2UNIX]
     }
    }
    config USER_BUSYBOX_DU boolean {
     prompt "du (default blocksize of 512 bytes)" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_DU_DEFAULT_BLOCKSIZE_1K boolean {
      prompt "Use a default blocksize of 1024 bytes (1K)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DU]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DU]
      depends on [USER_BUSYBOX_DU]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DU]
     }
    }
    config USER_BUSYBOX_ECHO boolean {
     prompt "echo (basic SuSv3 version taking no options)" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_FANCY_ECHO boolean {
      prompt "Enable echo options (-n and -e)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ECHO]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ECHO]
      depends on [USER_BUSYBOX_ECHO]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ECHO]
     }
    }
    config USER_BUSYBOX_ENV boolean {
     prompt "env" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_ENV_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ENV && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ENV && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_ENV && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ENV && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_EXPAND boolean {
     prompt "expand" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_EXPAND_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_EXPAND && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_EXPAND && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_EXPAND && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_EXPAND && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_EXPR boolean {
     prompt "expr" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_EXPR_MATH_SUPPORT_64 boolean {
      prompt "Extend Posix numbers support to 64 bit" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_EXPR]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_EXPR]
      depends on [USER_BUSYBOX_EXPR]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_EXPR]
     }
    }
    config USER_BUSYBOX_FALSE boolean {
     prompt "false" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FOLD boolean {
     prompt "fold" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_HEAD boolean {
     prompt "head" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_FANCY_HEAD boolean {
      prompt "Enable head options (-c, -q, and -v)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HEAD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HEAD]
      depends on [USER_BUSYBOX_HEAD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HEAD]
     }
    }
    config USER_BUSYBOX_HOSTID boolean {
     prompt "hostid" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_ID boolean {
     prompt "id" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_INSTALL boolean {
     prompt "install" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_INSTALL_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSTALL && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSTALL && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_INSTALL && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSTALL && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_LENGTH boolean {
     prompt "length" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LN boolean {
     prompt "ln" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LOGNAME boolean {
     prompt "logname" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LS boolean {
     prompt "ls" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_LS_FILETYPES boolean {
      prompt "Enable filetyping options (-p and -F)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      depends on [USER_BUSYBOX_LS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
     }
     config USER_BUSYBOX_FEATURE_LS_FOLLOWLINKS boolean {
      prompt "Enable symlinks dereferencing (-L)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      depends on [USER_BUSYBOX_LS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
     }
     config USER_BUSYBOX_FEATURE_LS_RECURSIVE boolean {
      prompt "Enable recursion (-R)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      depends on [USER_BUSYBOX_LS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
     }
     config USER_BUSYBOX_FEATURE_LS_SORTFILES boolean {
      prompt "Sort the file names" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      depends on [USER_BUSYBOX_LS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
     }
     config USER_BUSYBOX_FEATURE_LS_TIMESTAMPS boolean {
      prompt "Show file timestamps" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      depends on [USER_BUSYBOX_LS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
     }
     config USER_BUSYBOX_FEATURE_LS_USERNAME boolean {
      prompt "Show username/groupnames" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
      depends on [USER_BUSYBOX_LS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS]
     }
     config USER_BUSYBOX_FEATURE_LS_COLOR boolean {
      prompt "Allow use of color to identify file types" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS && USER_BUSYBOX_GETOPT_LONG]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_LS && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LS && USER_BUSYBOX_GETOPT_LONG]
      config USER_BUSYBOX_FEATURE_LS_COLOR_IS_DEFAULT boolean {
       prompt "Produce colored ls output by default" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_LS_COLOR]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_LS_COLOR]
       depends on [USER_BUSYBOX_FEATURE_LS_COLOR]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_LS_COLOR]
      }
     }
    }
    config USER_BUSYBOX_MD5SUM boolean {
     prompt "md5sum" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_MKDIR boolean {
     prompt "mkdir" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_MKDIR_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MKDIR && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MKDIR && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_MKDIR && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MKDIR && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_MKFIFO boolean {
     prompt "mkfifo" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_MKNOD boolean {
     prompt "mknod" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_MV boolean {
     prompt "mv" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_MV_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MV && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MV && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_MV && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MV && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_NICE boolean {
     prompt "nice" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_NOHUP boolean {
     prompt "nohup" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_OD boolean {
     prompt "od" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_PRINTENV boolean {
     prompt "printenv" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_PRINTF boolean {
     prompt "printf" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_PWD boolean {
     prompt "pwd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_READLINK boolean {
     prompt "readlink" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_READLINK_FOLLOW boolean {
      prompt "Enable canonicalization by following all symlinks (-f)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_READLINK]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_READLINK]
      depends on [USER_BUSYBOX_READLINK]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_READLINK]
     }
    }
    config USER_BUSYBOX_REALPATH boolean {
     prompt "realpath" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RM boolean {
     prompt "rm" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RMDIR boolean {
     prompt "rmdir" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_RMDIR_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RMDIR && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RMDIR && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_RMDIR && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RMDIR && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_SEQ boolean {
     prompt "seq" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SHA1SUM boolean {
     prompt "sha1sum" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SLEEP boolean {
     prompt "sleep (single integer arg with no suffix)" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_FANCY_SLEEP boolean {
      prompt "Enable multiple integer args and optional time suffixes" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SLEEP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SLEEP]
      depends on [USER_BUSYBOX_SLEEP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SLEEP]
     }
    }
    config USER_BUSYBOX_SORT boolean {
     prompt "sort" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_SORT_BIG boolean {
      prompt "Full SuSv3 compliant sort (support -ktcsbdfiozgM)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SORT]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SORT]
      depends on [USER_BUSYBOX_SORT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SORT]
     }
    }
    config USER_BUSYBOX_SPLIT boolean {
     prompt "split" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_SPLIT_FANCY boolean {
      prompt "Fancy extensions" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SPLIT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SPLIT]
      depends on [USER_BUSYBOX_SPLIT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SPLIT]
     }
    }
    config USER_BUSYBOX_STAT boolean {
     prompt "stat" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_STAT_FORMAT boolean {
      prompt "Enable custom formats (-c)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_STAT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_STAT]
      depends on [USER_BUSYBOX_STAT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_STAT]
     }
    }
    config USER_BUSYBOX_STTY boolean {
     prompt "stty" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SUM boolean {
     prompt "sum" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SYNC boolean {
     prompt "sync" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_TAC boolean {
     prompt "tac" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_TAIL boolean {
     prompt "tail" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_FANCY_TAIL boolean {
      prompt "Enable extra tail options (-q, -s, and -v)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAIL]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAIL]
      depends on [USER_BUSYBOX_TAIL]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TAIL]
     }
    }
    config USER_BUSYBOX_TEE boolean {
     prompt "tee" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_TEE_USE_BLOCK_IO boolean {
      prompt "Enable block I/O (larger/faster) instead of byte I/O" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TEE]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TEE]
      depends on [USER_BUSYBOX_TEE]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TEE]
     }
    }
    config USER_BUSYBOX_TEST boolean {
     prompt "test" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_TEST_64 boolean {
      prompt "Extend test to 64 bit" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TEST]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TEST]
      depends on [USER_BUSYBOX_TEST]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TEST]
     }
    }
    config USER_BUSYBOX_TOUCH boolean {
     prompt "touch" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_TR boolean {
     prompt "tr" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_TR_CLASSES boolean {
      prompt "Enable character classes (such as [:upper:])" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TR]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TR]
      depends on [USER_BUSYBOX_TR]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TR]
     }
     config USER_BUSYBOX_FEATURE_TR_EQUIV boolean {
      prompt "Enable equivalence classes" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TR]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TR]
      depends on [USER_BUSYBOX_TR]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TR]
     }
    }
    config USER_BUSYBOX_TRUE boolean {
     prompt "true" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_TTY boolean {
     prompt "tty" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_UNAME boolean {
     prompt "uname" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_UNEXPAND boolean {
     prompt "unexpand" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_UNEXPAND_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_UNEXPAND && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_UNEXPAND && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_UNEXPAND && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_UNEXPAND && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_UNIQ boolean {
     prompt "uniq" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_USLEEP boolean {
     prompt "usleep" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_UUDECODE boolean {
     prompt "uudecode" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_UUENCODE boolean {
     prompt "uuencode" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_WC boolean {
     prompt "wc" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_WC_LARGE boolean {
      prompt "Support very large files in wc" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WC]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WC]
      depends on [USER_BUSYBOX_WC]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WC]
     }
    }
    config USER_BUSYBOX_WHO boolean {
     prompt "who" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_UTMP if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_WHOAMI boolean {
     prompt "whoami" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_YES boolean {
     prompt "yes" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FEATURE_PRESERVE_HARDLINKS boolean {
     prompt "Preserve hard links" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_CP || USER_BUSYBOX_MV)]
     default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_CP || USER_BUSYBOX_MV)]
     depends on [USER_BUSYBOX_CP || USER_BUSYBOX_MV]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_CP || USER_BUSYBOX_MV)]
    }
    config USER_BUSYBOX_FEATURE_AUTOWIDTH boolean {
     prompt "Calculate terminal & column widths" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_LS || USER_BUSYBOX_MORE || USER_BUSYBOX_TELNET)]
     default [y] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_LS || USER_BUSYBOX_MORE || USER_BUSYBOX_TELNET)]
     depends on [USER_BUSYBOX_LS || USER_BUSYBOX_MORE || USER_BUSYBOX_TELNET]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_LS || USER_BUSYBOX_MORE || USER_BUSYBOX_TELNET)]
    }
    config USER_BUSYBOX_FEATURE_HUMAN_READABLE boolean {
     prompt "Support for human readable output (example 13k, 23M, 235G)" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DF || USER_BUSYBOX_DU || USER_BUSYBOX_LS)]
     default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DF || USER_BUSYBOX_DU || USER_BUSYBOX_LS)]
     depends on [USER_BUSYBOX_DF || USER_BUSYBOX_DU || USER_BUSYBOX_LS]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_DF || USER_BUSYBOX_DU || USER_BUSYBOX_LS)]
    }
    config USER_BUSYBOX_FEATURE_MD5_SHA1_SUM_CHECK boolean {
     prompt "Enable -c, -s and -w options" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MD5SUM || USER_BUSYBOX_SHA1SUM)]
     default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MD5SUM || USER_BUSYBOX_SHA1SUM)]
     depends on [USER_BUSYBOX_MD5SUM || USER_BUSYBOX_SHA1SUM]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MD5SUM || USER_BUSYBOX_SHA1SUM)]
    }
   }
   menu "Console Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_CHVT boolean {
     prompt "chvt" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CLEAR boolean {
     prompt "clear" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_DEALLOCVT boolean {
     prompt "deallocvt" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_DUMPKMAP boolean {
     prompt "dumpkmap" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_KBD_MODE boolean {
     prompt "kbd_mode" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LOADFONT boolean {
     prompt "loadfont" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LOADKMAP boolean {
     prompt "loadkmap" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_OPENVT boolean {
     prompt "openvt" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RESET boolean {
     prompt "reset" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RESIZE boolean {
     prompt "resize" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_RESIZE_PRINT boolean {
      prompt "Print environment variables" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RESIZE]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RESIZE]
      depends on [USER_BUSYBOX_RESIZE]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RESIZE]
     }
    }
    config USER_BUSYBOX_SETCONSOLE boolean {
     prompt "setconsole" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_SETCONSOLE_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SETCONSOLE && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SETCONSOLE && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_SETCONSOLE && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SETCONSOLE && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_SETKEYCODES boolean {
     prompt "setkeycodes" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SETLOGCONS boolean {
     prompt "setlogcons" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "Debian Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_MKTEMP boolean {
     prompt "mktemp" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_PIPE_PROGRESS boolean {
     prompt "pipe_progress" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RUN_PARTS boolean {
     prompt "run-parts" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_RUN_PARTS_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RUN_PARTS && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RUN_PARTS && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_RUN_PARTS && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_RUN_PARTS && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config FEATURE_RUN_PARTS_FANCY boolean {
     prompt "Support additional arguments" if [USER_BUSYBOX_BUSYBOX && RUN_PARTS]
     default [n] if [USER_BUSYBOX_BUSYBOX && RUN_PARTS]
     depends on [RUN_PARTS]
     inherited [USER_BUSYBOX_BUSYBOX && RUN_PARTS]
    }
    config USER_BUSYBOX_START_STOP_DAEMON boolean {
     prompt "start-stop-daemon" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_START_STOP_DAEMON_FANCY boolean {
      prompt "Support additional arguments" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_START_STOP_DAEMON]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_START_STOP_DAEMON]
      depends on [USER_BUSYBOX_START_STOP_DAEMON]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_START_STOP_DAEMON]
     }
     config USER_BUSYBOX_FEATURE_START_STOP_DAEMON_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_START_STOP_DAEMON && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_START_STOP_DAEMON && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_START_STOP_DAEMON && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_START_STOP_DAEMON && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_WHICH boolean {
     prompt "which" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "Editors" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_AWK boolean {
     prompt "awk" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_AWK_MATH boolean {
      prompt "Enable math functions (requires libm)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_AWK]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_AWK]
      depends on [USER_BUSYBOX_AWK]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_AWK]
     }
    }
    config USER_BUSYBOX_CMP boolean {
     prompt "cmp" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_DIFF boolean {
     prompt "diff" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_DIFF_BINARY boolean {
      prompt "Enable checks for binary files" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DIFF]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DIFF]
      depends on [USER_BUSYBOX_DIFF]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DIFF]
     }
     config USER_BUSYBOX_FEATURE_DIFF_DIR boolean {
      prompt "Enable directory support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DIFF]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DIFF]
      depends on [USER_BUSYBOX_DIFF]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DIFF]
     }
     config USER_BUSYBOX_FEATURE_DIFF_MINIMAL boolean {
      prompt "Enable -d option to find smaller sets of changes" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DIFF]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DIFF]
      depends on [USER_BUSYBOX_DIFF]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DIFF]
     }
    }
    config USER_BUSYBOX_ED boolean {
     prompt "ed" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_PATCH boolean {
     prompt "patch" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SED boolean {
     prompt "sed" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_VI boolean {
     prompt "vi" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_VI_MAX_LEN integer {
      prompt "Maximum screen width in vi" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      range [256 16384] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [4096] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_8BIT boolean {
      prompt "Allow vi to display 8-bit chars (otherwise shows dots)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_COLON boolean {
      prompt "Enable \":\" colon commands (no \"ex\" mode)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_YANKMARK boolean {
      prompt "Enable yank/put commands and mark cmds" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_SEARCH boolean {
      prompt "Enable search and replace cmds" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_USE_SIGNALS boolean {
      prompt "Catch signals" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_DOT_CMD boolean {
      prompt "Remember previous cmd and \".\" cmd" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_READONLY boolean {
      prompt "Enable -R option and \"view\" mode" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_SETOPTS boolean {
      prompt "Enable set-able options, ai ic showmatch" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_SET boolean {
      prompt "Support for :set" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_WIN_RESIZE boolean {
      prompt "Handle window resize" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_VI_OPTIMIZE_CURSOR boolean {
      prompt "Optimize cursor movement" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
      depends on [USER_BUSYBOX_VI]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VI]
     }
     config USER_BUSYBOX_FEATURE_ALLOW_EXEC boolean {
      prompt "Allow vi and awk to execute shell commands" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_VI || USER_BUSYBOX_AWK)]
      default [y] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_VI || USER_BUSYBOX_AWK)]
      depends on [USER_BUSYBOX_VI || USER_BUSYBOX_AWK]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_VI || USER_BUSYBOX_AWK)]
     }
    }
   }
   menu "Finding Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_FIND boolean {
     prompt "find" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_FIND_PRINT0 boolean {
      prompt "Enable -print0 option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_MTIME boolean {
      prompt "Enable modified time matching (-mtime) option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_MMIN boolean {
      prompt "Enable modified time matching (-mmin) option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_PERM boolean {
      prompt "Enable permissions matching (-perm) option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_TYPE boolean {
      prompt "Enable filetype matching (-type) option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_XDEV boolean {
      prompt "Enable stay in filesystem (-xdev) option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_MAXDEPTH boolean {
      prompt "Enable -maxdepth N option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_NEWER boolean {
      prompt "Enable -newer option for comparing file mtimes" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_INUM boolean {
      prompt "Enable inode number matching (-inum) option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_EXEC boolean {
      prompt "Enable (-exec) option allowing execution of commands" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_USER boolean {
      prompt "Enable username/uid matching (-user) option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_GROUP boolean {
      prompt "Enable group/gid matching (-group) option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_NOT boolean {
      prompt "Enable the 'not' (!) operator" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_DEPTH boolean {
      prompt "Enable the -depth option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_PAREN boolean {
      prompt "Enable parens in options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_SIZE boolean {
      prompt "Enable (-size) option allowing matching for file size" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_PRUNE boolean {
      prompt "Enable (-prune) option allowing to exclude subdirectories" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_DELETE boolean {
      prompt "Enable -delete option allowing to delete files" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND && USER_BUSYBOX_FEATURE_FIND_DEPTH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND && USER_BUSYBOX_FEATURE_FIND_DEPTH]
      depends on [USER_BUSYBOX_FIND && USER_BUSYBOX_FEATURE_FIND_DEPTH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND && USER_BUSYBOX_FEATURE_FIND_DEPTH]
     }
     config USER_BUSYBOX_FEATURE_FIND_PATH boolean {
      prompt "Enable -path option allowing to match pathname patterns" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_REGEX boolean {
      prompt "Enable -regex: match pathname to regex" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
      depends on [USER_BUSYBOX_FIND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND]
     }
     config USER_BUSYBOX_FEATURE_FIND_CONTEXT boolean {
      prompt "Enable (-context) option for matching security context" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND && USER_BUSYBOX_SELINUX]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND && USER_BUSYBOX_SELINUX]
      depends on [USER_BUSYBOX_FIND && USER_BUSYBOX_SELINUX]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FIND && USER_BUSYBOX_SELINUX]
     }
    }
    config USER_BUSYBOX_GREP boolean {
     prompt "grep" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_GREP_EGREP_ALIAS boolean {
      prompt "Support extended regular expressions (egrep & grep -E)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GREP]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GREP]
      depends on [USER_BUSYBOX_GREP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GREP]
     }
     config USER_BUSYBOX_FEATURE_GREP_FGREP_ALIAS boolean {
      prompt "Alias fgrep to grep -F" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GREP]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GREP]
      depends on [USER_BUSYBOX_GREP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GREP]
     }
     config USER_BUSYBOX_FEATURE_GREP_CONTEXT boolean {
      prompt "Enable before and after context flags (-A, -B and -C)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GREP]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GREP]
      depends on [USER_BUSYBOX_GREP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GREP]
     }
    }
    config USER_BUSYBOX_XARGS boolean {
     prompt "xargs" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_XARGS_SUPPORT_CONFIRMATION boolean {
      prompt "Enable prompt and confirmation option -p" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
      depends on [USER_BUSYBOX_XARGS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
     }
     config USER_BUSYBOX_FEATURE_XARGS_SUPPORT_QUOTES boolean {
      prompt "Enable support single and double quotes and backslash" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
      depends on [USER_BUSYBOX_XARGS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
     }
     config USER_BUSYBOX_FEATURE_XARGS_SUPPORT_TERMOPT boolean {
      prompt "Enable support options -x" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
      depends on [USER_BUSYBOX_XARGS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
     }
     config USER_BUSYBOX_FEATURE_XARGS_SUPPORT_ZERO_TERM boolean {
      prompt "Enable null terminated option -0" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
      depends on [USER_BUSYBOX_XARGS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_XARGS]
     }
    }
   }
   menu "Init Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_INIT boolean {
     prompt "init" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_DEBUG_INIT boolean {
      prompt "Debugging aid" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      depends on [USER_BUSYBOX_INIT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
     }
     config USER_BUSYBOX_FEATURE_USE_INITTAB boolean {
      prompt "Support reading an inittab file" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      depends on [USER_BUSYBOX_INIT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      config USER_BUSYBOX_FEATURE_KILL_REMOVED boolean {
       prompt "Support killing processes that have been removed from inittab" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_USE_INITTAB]
       default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_USE_INITTAB]
       depends on [USER_BUSYBOX_FEATURE_USE_INITTAB]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_USE_INITTAB]
       config USER_BUSYBOX_FEATURE_KILL_DELAY integer {
        prompt "How long to wait between TERM and KILL (0 - send TERM only)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT && USER_BUSYBOX_FEATURE_KILL_REMOVED]
        range [0 1024] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
        default [0] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
        depends on [USER_BUSYBOX_INIT]
        inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
       }
      }
     }
     config USER_BUSYBOX_FEATURE_INIT_SCTTY boolean {
      prompt "Run commands with leading dash with controlling tty" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      depends on [USER_BUSYBOX_INIT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
     }
     config USER_BUSYBOX_FEATURE_INIT_SYSLOG boolean {
      prompt "Enable init to write to syslog" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      depends on [USER_BUSYBOX_INIT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
     }
     config USER_BUSYBOX_FEATURE_EXTRA_QUIET boolean {
      prompt "Be _extra_ quiet on boot" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      depends on [USER_BUSYBOX_INIT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
     }
     config USER_BUSYBOX_FEATURE_INIT_COREDUMPS boolean {
      prompt "Support dumping core for child processes (debugging only)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      depends on [USER_BUSYBOX_INIT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
     }
     config USER_BUSYBOX_FEATURE_INITRD boolean {
      prompt "Support running init from within an initrd (not initramfs)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
      depends on [USER_BUSYBOX_INIT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INIT]
     }
    }
    config USER_BUSYBOX_HALT boolean {
     prompt "poweroff, halt, and reboot" if [USER_BUSYBOX_BUSYBOX]
     default [y] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_MESG boolean {
     prompt "mesg" if [USER_BUSYBOX_BUSYBOX]
     default [y] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "Login/Password Management Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_FEATURE_SHADOWPASSWDS boolean {
     prompt "Support for shadow passwords" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_USE_BB_SHADOW boolean {
      prompt "Use busybox shadow password functions" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_USE_BB_PWD_GRP && USER_BUSYBOX_FEATURE_SHADOWPASSWDS]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_USE_BB_PWD_GRP && USER_BUSYBOX_FEATURE_SHADOWPASSWDS]
      depends on [USER_BUSYBOX_USE_BB_PWD_GRP && USER_BUSYBOX_FEATURE_SHADOWPASSWDS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_USE_BB_PWD_GRP && USER_BUSYBOX_FEATURE_SHADOWPASSWDS]
     }
    }
    config USER_BUSYBOX_USE_BB_PWD_GRP boolean {
     prompt "Use internal password and group functions rather than system functions" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_ADDGROUP boolean {
     prompt "addgroup" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_ADDUSER_TO_GROUP boolean {
      prompt "Support for adding users to groups" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ADDGROUP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ADDGROUP]
      depends on [USER_BUSYBOX_ADDGROUP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ADDGROUP]
     }
    }
    config USER_BUSYBOX_DELGROUP boolean {
     prompt "delgroup" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_DEL_USER_FROM_GROUP boolean {
      prompt "Support for removing users from groups." if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DELGROUP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DELGROUP]
      depends on [USER_BUSYBOX_DELGROUP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DELGROUP]
     }
    }
    config USER_BUSYBOX_FEATURE_CHECK_NAMES boolean {
     prompt "Enable sanity check on user/group names in adduser and addgroup" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_ADDUSER || USER_BUSYBOX_ADDGROUP)]
     default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_ADDUSER || USER_BUSYBOX_ADDGROUP)]
     depends on [USER_BUSYBOX_ADDUSER || USER_BUSYBOX_ADDGROUP]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_ADDUSER || USER_BUSYBOX_ADDGROUP)]
    }
    config USER_BUSYBOX_ADDUSER boolean {
     prompt "adduser" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_ADDUSER_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ADDUSER && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ADDUSER && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_ADDUSER && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ADDUSER && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_DELUSER boolean {
     prompt "deluser" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_GETTY boolean {
     prompt "getty" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_UTMP boolean {
      prompt "Support utmp file" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_GETTY || USER_BUSYBOX_LOGIN || USER_BUSYBOX_SU || USER_BUSYBOX_WHO)]
      depends on [USER_BUSYBOX_GETTY || USER_BUSYBOX_LOGIN || USER_BUSYBOX_SU || USER_BUSYBOX_WHO]
      default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_GETTY || USER_BUSYBOX_LOGIN || USER_BUSYBOX_SU || USER_BUSYBOX_WHO)]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_GETTY || USER_BUSYBOX_LOGIN || USER_BUSYBOX_SU || USER_BUSYBOX_WHO)]
     }
     config USER_BUSYBOX_FEATURE_WTMP boolean {
      prompt "Support wtmp file" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_GETTY || USER_BUSYBOX_LOGIN || USER_BUSYBOX_SU || USER_BUSYBOX_LAST)]
      depends on [USER_BUSYBOX_GETTY || USER_BUSYBOX_LOGIN || USER_BUSYBOX_SU || USER_BUSYBOX_LAST]
      default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_GETTY || USER_BUSYBOX_LOGIN || USER_BUSYBOX_SU || USER_BUSYBOX_LAST)]
      select USER_BUSYBOX_FEATURE_UTMP if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_GETTY || USER_BUSYBOX_LOGIN || USER_BUSYBOX_SU || USER_BUSYBOX_LAST)]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_GETTY || USER_BUSYBOX_LOGIN || USER_BUSYBOX_SU || USER_BUSYBOX_LAST)]
     }
    }
    config USER_BUSYBOX_LOGIN boolean {
     prompt "login" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SUID if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_PAM boolean {
      prompt "Support for PAM (Pluggable Authentication Modules)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
      depends on [USER_BUSYBOX_LOGIN]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
     }
     config USER_BUSYBOX_LOGIN_SCRIPTS boolean {
      prompt "Support for login scripts" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
      depends on [USER_BUSYBOX_LOGIN]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
     }
     config USER_BUSYBOX_FEATURE_NOLOGIN boolean {
      prompt "Support for /etc/nologin" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
      depends on [USER_BUSYBOX_LOGIN]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
     }
     config USER_BUSYBOX_FEATURE_SECURETTY boolean {
      prompt "Support for /etc/securetty" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
      depends on [USER_BUSYBOX_LOGIN]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGIN]
     }
    }
    config USER_BUSYBOX_PASSWD boolean {
     prompt "passwd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SUID if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_PASSWD_WEAK_CHECK boolean {
      prompt "Check new passwords for weakness" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PASSWD]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PASSWD]
      depends on [USER_BUSYBOX_PASSWD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PASSWD]
     }
    }
    config USER_BUSYBOX_CRYPTPW boolean {
     prompt "cryptpw" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CHPASSWD boolean {
     prompt "chpasswd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SU boolean {
     prompt "su" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SUID if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_SU_SYSLOG boolean {
      prompt "Enable su to write to syslog" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SU]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SU]
      depends on [USER_BUSYBOX_SU]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SU]
     }
     config USER_BUSYBOX_FEATURE_SU_CHECKS_SHELLS boolean {
      prompt "Enable su to check user's shell to be listed in /etc/shells" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SU]
      depends on [USER_BUSYBOX_SU]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SU]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SU]
     }
    }
    config USER_BUSYBOX_SULOGIN boolean {
     prompt "sulogin" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_VLOCK boolean {
     prompt "vlock" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SUID if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "Linux Ext2 FS Progs" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_CHATTR boolean {
     prompt "chattr" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FSCK boolean {
     prompt "fsck" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LSATTR boolean {
     prompt "lsattr" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "Linux Module Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_INSMOD boolean {
     prompt "insmod" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_INSMOD_VERSION_CHECKING boolean {
      prompt "Module version checking" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
      depends on [USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
     }
     config USER_BUSYBOX_FEATURE_INSMOD_KSYMOOPS_SYMBOLS boolean {
      prompt "Add module symbols to kernel symbol table" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
      depends on [USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
     }
     config USER_BUSYBOX_FEATURE_INSMOD_LOADINKMEM boolean {
      prompt "In kernel memory optimization (uClinux only)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
      depends on [USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && USER_BUSYBOX_FEATURE_2_4_MODULES]
     }
     config USER_BUSYBOX_FEATURE_INSMOD_LOAD_MAP boolean {
      prompt "Enable load map (-m) option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && (USER_BUSYBOX_FEATURE_2_4_MODULES || USER_BUSYBOX_FEATURE_2_6_MODULES)]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && (USER_BUSYBOX_FEATURE_2_4_MODULES || USER_BUSYBOX_FEATURE_2_6_MODULES)]
      depends on [USER_BUSYBOX_INSMOD && (USER_BUSYBOX_FEATURE_2_4_MODULES || USER_BUSYBOX_FEATURE_2_6_MODULES)]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INSMOD && (USER_BUSYBOX_FEATURE_2_4_MODULES || USER_BUSYBOX_FEATURE_2_6_MODULES)]
      config USER_BUSYBOX_FEATURE_INSMOD_LOAD_MAP_FULL boolean {
       prompt "Symbols in load map" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_INSMOD_LOAD_MAP]
       default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_INSMOD_LOAD_MAP]
       depends on [USER_BUSYBOX_FEATURE_INSMOD_LOAD_MAP]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_INSMOD_LOAD_MAP]
      }
     }
    }
    config USER_BUSYBOX_RMMOD boolean {
     prompt "rmmod" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LSMOD boolean {
     prompt "lsmod" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_LSMOD_PRETTY_2_6_OUTPUT boolean {
      prompt "Pretty output for 2.6.x Linux kernels" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LSMOD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LSMOD]
      depends on [USER_BUSYBOX_LSMOD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LSMOD]
     }
    }
    config USER_BUSYBOX_MODPROBE boolean {
     prompt "modprobe" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_MODPROBE_MULTIPLE_OPTIONS boolean {
      prompt "Multiple options parsing" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MODPROBE && USER_BUSYBOX_NITPICK]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MODPROBE]
      depends on [USER_BUSYBOX_MODPROBE]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MODPROBE]
     }
     config USER_BUSYBOX_FEATURE_MODPROBE_FANCY_ALIAS boolean {
      prompt "Fancy alias parsing" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MODPROBE && USER_BUSYBOX_FEATURE_2_6_MODULES && USER_BUSYBOX_NITPICK]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MODPROBE && USER_BUSYBOX_FEATURE_2_6_MODULES]
      depends on [USER_BUSYBOX_MODPROBE && USER_BUSYBOX_FEATURE_2_6_MODULES]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MODPROBE && USER_BUSYBOX_FEATURE_2_6_MODULES]
     }
    }
    config USER_BUSYBOX_FEATURE_CHECK_TAINTED_MODULE boolean {
     prompt "Support tainted module checking with new kernels" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_INSMOD || USER_BUSYBOX_LSMOD)]
     default [y] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_INSMOD || USER_BUSYBOX_LSMOD)]
     depends on [USER_BUSYBOX_INSMOD || USER_BUSYBOX_LSMOD]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_INSMOD || USER_BUSYBOX_LSMOD)]
    }
    config USER_BUSYBOX_FEATURE_2_4_MODULES boolean {
     prompt "Support version 2.2.x to 2.4.x Linux kernels" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_INSMOD || USER_BUSYBOX_RMMOD || USER_BUSYBOX_MODPROBE)]
     default [y] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_INSMOD || USER_BUSYBOX_RMMOD || USER_BUSYBOX_MODPROBE)]
     depends on [USER_BUSYBOX_INSMOD || USER_BUSYBOX_RMMOD || USER_BUSYBOX_MODPROBE]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_INSMOD || USER_BUSYBOX_RMMOD || USER_BUSYBOX_MODPROBE)]
    }
    config USER_BUSYBOX_FEATURE_2_6_MODULES boolean {
     prompt "Support version 2.6.x Linux kernels" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_INSMOD || USER_BUSYBOX_RMMOD || USER_BUSYBOX_MODPROBE)]
     default [y] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_INSMOD || USER_BUSYBOX_RMMOD || USER_BUSYBOX_MODPROBE)]
     depends on [USER_BUSYBOX_INSMOD || USER_BUSYBOX_RMMOD || USER_BUSYBOX_MODPROBE]
     inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_INSMOD || USER_BUSYBOX_RMMOD || USER_BUSYBOX_MODPROBE)]
    }
    config USER_BUSYBOX_FEATURE_QUERY_MODULE_INTERFACE boolean {
     default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_2_4_MODULES && !USER_BUSYBOX_FEATURE_2_6_MODULES]
     depends on [USER_BUSYBOX_FEATURE_2_4_MODULES && !USER_BUSYBOX_FEATURE_2_6_MODULES]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_2_4_MODULES && !USER_BUSYBOX_FEATURE_2_6_MODULES]
    }
   }
   menu "Linux System Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_DMESG boolean {
     prompt "dmesg" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_DMESG_PRETTY boolean {
      prompt "Pretty dmesg output" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DMESG]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DMESG]
      depends on [USER_BUSYBOX_DMESG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DMESG]
     }
    }
    config USER_BUSYBOX_FBSET boolean {
     prompt "fbset" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_FBSET_FANCY boolean {
      prompt "Turn on extra fbset options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FBSET]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FBSET]
      depends on [USER_BUSYBOX_FBSET]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FBSET]
     }
     config USER_BUSYBOX_FEATURE_FBSET_READMODE boolean {
      prompt "Turn on fbset readmode support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FBSET]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FBSET]
      depends on [USER_BUSYBOX_FBSET]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FBSET]
     }
    }
    config USER_BUSYBOX_FDFLUSH boolean {
     prompt "fdflush" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FDFORMAT boolean {
     prompt "fdformat" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FDISK boolean {
     prompt "fdisk" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FDISK_SUPPORT_LARGE_DISKS boolean {
      prompt "Support over 4GB disks" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK]
      depends on [USER_BUSYBOX_FDISK]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK]
     }
     config USER_BUSYBOX_FEATURE_FDISK_WRITABLE boolean {
      prompt "Write support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK]
      depends on [USER_BUSYBOX_FDISK]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK]
      config USER_BUSYBOX_FEATURE_AIX_LABEL boolean {
       prompt "Support AIX disklabels" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       depends on [USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
      }
      config USER_BUSYBOX_FEATURE_SGI_LABEL boolean {
       prompt "Support SGI disklabels" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       depends on [USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
      }
      config USER_BUSYBOX_FEATURE_SUN_LABEL boolean {
       prompt "Support SUN disklabels" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       depends on [USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
      }
      config USER_BUSYBOX_FEATURE_OSF_LABEL boolean {
       prompt "Support BSD disklabels" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       depends on [USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
      }
      config USER_BUSYBOX_FEATURE_FDISK_ADVANCED boolean {
       prompt "Support expert mode" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       depends on [USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FDISK && USER_BUSYBOX_FEATURE_FDISK_WRITABLE]
      }
     }
    }
    config USER_BUSYBOX_FINDFS boolean {
     prompt "findfs" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_VOLUMEID if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FREERAMDISK boolean {
     prompt "freeramdisk" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FSCK_MINIX boolean {
     prompt "fsck_minix" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_MKFS_MINIX boolean {
     prompt "mkfs_minix" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_MINIX2 boolean {
      prompt "Support Minix fs v2 (fsck_minix/mkfs_minix)" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_FSCK_MINIX || USER_BUSYBOX_MKFS_MINIX)]
      default [y] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_FSCK_MINIX || USER_BUSYBOX_MKFS_MINIX)]
      depends on [USER_BUSYBOX_FSCK_MINIX || USER_BUSYBOX_MKFS_MINIX]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_FSCK_MINIX || USER_BUSYBOX_MKFS_MINIX)]
     }
    }
    config USER_BUSYBOX_GETOPT boolean {
     prompt "getopt" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_HEXDUMP boolean {
     prompt "hexdump" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_HEXDUMP_REVERSE boolean {
      prompt "Support -R, reverse of 'hexdump -Cv'" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HEXDUMP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HEXDUMP]
      depends on [USER_BUSYBOX_HEXDUMP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HEXDUMP]
     }
    }
    config USER_BUSYBOX_HD boolean {
     prompt "hd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_HEXDUMP if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_HWCLOCK boolean {
     prompt "hwclock" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_HWCLOCK_LONG_OPTIONS boolean {
      prompt "Support long options (--hctosys,...)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HWCLOCK && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HWCLOCK && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_HWCLOCK && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HWCLOCK && USER_BUSYBOX_GETOPT_LONG]
     }
     config USER_BUSYBOX_FEATURE_HWCLOCK_ADJTIME_FHS boolean {
      prompt "Use FHS /var/lib/hwclock/adjtime" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HWCLOCK]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HWCLOCK]
      depends on [USER_BUSYBOX_HWCLOCK]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HWCLOCK]
     }
    }
    config USER_BUSYBOX_IPCRM boolean {
     prompt "ipcrm" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SUID if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_IPCS boolean {
     prompt "ipcs" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SUID if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LOSETUP boolean {
     prompt "losetup" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_MDEV boolean {
     prompt "mdev" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_MDEV_CONF boolean {
      prompt "Support /etc/mdev.conf" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MDEV]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MDEV]
      depends on [USER_BUSYBOX_MDEV]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MDEV]
      config USER_BUSYBOX_FEATURE_MDEV_RENAME boolean {
       prompt "Support subdirs/symlinks" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_MDEV_CONF]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_MDEV_CONF]
       depends on [USER_BUSYBOX_FEATURE_MDEV_CONF]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_MDEV_CONF]
      }
      config USER_BUSYBOX_FEATURE_MDEV_EXEC boolean {
       prompt "Support command execution at device addition/removal" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_MDEV_CONF]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_MDEV_CONF]
       depends on [USER_BUSYBOX_FEATURE_MDEV_CONF]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_MDEV_CONF]
      }
     }
     config USER_BUSYBOX_FEATURE_MDEV_LOAD_FIRMWARE boolean {
      prompt "Support loading of firmwares" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MDEV]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MDEV]
      depends on [USER_BUSYBOX_MDEV]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MDEV]
     }
    }
    config USER_BUSYBOX_MKSWAP boolean {
     prompt "mkswap" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_MKSWAP_V0 boolean {
      prompt "Version 0 support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MKSWAP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MKSWAP]
      depends on [USER_BUSYBOX_MKSWAP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MKSWAP]
     }
    }
    config USER_BUSYBOX_MORE boolean {
     prompt "more" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_USE_TERMIOS boolean {
      prompt "Use termios to manipulate the screen" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MORE || USER_BUSYBOX_TOP)]
      default [y] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MORE || USER_BUSYBOX_TOP)]
      depends on [USER_BUSYBOX_MORE || USER_BUSYBOX_TOP]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MORE || USER_BUSYBOX_TOP)]
     }
    }
    config USER_BUSYBOX_VOLUMEID boolean {
     prompt "Routines for detecting label and uuid on common filesystems" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_VOLUMEID_EXT boolean {
      prompt "Ext filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_REISERFS boolean {
      prompt "Reiser filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_FAT boolean {
      prompt "fat filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_HFS boolean {
      prompt "hfs filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_JFS boolean {
      prompt "jfs filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_XFS boolean {
      prompt "xfs filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_NTFS boolean {
      prompt "ntfs filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_ISO9660 boolean {
      prompt "iso9660 filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_UDF boolean {
      prompt "udf filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_LUKS boolean {
      prompt "luks filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_LINUXSWAP boolean {
      prompt "linux swap filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_CRAMFS boolean {
      prompt "cramfs filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_ROMFS boolean {
      prompt "romfs filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_SYSV boolean {
      prompt "sysv filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_OCFS2 boolean {
      prompt "ocfs2 filesystem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
     config USER_BUSYBOX_FEATURE_VOLUMEID_LINUXRAID boolean {
      prompt "linuxraid" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
      depends on [USER_BUSYBOX_VOLUMEID]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_VOLUMEID]
     }
    }
    config USER_BUSYBOX_MOUNT boolean {
     prompt "mount" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_MOUNT_FAKE boolean {
      prompt "Support option -f" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      depends on [USER_BUSYBOX_MOUNT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
     }
     config USER_BUSYBOX_FEATURE_MOUNT_VERBOSE boolean {
      prompt "Support option -v" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      depends on [USER_BUSYBOX_MOUNT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
     }
     config USER_BUSYBOX_FEATURE_MOUNT_HELPERS boolean {
      prompt "Support mount helpers" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      depends on [USER_BUSYBOX_MOUNT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
     }
     config USER_BUSYBOX_FEATURE_MOUNT_LABEL boolean {
      prompt "Support specifiying devices by label or UUID" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      depends on [USER_BUSYBOX_MOUNT]
      select USER_BUSYBOX_VOLUMEID if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
     }
     config USER_BUSYBOX_FEATURE_MOUNT_NFS boolean {
      prompt "Support mounting NFS file systems" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      depends on [USER_BUSYBOX_MOUNT]
      select USER_BUSYBOX_FEATURE_HAVE_RPC if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
     }
     config USER_BUSYBOX_FEATURE_MOUNT_CIFS boolean {
      prompt "Support mounting CIFS/SMB file systems" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      depends on [USER_BUSYBOX_MOUNT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
     }
     config USER_BUSYBOX_FEATURE_MOUNT_FLAGS boolean {
      depends on [USER_BUSYBOX_MOUNT]
      prompt "Support lots of -o flags in mount" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
     }
     config USER_BUSYBOX_FEATURE_MOUNT_FSTAB boolean {
      depends on [USER_BUSYBOX_MOUNT]
      prompt "Support /etc/fstab and -a" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MOUNT]
     }
    }
    config USER_BUSYBOX_PIVOT_ROOT boolean {
     prompt "pivot_root" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RDATE boolean {
     prompt "rdate" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_READPROFILE boolean {
     prompt "readprofile" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RTCWAKE boolean {
     prompt "rtcwake" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SETARCH boolean {
     prompt "setarch" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SWAPONOFF boolean {
     prompt "swaponoff" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SWITCH_ROOT boolean {
     prompt "switch_root" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_UMOUNT boolean {
     prompt "umount" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_UMOUNT_ALL boolean {
      prompt "Support option -a" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_UMOUNT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_UMOUNT]
      depends on [USER_BUSYBOX_UMOUNT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_UMOUNT]
     }
     config USER_BUSYBOX_FEATURE_MOUNT_LOOP boolean {
      prompt "Support loopback mounts" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MOUNT || USER_BUSYBOX_UMOUNT)]
      default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MOUNT || USER_BUSYBOX_UMOUNT)]
      depends on [USER_BUSYBOX_MOUNT || USER_BUSYBOX_UMOUNT]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MOUNT || USER_BUSYBOX_UMOUNT)]
     }
     config USER_BUSYBOX_FEATURE_MTAB_SUPPORT boolean {
      prompt "Support for the old /etc/mtab file" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MOUNT || USER_BUSYBOX_UMOUNT)]
      default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MOUNT || USER_BUSYBOX_UMOUNT)]
      depends on [USER_BUSYBOX_MOUNT || USER_BUSYBOX_UMOUNT]
      select USER_BUSYBOX_FEATURE_MOUNT_FAKE if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MOUNT || USER_BUSYBOX_UMOUNT)]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MOUNT || USER_BUSYBOX_UMOUNT)]
     }
    }
   }
   menu "Miscellaneous Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_ADJTIMEX boolean {
     prompt "adjtimex" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_BBCONFIG boolean {
     prompt "bbconfig" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CHAT boolean {
     prompt "chat" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_CHAT_NOFAIL boolean {
      prompt "Enable NOFAIL expect strings" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      depends on [USER_BUSYBOX_CHAT]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
     }
     config USER_BUSYBOX_FEATURE_CHAT_TTY_HIFI boolean {
      prompt "Force STDIN to be a TTY" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      depends on [USER_BUSYBOX_CHAT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
     }
     config USER_BUSYBOX_FEATURE_CHAT_IMPLICIT_CR boolean {
      prompt "Enable implicit Carriage Return" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      depends on [USER_BUSYBOX_CHAT]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
     }
     config USER_BUSYBOX_FEATURE_CHAT_SWALLOW_OPTS boolean {
      prompt "Swallow options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      depends on [USER_BUSYBOX_CHAT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
     }
     config USER_BUSYBOX_FEATURE_CHAT_SEND_ESCAPES boolean {
      prompt "Support weird SEND escapes" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      depends on [USER_BUSYBOX_CHAT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
     }
     config USER_BUSYBOX_FEATURE_CHAT_VAR_ABORT_LEN boolean {
      prompt "Support variable-length ABORT conditions" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      depends on [USER_BUSYBOX_CHAT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
     }
     config USER_BUSYBOX_FEATURE_CHAT_CLR_ABORT boolean {
      prompt "Support revoking of ABORT conditions" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      depends on [USER_BUSYBOX_CHAT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CHAT]
     }
    }
    config USER_BUSYBOX_CHRT boolean {
     prompt "chrt" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CROND boolean {
     prompt "crond" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SUID if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_DEBUG_CROND_OPTION boolean {
      prompt "Support option -d to redirect output to stderr" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CROND]
      depends on [USER_BUSYBOX_CROND]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CROND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CROND]
     }
     config USER_BUSYBOX_FEATURE_CROND_CALL_SENDMAIL boolean {
      prompt "Using /usr/sbin/sendmail?" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CROND]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CROND]
      depends on [USER_BUSYBOX_CROND]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_CROND]
     }
    }
    config USER_BUSYBOX_CRONTAB boolean {
     prompt "crontab" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SUID if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_DC boolean {
     prompt "dc" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_DEVFSD boolean {
     prompt "devfsd (obsolete)" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_DEVFSD_MODLOAD boolean {
      prompt "Adds support for MODLOAD keyword in devsfd.conf" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DEVFSD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DEVFSD]
      depends on [USER_BUSYBOX_DEVFSD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DEVFSD]
     }
     config USER_BUSYBOX_DEVFSD_FG_NP boolean {
      prompt "Enables the -fg and -np options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DEVFSD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DEVFSD]
      depends on [USER_BUSYBOX_DEVFSD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DEVFSD]
     }
     config USER_BUSYBOX_DEVFSD_VERBOSE boolean {
      prompt "Increases logging (and size)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DEVFSD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DEVFSD]
      depends on [USER_BUSYBOX_DEVFSD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_DEVFSD]
     }
    }
    config USER_BUSYBOX_FEATURE_DEVFS boolean {
     prompt "Use devfs names for all devices (obsolete)" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_EJECT boolean {
     prompt "eject" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_EJECT_SCSI boolean {
      prompt "SCSI support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_EJECT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_EJECT]
      depends on [USER_BUSYBOX_EJECT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_EJECT]
     }
    }
    config USER_BUSYBOX_LAST boolean {
     prompt "last" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_WTMP if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LESS boolean {
     prompt "less" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_LESS_MAXLINES integer {
      prompt "Max number of input lines less will try to eat" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      default [9999999] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      depends on [USER_BUSYBOX_LESS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
     }
     config USER_BUSYBOX_FEATURE_LESS_BRACKETS boolean {
      prompt "Enable bracket searching" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      depends on [USER_BUSYBOX_LESS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
     }
     config USER_BUSYBOX_FEATURE_LESS_FLAGS boolean {
      prompt "Enable extra flags" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      depends on [USER_BUSYBOX_LESS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
     }
     config USER_BUSYBOX_FEATURE_LESS_FLAGCS boolean {
      prompt "Enable flag changes" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      depends on [USER_BUSYBOX_LESS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
     }
     config USER_BUSYBOX_FEATURE_LESS_MARKS boolean {
      prompt "Enable marks" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      depends on [USER_BUSYBOX_LESS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
     }
     config USER_BUSYBOX_FEATURE_LESS_REGEXP boolean {
      prompt "Enable regular expressions" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
      depends on [USER_BUSYBOX_LESS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LESS]
     }
    }
    config USER_BUSYBOX_HDPARM boolean {
     prompt "hdparm" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_HDPARM_GET_IDENTITY boolean {
      prompt "Support obtaining detailed information directly from drives" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      depends on [USER_BUSYBOX_HDPARM]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
     }
     config USER_BUSYBOX_FEATURE_HDPARM_HDIO_SCAN_HWIF boolean {
      prompt "Register an IDE interface (DANGEROUS)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      depends on [USER_BUSYBOX_HDPARM]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
     }
     config USER_BUSYBOX_FEATURE_HDPARM_HDIO_UNREGISTER_HWIF boolean {
      prompt "Un-register an IDE interface (DANGEROUS)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      depends on [USER_BUSYBOX_HDPARM]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
     }
     config USER_BUSYBOX_FEATURE_HDPARM_HDIO_DRIVE_RESET boolean {
      prompt "perform device reset (DANGEROUS)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      depends on [USER_BUSYBOX_HDPARM]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
     }
     config USER_BUSYBOX_FEATURE_HDPARM_HDIO_TRISTATE_HWIF boolean {
      prompt "tristate device for hotswap (DANGEROUS)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      depends on [USER_BUSYBOX_HDPARM]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
     }
     config USER_BUSYBOX_FEATURE_HDPARM_HDIO_GETSET_DMA boolean {
      prompt "get/set using_dma flag (DANGEROUS)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
      depends on [USER_BUSYBOX_HDPARM]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HDPARM]
     }
    }
    config USER_BUSYBOX_MAKEDEVS boolean {
     prompt "makedevs" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     choice boolean {
      prompt "Choose makedevs behaviour" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MAKEDEVS]
      depends on [USER_BUSYBOX_MAKEDEVS]
      default [USER_BUSYBOX_FEATURE_MAKEDEVS_TABLE] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_MAKEDEVS]
      config USER_BUSYBOX_FEATURE_MAKEDEVS_LEAF boolean {
       prompt "leaf" if [<choice>]
       inherited [<choice>]
      }
      config USER_BUSYBOX_FEATURE_MAKEDEVS_TABLE boolean {
       prompt "table" if [<choice>]
       inherited [<choice>]
      }
     }
    }
    config USER_BUSYBOX_MICROCOM boolean {
     prompt "microcom" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_MOUNTPOINT boolean {
     prompt "mountpoint" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_MT boolean {
     prompt "mt" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RAIDAUTORUN boolean {
     prompt "raidautorun" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_READAHEAD boolean {
     prompt "readahead" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LFS]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LFS]
     depends on [USER_BUSYBOX_LFS]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LFS]
    }
    config USER_BUSYBOX_RUNLEVEL boolean {
     prompt "runlevel" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RX boolean {
     prompt "rx" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SCRIPT boolean {
     prompt "script" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_STRINGS boolean {
     prompt "strings" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SETSID boolean {
     prompt "setsid" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_TASKSET boolean {
     prompt "taskset" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_TASKSET_FANCY boolean {
      prompt "Fancy output" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TASKSET]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TASKSET]
      depends on [USER_BUSYBOX_TASKSET]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TASKSET]
     }
    }
    config USER_BUSYBOX_TIME boolean {
     prompt "time" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_TTYSIZE boolean {
     prompt "ttysize" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_WATCHDOGD boolean {
     prompt "watchdog" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "Networking Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_FEATURE_IPV6 boolean {
     prompt "Enable IPv6 support" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_PREFER_IPV4_ADDRESS boolean {
      prompt "Preferentially use IPv4 addresses from DNS queries" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPV6]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPV6]
      depends on [USER_BUSYBOX_FEATURE_IPV6]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPV6]
     }
    }
    config USER_BUSYBOX_VERBOSE_RESOLUTION_ERRORS boolean {
     prompt "Verbose resolution errors" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_ARP boolean {
     prompt "arp" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_ARPING boolean {
     prompt "arping" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_BRCTL boolean {
     prompt "brctl" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_BRCTL_FANCY boolean {
      prompt "Fancy options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_BRCTL]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_BRCTL]
      depends on [USER_BUSYBOX_BRCTL]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_BRCTL]
     }
    }
    config USER_BUSYBOX_DNSD boolean {
     prompt "dnsd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_ETHER_WAKE boolean {
     prompt "ether-wake" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FAKEIDENTD boolean {
     prompt "fakeidentd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FTPGET boolean {
     prompt "ftpget" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FTPPUT boolean {
     prompt "ftpput" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_FTPGETPUT_LONG_OPTIONS boolean {
      prompt "Enable long options in ftpget/ftpput" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GETOPT_LONG && (USER_BUSYBOX_FTPGET || USER_BUSYBOX_FTPPUT)]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GETOPT_LONG && (USER_BUSYBOX_FTPGET || USER_BUSYBOX_FTPPUT)]
      depends on [USER_BUSYBOX_GETOPT_LONG && (USER_BUSYBOX_FTPGET || USER_BUSYBOX_FTPPUT)]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_GETOPT_LONG && (USER_BUSYBOX_FTPGET || USER_BUSYBOX_FTPPUT)]
     }
    }
    config USER_BUSYBOX_HOSTNAME boolean {
     prompt "hostname" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_HTTPD boolean {
     prompt "httpd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_HTTPD_RANGES boolean {
      prompt "Support 'Ranges:' header" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      depends on [USER_BUSYBOX_HTTPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
     }
     config USER_BUSYBOX_FEATURE_HTTPD_USE_SENDFILE boolean {
      prompt "Use sendfile system call" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      depends on [USER_BUSYBOX_HTTPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
     }
     config USER_BUSYBOX_FEATURE_HTTPD_RELOAD_CONFIG_SIGHUP boolean {
      prompt "Support reloading of global config file on HUP signal" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      depends on [USER_BUSYBOX_HTTPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
     }
     config USER_BUSYBOX_FEATURE_HTTPD_SETUID boolean {
      prompt "Enable -u <user> option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      depends on [USER_BUSYBOX_HTTPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
     }
     config USER_BUSYBOX_FEATURE_HTTPD_BASIC_AUTH boolean {
      prompt "Enable Basic http Authentication" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      depends on [USER_BUSYBOX_HTTPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      config USER_BUSYBOX_FEATURE_HTTPD_AUTH_MD5 boolean {
       prompt "Support MD5 crypted passwords for http Authentication" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_HTTPD_BASIC_AUTH]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_HTTPD_BASIC_AUTH]
       depends on [USER_BUSYBOX_FEATURE_HTTPD_BASIC_AUTH]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_HTTPD_BASIC_AUTH]
      }
     }
     config USER_BUSYBOX_FEATURE_HTTPD_CONFIG_WITH_MIME_TYPES boolean {
      prompt "Support loading additional MIME types at run-time" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      depends on [USER_BUSYBOX_HTTPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
     }
     config USER_BUSYBOX_FEATURE_HTTPD_CGI boolean {
      prompt "Support Common Gateway Interface (CGI)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      depends on [USER_BUSYBOX_HTTPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      config USER_BUSYBOX_FEATURE_HTTPD_CONFIG_WITH_SCRIPT_INTERPR boolean {
       prompt "Support for running scripts through an interpreter" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_HTTPD_CGI]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_HTTPD_CGI]
       depends on [USER_BUSYBOX_FEATURE_HTTPD_CGI]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_HTTPD_CGI]
      }
      config USER_BUSYBOX_FEATURE_HTTPD_SET_REMOTE_PORT_TO_ENV boolean {
       prompt "Set REMOTE_PORT environment variable for CGI" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_HTTPD_CGI]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_HTTPD_CGI]
       depends on [USER_BUSYBOX_FEATURE_HTTPD_CGI]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_HTTPD_CGI]
      }
     }
     config USER_BUSYBOX_FEATURE_HTTPD_ENCODE_URL_STR boolean {
      prompt "Enable -e option (useful for CGIs written as shell scripts)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      depends on [USER_BUSYBOX_HTTPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
     }
     config USER_BUSYBOX_FEATURE_HTTPD_ERROR_PAGES boolean {
      prompt "Support for custom error pages" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      depends on [USER_BUSYBOX_HTTPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
     }
     config USER_BUSYBOX_FEATURE_HTTPD_PROXY boolean {
      prompt "Support for reverse proxy" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
      depends on [USER_BUSYBOX_HTTPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HTTPD]
     }
    }
    config USER_BUSYBOX_IFCONFIG boolean {
     prompt "ifconfig" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_IFCONFIG_STATUS boolean {
      prompt "Enable status reporting output (+7k)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
      depends on [USER_BUSYBOX_IFCONFIG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
     }
     config USER_BUSYBOX_FEATURE_IFCONFIG_SLIP boolean {
      prompt "Enable slip-specific options \"keepalive\" and \"outfill\"" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
      depends on [USER_BUSYBOX_IFCONFIG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
     }
     config USER_BUSYBOX_FEATURE_IFCONFIG_MEMSTART_IOADDR_IRQ boolean {
      prompt "Enable options \"mem_start\", \"io_addr\", and \"irq\"" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
      depends on [USER_BUSYBOX_IFCONFIG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
     }
     config USER_BUSYBOX_FEATURE_IFCONFIG_HW boolean {
      prompt "Enable option \"hw\" (ether only)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
      depends on [USER_BUSYBOX_IFCONFIG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
     }
     config USER_BUSYBOX_FEATURE_IFCONFIG_BROADCAST_PLUS boolean {
      prompt "Set the broadcast automatically" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
      depends on [USER_BUSYBOX_IFCONFIG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFCONFIG]
     }
    }
    config USER_BUSYBOX_IFENSLAVE boolean {
     prompt "ifenslave" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_IFUPDOWN boolean {
     prompt "ifupdown" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_IFUPDOWN_IFSTATE_PATH string {
      prompt "Absolute path to ifstate file" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      default ["/var/run/ifstate"] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      depends on [USER_BUSYBOX_IFUPDOWN]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
     }
     config USER_BUSYBOX_FEATURE_IFUPDOWN_IP boolean {
      prompt "Use ip applet" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      depends on [USER_BUSYBOX_IFUPDOWN]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      config USER_BUSYBOX_FEATURE_IFUPDOWN_IP_BUILTIN boolean {
       prompt "Use busybox ip applet" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       depends on [USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       select USER_BUSYBOX_IP if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       select USER_BUSYBOX_FEATURE_IP_ADDRESS if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       select USER_BUSYBOX_FEATURE_IP_LINK if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       select USER_BUSYBOX_FEATURE_IP_ROUTE if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
      }
      config USER_BUSYBOX_FEATURE_IFUPDOWN_IFCONFIG_BUILTIN boolean {
       prompt "Use busybox ifconfig and route applets" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN && !USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN && !USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       depends on [USER_BUSYBOX_IFUPDOWN && !USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       select USER_BUSYBOX_IFCONFIG if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN && !USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       select USER_BUSYBOX_ROUTE if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN && !USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN && !USER_BUSYBOX_FEATURE_IFUPDOWN_IP]
      }
     }
     config USER_BUSYBOX_FEATURE_IFUPDOWN_IPV4 boolean {
      prompt "Support for IPv4" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      depends on [USER_BUSYBOX_IFUPDOWN]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
     }
     config USER_BUSYBOX_FEATURE_IFUPDOWN_IPV6 boolean {
      prompt "Support for IPv6" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN && USER_BUSYBOX_FEATURE_IPV6]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN && USER_BUSYBOX_FEATURE_IPV6]
      depends on [USER_BUSYBOX_IFUPDOWN && USER_BUSYBOX_FEATURE_IPV6]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN && USER_BUSYBOX_FEATURE_IPV6]
     }
     config USER_BUSYBOX_FEATURE_IFUPDOWN_MAPPING boolean {
      prompt "Enable mapping support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      depends on [USER_BUSYBOX_IFUPDOWN]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
     }
     config USER_BUSYBOX_FEATURE_IFUPDOWN_EXTERNAL_DHCP boolean {
      prompt "Support for external dhcp clients" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
      depends on [USER_BUSYBOX_IFUPDOWN]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IFUPDOWN]
     }
    }
    config USER_BUSYBOX_INETD boolean {
     prompt "inetd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_INETD_SUPPORT_BUILTIN_ECHO boolean {
      prompt "Support echo service" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      depends on [USER_BUSYBOX_INETD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
     }
     config USER_BUSYBOX_FEATURE_INETD_SUPPORT_BUILTIN_DISCARD boolean {
      prompt "Support discard service" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      depends on [USER_BUSYBOX_INETD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
     }
     config USER_BUSYBOX_FEATURE_INETD_SUPPORT_BUILTIN_TIME boolean {
      prompt "Support time service" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      depends on [USER_BUSYBOX_INETD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
     }
     config USER_BUSYBOX_FEATURE_INETD_SUPPORT_BUILTIN_DAYTIME boolean {
      prompt "Support daytime service" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      depends on [USER_BUSYBOX_INETD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
     }
     config USER_BUSYBOX_FEATURE_INETD_SUPPORT_BUILTIN_CHARGEN boolean {
      prompt "Support chargen service" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      depends on [USER_BUSYBOX_INETD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
     }
     config USER_BUSYBOX_FEATURE_INETD_RPC boolean {
      prompt "Support RPC services" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      depends on [USER_BUSYBOX_INETD]
      select USER_BUSYBOX_FEATURE_HAVE_RPC if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_INETD]
     }
    }
    config USER_BUSYBOX_IP boolean {
     prompt "ip" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_IP_ADDRESS boolean {
      prompt "ip address" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      depends on [USER_BUSYBOX_IP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
     }
     config USER_BUSYBOX_FEATURE_IP_LINK boolean {
      prompt "ip link" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      depends on [USER_BUSYBOX_IP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
     }
     config USER_BUSYBOX_FEATURE_IP_ROUTE boolean {
      prompt "ip route" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      depends on [USER_BUSYBOX_IP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
     }
     config USER_BUSYBOX_FEATURE_IP_TUNNEL boolean {
      prompt "ip tunnel" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      depends on [USER_BUSYBOX_IP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
     }
     config USER_BUSYBOX_FEATURE_IP_RULE boolean {
      prompt "ip rule" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      depends on [USER_BUSYBOX_IP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
     }
     config USER_BUSYBOX_FEATURE_IP_SHORT_FORMS boolean {
      prompt "Support short forms of ip commands" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      depends on [USER_BUSYBOX_IP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
     }
     config USER_BUSYBOX_FEATURE_IP_RARE_PROTOCOLS boolean {
      prompt "Support displaying rarely used link types" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
      depends on [USER_BUSYBOX_IP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IP]
     }
    }
    config USER_BUSYBOX_IPADDR boolean {
     default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_ADDRESS]
     depends on [USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_ADDRESS]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_ADDRESS]
    }
    config USER_BUSYBOX_IPLINK boolean {
     default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_LINK]
     depends on [USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_LINK]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_LINK]
    }
    config USER_BUSYBOX_IPROUTE boolean {
     default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_ROUTE]
     depends on [USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_ROUTE]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_ROUTE]
    }
    config USER_BUSYBOX_IPTUNNEL boolean {
     default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_TUNNEL]
     depends on [USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_TUNNEL]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_TUNNEL]
    }
    config USER_BUSYBOX_IPRULE boolean {
     default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_RULE]
     depends on [USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_RULE]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IP_SHORT_FORMS && USER_BUSYBOX_FEATURE_IP_RULE]
    }
    config USER_BUSYBOX_IPCALC boolean {
     prompt "ipcalc" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_IPCALC_FANCY boolean {
      prompt "Fancy IPCALC, more options, adds 1 kbyte" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IPCALC]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IPCALC]
      depends on [USER_BUSYBOX_IPCALC]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IPCALC]
     }
     config USER_BUSYBOX_FEATURE_IPCALC_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IPCALC && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IPCALC && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_IPCALC && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_IPCALC && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_NAMEIF boolean {
     prompt "nameif" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_NAMEIF_EXTENDED boolean {
      prompt "Extended nameif" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NAMEIF]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NAMEIF]
      depends on [USER_BUSYBOX_NAMEIF]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NAMEIF]
     }
    }
    config USER_BUSYBOX_NC boolean {
     prompt "nc" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_NC_SERVER boolean {
      prompt "Netcat server options (-l)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NC]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NC]
      depends on [USER_BUSYBOX_NC]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NC]
     }
     config USER_BUSYBOX_NC_EXTRA boolean {
      prompt "Netcat extensions (-eiw and filename)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NC]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NC]
      depends on [USER_BUSYBOX_NC]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NC]
     }
    }
    config USER_BUSYBOX_NETSTAT boolean {
     prompt "netstat" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_NETSTAT_WIDE boolean {
      prompt "Enable wide netstat output" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NETSTAT]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NETSTAT]
      depends on [USER_BUSYBOX_NETSTAT]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_NETSTAT]
     }
    }
    config USER_BUSYBOX_NSLOOKUP boolean {
     prompt "nslookup" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_PING boolean {
     prompt "ping" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_PING6 boolean {
      prompt "ping6" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPV6 && USER_BUSYBOX_PING]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPV6 && USER_BUSYBOX_PING]
      depends on [USER_BUSYBOX_FEATURE_IPV6 && USER_BUSYBOX_PING]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPV6 && USER_BUSYBOX_PING]
     }
     config USER_BUSYBOX_FEATURE_FANCY_PING boolean {
      prompt "Enable fancy ping output" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PING]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PING]
      depends on [USER_BUSYBOX_PING]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PING]
     }
    }
    config USER_BUSYBOX_PSCAN boolean {
     prompt "pscan" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_ROUTE boolean {
     prompt "route" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SENDMAIL boolean {
     prompt "sendmail" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FETCHMAIL boolean {
     prompt "fetchmail" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SLATTACH boolean {
     prompt "slattach" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_TELNET boolean {
     prompt "telnet" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_TELNET_TTYPE boolean {
      prompt "Pass TERM type to remote host" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TELNET]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TELNET]
      depends on [USER_BUSYBOX_TELNET]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TELNET]
     }
     config USER_BUSYBOX_FEATURE_TELNET_AUTOLOGIN boolean {
      prompt "Pass USER type to remote host" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TELNET]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TELNET]
      depends on [USER_BUSYBOX_TELNET]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TELNET]
     }
    }
    config USER_BUSYBOX_TELNETD boolean {
     prompt "telnetd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_TELNETD_STANDALONE boolean {
      prompt "Support standalone telnetd (not inetd only)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TELNETD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TELNETD]
      depends on [USER_BUSYBOX_TELNETD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TELNETD]
     }
    }
    config USER_BUSYBOX_TFTP boolean {
     prompt "tftp" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_TFTPD boolean {
     prompt "tftpd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_TFTP_GET boolean {
      prompt "Enable \"get\" command" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD)]
      default [y] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD)]
      depends on [USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD)]
     }
     config USER_BUSYBOX_FEATURE_TFTP_PUT boolean {
      prompt "Enable \"put\" command" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD)]
      default [y] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD)]
      depends on [USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD)]
     }
     config USER_BUSYBOX_FEATURE_TFTP_BLOCKSIZE boolean {
      prompt "Enable \"blksize\" protocol option" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD)]
      default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD)]
      depends on [USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_TFTP || USER_BUSYBOX_TFTPD)]
     }
    }
    config USER_BUSYBOX_DEBUG_TFTP boolean {
     prompt "Enable debug" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TFTP]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TFTP]
     depends on [USER_BUSYBOX_TFTP]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TFTP]
    }
    config USER_BUSYBOX_TRACEROUTE boolean {
     prompt "traceroute" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_TRACEROUTE_VERBOSE boolean {
      prompt "Enable verbose output" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TRACEROUTE]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TRACEROUTE]
      depends on [USER_BUSYBOX_TRACEROUTE]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TRACEROUTE]
     }
     config USER_BUSYBOX_FEATURE_TRACEROUTE_SOURCE_ROUTE boolean {
      prompt "Enable loose source route" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TRACEROUTE]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TRACEROUTE]
      depends on [USER_BUSYBOX_TRACEROUTE]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TRACEROUTE]
     }
     config USER_BUSYBOX_FEATURE_TRACEROUTE_USE_ICMP boolean {
      prompt "Use ICMP instead of UDP" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TRACEROUTE]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TRACEROUTE]
      depends on [USER_BUSYBOX_TRACEROUTE]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TRACEROUTE]
     }
    }
    config USER_BUSYBOX_APP_UDHCPD boolean {
     prompt "udhcp Server (udhcpd)" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_APP_DHCPRELAY boolean {
      prompt "dhcprelay" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
      depends on [USER_BUSYBOX_APP_UDHCPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
     }
     config USER_BUSYBOX_APP_DUMPLEASES boolean {
      prompt "Lease display utility (dumpleases)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
      depends on [USER_BUSYBOX_APP_UDHCPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
     }
     config USER_BUSYBOX_FEATURE_UDHCPD_WRITE_LEASES_EARLY boolean {
      prompt "Rewrite the lease file at every new acknowledge" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
      depends on [USER_BUSYBOX_APP_UDHCPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
     }
     config USER_BUSYBOX_DHCPD_LEASES_FILE string {
      prompt "Absolute path to lease file" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
      default ["/var/lib/misc/udhcpd.leases"] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
      depends on [USER_BUSYBOX_APP_UDHCPD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPD]
     }
    }
    config USER_BUSYBOX_APP_UDHCPC boolean {
     prompt "udhcp Client (udhcpc)" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_UDHCPC_ARPING boolean {
      prompt "Ask udhcpc to verify that the offered address is free, using arpping" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPC]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPC]
      depends on [USER_BUSYBOX_APP_UDHCPC]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPC]
     }
     config USER_BUSYBOX_FEATURE_UDHCP_PORT boolean {
      prompt "Enable '-P port' option for udhcpd and udhcpc" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
      default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
      depends on [USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
     }
     config USER_BUSYBOX_FEATURE_UDHCP_DEBUG boolean {
      prompt "Compile udhcp with noisy debugging messages" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
      default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
      depends on [USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
     }
     config USER_BUSYBOX_FEATURE_RFC3397 boolean {
      prompt "Support for RFC3397 domain search (experimental)" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
      default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
      depends on [USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
     }
     config USER_BUSYBOX_DHCPC_DEFAULT_SCRIPT string {
      prompt "Absolute path to config script" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPC]
      default ["/usr/share/udhcpc/default.script"] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPC]
      depends on [USER_BUSYBOX_APP_UDHCPC]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_APP_UDHCPC]
     }
     config USER_BUSYBOX_UDHCPC_SLACK_FOR_BUGGY_SERVERS integer {
      prompt "DHCP options slack buffer size" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
      default [80] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
      range [0 924] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
      depends on [USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_APP_UDHCPD || USER_BUSYBOX_APP_UDHCPC)]
     }
    }
    config USER_BUSYBOX_VCONFIG boolean {
     prompt "vconfig" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_WGET boolean {
     prompt "wget" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_WGET_STATUSBAR boolean {
      prompt "Enable a nifty process meter (+2k)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WGET]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WGET]
      depends on [USER_BUSYBOX_WGET]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WGET]
     }
     config USER_BUSYBOX_FEATURE_WGET_AUTHENTICATION boolean {
      prompt "Enable HTTP authentication" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WGET]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WGET]
      depends on [USER_BUSYBOX_WGET]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WGET]
     }
     config USER_BUSYBOX_FEATURE_WGET_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WGET && USER_BUSYBOX_GETOPT_LONG]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WGET && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_WGET && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_WGET && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_ZCIP boolean {
     prompt "zcip" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_TCPSVD boolean {
     prompt "tcpsvd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_UDPSVD boolean {
     prompt "udpsvd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "Process Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_FREE boolean {
     prompt "free" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_FUSER boolean {
     prompt "fuser" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_KILL boolean {
     prompt "kill" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_KILLALL boolean {
      prompt "killall" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_KILL]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_KILL]
      depends on [USER_BUSYBOX_KILL]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_KILL]
     }
     config USER_BUSYBOX_KILLALL5 boolean {
      prompt "killall5" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_KILL]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_KILL]
      depends on [USER_BUSYBOX_KILL]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_KILL]
     }
    }
    config USER_BUSYBOX_NMETER boolean {
     prompt "nmeter" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_PGREP boolean {
     prompt "pgrep" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_PIDOF boolean {
     prompt "pidof" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_PIDOF_SINGLE boolean {
      prompt "Enable argument for single shot (-s)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PIDOF]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PIDOF]
      depends on [USER_BUSYBOX_PIDOF]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PIDOF]
     }
     config USER_BUSYBOX_FEATURE_PIDOF_OMIT boolean {
      prompt "Enable argument for omitting pids (-o)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PIDOF]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PIDOF]
      depends on [USER_BUSYBOX_PIDOF]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PIDOF]
     }
    }
    config USER_BUSYBOX_PKILL boolean {
     prompt "pkill" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_PS boolean {
     prompt "ps" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_PS_WIDE boolean {
      prompt "Enable argument for wide output (-w)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PS]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PS]
      depends on [USER_BUSYBOX_PS]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PS]
     }
     config USER_BUSYBOX_FEATURE_PS_TIME boolean {
      prompt "Enable time and elapsed time output" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PS && USER_BUSYBOX_DESKTOP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PS && USER_BUSYBOX_DESKTOP]
      depends on [USER_BUSYBOX_PS && USER_BUSYBOX_DESKTOP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_PS && USER_BUSYBOX_DESKTOP]
      config USER_BUSYBOX_FEATURE_PS_UNUSUAL_SYSTEMS boolean {
       prompt "Support Linux prior to 2.4.0 and non-ELF systems" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_PS_TIME]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_PS_TIME]
       depends on [USER_BUSYBOX_FEATURE_PS_TIME]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_PS_TIME]
      }
     }
    }
    config USER_BUSYBOX_RENICE boolean {
     prompt "renice" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_BB_SYSCTL boolean {
     prompt "sysctl" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_TOP boolean {
     prompt "top" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_TOP_CPU_USAGE_PERCENTAGE boolean {
      prompt "Show CPU per-process usage percentage (adds 2k bytes)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TOP]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TOP]
      depends on [USER_BUSYBOX_TOP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TOP]
      config USER_BUSYBOX_FEATURE_TOP_CPU_GLOBAL_PERCENTS boolean {
       prompt "Show CPU global usage percentage (adds 0.5k bytes)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_TOP_CPU_USAGE_PERCENTAGE]
       default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_TOP_CPU_USAGE_PERCENTAGE]
       depends on [USER_BUSYBOX_FEATURE_TOP_CPU_USAGE_PERCENTAGE]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_TOP_CPU_USAGE_PERCENTAGE]
      }
      config USER_BUSYBOX_FEATURE_TOP_DECIMALS boolean {
       prompt "Show 1/10th of a percent in CPU/mem statistics (adds 0.3k bytes)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_TOP_CPU_USAGE_PERCENTAGE]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_TOP_CPU_USAGE_PERCENTAGE]
       depends on [USER_BUSYBOX_FEATURE_TOP_CPU_USAGE_PERCENTAGE]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_TOP_CPU_USAGE_PERCENTAGE]
      }
     }
     config USER_BUSYBOX_FEATURE_TOPMEM boolean {
      prompt "topmem" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TOP]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TOP]
      depends on [USER_BUSYBOX_TOP]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_TOP]
     }
    }
    config USER_BUSYBOX_UPTIME boolean {
     prompt "uptime" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_WATCH boolean {
     prompt "watch" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "Shells" {
    depends on [USER_BUSYBOX_BUSYBOX]
    choice boolean {
     prompt "Choose your default shell" if [USER_BUSYBOX_BUSYBOX]
     default [USER_BUSYBOX_FEATURE_SH_IS_NONE] if [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_SH_IS_ASH boolean {
      select USER_BUSYBOX_ASH if [<choice>]
      prompt "ash" if [<choice>]
      inherited [<choice>]
     }
     config USER_BUSYBOX_FEATURE_SH_IS_HUSH boolean {
      select USER_BUSYBOX_HUSH if [<choice>]
      prompt "hush" if [<choice>]
      inherited [<choice>]
     }
     config USER_BUSYBOX_FEATURE_SH_IS_MSH boolean {
      select USER_BUSYBOX_MSH if [<choice>]
      prompt "msh" if [<choice>]
      inherited [<choice>]
     }
     config USER_BUSYBOX_FEATURE_SH_IS_NONE boolean {
      prompt "none" if [<choice>]
      inherited [<choice>]
     }
    }
    config USER_BUSYBOX_ASH boolean {
     prompt "ash" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_TEST if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_ASH_JOB_CONTROL boolean {
      prompt "Job control" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_READ_NCHARS boolean {
      prompt "'read -n N' and 'read -s' support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_READ_TIMEOUT boolean {
      prompt "'read -t S' support." if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_ALIAS boolean {
      prompt "alias support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_MATH_SUPPORT boolean {
      prompt "Posix math support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      config USER_BUSYBOX_ASH_MATH_SUPPORT_64 boolean {
       prompt "Extend Posix math support to 64 bit" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH_MATH_SUPPORT]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH_MATH_SUPPORT]
       depends on [USER_BUSYBOX_ASH_MATH_SUPPORT]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH_MATH_SUPPORT]
      }
     }
     config USER_BUSYBOX_ASH_GETOPTS boolean {
      prompt "Builtin getopt to parse positional parameters" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_BUILTIN_ECHO boolean {
      prompt "Builtin version of 'echo'" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      select USER_BUSYBOX_ECHO if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_BUILTIN_TEST boolean {
      prompt "Builtin version of 'test'" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      select USER_BUSYBOX_TEST if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_CMDCMD boolean {
      prompt "'command' command to override shell builtins" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_MAIL boolean {
      prompt "Check for new mail on interactive shells" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_OPTIMIZE_FOR_SIZE boolean {
      prompt "Optimize for size instead of speed" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_RANDOM_SUPPORT boolean {
      prompt "Pseudorandom generator and variable $RANDOM" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
     config USER_BUSYBOX_ASH_EXPAND_PRMT boolean {
      prompt "Expand prompt string" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
      depends on [USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_ASH]
     }
    }
    config USER_BUSYBOX_HUSH boolean {
     prompt "hush" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_TRUE if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FALSE if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_TEST if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_ECHO if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_HUSH_HELP boolean {
      prompt "help builtin" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      depends on [USER_BUSYBOX_HUSH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
     }
     config USER_BUSYBOX_HUSH_INTERACTIVE boolean {
      prompt "Interactive mode" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      depends on [USER_BUSYBOX_HUSH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      config USER_BUSYBOX_HUSH_JOB boolean {
       prompt "Job control" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH_INTERACTIVE]
       default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH_INTERACTIVE]
       depends on [USER_BUSYBOX_HUSH_INTERACTIVE]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH_INTERACTIVE]
      }
     }
     config USER_BUSYBOX_HUSH_TICK boolean {
      prompt "Process substitution" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      depends on [USER_BUSYBOX_HUSH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
     }
     config USER_BUSYBOX_HUSH_IF boolean {
      prompt "Support if/then/elif/else/fi" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      depends on [USER_BUSYBOX_HUSH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
     }
     config USER_BUSYBOX_HUSH_LOOPS boolean {
      prompt "Support for, while and until loops" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
      depends on [USER_BUSYBOX_HUSH]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_HUSH]
     }
    }
    config USER_BUSYBOX_LASH boolean {
     prompt "lash" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_HUSH if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_MSH boolean {
     prompt "msh" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_TRUE if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FALSE if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_TEST if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_SH_EXTRA_QUIET boolean {
      prompt "Hide message on interactive shell startup" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MSH || USER_BUSYBOX_LASH || USER_BUSYBOX_HUSH || USER_BUSYBOX_ASH)]
      default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MSH || USER_BUSYBOX_LASH || USER_BUSYBOX_HUSH || USER_BUSYBOX_ASH)]
      depends on [USER_BUSYBOX_MSH || USER_BUSYBOX_LASH || USER_BUSYBOX_HUSH || USER_BUSYBOX_ASH]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MSH || USER_BUSYBOX_LASH || USER_BUSYBOX_HUSH || USER_BUSYBOX_ASH)]
     }
     config USER_BUSYBOX_FEATURE_SH_STANDALONE boolean {
      prompt "Standalone shell" if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MSH || USER_BUSYBOX_LASH || USER_BUSYBOX_HUSH || USER_BUSYBOX_ASH) && USER_BUSYBOX_FEATURE_PREFER_APPLETS]
      default [n] if [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MSH || USER_BUSYBOX_LASH || USER_BUSYBOX_HUSH || USER_BUSYBOX_ASH) && USER_BUSYBOX_FEATURE_PREFER_APPLETS]
      depends on [(USER_BUSYBOX_MSH || USER_BUSYBOX_LASH || USER_BUSYBOX_HUSH || USER_BUSYBOX_ASH) && USER_BUSYBOX_FEATURE_PREFER_APPLETS]
      inherited [USER_BUSYBOX_BUSYBOX && (USER_BUSYBOX_MSH || USER_BUSYBOX_LASH || USER_BUSYBOX_HUSH || USER_BUSYBOX_ASH) && USER_BUSYBOX_FEATURE_PREFER_APPLETS]
     }
    }
    config USER_BUSYBOX_CTTYHACK boolean {
     prompt "cttyhack" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "System Logging Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_SYSLOGD boolean {
     prompt "syslogd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
     config USER_BUSYBOX_FEATURE_ROTATE_LOGFILE boolean {
      prompt "Rotate message files" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
      depends on [USER_BUSYBOX_SYSLOGD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
     }
     config USER_BUSYBOX_FEATURE_REMOTE_LOG boolean {
      prompt "Remote Log support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
      depends on [USER_BUSYBOX_SYSLOGD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
     }
     config USER_BUSYBOX_FEATURE_SYSLOGD_DUP boolean {
      prompt "Support -D (drop dups) option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
      depends on [USER_BUSYBOX_SYSLOGD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
     }
     config USER_BUSYBOX_FEATURE_IPC_SYSLOG boolean {
      prompt "Circular Buffer support" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
      depends on [USER_BUSYBOX_SYSLOGD]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SYSLOGD]
      config USER_BUSYBOX_FEATURE_IPC_SYSLOG_BUFFER_SIZE integer {
       prompt "Circular buffer size in Kbytes (minimum 4KB)" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPC_SYSLOG]
       default [16] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPC_SYSLOG]
       range [4 2147483647] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPC_SYSLOG]
       depends on [USER_BUSYBOX_FEATURE_IPC_SYSLOG]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPC_SYSLOG]
      }
      config USER_BUSYBOX_LOGREAD boolean {
       prompt "logread" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPC_SYSLOG]
       default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPC_SYSLOG]
       depends on [USER_BUSYBOX_FEATURE_IPC_SYSLOG]
       inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_FEATURE_IPC_SYSLOG]
       config USER_BUSYBOX_FEATURE_LOGREAD_REDUCED_LOCKING boolean {
        prompt "Double buffering" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGREAD]
        default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGREAD]
        depends on [USER_BUSYBOX_LOGREAD]
        inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_LOGREAD]
       }
      }
     }
    }
    config USER_BUSYBOX_KLOGD boolean {
     prompt "klogd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LOGGER boolean {
     prompt "logger" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     select USER_BUSYBOX_FEATURE_SYSLOG if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "Runit Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_RUNSV boolean {
     prompt "runsv" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_RUNSVDIR boolean {
     prompt "runsvdir" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SV boolean {
     prompt "sv" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SVLOGD boolean {
     prompt "svlogd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_CHPST boolean {
     prompt "chpst" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SETUIDGID boolean {
     prompt "setuidgid" if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_ENVUIDGID boolean {
     prompt "envuidgid" if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_ENVDIR boolean {
     prompt "envdir" if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_SOFTLIMIT boolean {
     prompt "softlimit" if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
   menu "Selinux Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
    config USER_BUSYBOX_CHCON boolean {
     prompt "chcon" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     config USER_BUSYBOX_FEATURE_CHCON_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX && USER_BUSYBOX_CHCON && USER_BUSYBOX_GETOPT_LONG]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX && USER_BUSYBOX_CHCON && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_CHCON && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX && USER_BUSYBOX_CHCON && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_GETENFORCE boolean {
     prompt "getenforce" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
    }
    config USER_BUSYBOX_GETSEBOOL boolean {
     prompt "getsebool" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
    }
    config USER_BUSYBOX_LOAD_POLICY boolean {
     prompt "load_policy" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
    }
    config USER_BUSYBOX_MATCHPATHCON boolean {
     prompt "matchpathcon" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
    }
    config USER_BUSYBOX_RESTORECON boolean {
     prompt "restorecon" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
    }
    config USER_BUSYBOX_RUNCON boolean {
     prompt "runcon" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     config USER_BUSYBOX_FEATURE_RUNCON_LONG_OPTIONS boolean {
      prompt "Enable long options" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX && USER_BUSYBOX_RUNCON && USER_BUSYBOX_GETOPT_LONG]
      default [y] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX && USER_BUSYBOX_RUNCON && USER_BUSYBOX_GETOPT_LONG]
      depends on [USER_BUSYBOX_RUNCON && USER_BUSYBOX_GETOPT_LONG]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX && USER_BUSYBOX_RUNCON && USER_BUSYBOX_GETOPT_LONG]
     }
    }
    config USER_BUSYBOX_SELINUXENABLED boolean {
     prompt "selinuxenabled" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
    }
    config USER_BUSYBOX_SETENFORCE boolean {
     prompt "setenforce" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
    }
    config USER_BUSYBOX_SETFILES boolean {
     prompt "setfiles" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     config USER_BUSYBOX_FEATURE_SETFILES_CHECK_OPTION boolean {
      prompt "Enable check option" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX && USER_BUSYBOX_SETFILES]
      default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX && USER_BUSYBOX_SETFILES]
      depends on [USER_BUSYBOX_SETFILES]
      inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX && USER_BUSYBOX_SETFILES]
     }
    }
    config USER_BUSYBOX_SETSEBOOL boolean {
     prompt "setsebool" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
    }
    config USER_BUSYBOX_SESTATUS boolean {
     prompt "sestatus" if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     default [n] if [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
     depends on [USER_BUSYBOX_SELINUX]
     inherited [USER_BUSYBOX_BUSYBOX && USER_BUSYBOX_SELINUX]
    }
   }
   menu "Print Utilities" {
    depends on [USER_BUSYBOX_BUSYBOX]
    config USER_BUSYBOX_LPD boolean {
     prompt "lpd" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LPR boolean {
     prompt "lpr" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
    config USER_BUSYBOX_LPQ boolean {
     prompt "lpq" if [USER_BUSYBOX_BUSYBOX]
     default [n] if [USER_BUSYBOX_BUSYBOX]
     inherited [USER_BUSYBOX_BUSYBOX]
    }
   }
  }
 }
}
menu "Tinylogin" {
 config USER_TINYLOGIN_TINYLOGIN boolean {
  prompt "Tinylogin" if []
 }
 config USER_TINYLOGIN_ADDUSER boolean {
  prompt "adduser" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_ADDGROUP boolean {
  prompt "addgroup" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_DELUSER boolean {
  prompt "deluser" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_DELGROUP boolean {
  prompt "delgroup" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_LOGIN boolean {
  prompt "login" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
  config USER_TINYLOGIN_SECURETTY boolean {
   prompt "login: /etc/securetty" if [USER_TINYLOGIN_LOGIN]
   depends on [USER_TINYLOGIN_LOGIN]
   inherited [USER_TINYLOGIN_LOGIN]
  }
 }
 config USER_TINYLOGIN_SU boolean {
  prompt "su" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_SULOGIN boolean {
  prompt "sulogin" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_PASSWD boolean {
  prompt "passwd" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_GETTY boolean {
  prompt "getty" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_SHADOWPASSWDS boolean {
  prompt "Shadow passwords" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_MD5_PASSWORDS boolean {
  prompt "md5 passwords" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_SHA1_PASSWORDS boolean {
  prompt "sha passwords" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
 config USER_TINYLOGIN_TRIVIAL_HELP boolean {
  prompt "Trivial help" if [USER_TINYLOGIN_TINYLOGIN]
  depends on [USER_TINYLOGIN_TINYLOGIN]
  inherited [USER_TINYLOGIN_TINYLOGIN]
 }
}
menu "MicroWindows" {
 config USER_MICROWIN boolean {
  prompt "MicroWindows" if []
 }
 config USER_MICROWIN_OPTIMIZE boolean {
  prompt "Optimize" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_DEBUG boolean {
  prompt "Debug" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_VERBOSE boolean {
  prompt "Verbose" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_MICROWIN boolean {
  prompt "Microwin" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_NANOX boolean {
  prompt "NanoX" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_SHAREDLIBS boolean {
  prompt "SharedLibs" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_NWIDGET boolean {
  prompt "NWidget" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_OBJFRAMEWORK boolean {
  prompt "OBJFramework" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_MICROWINDEMO boolean {
  prompt "MicrowinDemo" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_NANOXDEMO boolean {
  prompt "NanoXDemo" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_NANOWM boolean {
  prompt "NanoWM" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 choice boolean {
  prompt "Screeen PixType" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  default [USER_MICROWIN_MWPF_TRUECOLOR0888] if [USER_MICROWIN]
  config USER_MICROWIN_MWPF_PALETTE boolean {
   prompt "Packed-8bit-Palette" if [<choice>]
   inherited [<choice>]
  }
  config USER_MICROWIN_MWPF_TRUECOLOR0888 boolean {
   prompt "Packed-32bit-8/8/8" if [<choice>]
   inherited [<choice>]
  }
  config USER_MICROWIN_MWPF_TRUECOLOR888 boolean {
   prompt "Packed-24bit-8/8/8" if [<choice>]
   inherited [<choice>]
  }
  config USER_MICROWIN_MWPF_TRUECOLOR565 boolean {
   prompt "Packed-16bit-5/6/5" if [<choice>]
   inherited [<choice>]
  }
  config USER_MICROWIN_MWPF_TRUECOLOR555 boolean {
   prompt "Packed-16bit-5/5/5" if [<choice>]
   inherited [<choice>]
  }
  config USER_MICROWIN_MWPF_TRUECOLOR332 boolean {
   prompt "Packed-8bit-3/3/2" if [<choice>]
   inherited [<choice>]
  }
 }
 config USER_MICROWIN_LINK_APP_INTO_SERVER boolean {
  depends on [USER_MICROWIN]
  prompt "Link App into server" if [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_FILEIO boolean {
  prompt "Have File IO" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_BMP_SUPPORT boolean {
  prompt "Have BMP Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_GIF_SUPPORT boolean {
  prompt "Have GIF Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_PNM_SUPPORT boolean {
  prompt "Have PNM Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_XPM_SUPPORT boolean {
  prompt "Have XPM Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_JPEG_SUPPORT boolean {
  prompt "Have JPEG Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_PNG_SUPPORT boolean {
  prompt "Have PNG Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_T1LIB_SUPPORT boolean {
  prompt "Have T1LIB Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_FREETYPE_SUPPORT boolean {
  prompt "Have FreeType Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT boolean {
  prompt "Have SharedMemory Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_HZK_SUPPORT boolean {
  prompt "Have Han Zi Ku font Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_BIG5_SUPPORT boolean {
  prompt "Have Big5 Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVE_GB2312_SUPPORT boolean {
  prompt "Have GB2312 Support" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HAVEMSFONTS boolean {
  prompt "Have MS Fonts" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_NOFONTSORCLIPPING boolean {
  prompt "Build Screen Driver only" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_ERASEMOVE boolean {
  prompt "Window Erase Move" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_UPDATEREGIONS boolean {
  prompt "Window UpdateRegions Move" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_GRAYPALETTE boolean {
  prompt "Gray Palette" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_X11 boolean {
  prompt "X11 Display" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_FRAMEBUFFER boolean {
  prompt "Frame Buffer Display" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_FBVGA boolean {
  prompt "Frame Buffer VGA" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_VTSWITCH boolean {
  prompt "VT Switch" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_PORTRAIT_MODE boolean {
  prompt "Portrait Mode" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_FBREVERSE boolean {
  prompt "Frame Buffer Reverse" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_VGALIB boolean {
  prompt "VGA Lib" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HWVGA boolean {
  prompt "HW VGA" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_CLEOVGA boolean {
  prompt "Cleopatra VGA" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_GPMMOUSE boolean {
  prompt "GPM Mouse" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_SERMOUSE boolean {
  prompt "Serial Mouse" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_TPMOUSE boolean {
  prompt "TP Mouse" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_TPHELIO boolean {
  prompt "TP Helio" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_ADSMOUSE boolean {
  prompt "ADS Mouse" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_IPAQMOUSE boolean {
  prompt "IPAQ Mouse" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_HARRIERMOUSE boolean {
  prompt "Harrier Mouse" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_PSIONMOUSE boolean {
  prompt "PSION Mouse" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_UCTSMOUSE boolean {
  prompt "uClinux/Palm TS" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_DE2TSMOUSE boolean {
  prompt "DragonEngine TS" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_CLEOMOUSE boolean {
  prompt "Cleopatra Mouse" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_NOMOUSE boolean {
  prompt "No Mouse" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_TTYKBD boolean {
  prompt "TTY Keyboard" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_SCANKBD boolean {
  prompt "Scan Keyboard" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_PIPEKBD boolean {
  prompt "Pipe Keyboard" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_CLEOKBD boolean {
  prompt "Cleopatra Keyboard" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_NOKBD boolean {
  prompt "No Keyboard" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_LANDMINE boolean {
  prompt "Landmine" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_LAUNCHER boolean {
  prompt "Launcher" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_MOVE boolean {
  prompt "Move" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_MTERM boolean {
  prompt "MTerm" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_MTEST boolean {
  prompt "MTest" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_MTEST2 boolean {
  prompt "MTest2" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_MUSERFD boolean {
  prompt "MUserFd" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NANO_X boolean {
  prompt "Nano-X" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NANOWM boolean {
  prompt "NanoWM" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NPANEL boolean {
  prompt "NPanel" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NTERM boolean {
  prompt "NTerm" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NTEST boolean {
  prompt "NTest" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NTETRIS boolean {
  prompt "NTetris" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NXCLOCK boolean {
  prompt "NXclock" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NXEV boolean {
  prompt "NXev" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NXKBD boolean {
  prompt "NXkbd" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NXLSCLIENTS boolean {
  prompt "NXlsclients" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NXTERM boolean {
  prompt "NXterm" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_NXVIEW boolean {
  prompt "NXView" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_SLIDER boolean {
  prompt "Slider" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_VNC boolean {
  prompt "VNC" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
 config USER_MICROWIN_BIN_WORLD boolean {
  prompt "World" if [USER_MICROWIN]
  depends on [USER_MICROWIN]
  inherited [USER_MICROWIN]
 }
}
menu "Games" {
 config USER_GAMES_ADVENT4 boolean {
  prompt "advent4" if []
 }
 config USER_GAMES_DUNGEON boolean {
  prompt "dungeon" if []
 }
 config USER_GAMES_RUBIK boolean {
  prompt "rubik" if []
 }
 config USER_GAMES_TAMA boolean {
  prompt "Tamagotchi daemon" if []
 }
}
menu "Miscellaneous Configuration" {
 choice boolean {
  prompt "RAMFS Image" if []
  default [USER_RAMIMAGE_RAMFS64] if []
  config USER_RAMIMAGE_NONE boolean {
   prompt "none" if [<choice>]
   inherited [<choice>]
  }
  config USER_RAMIMAGE_RAMFS64 boolean {
   prompt "64K" if [<choice>]
   inherited [<choice>]
  }
  config USER_RAMIMAGE_RAMFS128 boolean {
   prompt "128K" if [<choice>]
   inherited [<choice>]
  }
  config USER_RAMIMAGE_RAMFS256 boolean {
   prompt "256K" if [<choice>]
   inherited [<choice>]
  }
  config USER_RAMIMAGE_RAMFS512 boolean {
   prompt "512K" if [<choice>]
   inherited [<choice>]
  }
  config USER_RAMIMAGE_RAMFS1024 boolean {
   prompt "1024K" if [<choice>]
   inherited [<choice>]
  }
  config USER_RAMIMAGE_RAMFS2048 boolean {
   prompt "2048K" if [<choice>]
   inherited [<choice>]
  }
  config USER_RAMIMAGE_RAMFS8192 boolean {
   prompt "8192K" if [<choice>]
   inherited [<choice>]
  }
 }
 config USER_CGI_GENERIC boolean {
  prompt "generic cgi" if []
 }
 config USER_CGIHTML boolean {
  prompt "cgihtml" if []
 }
 config USER_DEMO_BUTTON boolean {
  prompt "SnapGear Button daemon" if []
 }
 config USER_DEMO_LATCH boolean {
  prompt "SnapGear Latch daemon" if []
 }
 config USER_DEMO_MORSE boolean {
  prompt "SnapGear Morse demo" if []
 }
 config USER_DEMO_R2100 boolean {
  prompt "SnapGear R2100 daemon" if []
 }
 config POOR_ENTROPY boolean {
  prompt "System has very little entropy (only use /dev/urandom)" if []
 }
}
menu "Debug Builds" {
 config LIB_DEBUG boolean {
  prompt "build debugable libraries" if []
 }
 config USER_DEBUG boolean {
  prompt "build debugable applications" if []
 }
 config USER_TIMEPEG_TPT boolean {
  prompt "tpt" if []
 }
 config LIB_LIBCCMALLOC boolean {
  prompt "ccmalloc" if []
 }
}
menu "Automake Applications" {
 config USER_FREERADIUS boolean {
  prompt "freeradius" if []
 }
 config USER_KISMET boolean {
  prompt "kismet" if []
 }
 config USER_LUA boolean {
  prompt "lua" if []
  config USER_LUA_LUAROCKS boolean {
   prompt "lua: luarocks" if [USER_LUA]
   depends on [USER_LUA]
   default [n] if [USER_LUA]
   inherited [USER_LUA]
   config USER_LUA_ORBIT boolean {
    prompt "lua: orbit" if [USER_LUA_LUAROCKS]
    depends on [USER_LUA_LUAROCKS]
    default [n] if [USER_LUA_LUAROCKS]
    inherited [USER_LUA_LUAROCKS]
   }
   config USER_LUA_LUASQL_SQLITE3 boolean {
    prompt "lua: luasql-sqlite3" if [USER_LUA_LUAROCKS]
    depends on [USER_LUA_LUAROCKS]
    default [n] if [USER_LUA_LUAROCKS]
    inherited [USER_LUA_LUAROCKS]
   }
   config USER_LUA_WSAPI boolean {
    prompt "lua: wsapi" if [USER_LUA_LUAROCKS]
    depends on [USER_LUA_LUAROCKS]
    default [n] if [USER_LUA_LUAROCKS]
    inherited [USER_LUA_LUAROCKS]
   }
   config USER_LUA_WSAPI_XAVANTE boolean {
    prompt "lua: wsapi-xavante" if [USER_LUA_LUAROCKS]
    depends on [USER_LUA_LUAROCKS]
    default [n] if [USER_LUA_LUAROCKS]
    inherited [USER_LUA_LUAROCKS]
   }
   config USER_LUA_XAVANTE boolean {
    prompt "lua: xavante" if [USER_LUA_LUAROCKS]
    depends on [USER_LUA_LUAROCKS]
    default [n] if [USER_LUA_LUAROCKS]
    inherited [USER_LUA_LUAROCKS]
   }
   config USER_LUA_COSMO boolean {
    prompt "lua: cosmo" if [USER_LUA_LUAROCKS]
    depends on [USER_LUA_LUAROCKS]
    default [n] if [USER_LUA_LUAROCKS]
    inherited [USER_LUA_LUAROCKS]
   }
  }
 }
 config USER_PYTHON boolean {
  prompt "python" if []
 }
 config USER_SNORT_BARNYARD boolean {
  prompt "snort-barnyard" if []
 }
}
